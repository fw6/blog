[["Map",1,2,9,10],"meta::meta",["Map",3,4,5,6,7,8],"astro-version","5.4.1","content-config-digest","7bf6e33ecdb54315","astro-config-digest","{\"root\":{},\"srcDir\":{},\"publicDir\":{},\"outDir\":{},\"cacheDir\":{},\"site\":\"https://blog.fengw.site\",\"compressHTML\":true,\"base\":\"/\",\"trailingSlash\":\"ignore\",\"output\":\"server\",\"scopedStyleStrategy\":\"attribute\",\"build\":{\"format\":\"file\",\"client\":{},\"server\":{},\"assets\":\"_astro\",\"serverEntry\":\"index.js\",\"redirects\":false,\"inlineStylesheets\":\"auto\",\"concurrency\":1},\"server\":{\"open\":false,\"host\":true,\"port\":5757,\"streaming\":true,\"allowedHosts\":[]},\"redirects\":{},\"image\":{\"endpoint\":{\"route\":\"/_image\"},\"service\":{\"entrypoint\":\"astro/assets/services/sharp\",\"config\":{}},\"domains\":[],\"remotePatterns\":[]},\"devToolbar\":{\"enabled\":true},\"markdown\":{\"syntaxHighlight\":false,\"shikiConfig\":{\"langs\":[],\"langAlias\":{},\"theme\":\"dracula\",\"themes\":{},\"wrap\":false,\"transformers\":[]},\"remarkPlugins\":[null,null,null,null,null,[null,{\"callouts\":{\"todo\":{\"title\":\"Todo\",\"hint\":\"\u003Csvg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"24\\\" height=\\\"24\\\" viewBox=\\\"0 0 24 24\\\" fill=\\\"none\\\" stroke=\\\"currentColor\\\" stroke-width=\\\"2\\\" stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\" class=\\\"callout-hint-todo\\\">\u003Cpath d=\\\"M12 22c5.523 0 10-4.477 10-10S17.523 2 12 2 2 6.477 2 12s4.477 10 10 10z\\\">\u003C/path>\u003Cpath d=\\\"m9 12 2 2 4-4\\\">\u003C/path>\u003C/svg>\"},\"tip\":{\"title\":\"Tip\",\"hint\":\"\u003Csvg viewBox=\\\"0 0 24 24\\\" width=\\\"24\\\" height=\\\"24\\\" fill=\\\"currentColor\\\" class=\\\"callout-hint-tip\\\">\u003Cpath fill-rule=\\\"evenodd\\\" clip-rule=\\\"evenodd\\\" d=\\\"M1.43909 8.85483L1.44039 8.85354L4.96668 5.33815C5.30653 4.99386 5.7685 4.79662 6.2524 4.78972L6.26553 4.78963L12.9014 4.78962L13.8479 3.84308C16.9187 0.772319 20.0546 0.770617 21.4678 0.975145C21.8617 1.02914 22.2271 1.21053 22.5083 1.4917C22.7894 1.77284 22.9708 2.13821 23.0248 2.53199C23.2294 3.94517 23.2278 7.08119 20.1569 10.1521L19.2107 11.0983V17.7338L19.2106 17.7469C19.2037 18.2308 19.0067 18.6933 18.6624 19.0331L15.1456 22.5608C14.9095 22.7966 14.6137 22.964 14.29 23.0449C13.9663 23.1259 13.6267 23.1174 13.3074 23.0204C12.9881 22.9235 12.7011 22.7417 12.4771 22.4944C12.2533 22.2473 12.1006 21.9441 12.0355 21.6171L11.1783 17.3417L6.65869 12.822L4.34847 12.3589L2.38351 11.965C2.05664 11.8998 1.75272 11.747 1.50564 11.5232C1.25835 11.2992 1.07653 11.0122 0.979561 10.6929C0.882595 10.3736 0.874125 10.034 0.955057 9.7103C1.03599 9.38659 1.20328 9.09092 1.43909 8.85483ZM6.8186 10.8724L2.94619 10.096L6.32006 6.73268H10.9583L6.8186 10.8724ZM15.2219 5.21703C17.681 2.75787 20.0783 2.75376 21.1124 2.8876C21.2462 3.92172 21.2421 6.31895 18.783 8.77812L12.0728 15.4883L8.51172 11.9272L15.2219 5.21703ZM13.9042 21.0538L13.1279 17.1811L17.2676 13.0414V17.68L13.9042 21.0538Z\\\">\u003C/path>\u003Cpath d=\\\"M9.31827 18.3446C9.45046 17.8529 9.17864 17.3369 8.68945 17.1724C8.56178 17.1294 8.43145 17.1145 8.30512 17.1243C8.10513 17.1398 7.91519 17.2172 7.76181 17.3434C7.62613 17.455 7.51905 17.6048 7.45893 17.7835C6.97634 19.2186 5.77062 19.9878 4.52406 20.4029C4.08525 20.549 3.6605 20.644 3.29471 20.7053C3.35607 20.3395 3.45098 19.9148 3.59711 19.476C4.01221 18.2294 4.78141 17.0237 6.21648 16.5411C6.39528 16.481 6.54504 16.3739 6.65665 16.2382C6.85126 16.0016 6.92988 15.678 6.84417 15.3647C6.83922 15.3466 6.83373 15.3286 6.82767 15.3106C6.74106 15.053 6.55701 14.8557 6.33037 14.7459C6.10949 14.6389 5.84816 14.615 5.59715 14.6994C5.47743 14.7397 5.36103 14.7831 5.24786 14.8294C3.22626 15.6569 2.2347 17.4173 1.75357 18.8621C1.49662 19.6337 1.36993 20.3554 1.30679 20.8818C1.27505 21.1464 1.25893 21.3654 1.25072 21.5213C1.24662 21.5993 1.24448 21.6618 1.24337 21.7066L1.243 21.7226L1.24235 21.7605L1.2422 21.7771L1.24217 21.7827L1.24217 21.7856C1.24217 22.3221 1.67703 22.7579 2.2137 22.7579L2.2155 22.7579L2.22337 22.7578L2.23956 22.7577C2.25293 22.7575 2.27096 22.7572 2.29338 22.7567C2.33821 22.7555 2.40073 22.7534 2.47876 22.7493C2.63466 22.7411 2.85361 22.725 3.11822 22.6932C3.64462 22.6301 4.36636 22.5034 5.13797 22.2464C6.58274 21.7653 8.3431 20.7738 9.17063 18.7522C9.21696 18.639 9.26037 18.5226 9.30064 18.4029C9.30716 18.3835 9.31304 18.364 9.31827 18.3446Z\\\">\u003C/path>\u003C/svg>\"},\"quote\":{\"title\":\"Quote\",\"hint\":\"\u003Csvg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"24\\\" height=\\\"24\\\" viewBox=\\\"0 0 24 24\\\" fill=\\\"none\\\" stroke=\\\"currentColor\\\" stroke-width=\\\"2\\\" stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\" class=\\\"callout-hint-quote\\\">\u003Cpath d=\\\"M3 21c3 0 7-1 7-8V5c0-1.25-.756-2.017-2-2H4c-1.25 0-2 .75-2 1.972V11c0 1.25.75 2 2 2 1 0 1 0 1 1v1c0 1-1 2-2 2s-1 .008-1 1.031V20c0 1 0 1 1 1z\\\">\u003C/path>\u003Cpath d=\\\"M15 21c3 0 7-1 7-8V5c0-1.25-.757-2.017-2-2h-4c-1.25 0-2 .75-2 1.972V11c0 1.25.75 2 2 2h.75c0 2.25.25 4-2.75 4v3c0 1 0 1 1 1z\\\">\u003C/path>\u003C/svg>\"},\"failure\":{\"title\":\"Failure\",\"hint\":\"\u003Csvg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"24\\\" height=\\\"24\\\" viewBox=\\\"0 0 24 24\\\" fill=\\\"none\\\" stroke=\\\"currentColor\\\" stroke-width=\\\"2\\\" stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\" class=\\\"callout-hint-failure\\\">\u003Cline x1=\\\"18\\\" y1=\\\"6\\\" x2=\\\"6\\\" y2=\\\"18\\\">\u003C/line>\u003Cline x1=\\\"6\\\" y1=\\\"6\\\" x2=\\\"18\\\" y2=\\\"18\\\">\u003C/line>\u003C/svg>\"},\"abstract\":{\"title\":\"Abstract\",\"hint\":\"\u003Csvg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"24\\\" height=\\\"24\\\" viewBox=\\\"0 0 24 24\\\" fill=\\\"none\\\" stroke=\\\"currentColor\\\" stroke-width=\\\"2\\\" stroke-linecap=\\\"round\\\" stroke-linejoin=\\\"round\\\" class=\\\"callout-hint-abstract\\\">\u003Crect x=\\\"8\\\" y=\\\"2\\\" width=\\\"8\\\" height=\\\"4\\\" rx=\\\"1\\\" ry=\\\"1\\\">\u003C/rect>\u003Cpath d=\\\"M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2\\\">\u003C/path>\u003Cpath d=\\\"M12 11h4\\\">\u003C/path>\u003Cpath d=\\\"M12 16h4\\\">\u003C/path>\u003Cpath d=\\\"M8 11h.01\\\">\u003C/path>\u003Cpath d=\\\"M8 16h.01\\\">\u003C/path>\u003C/svg>\"}},\"aliases\":{\"success\":\"commend\",\"check\":\"commend\",\"done\":\"commend\",\"danger\":\"deter\",\"error\":\"deter\",\"warning\":\"warn\",\"hint\":\"tip\",\"important\":\"tip\",\"info\":\"assert\",\"cite\":\"quote\",\"fail\":\"failure\",\"missing\":\"failure\",\"summary\":\"abstract\",\"tldr\":\"abstract\"}}],null],\"rehypePlugins\":[null,[null,{\"allowDangerousHtml\":true}]],\"remarkRehype\":{\"allowDangerousHtml\":true},\"gfm\":true,\"smartypants\":true},\"security\":{\"checkOrigin\":true},\"env\":{\"schema\":{},\"validateSecrets\":false},\"experimental\":{\"clientPrerender\":false,\"contentIntellisense\":false,\"responsiveImages\":false,\"serializeConfig\":false},\"legacy\":{\"collections\":false}}","blog",["Map",11,12,55,56,82,83,102,103,125,126,151,152,174,175,213,214,235,236,271,272,308,309,379,380,407,408,444,445,473,474,507,508,571,572,593,594,620,621,653,654,718,719,780,781,822,823,928,929,959,960,996,997,1024,1025,1096,1097,1147,1148,1179,1180,1202,1203,1238,1239,1286,1287,1332,1333,1456,1457,1479,1480,1518,1519,1543,1544,1588,1589,1617,1618,1639,1640,1713,1714,1732,1733,1754,1755,1772,1773,1825,1826,1849,1850,1871,1872,1891,1892,1910,1911,2331,2332,2349,2350,2367,2368,2385,2386,2403,2404,2420,2421,2442,2443,2460,2461,2478,2479,2496,2497,2516,2517,2536,2537,2553,2554,2573,2574,2593,2594,2618,2619,2638,2639,2658,2659,2679,2680,2699,2700,2721,2722,2741,2742],"000-inbox/010-workspace/工作总结",{"id":11,"data":13,"body":21,"filePath":22,"digest":23,"rendered":24,"legacyId":54},{"title":14,"description":15,"draft":16,"pubDate":17,"heroImage":18,"tags":19},"_工作总结","",true,["Date","2023-06-29T08:40:00.000Z"],"[photo-1483058712412-4245e9b90334 (640×427) (unsplash.com)](https://images.unsplash.com/photo-1483058712412-4245e9b90334?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=640&q=80)",[20],"writings","# _工作总结\n\n> The most difficult thing is the decision to act, the rest is merely tenacity. The fears are paper tigers. You can do anything you decide to do. You can act to change and control your life; and the procedure, the process is its own reward.\n> — \u003Ccite>Amelia Earhart\u003C/cite>\n\n\n## HTML模板\n\n>业务描述：公有云、私有云电子签约平台提供HTML格式的合同模板，用于合同拟定。HTML模板通过富文本编辑器实现编辑，合同填写完成转为PDF格式文件\n\n时间：2019/8/6~2023/6/30\n动机：之前由前端leader负责（只完成了基础功能，表格、单多选、文本参数），因精力问题将该工作全部交接给我。\n功能简述：HTML模板需要支持不同类型表单元素，例如图片、表格、文本、数字等等，模板编辑时维护参数属性，合同创建后可对参数进行填写。该项目基于FroalaEditor2.x源码开发。\n技术栈：\n- gulp\n- froala-editor2.x\n- jQuery\n贡献：\n- 提供若干新的参数\n\t- 图片\n\t- 身份证号\n\t- 富文本块\n\t- 日期\n\t- 数值、数字、货币金额\n\t- 手机号\n\t- 邮箱\n- 表格增加若干新功能\n\t- 单元格边框颜色\n\t- 单元格、列格式\n\t- 动态表格参数支持合并拆分\n- 货币金额支持表达式计算\n- 页眉页脚、页码、页边距、横竖版\n- 要点\n- 支持变更留痕\n- 增加基于TypeScript+JSDoc的类型安全\n\n\n## 小程序插件\n\n> 业务描述：\n> 公有云电子签约平台提供了小程序版本插件，客户的小程序端通过小程序插件的方式集成契约锁开放平台功能，插件未提供方法，仅四个页面：\n> - 企业认证\n> - 实名认证\n> - 合同签署\n> - 小程序授权\n\n### 改造/维护\n\n时间：\n- initial commit：2021/9/7\n- last commit: 2022/10/14\n动机：负责该项目的同事离职，被临时抽调过来负责整个小程序的功能开发与问题修复\n技术栈：\n- Uniapp+uniapp2wxpack(插件打包📦)\n- Less\n- Vue2.x\n贡献：\n- 修复若干历史问题、开发若干新功能\n- 梳理开发流程、产出文档\n- 增加tailwindcss支持\n- 引入uni-ui组件库\n- 减小打包体积（1.5Mb->950Kb）\n\t- babel配置问题，useBuiltIns 从entry切换为usage，防止corejs被全量引入！\n\t- 图片资源全部走CDN\n\t- 所有样式使用tailwindcss语法\n\t\t- [fix: 小程序preflight选择器调整 by fw6 · Pull Request #62 · sonofmagic/weapp-tailwindcss · GitHub](https://github.com/sonofmagic/weapp-tailwindcss/pull/62)\t\t\t```\n\t- 移除txt文件使用图片渲染内容\n\n\n### 重写\n\n时间：\n- initial commit：2022/1/29\n- last commit: 2022/4/1\n动机：旧版本代码库功能逻辑混乱，代码质量很差，进行bug修复和功能开发时造成了很多困难。（一个vue文件动辄几千行）\n技术栈：\n- React\n- Taro\n- XState + immer\n- WindiCSS\n- Taroify\n- aHooks/taro-hooks\n- @umijs/plugin-locale\n- linaria\n- @antmjs/vantui\n进度：40%\n结果：该项目被废弃，原因如下\n1. 领导不同意转React技术栈（90%项目为Vue2体系）\n2. 技术选型需要重新考虑\n踩坑：\n1. [fix: replace with getGlobal by fw6 · Pull Request #3133 · statelyai/xstate · GitHub](https://github.com/statelyai/xstate/pull/3133)\n2. [fix(react): 支付宝小程序插件配置字段缺失、Taro专有Hooks在小程序插件页面中无法使用 by fw6 · Pull Request #11362 · NervJS/taro · GitHub](https://github.com/NervJS/taro/pull/11362)\n3. WindiCSS在小程序下不支持：\n\t1. 通配符`*`\n\t2. 媒体查询\n\t3. 属性选择器，当属性不是小程序组件的内置属性时\n\t4. 不支持单位rem\n4. `Text`不支持touch事件\n5. [Linaria 的 styled(View) 写法传参错误 · Issue #8883 · NervJS/taro · GitHub](https://github.com/NervJS/taro/issues/8883)\n\n\n## 小程序相关项目统一\n\n时间：\n- initial commit：2022/4/24\n- last commit: 2022/8/10\n动机：小程序和小程序插件代码质量都很差，问题很多；两个项目可以作为monorepo共享组件、方法；小程序项目还是原生语法写的；小程序需要做跨端（支付宝、微信）\n技术栈：\n- @microsoft/rush\n- uniapp\n- uni-ui\n- vue-i18n\n- vite\n- vueuse\n- vue3\n- unocss\n- headlessui\n- xstate\n- pinia\n- sass\n进度：30%\n结果：项目废弃，原因如下\n- 功能涉及多个功能模块（签署、认证、组织等），其他组不愿投入资源\n- 部分前端组长不愿使用新技术（vue3）\n- 内部对小程序兼容性有争议\n踩坑：\n- [rfcs/active-rfcs/0040-script-setup.md at master · vuejs/rfcs · GitHub](https://github.com/vuejs/rfcs/blob/master/active-rfcs/0040-script-setup.md#unresolved-questions)\n- `vite-plugin-unocss-to-uni`替换为`preset-uni`(暂未稳定)\n- 小程序受平台限制，[无法使用插值语法定义国际化](https://uniapp.dcloud.net.cn/tutorial/migration-to-vue3.html#vue-i18n)\n- [feat: 完善支付宝小程序插件、微信小程序插件的开发支持 by fw6 · Pull Request #3588 · dcloudio/uni-app · GitHub](https://github.com/dcloudio/uni-app/pull/3588)\n- [支付宝小程序组件中使用ref报错 by fw6 · Pull Request #3345 · dcloudio/uni-app · GitHub](https://github.com/dcloudio/uni-app/pull/3345)\n\n\n\n\n## 新版富文本编辑器\n\n时间：\n- initial comm: 2022/10/8\n动机：泛微使用的富文本编辑器（wps）成本过高，老板要求泛微与契约锁编辑器统一开发使用，经与泛微同事商议决定契约锁方全权负责编辑器的开发工作，泛微接入其e-cology系统\n技术栈：\n- 使用nx + pnpm作为monorepo管理工具\n- 使用tiptap(基于prosemirror)作为富文本编辑器框架\n- 使用Svelte开发NodeView、公共组件、编辑器组件等\n- 基于style-dictionary生成design tokens，配合VSCode插件phoenisx.cssvar提升DX\n- 样式方案使用Postcss+原生CSS\n- 国际化方案基于typesafe-i18n + svelte/context + svelte/store\n- 使用histoire为组件、ProseMirror插件、Tiptap扩展写stories\n进度：一期目标完成（公有云上线）","src/content/blog/000-Inbox/010-Workspace/工作总结.md","33f3df602e6963f5",{"html":25,"metadata":26},"\u003Ch1 id=\"_工作总结\">_工作总结\u003C/h1>\n\u003Cblockquote>\n\u003Cp>The most difficult thing is the decision to act, the rest is merely tenacity. The fears are paper tigers. You can do anything you decide to do. You can act to change and control your life; and the procedure, the process is its own reward.\n— \u003Ccite>Amelia Earhart\u003C/cite>\u003C/p>\n\u003C/blockquote>\n\u003Ch2 id=\"html模板\">HTML模板\u003C/h2>\n\u003Cblockquote>\n\u003Cp>业务描述：公有云、私有云电子签约平台提供HTML格式的合同模板，用于合同拟定。HTML模板通过富文本编辑器实现编辑，合同填写完成转为PDF格式文件\u003C/p>\n\u003C/blockquote>\n\u003Cp>时间：2019/8/6~2023/6/30\n动机：之前由前端leader负责（只完成了基础功能，表格、单多选、文本参数），因精力问题将该工作全部交接给我。\n功能简述：HTML模板需要支持不同类型表单元素，例如图片、表格、文本、数字等等，模板编辑时维护参数属性，合同创建后可对参数进行填写。该项目基于FroalaEditor2.x源码开发。\n技术栈：\u003C/p>\n\u003Cul>\n\u003Cli>gulp\u003C/li>\n\u003Cli>froala-editor2.x\u003C/li>\n\u003Cli>jQuery\n贡献：\u003C/li>\n\u003Cli>提供若干新的参数\n\u003Cul>\n\u003Cli>图片\u003C/li>\n\u003Cli>身份证号\u003C/li>\n\u003Cli>富文本块\u003C/li>\n\u003Cli>日期\u003C/li>\n\u003Cli>数值、数字、货币金额\u003C/li>\n\u003Cli>手机号\u003C/li>\n\u003Cli>邮箱\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>表格增加若干新功能\n\u003Cul>\n\u003Cli>单元格边框颜色\u003C/li>\n\u003Cli>单元格、列格式\u003C/li>\n\u003Cli>动态表格参数支持合并拆分\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>货币金额支持表达式计算\u003C/li>\n\u003Cli>页眉页脚、页码、页边距、横竖版\u003C/li>\n\u003Cli>要点\u003C/li>\n\u003Cli>支持变更留痕\u003C/li>\n\u003Cli>增加基于TypeScript+JSDoc的类型安全\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"小程序插件\">小程序插件\u003C/h2>\n\u003Cblockquote>\n\u003Cp>业务描述：\n公有云电子签约平台提供了小程序版本插件，客户的小程序端通过小程序插件的方式集成契约锁开放平台功能，插件未提供方法，仅四个页面：\u003C/p>\n\u003Cul>\n\u003Cli>企业认证\u003C/li>\n\u003Cli>实名认证\u003C/li>\n\u003Cli>合同签署\u003C/li>\n\u003Cli>小程序授权\u003C/li>\n\u003C/ul>\n\u003C/blockquote>\n\u003Ch3 id=\"改造维护\">改造/维护\u003C/h3>\n\u003Cp>时间：\u003C/p>\n\u003Cul>\n\u003Cli>initial commit：2021/9/7\u003C/li>\n\u003Cli>last commit: 2022/10/14\n动机：负责该项目的同事离职，被临时抽调过来负责整个小程序的功能开发与问题修复\n技术栈：\u003C/li>\n\u003Cli>Uniapp+uniapp2wxpack(插件打包\u003Cspan role=\"img\" aria-label=\"package\">📦\u003C/span>)\u003C/li>\n\u003Cli>Less\u003C/li>\n\u003Cli>Vue2.x\n贡献：\u003C/li>\n\u003Cli>修复若干历史问题、开发若干新功能\u003C/li>\n\u003Cli>梳理开发流程、产出文档\u003C/li>\n\u003Cli>增加tailwindcss支持\u003C/li>\n\u003Cli>引入uni-ui组件库\u003C/li>\n\u003Cli>减小打包体积（1.5Mb->950Kb）\n\u003Cul>\n\u003Cli>babel配置问题，useBuiltIns 从entry切换为usage，防止corejs被全量引入！\u003C/li>\n\u003Cli>图片资源全部走CDN\u003C/li>\n\u003Cli>所有样式使用tailwindcss语法\n\u003Cul>\n\u003Cli>\u003Ca href=\"https://github.com/sonofmagic/weapp-tailwindcss/pull/62\">fix: 小程序preflight选择器调整 by fw6 · Pull Request #62 · sonofmagic/weapp-tailwindcss · GitHub\u003C/a>\t\t\t```\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>移除txt文件使用图片渲染内容\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"重写\">重写\u003C/h3>\n\u003Cp>时间：\u003C/p>\n\u003Cul>\n\u003Cli>initial commit：2022/1/29\u003C/li>\n\u003Cli>last commit: 2022/4/1\n动机：旧版本代码库功能逻辑混乱，代码质量很差，进行bug修复和功能开发时造成了很多困难。（一个vue文件动辄几千行）\n技术栈：\u003C/li>\n\u003Cli>React\u003C/li>\n\u003Cli>Taro\u003C/li>\n\u003Cli>XState + immer\u003C/li>\n\u003Cli>WindiCSS\u003C/li>\n\u003Cli>Taroify\u003C/li>\n\u003Cli>aHooks/taro-hooks\u003C/li>\n\u003Cli>@umijs/plugin-locale\u003C/li>\n\u003Cli>linaria\u003C/li>\n\u003Cli>@antmjs/vantui\n进度：40%\n结果：该项目被废弃，原因如下\u003C/li>\n\u003C/ul>\n\u003Col>\n\u003Cli>领导不同意转React技术栈（90%项目为Vue2体系）\u003C/li>\n\u003Cli>技术选型需要重新考虑\n踩坑：\u003C/li>\n\u003Cli>\u003Ca href=\"https://github.com/statelyai/xstate/pull/3133\">fix: replace with getGlobal by fw6 · Pull Request #3133 · statelyai/xstate · GitHub\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://github.com/NervJS/taro/pull/11362\">fix(react): 支付宝小程序插件配置字段缺失、Taro专有Hooks在小程序插件页面中无法使用 by fw6 · Pull Request #11362 · NervJS/taro · GitHub\u003C/a>\u003C/li>\n\u003Cli>WindiCSS在小程序下不支持：\n\u003Col>\n\u003Cli>通配符\u003Ccode>*\u003C/code>\u003C/li>\n\u003Cli>媒体查询\u003C/li>\n\u003Cli>属性选择器，当属性不是小程序组件的内置属性时\u003C/li>\n\u003Cli>不支持单位rem\u003C/li>\n\u003C/ol>\n\u003C/li>\n\u003Cli>\u003Ccode>Text\u003C/code>不支持touch事件\u003C/li>\n\u003Cli>\u003Ca href=\"https://github.com/NervJS/taro/issues/8883\">Linaria 的 styled(View) 写法传参错误 · Issue #8883 · NervJS/taro · GitHub\u003C/a>\u003C/li>\n\u003C/ol>\n\u003Ch2 id=\"小程序相关项目统一\">小程序相关项目统一\u003C/h2>\n\u003Cp>时间：\u003C/p>\n\u003Cul>\n\u003Cli>initial commit：2022/4/24\u003C/li>\n\u003Cli>last commit: 2022/8/10\n动机：小程序和小程序插件代码质量都很差，问题很多；两个项目可以作为monorepo共享组件、方法；小程序项目还是原生语法写的；小程序需要做跨端（支付宝、微信）\n技术栈：\u003C/li>\n\u003Cli>@microsoft/rush\u003C/li>\n\u003Cli>uniapp\u003C/li>\n\u003Cli>uni-ui\u003C/li>\n\u003Cli>vue-i18n\u003C/li>\n\u003Cli>vite\u003C/li>\n\u003Cli>vueuse\u003C/li>\n\u003Cli>vue3\u003C/li>\n\u003Cli>unocss\u003C/li>\n\u003Cli>headlessui\u003C/li>\n\u003Cli>xstate\u003C/li>\n\u003Cli>pinia\u003C/li>\n\u003Cli>sass\n进度：30%\n结果：项目废弃，原因如下\u003C/li>\n\u003Cli>功能涉及多个功能模块（签署、认证、组织等），其他组不愿投入资源\u003C/li>\n\u003Cli>部分前端组长不愿使用新技术（vue3）\u003C/li>\n\u003Cli>内部对小程序兼容性有争议\n踩坑：\u003C/li>\n\u003Cli>\u003Ca href=\"https://github.com/vuejs/rfcs/blob/master/active-rfcs/0040-script-setup.md#unresolved-questions\">rfcs/active-rfcs/0040-script-setup.md at master · vuejs/rfcs · GitHub\u003C/a>\u003C/li>\n\u003Cli>\u003Ccode>vite-plugin-unocss-to-uni\u003C/code>替换为\u003Ccode>preset-uni\u003C/code>(暂未稳定)\u003C/li>\n\u003Cli>小程序受平台限制，\u003Ca href=\"https://uniapp.dcloud.net.cn/tutorial/migration-to-vue3.html#vue-i18n\">无法使用插值语法定义国际化\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://github.com/dcloudio/uni-app/pull/3588\">feat: 完善支付宝小程序插件、微信小程序插件的开发支持 by fw6 · Pull Request #3588 · dcloudio/uni-app · GitHub\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://github.com/dcloudio/uni-app/pull/3345\">支付宝小程序组件中使用ref报错 by fw6 · Pull Request #3345 · dcloudio/uni-app · GitHub\u003C/a>\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"新版富文本编辑器\">新版富文本编辑器\u003C/h2>\n\u003Cp>时间：\u003C/p>\n\u003Cul>\n\u003Cli>initial comm: 2022/10/8\n动机：泛微使用的富文本编辑器（wps）成本过高，老板要求泛微与契约锁编辑器统一开发使用，经与泛微同事商议决定契约锁方全权负责编辑器的开发工作，泛微接入其e-cology系统\n技术栈：\u003C/li>\n\u003Cli>使用nx + pnpm作为monorepo管理工具\u003C/li>\n\u003Cli>使用tiptap(基于prosemirror)作为富文本编辑器框架\u003C/li>\n\u003Cli>使用Svelte开发NodeView、公共组件、编辑器组件等\u003C/li>\n\u003Cli>基于style-dictionary生成design tokens，配合VSCode插件phoenisx.cssvar提升DX\u003C/li>\n\u003Cli>样式方案使用Postcss+原生CSS\u003C/li>\n\u003Cli>国际化方案基于typesafe-i18n + svelte/context + svelte/store\u003C/li>\n\u003Cli>使用histoire为组件、ProseMirror插件、Tiptap扩展写stories\n进度：一期目标完成（公有云上线）\u003C/li>\n\u003C/ul>",{"headings":27,"localImagePaths":46,"remoteImagePaths":47,"frontmatter":48,"imagePaths":53},[28,30,34,36,40,42,44],{"depth":29,"slug":14,"text":14},1,{"depth":31,"slug":32,"text":33},2,"html模板","HTML模板",{"depth":31,"slug":35,"text":35},"小程序插件",{"depth":37,"slug":38,"text":39},3,"改造维护","改造/维护",{"depth":37,"slug":41,"text":41},"重写",{"depth":31,"slug":43,"text":43},"小程序相关项目统一",{"depth":31,"slug":45,"text":45},"新版富文本编辑器",[],[],{"title":14,"description":15,"pubDate":49,"heroImage":18,"date created":50,"date modified":51,"draft":16,"minutesRead":52},"2023-06-29 16:40","2023-06-29 16:06","2023-06-29","7 min read",[],"000-Inbox/010-Workspace/工作总结.md","calendar/2023-目标",{"id":55,"data":57,"body":62,"filePath":63,"digest":64,"rendered":65,"legacyId":81},{"title":58,"description":15,"draft":16,"pubDate":59,"heroImage":60,"tags":61},"2023 目标",["Date","2023-06-27T08:23:00.000Z"],"https://images.unsplash.com/photo-1686285386868-1e0469db5ddf?crop=entropy&cs=srgb&fm=jpg&ixid=M3wzNjM5Nzd8MHwxfHJhbmRvbXx8fHx8fHx8fDE2ODc4NDUyMzZ8&ixlib=rb-4.0.3&q=85&w=1200&h=400",[20],"> Setting an example is not the main means of influencing another, it is the only means.\n> — \u003Ccite>Albert Einstein\u003C/cite>\n\n\n\n## 工作\n\n- 1 换个新工作\n\t- Why\n\t\t- 挣钱养家\n\t\t- 职业发展\n\t- Milestone 1\n\t\t- 当前重要工作完成\n\t- Milestone 2\n\t\t- 补基础知识\n\t- Milestone 3\n\t\t- 做过的项目梳理（防止被问到）\n\t- Reference\n\t\t- [[面试手册]]\n\n## 个人\n\n- 1 考驾照\n\t- Why 为了以后自驾游/通勤等\n\t- Milestone 1 科目一题目刷完\n\t- Milestone 2 科目二每周2h练习\n\t- Milestone 3 TODO…\n\t- Reference\n\t\t- [[驾考]]\n- 2 蜜月旅行✈️\n\t- Why 人生中只有一次\n\t- M1 确定目的地\n\t- M2 报名旅行团\n\t- M3 出发前的准备\n\t- M4 享受二人假期\n\t- M5 完美结束\n\t- Reference\n\t\t- [[蜜月旅行🏝️]]","src/content/blog/Calendar/2023 目标.md","930201d743bdb221",{"html":66,"metadata":67},"\u003Cblockquote>\n\u003Cp>Setting an example is not the main means of influencing another, it is the only means.\n— \u003Ccite>Albert Einstein\u003C/cite>\u003C/p>\n\u003C/blockquote>\n\u003Ch2 id=\"工作\">工作\u003C/h2>\n\u003Cul>\n\u003Cli>1 换个新工作\n\u003Cul>\n\u003Cli>Why\n\u003Cul>\n\u003Cli>挣钱养家\u003C/li>\n\u003Cli>职业发展\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>Milestone 1\n\u003Cul>\n\u003Cli>当前重要工作完成\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>Milestone 2\n\u003Cul>\n\u003Cli>补基础知识\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>Milestone 3\n\u003Cul>\n\u003Cli>做过的项目梳理（防止被问到）\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>Reference\n\u003Cul>\n\u003Cli>[[面试手册]]\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"个人\">个人\u003C/h2>\n\u003Cul>\n\u003Cli>1 考驾照\n\u003Cul>\n\u003Cli>Why 为了以后自驾游/通勤等\u003C/li>\n\u003Cli>Milestone 1 科目一题目刷完\u003C/li>\n\u003Cli>Milestone 2 科目二每周2h练习\u003C/li>\n\u003Cli>Milestone 3 TODO…\u003C/li>\n\u003Cli>Reference\n\u003Cul>\n\u003Cli>[[驾考]]\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>2 蜜月旅行\u003Cspan role=\"img\" aria-label=\"airplane\">✈️\u003C/span>\n\u003Cul>\n\u003Cli>Why 人生中只有一次\u003C/li>\n\u003Cli>M1 确定目的地\u003C/li>\n\u003Cli>M2 报名旅行团\u003C/li>\n\u003Cli>M3 出发前的准备\u003C/li>\n\u003Cli>M4 享受二人假期\u003C/li>\n\u003Cli>M5 完美结束\u003C/li>\n\u003Cli>Reference\n\u003Cul>\n\u003Cli>[[蜜月旅行\u003Cspan role=\"img\" aria-label=\"desert island\">🏝️\u003C/span>]]\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ul>",{"headings":68,"localImagePaths":73,"remoteImagePaths":74,"frontmatter":75,"imagePaths":80},[69,71],{"depth":31,"slug":70,"text":70},"工作",{"depth":31,"slug":72,"text":72},"个人",[],[],{"title":58,"description":15,"pubDate":76,"heroImage":60,"date created":77,"date modified":78,"draft":16,"minutesRead":79},"2023-06-27 16:23","2023-02-04 20:40","2023-06-27","1 min read",[],"Calendar/2023 目标.md","calendar/2023-书单",{"id":82,"data":84,"body":89,"filePath":90,"digest":91,"rendered":92,"legacyId":101},{"title":85,"description":15,"draft":16,"pubDate":86,"heroImage":87,"tags":88},"2023 书单",["Date","2023-06-27T08:23:00.000Z"],"https://images.unsplash.com/photo-1686657656166-b23a8eefe633?crop=entropy&cs=srgb&fm=jpg&ixid=M3wzNjM5Nzd8MHwxfHJhbmRvbXx8fHx8fHx8fDE2ODc4NDUyMjd8&ixlib=rb-4.0.3&q=85&w=1200&h=400",[20],"> Most folks are as happy as they make up their minds to be.\n> — \u003Ccite>Abraham Lincoln\u003C/cite>\n\n\n- 纳瓦尔宝典\n- 终身学习：哈佛毕业后的六堂课\n- 李诞脱口秀工作手册\n- 哲学家都干了些什么\n- [ ] Rust系统编程\n- [ ] 人类群星闪耀时\n- [ ] 狼书第二卷\n- [ ] 未来简历\n- [ ] 狼书第三卷\n- 程序员海外工作/英文面试手册 [GitHub - eliaszon/Programmers-Overseas-Job-Interview-Handbook: 🏂🏻 程序员海外工作/英文面试手册](https://github.com/eliaszon/Programmers-Overseas-Job-Interview-Handbook)","src/content/blog/Calendar/2023 书单.md","6ab12e816921c2be",{"html":93,"metadata":94},"\u003Cblockquote>\n\u003Cp>Most folks are as happy as they make up their minds to be.\n— \u003Ccite>Abraham Lincoln\u003C/cite>\u003C/p>\n\u003C/blockquote>\n\u003Cul class=\"contains-task-list\">\n\u003Cli>纳瓦尔宝典\u003C/li>\n\u003Cli>终身学习：哈佛毕业后的六堂课\u003C/li>\n\u003Cli>李诞脱口秀工作手册\u003C/li>\n\u003Cli>哲学家都干了些什么\u003C/li>\n\u003Cli class=\"task-list-item\">\u003Cinput type=\"checkbox\" disabled> Rust系统编程\u003C/li>\n\u003Cli class=\"task-list-item\">\u003Cinput type=\"checkbox\" disabled> 人类群星闪耀时\u003C/li>\n\u003Cli class=\"task-list-item\">\u003Cinput type=\"checkbox\" disabled> 狼书第二卷\u003C/li>\n\u003Cli class=\"task-list-item\">\u003Cinput type=\"checkbox\" disabled> 未来简历\u003C/li>\n\u003Cli class=\"task-list-item\">\u003Cinput type=\"checkbox\" disabled> 狼书第三卷\u003C/li>\n\u003Cli>程序员海外工作/英文面试手册 \u003Ca href=\"https://github.com/eliaszon/Programmers-Overseas-Job-Interview-Handbook\">GitHub - eliaszon/Programmers-Overseas-Job-Interview-Handbook: \u003Cspan role=\"img\" aria-label=\"snowboarder (skin tone 2)\">🏂🏻\u003C/span> 程序员海外工作/英文面试手册\u003C/a>\u003C/li>\n\u003C/ul>",{"headings":95,"localImagePaths":96,"remoteImagePaths":97,"frontmatter":98,"imagePaths":100},[],[],[],{"title":85,"description":15,"pubDate":76,"heroImage":87,"date created":99,"date modified":78,"draft":16,"minutesRead":79},"2023-02-04 20:26",[],"Calendar/2023 书单.md","000-inbox/040-idea-incubator/保存下有空看",{"id":102,"data":104,"body":109,"filePath":110,"digest":111,"rendered":112,"legacyId":124},{"title":105,"description":15,"draft":16,"pubDate":106,"heroImage":107,"tags":108},"保存下有空看",["Date","2023-08-04T09:29:00.000Z"],"https://images.unsplash.com/photo-1689240766441-29de936097cb?crop=entropy&cs=srgb&fm=jpg&ixid=M3wzNjM5Nzd8MHwxfHJhbmRvbXx8fHx8fHx8fDE2OTExNDEzODh8&ixlib=rb-4.0.3&q=85",[20],"# 保存下有空看\n\n[Autogenerating Rust-JS bindings with UniFFI - Mozilla Hacks - the Web developer blog](https://hacks.mozilla.org/2023/08/autogenerating-rust-js-bindings-with-uniffi/)\n\n[Module Federation Redesign · module-federation/universe · Discussion #1170 · GitHub](https://github.com/module-federation/universe/discussions/1170)\n\n[10 Essential React Performance Optimization Techniques for Faster Web Applications](https://techreactlearning.blogspot.com/2023/07/10-essential-react-performance.html)\n\n\n[Color Formats in CSS - hex, rgb, hsl, lab](https://www.joshwcomeau.com/css/color-formats/)\n\n[Things you forgot (or never knew) because of React - Josh Collinsworth blog](https://joshcollinsworth.com/blog/antiquated-react)\n\n[Blogged Answers: My Experience Modernizing Packages to ESM · Mark's Dev Blog](https://blog.isquaredsoftware.com/2023/08/esm-modernization-lessons/)\n\n[Site Unreachable](https://htmx.org/essays/no-build-step/)","src/content/blog/000-Inbox/040-Idea Incubator/保存下有空看.md","4fed9391913ef9e6",{"html":113,"metadata":114},"\u003Ch1 id=\"保存下有空看\">保存下有空看\u003C/h1>\n\u003Cp>\u003Ca href=\"https://hacks.mozilla.org/2023/08/autogenerating-rust-js-bindings-with-uniffi/\">Autogenerating Rust-JS bindings with UniFFI - Mozilla Hacks - the Web developer blog\u003C/a>\u003C/p>\n\u003Cp>\u003Ca href=\"https://github.com/module-federation/universe/discussions/1170\">Module Federation Redesign · module-federation/universe · Discussion #1170 · GitHub\u003C/a>\u003C/p>\n\u003Cp>\u003Ca href=\"https://techreactlearning.blogspot.com/2023/07/10-essential-react-performance.html\">10 Essential React Performance Optimization Techniques for Faster Web Applications\u003C/a>\u003C/p>\n\u003Cp>\u003Ca href=\"https://www.joshwcomeau.com/css/color-formats/\">Color Formats in CSS - hex, rgb, hsl, lab\u003C/a>\u003C/p>\n\u003Cp>\u003Ca href=\"https://joshcollinsworth.com/blog/antiquated-react\">Things you forgot (or never knew) because of React - Josh Collinsworth blog\u003C/a>\u003C/p>\n\u003Cp>\u003Ca href=\"https://blog.isquaredsoftware.com/2023/08/esm-modernization-lessons/\">Blogged Answers: My Experience Modernizing Packages to ESM · Mark’s Dev Blog\u003C/a>\u003C/p>\n\u003Cp>\u003Ca href=\"https://htmx.org/essays/no-build-step/\">Site Unreachable\u003C/a>\u003C/p>",{"headings":115,"localImagePaths":117,"remoteImagePaths":118,"frontmatter":119,"imagePaths":123},[116],{"depth":29,"slug":105,"text":105},[],[],{"title":105,"description":15,"pubDate":120,"heroImage":107,"date created":120,"date modified":121,"draft":16,"tags":122,"minutesRead":79},"2023-08-04 17:29","2023-08-04",[20],[],"000-Inbox/040-Idea Incubator/保存下有空看.md","200-learning/210-programing/aws-re_invent-2022",{"id":125,"data":127,"body":134,"filePath":135,"digest":136,"rendered":137,"legacyId":150},{"title":128,"description":129,"pubDate":130,"heroImage":131,"tags":132},"Dr. Werner in AWS re:Invent 2022","re:Invent 2022中，Dr. Werner的主题演讲",["Date","2023-08-31T01:00:00.000Z"],"https://raw.githubusercontent.com/fw6/assets/main/toy_docs/20230831090633.png",[133],"notes","- [AWS re:Invent 2022 - Keynote with Dr. Werner Vogels - YouTube](https://www.youtube.com/watch?v=RfvL_423a-I)\n\n同步是在异步世界创造的幻觉\n\n:::note\n The universe is incredibly agile, fault tolerant, resilient and robust. It is also asynchronous.\n:::\n\n操作系统的本质是管理所有设备，并在此基础上添加一些抽象。那些设备如何工作的呢？有一个设备驱动程序，来确保所有磁盘看起来相同。实际情况是设备与操作系统之间的交互是基于时钟中断、事件驱动的系统。如果需要向磁盘中放入数据，可以将其放入共享内存缓冲区，将一些内容写入寄存器中，也可以在写入完成将其输入回来。因此，操作系统中的底层进程，是纯粹异步的。\n\n>时钟是生成中断的最重要设备，它驱动调度程序，并驱动实际执行的进程。\n\nWindows NT可能是世界上第一个将异步通信或与设备交互作为内核第一原则的操作系统。Linux直到2000年代初才实现异步（实际知道2019年，io_uring才真正提供了异步交互）。\n\n为什么需要松散耦合的系统？\n1. 依赖很少\n2. 故障隔离\n3. 真正的可进化架构\n可以轻松的改造您的架构。\n\n:::note\nAmazon's Distributed Computing Manifesto, 1998.\nRead at [All Things Distributed](https://www.allthingsdistributed.com/)\n:::\n\n工作流程要解决的问题，在松散耦合的组件中构建应用程序，如何创造、组合、进化？\n\n如何构建工作流程？\n- 需要拥有如下平台：\n  1. Sequence\n  2. Retry\n  3. Error handling\n  4. Parallel\n  5. Routing based on data\n  6. Concurrent/iterative\n- AWS提供的两项服务：\n  1. Step function\n  2. Event bridge\n\n世界是事件驱动的、异步的。\n\n事件驱动的系统天然松散耦合。  \n\n![image.png](https://raw.githubusercontent.com/fw6/assets/main/toy_docs/20230831095924.png)\n\n:::note\nGall‘s low: All complex systems that work evolved from simpler systems that worked.\n:::\n\n构建可进化系统的最佳方法是关注事件驱动的架构。\n\n事件总线是网络🕸️中的🕷️，负责路由、协调和调度。\n\n事件是可组合的。使用管道将不同服务组合起来。","src/content/blog/200-Learning/210-Programing/AWS re_Invent 2022.md","a50b575dc6d9c9c2",{"html":138,"metadata":139},"\u003Cul>\n\u003Cli>\u003Ca href=\"https://www.youtube.com/watch?v=RfvL_423a-I\">AWS re\u003Cdiv>\u003C/div> 2022 - Keynote with Dr. Werner Vogels - YouTube\u003C/a>\u003C/li>\n\u003C/ul>\n\u003Cp>同步是在异步世界创造的幻觉\u003C/p>\n\u003Caside class=\"callout callout-note\">\u003Cdiv class=\"callout-indicator\">\u003Cdiv class=\"callout-hint\">\u003Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" aria-hidden=\"true\">\u003Cpath d=\"M12 8h.01M12 12v4\">\u003C/path>\u003Ccircle cx=\"12\" cy=\"12\" r=\"10\">\u003C/circle>\u003C/svg>\u003C/div>\u003Cdiv class=\"callout-title\">Note\u003C/div>\u003C/div>\u003Cdiv class=\"callout-content\">\u003Cp> The universe is incredibly agile, fault tolerant, resilient and robust. It is also asynchronous.\u003C/p>\u003C/div>\u003C/aside>\n\u003Cp>操作系统的本质是管理所有设备，并在此基础上添加一些抽象。那些设备如何工作的呢？有一个设备驱动程序，来确保所有磁盘看起来相同。实际情况是设备与操作系统之间的交互是基于时钟中断、事件驱动的系统。如果需要向磁盘中放入数据，可以将其放入共享内存缓冲区，将一些内容写入寄存器中，也可以在写入完成将其输入回来。因此，操作系统中的底层进程，是纯粹异步的。\u003C/p>\n\u003Cblockquote>\n\u003Cp>时钟是生成中断的最重要设备，它驱动调度程序，并驱动实际执行的进程。\u003C/p>\n\u003C/blockquote>\n\u003Cp>Windows NT可能是世界上第一个将异步通信或与设备交互作为内核第一原则的操作系统。Linux直到2000年代初才实现异步（实际知道2019年，io_uring才真正提供了异步交互）。\u003C/p>\n\u003Cp>为什么需要松散耦合的系统？\u003C/p>\n\u003Col>\n\u003Cli>依赖很少\u003C/li>\n\u003Cli>故障隔离\u003C/li>\n\u003Cli>真正的可进化架构\n可以轻松的改造您的架构。\u003C/li>\n\u003C/ol>\n\u003Caside class=\"callout callout-note\">\u003Cdiv class=\"callout-indicator\">\u003Cdiv class=\"callout-hint\">\u003Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" aria-hidden=\"true\">\u003Cpath d=\"M12 8h.01M12 12v4\">\u003C/path>\u003Ccircle cx=\"12\" cy=\"12\" r=\"10\">\u003C/circle>\u003C/svg>\u003C/div>\u003Cdiv class=\"callout-title\">Note\u003C/div>\u003C/div>\u003Cdiv class=\"callout-content\">\u003Cp>Amazon’s Distributed Computing Manifesto, 1998.\nRead at \u003Ca href=\"https://www.allthingsdistributed.com/\">All Things Distributed\u003C/a>\u003C/p>\u003C/div>\u003C/aside>\n\u003Cp>工作流程要解决的问题，在松散耦合的组件中构建应用程序，如何创造、组合、进化？\u003C/p>\n\u003Cp>如何构建工作流程？\u003C/p>\n\u003Cul>\n\u003Cli>需要拥有如下平台：\n\u003Col>\n\u003Cli>Sequence\u003C/li>\n\u003Cli>Retry\u003C/li>\n\u003Cli>Error handling\u003C/li>\n\u003Cli>Parallel\u003C/li>\n\u003Cli>Routing based on data\u003C/li>\n\u003Cli>Concurrent/iterative\u003C/li>\n\u003C/ol>\n\u003C/li>\n\u003Cli>AWS提供的两项服务：\n\u003Col>\n\u003Cli>Step function\u003C/li>\n\u003Cli>Event bridge\u003C/li>\n\u003C/ol>\n\u003C/li>\n\u003C/ul>\n\u003Cp>世界是事件驱动的、异步的。\u003C/p>\n\u003Cp>事件驱动的系统天然松散耦合。\u003C/p>\n\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/fw6/assets/main/toy_docs/20230831095924.png\" alt=\"image.png\">\u003C/p>\n\u003Caside class=\"callout callout-note\">\u003Cdiv class=\"callout-indicator\">\u003Cdiv class=\"callout-hint\">\u003Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" aria-hidden=\"true\">\u003Cpath d=\"M12 8h.01M12 12v4\">\u003C/path>\u003Ccircle cx=\"12\" cy=\"12\" r=\"10\">\u003C/circle>\u003C/svg>\u003C/div>\u003Cdiv class=\"callout-title\">Note\u003C/div>\u003C/div>\u003Cdiv class=\"callout-content\">\u003Cp>Gall‘s low: All complex systems that work evolved from simpler systems that worked.\u003C/p>\u003C/div>\u003C/aside>\n\u003Cp>构建可进化系统的最佳方法是关注事件驱动的架构。\u003C/p>\n\u003Cp>事件总线是网络\u003Cspan role=\"img\" aria-label=\"spider web\">🕸️\u003C/span>中的\u003Cspan role=\"img\" aria-label=\"spider\">🕷️\u003C/span>，负责路由、协调和调度。\u003C/p>\n\u003Cp>事件是可组合的。使用管道将不同服务组合起来。\u003C/p>",{"headings":140,"localImagePaths":141,"remoteImagePaths":142,"frontmatter":143,"imagePaths":149},[],[],[],{"title":128,"description":129,"pubDate":144,"heroImage":131,"date created":145,"date modified":146,"tags":147,"minutesRead":148},"2023-08-31 09:00","2023-08-31 08:59","2023-08-31",[133],"3 min read",[],"200-Learning/210-Programing/AWS re_Invent 2022.md","readme",{"id":151,"data":153,"body":158,"filePath":159,"digest":160,"rendered":161,"legacyId":173},{"title":154,"description":15,"draft":16,"pubDate":155,"heroImage":156,"tags":157},"README",["Date","2023-06-27T08:23:00.000Z"],"https://images.unsplash.com/photo-1686859161298-0d0159e9c71a?crop=entropy&cs=srgb&fm=jpg&ixid=M3wzNjM5Nzd8MHwxfHJhbmRvbXx8fHx8fHx8fDE2ODc4NDUyNDd8&ixlib=rb-4.0.3&q=85&w=1200&h=400",[20],"> If you were to offer a thirsty man all wisdom, you would not please him more than if you gave him a drink.\n> — \u003Ccite>Sophocles\u003C/cite>\n\n\n# 📝笔记📒\n-","src/content/blog/README.md","1cb7fede76fd5b42",{"html":162,"metadata":163},"\u003Cblockquote>\n\u003Cp>If you were to offer a thirsty man all wisdom, you would not please him more than if you gave him a drink.\n— \u003Ccite>Sophocles\u003C/cite>\u003C/p>\n\u003C/blockquote>\n\u003Ch1 id=\"笔记\">\u003Cspan role=\"img\" aria-label=\"memo\">📝\u003C/span>笔记\u003Cspan role=\"img\" aria-label=\"ledger\">📒\u003C/span>\u003C/h1>\n\u003Cul>\n\u003Cli>\u003C/li>\n\u003C/ul>",{"headings":164,"localImagePaths":168,"remoteImagePaths":169,"frontmatter":170,"imagePaths":172},[165],{"depth":29,"slug":166,"text":167},"笔记","📝笔记📒",[],[],{"title":154,"description":15,"pubDate":76,"heroImage":156,"date created":171,"date modified":78,"draft":16,"minutesRead":79},"2023-06-27 11:29",[],"README.md","200-learning/210-programing/css逻辑属性与逻辑值",{"id":174,"data":176,"body":183,"filePath":184,"digest":185,"rendered":186,"legacyId":212},{"title":177,"description":15,"pubDate":178,"heroImage":179,"tags":180},"CSS逻辑属性与逻辑值",["Date","2023-08-13T07:35:00.000Z"],"https://images.unsplash.com/photo-1637729960394-1a1200764aa4?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1200",[20,181,182],"CSS","W3C","- [CSS logical properties and values | MDN](https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_logical_properties_and_values/Basic_concepts_of_logical_properties_and_values)\n- [Logical Properties - Learn CSS | web.dev](https://web.dev/learn/css/logical-properties/)\n\n![image.png](https://raw.githubusercontent.com/fw6/assets/main/toy_docs/20230813153919.png)\n\n逻辑属性与逻辑值规范为 CSS 中的许多属性和值引入了相对于流的对应关系。\n\n## 为何需要逻辑属性？\n\n传统CSS根据实体尺度属性设置尺寸，例如一个块级盒子具有width、height，元素定位、内外边距、边框等按照方向划分为top、right、bottom、left等等。\n\n实体属性在更改了书写模式（writing-mode）情况下，就无法适用了。如：\n![image.png](https://raw.githubusercontent.com/fw6/assets/main/toy_docs/20230813155017.png)\n把writing-mode改为vertical-rl就会变为：\n![image.png](https://raw.githubusercontent.com/fw6/assets/main/toy_docs/20230813155049.png)\n宽高比显然是不符合的。\n\n如果使用逻辑属性（将width改为inline-size），就会变为：\n![image.png](https://raw.githubusercontent.com/fw6/assets/main/toy_docs/20230813155125.png)\n这样无论何种书写模式都是正常的。\n\n逻辑属性和逻辑规范定义了这些实体值到逻辑值的对应关系，如：\n- left/right或top/bottom，对应逻辑值start和end\n\n## 块向与行向尺度\n\n在对齐元素时，诸如弹性盒和网格布局等新的 CSS 布局方法所用的概念是块向（`block`）和行向（`inline`），而非右侧（`right`）和左侧（`left`），或者上侧（`top`）和下侧（`bottom`）。\n\n行向是指在所用的书写模式中，一行文本延伸的方向。因此在从左到右横排的英文文档，或者从右到左横排的阿拉伯文文档中，行向为_水平方向_。若切换至竖排书写模式（如日文文档）则行向变为_竖直方向_，这是因为文本在这种书写模式中竖直延伸。\n\n块向是指另一方向，即块——例如段落——依次显示的方向。在英文和阿拉伯文中，块沿竖直方向依次排列，而块在任意竖排书写模式中沿水平方向依次排列。\n\n下图展示了横排书写模式中的行向和块向：\n![image.png](https://raw.githubusercontent.com/fw6/assets/main/toy_docs/20230813155413.png)\n\n此图展示了竖排书写模式中的块向与行向：\n![image.png](https://raw.githubusercontent.com/fw6/assets/main/toy_docs/20230813155513.png)\n\n## 逻辑属性与实体属性对应关系\n\n### 尺寸\n\n|逻辑属性|实体属性|\n|---|---|\n|[`inline-size`](https://developer.mozilla.org/zh-CN/docs/Web/CSS/inline-size)|[`width`](https://developer.mozilla.org/zh-CN/docs/Web/CSS/width)|\n|[`block-size`](https://developer.mozilla.org/zh-CN/docs/Web/CSS/block-size)|[`height`](https://developer.mozilla.org/zh-CN/docs/Web/CSS/height)|\n|[`min-inline-size`](https://developer.mozilla.org/zh-CN/docs/Web/CSS/min-inline-size)|[`min-width`](https://developer.mozilla.org/zh-CN/docs/Web/CSS/min-width)|\n|[`min-block-size`](https://developer.mozilla.org/zh-CN/docs/Web/CSS/min-block-size)|[`min-height`](https://developer.mozilla.org/zh-CN/docs/Web/CSS/min-height)|\n|[`max-inline-size`](https://developer.mozilla.org/zh-CN/docs/Web/CSS/max-inline-size)|[`max-width`](https://developer.mozilla.org/zh-CN/docs/Web/CSS/max-width)|\n|`max-block-size`|[`max-height`](https://developer.mozilla.org/zh-CN/docs/Web/CSS/max-height)|\n\n\n### 外边距、边框和内边距\n\n|逻辑属性|实体属性|\n|---|---|\n|[`border-block-end`](https://developer.mozilla.org/zh-CN/docs/Web/CSS/border-block-end)|[`border-bottom`](https://developer.mozilla.org/zh-CN/docs/Web/CSS/border-bottom)|\n|[`border-block-end-color`](https://developer.mozilla.org/zh-CN/docs/Web/CSS/border-block-end-color)|[`border-bottom-color`](https://developer.mozilla.org/zh-CN/docs/Web/CSS/border-bottom-color)|\n|[`border-block-end-style`](https://developer.mozilla.org/zh-CN/docs/Web/CSS/border-block-end-style)|[`border-bottom-style`](https://developer.mozilla.org/zh-CN/docs/Web/CSS/border-bottom-style)|\n|[`border-block-end-width`](https://developer.mozilla.org/zh-CN/docs/Web/CSS/border-block-end-width)|[`border-bottom-width`](https://developer.mozilla.org/zh-CN/docs/Web/CSS/border-bottom-width)|\n|[`border-block-start`](https://developer.mozilla.org/zh-CN/docs/Web/CSS/border-block-start)|[`border-top`](https://developer.mozilla.org/zh-CN/docs/Web/CSS/border-top)|\n|[`border-block-start-color`](https://developer.mozilla.org/zh-CN/docs/Web/CSS/border-block-start-color)|[`border-top-color`](https://developer.mozilla.org/zh-CN/docs/Web/CSS/border-top-color)|\n|[`border-block-start-style`](https://developer.mozilla.org/zh-CN/docs/Web/CSS/border-block-start-style)|[`border-top-style`](https://developer.mozilla.org/zh-CN/docs/Web/CSS/border-top-style)|\n|[`border-block-start-width`](https://developer.mozilla.org/zh-CN/docs/Web/CSS/border-block-start-width)|[`border-top-width`](https://developer.mozilla.org/zh-CN/docs/Web/CSS/border-top-width)|\n|[`border-inline-end`](https://developer.mozilla.org/zh-CN/docs/Web/CSS/border-inline-end)|[`border-right`](https://developer.mozilla.org/zh-CN/docs/Web/CSS/border-right)|\n|[`border-inline-end-color`](https://developer.mozilla.org/zh-CN/docs/Web/CSS/border-inline-end-color)|[`border-right-color`](https://developer.mozilla.org/zh-CN/docs/Web/CSS/border-right-color)|\n|[`border-inline-end-style`](https://developer.mozilla.org/zh-CN/docs/Web/CSS/border-inline-end-style)|[`border-right-style`](https://developer.mozilla.org/zh-CN/docs/Web/CSS/border-right-style)|\n|[`border-inline-end-width`](https://developer.mozilla.org/zh-CN/docs/Web/CSS/border-inline-end-width)|[`border-right-width`](https://developer.mozilla.org/zh-CN/docs/Web/CSS/border-right-width)|\n|[`border-inline-start`](https://developer.mozilla.org/zh-CN/docs/Web/CSS/border-inline-start)|[`border-left`](https://developer.mozilla.org/zh-CN/docs/Web/CSS/border-left)|\n|[`border-inline-start-color`](https://developer.mozilla.org/zh-CN/docs/Web/CSS/border-inline-start-color)|[`border-left-color`](https://developer.mozilla.org/zh-CN/docs/Web/CSS/border-left-color)|\n|[`border-inline-start-style`](https://developer.mozilla.org/zh-CN/docs/Web/CSS/border-inline-start-style)|[`border-left-style`](https://developer.mozilla.org/zh-CN/docs/Web/CSS/border-left-style)|\n|[`border-inline-start-width`](https://developer.mozilla.org/zh-CN/docs/Web/CSS/border-inline-start-width)|[`border-left-width`](https://developer.mozilla.org/zh-CN/docs/Web/CSS/border-left-width)|\n|[`border-start-start-radius`](https://developer.mozilla.org/zh-CN/docs/Web/CSS/border-start-start-radius)|[`border-top-left-radius`](https://developer.mozilla.org/zh-CN/docs/Web/CSS/border-top-left-radius)|\n|[`border-end-start-radius`](https://developer.mozilla.org/zh-CN/docs/Web/CSS/border-end-start-radius)|[`border-bottom-left-radius`](https://developer.mozilla.org/zh-CN/docs/Web/CSS/border-bottom-left-radius)|\n|[`border-start-end-radius`](https://developer.mozilla.org/zh-CN/docs/Web/CSS/border-start-end-radius)|[`border-top-right-radius`](https://developer.mozilla.org/zh-CN/docs/Web/CSS/border-top-right-radius)|\n|[`border-end-end-radius`](https://developer.mozilla.org/zh-CN/docs/Web/CSS/border-end-end-radius)|[`border-bottom-right-radius`](https://developer.mozilla.org/zh-CN/docs/Web/CSS/border-bottom-right-radius)|\n|[`margin-block-end`](https://developer.mozilla.org/zh-CN/docs/Web/CSS/margin-block-end)|[`margin-bottom`](https://developer.mozilla.org/zh-CN/docs/Web/CSS/margin-bottom)|\n|[`margin-block-start`](https://developer.mozilla.org/zh-CN/docs/Web/CSS/margin-block-start)|[`margin-top`](https://developer.mozilla.org/zh-CN/docs/Web/CSS/margin-top)|\n|[`margin-inline-end`](https://developer.mozilla.org/zh-CN/docs/Web/CSS/margin-inline-end)|[`margin-right`](https://developer.mozilla.org/zh-CN/docs/Web/CSS/margin-right)|\n|[`margin-inline-start`](https://developer.mozilla.org/zh-CN/docs/Web/CSS/margin-inline-start)|[`margin-left`](https://developer.mozilla.org/zh-CN/docs/Web/CSS/margin-left)|\n|[`padding-block-end`](https://developer.mozilla.org/zh-CN/docs/Web/CSS/padding-block-end)|[`padding-bottom`](https://developer.mozilla.org/zh-CN/docs/Web/CSS/padding-bottom)|\n|[`padding-block-start`](https://developer.mozilla.org/zh-CN/docs/Web/CSS/padding-block-start)|[`padding-top`](https://developer.mozilla.org/zh-CN/docs/Web/CSS/padding-top)|\n|[`padding-inline-end`](https://developer.mozilla.org/zh-CN/docs/Web/CSS/padding-inline-end)|[`padding-right`](https://developer.mozilla.org/zh-CN/docs/Web/CSS/padding-right)|\n|[`padding-inline-start`](https://developer.mozilla.org/zh-CN/docs/Web/CSS/padding-inline-start)|[`padding-left`](https://developer.mozilla.org/zh-CN/docs/Web/CSS/padding-left)|\n\n还有一些简写属性可以用于让我们同时设置盒子块向或者行向的两侧。这些简写属性没有等价的实体属性。\n\n| 属性                                                                                          | 用途                                                                                                                                                                                                                                                                     |\n| --------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| [`border-block`](https://developer.mozilla.org/zh-CN/docs/Web/CSS/border-block)               | 为两个块向边框设置 [`border-color`](https://developer.mozilla.org/zh-CN/docs/Web/CSS/border-color)、[`border-style`](https://developer.mozilla.org/zh-CN/docs/Web/CSS/border-style) 和 [`border-width`](https://developer.mozilla.org/zh-CN/docs/Web/CSS/border-width)。 |\n| [`border-block-color`](https://developer.mozilla.org/zh-CN/docs/Web/CSS/border-block-color)   | 为两个块向边框设置 `border-color`。                                                                                                                                                                                                                                      |\n| [`border-block-style`](https://developer.mozilla.org/zh-CN/docs/Web/CSS/border-block-style)   | 为两个块向边框设置 `border-style`。                                                                                                                                                                                                                                      |\n| [`border-block-width`](https://developer.mozilla.org/zh-CN/docs/Web/CSS/border-block-width)   | 为两个块向边框设置 `border-width`。                                                                                                                                                                                                                                      |\n| [`border-inline`](https://developer.mozilla.org/zh-CN/docs/Web/CSS/border-inline)             | 为两个行向边框设置 `border-color`、`border-style` 和 `border-width`。                                                                                                                                                                                                    |\n| [`border-inline-color`](https://developer.mozilla.org/zh-CN/docs/Web/CSS/border-inline-color) | 为两个行向边框设置 `border-color`。                                                                                                                                                                                                                                      |\n| [`border-inline-style`](https://developer.mozilla.org/zh-CN/docs/Web/CSS/border-inline-style) | 为两个行向边框设置 `border-style`。                                                                                                                                                                                                                                      |\n| [`border-inline-width`](https://developer.mozilla.org/zh-CN/docs/Web/CSS/border-inline-width) | 为两个行向边框设置 `border-width`。                                                                                                                                                                                                                                      |\n| [`margin-block`](https://developer.mozilla.org/zh-CN/docs/Web/CSS/margin-block)               | 设置所有块向外边距（[`margin`](https://developer.mozilla.org/zh-CN/docs/Web/CSS/margin)）。                                                                                                                                                                              |\n| [`margin-inline`](https://developer.mozilla.org/zh-CN/docs/Web/CSS/margin-inline)             | 设置所有行向外边距（`margin`）。                                                                                                                                                                                                                                         |\n| [`padding-block`](https://developer.mozilla.org/zh-CN/docs/Web/CSS/padding-block)             | 设置块向内边距（[`padding`](https://developer.mozilla.org/zh-CN/docs/Web/CSS/padding)）。                                                                                                                                                                                |\n| [`padding-inline`](https://developer.mozilla.org/zh-CN/docs/Web/CSS/padding-inline)           | 设置行向内边距（`padding`）。                                                                                                                                                                                                                                            |\n|                                                                                               |                                                                                                                                                                                                                                                                          |\n\n### 浮动和定位\n\n|逻辑属性或逻辑值|实体属性或实体值|\n|---|---|\n|[`float`](https://developer.mozilla.org/zh-CN/docs/Web/CSS/float): inline-start|[`float`](https://developer.mozilla.org/zh-CN/docs/Web/CSS/float): left|\n|[`float`](https://developer.mozilla.org/zh-CN/docs/Web/CSS/float): inline-end|[`float`](https://developer.mozilla.org/zh-CN/docs/Web/CSS/float): right|\n|[`clear`](https://developer.mozilla.org/zh-CN/docs/Web/CSS/clear): inline-start|[`clear`](https://developer.mozilla.org/zh-CN/docs/Web/CSS/clear): left|\n|[`clear`](https://developer.mozilla.org/zh-CN/docs/Web/CSS/clear): inline-end|[`clear`](https://developer.mozilla.org/zh-CN/docs/Web/CSS/clear): right|\n|[`inset-inline-start`](https://developer.mozilla.org/zh-CN/docs/Web/CSS/inset-inline-start)|[`left`](https://developer.mozilla.org/zh-CN/docs/Web/CSS/left)|\n|[`inset-inline-end`](https://developer.mozilla.org/zh-CN/docs/Web/CSS/inset-inline-end)|[`right`](https://developer.mozilla.org/zh-CN/docs/Web/CSS/right)|\n|[`inset-block-start`](https://developer.mozilla.org/zh-CN/docs/Web/CSS/inset-block-start)|[`top`](https://developer.mozilla.org/zh-CN/docs/Web/CSS/top)|\n|[`inset-block-end`](https://developer.mozilla.org/zh-CN/docs/Web/CSS/inset-block-end)|[`bottom`](https://developer.mozilla.org/zh-CN/docs/Web/CSS/bottom)|\n|[`text-align`](https://developer.mozilla.org/zh-CN/docs/Web/CSS/text-align): start|[`text-align`](https://developer.mozilla.org/zh-CN/docs/Web/CSS/text-align): left|\n|[`text-align`](https://developer.mozilla.org/zh-CN/docs/Web/CSS/text-align): end|[`text-align`](https://developer.mozilla.org/zh-CN/docs/Web/CSS/text-align): right|\n\n除了这些有对应关系的属性，另有可以处理块向和行向尺度的简写属性。除 [`inset`](https://developer.mozilla.org/zh-CN/docs/Web/CSS/inset) 属性外，这些属性没有与实体属性的对应关系。\n\n|逻辑属性|用途|\n|---|---|\n|[`inset-inline`](https://developer.mozilla.org/zh-CN/docs/Web/CSS/inset-inline)|为行向尺度同时设置上述两个偏移值。|\n|[`inset-block`](https://developer.mozilla.org/zh-CN/docs/Web/CSS/inset-block)|为块向尺度同时设置上述两个偏移值。|\n|[`inset`](https://developer.mozilla.org/zh-CN/docs/Web/CSS/inset)|同时设置四个偏移值，多值语法使用实体对应关系。|","src/content/blog/200-Learning/210-Programing/CSS逻辑属性与逻辑值.md","8f15cf7de5423fc7",{"html":187,"metadata":188},"\u003Cul>\n\u003Cli>\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_logical_properties_and_values/Basic_concepts_of_logical_properties_and_values\">CSS logical properties and values | MDN\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://web.dev/learn/css/logical-properties/\">Logical Properties - Learn CSS | web.dev\u003C/a>\u003C/li>\n\u003C/ul>\n\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/fw6/assets/main/toy_docs/20230813153919.png\" alt=\"image.png\">\u003C/p>\n\u003Cp>逻辑属性与逻辑值规范为 CSS 中的许多属性和值引入了相对于流的对应关系。\u003C/p>\n\u003Ch2 id=\"为何需要逻辑属性\">为何需要逻辑属性？\u003C/h2>\n\u003Cp>传统CSS根据实体尺度属性设置尺寸，例如一个块级盒子具有width、height，元素定位、内外边距、边框等按照方向划分为top、right、bottom、left等等。\u003C/p>\n\u003Cp>实体属性在更改了书写模式（writing-mode）情况下，就无法适用了。如：\n\u003Cimg src=\"https://raw.githubusercontent.com/fw6/assets/main/toy_docs/20230813155017.png\" alt=\"image.png\">\n把writing-mode改为vertical-rl就会变为：\n\u003Cimg src=\"https://raw.githubusercontent.com/fw6/assets/main/toy_docs/20230813155049.png\" alt=\"image.png\">\n宽高比显然是不符合的。\u003C/p>\n\u003Cp>如果使用逻辑属性（将width改为inline-size），就会变为：\n\u003Cimg src=\"https://raw.githubusercontent.com/fw6/assets/main/toy_docs/20230813155125.png\" alt=\"image.png\">\n这样无论何种书写模式都是正常的。\u003C/p>\n\u003Cp>逻辑属性和逻辑规范定义了这些实体值到逻辑值的对应关系，如：\u003C/p>\n\u003Cul>\n\u003Cli>left/right或top/bottom，对应逻辑值start和end\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"块向与行向尺度\">块向与行向尺度\u003C/h2>\n\u003Cp>在对齐元素时，诸如弹性盒和网格布局等新的 CSS 布局方法所用的概念是块向（\u003Ccode>block\u003C/code>）和行向（\u003Ccode>inline\u003C/code>），而非右侧（\u003Ccode>right\u003C/code>）和左侧（\u003Ccode>left\u003C/code>），或者上侧（\u003Ccode>top\u003C/code>）和下侧（\u003Ccode>bottom\u003C/code>）。\u003C/p>\n\u003Cp>行向是指在所用的书写模式中，一行文本延伸的方向。因此在从左到右横排的英文文档，或者从右到左横排的阿拉伯文文档中，行向为_水平方向_。若切换至竖排书写模式（如日文文档）则行向变为_竖直方向_，这是因为文本在这种书写模式中竖直延伸。\u003C/p>\n\u003Cp>块向是指另一方向，即块——例如段落——依次显示的方向。在英文和阿拉伯文中，块沿竖直方向依次排列，而块在任意竖排书写模式中沿水平方向依次排列。\u003C/p>\n\u003Cp>下图展示了横排书写模式中的行向和块向：\n\u003Cimg src=\"https://raw.githubusercontent.com/fw6/assets/main/toy_docs/20230813155413.png\" alt=\"image.png\">\u003C/p>\n\u003Cp>此图展示了竖排书写模式中的块向与行向：\n\u003Cimg src=\"https://raw.githubusercontent.com/fw6/assets/main/toy_docs/20230813155513.png\" alt=\"image.png\">\u003C/p>\n\u003Ch2 id=\"逻辑属性与实体属性对应关系\">逻辑属性与实体属性对应关系\u003C/h2>\n\u003Ch3 id=\"尺寸\">尺寸\u003C/h3>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003Ctable>\u003Cthead>\u003Ctr>\u003Cth>逻辑属性\u003C/th>\u003Cth>实体属性\u003C/th>\u003C/tr>\u003C/thead>\u003Ctbody>\u003Ctr>\u003Ctd>\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/inline-size\">\u003Ccode>inline-size\u003C/code>\u003C/a>\u003C/td>\u003Ctd>\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/width\">\u003Ccode>width\u003C/code>\u003C/a>\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/block-size\">\u003Ccode>block-size\u003C/code>\u003C/a>\u003C/td>\u003Ctd>\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/height\">\u003Ccode>height\u003C/code>\u003C/a>\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/min-inline-size\">\u003Ccode>min-inline-size\u003C/code>\u003C/a>\u003C/td>\u003Ctd>\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/min-width\">\u003Ccode>min-width\u003C/code>\u003C/a>\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/min-block-size\">\u003Ccode>min-block-size\u003C/code>\u003C/a>\u003C/td>\u003Ctd>\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/min-height\">\u003Ccode>min-height\u003C/code>\u003C/a>\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/max-inline-size\">\u003Ccode>max-inline-size\u003C/code>\u003C/a>\u003C/td>\u003Ctd>\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/max-width\">\u003Ccode>max-width\u003C/code>\u003C/a>\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>\u003Ccode>max-block-size\u003C/code>\u003C/td>\u003Ctd>\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/max-height\">\u003Ccode>max-height\u003C/code>\u003C/a>\u003C/td>\u003C/tr>\u003C/tbody>\u003C/table>\n\u003Ch3 id=\"外边距边框和内边距\">外边距、边框和内边距\u003C/h3>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003Ctable>\u003Cthead>\u003Ctr>\u003Cth>逻辑属性\u003C/th>\u003Cth>实体属性\u003C/th>\u003C/tr>\u003C/thead>\u003Ctbody>\u003Ctr>\u003Ctd>\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/border-block-end\">\u003Ccode>border-block-end\u003C/code>\u003C/a>\u003C/td>\u003Ctd>\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/border-bottom\">\u003Ccode>border-bottom\u003C/code>\u003C/a>\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/border-block-end-color\">\u003Ccode>border-block-end-color\u003C/code>\u003C/a>\u003C/td>\u003Ctd>\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/border-bottom-color\">\u003Ccode>border-bottom-color\u003C/code>\u003C/a>\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/border-block-end-style\">\u003Ccode>border-block-end-style\u003C/code>\u003C/a>\u003C/td>\u003Ctd>\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/border-bottom-style\">\u003Ccode>border-bottom-style\u003C/code>\u003C/a>\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/border-block-end-width\">\u003Ccode>border-block-end-width\u003C/code>\u003C/a>\u003C/td>\u003Ctd>\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/border-bottom-width\">\u003Ccode>border-bottom-width\u003C/code>\u003C/a>\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/border-block-start\">\u003Ccode>border-block-start\u003C/code>\u003C/a>\u003C/td>\u003Ctd>\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/border-top\">\u003Ccode>border-top\u003C/code>\u003C/a>\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/border-block-start-color\">\u003Ccode>border-block-start-color\u003C/code>\u003C/a>\u003C/td>\u003Ctd>\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/border-top-color\">\u003Ccode>border-top-color\u003C/code>\u003C/a>\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/border-block-start-style\">\u003Ccode>border-block-start-style\u003C/code>\u003C/a>\u003C/td>\u003Ctd>\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/border-top-style\">\u003Ccode>border-top-style\u003C/code>\u003C/a>\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/border-block-start-width\">\u003Ccode>border-block-start-width\u003C/code>\u003C/a>\u003C/td>\u003Ctd>\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/border-top-width\">\u003Ccode>border-top-width\u003C/code>\u003C/a>\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/border-inline-end\">\u003Ccode>border-inline-end\u003C/code>\u003C/a>\u003C/td>\u003Ctd>\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/border-right\">\u003Ccode>border-right\u003C/code>\u003C/a>\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/border-inline-end-color\">\u003Ccode>border-inline-end-color\u003C/code>\u003C/a>\u003C/td>\u003Ctd>\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/border-right-color\">\u003Ccode>border-right-color\u003C/code>\u003C/a>\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/border-inline-end-style\">\u003Ccode>border-inline-end-style\u003C/code>\u003C/a>\u003C/td>\u003Ctd>\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/border-right-style\">\u003Ccode>border-right-style\u003C/code>\u003C/a>\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/border-inline-end-width\">\u003Ccode>border-inline-end-width\u003C/code>\u003C/a>\u003C/td>\u003Ctd>\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/border-right-width\">\u003Ccode>border-right-width\u003C/code>\u003C/a>\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/border-inline-start\">\u003Ccode>border-inline-start\u003C/code>\u003C/a>\u003C/td>\u003Ctd>\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/border-left\">\u003Ccode>border-left\u003C/code>\u003C/a>\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/border-inline-start-color\">\u003Ccode>border-inline-start-color\u003C/code>\u003C/a>\u003C/td>\u003Ctd>\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/border-left-color\">\u003Ccode>border-left-color\u003C/code>\u003C/a>\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/border-inline-start-style\">\u003Ccode>border-inline-start-style\u003C/code>\u003C/a>\u003C/td>\u003Ctd>\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/border-left-style\">\u003Ccode>border-left-style\u003C/code>\u003C/a>\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/border-inline-start-width\">\u003Ccode>border-inline-start-width\u003C/code>\u003C/a>\u003C/td>\u003Ctd>\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/border-left-width\">\u003Ccode>border-left-width\u003C/code>\u003C/a>\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/border-start-start-radius\">\u003Ccode>border-start-start-radius\u003C/code>\u003C/a>\u003C/td>\u003Ctd>\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/border-top-left-radius\">\u003Ccode>border-top-left-radius\u003C/code>\u003C/a>\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/border-end-start-radius\">\u003Ccode>border-end-start-radius\u003C/code>\u003C/a>\u003C/td>\u003Ctd>\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/border-bottom-left-radius\">\u003Ccode>border-bottom-left-radius\u003C/code>\u003C/a>\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/border-start-end-radius\">\u003Ccode>border-start-end-radius\u003C/code>\u003C/a>\u003C/td>\u003Ctd>\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/border-top-right-radius\">\u003Ccode>border-top-right-radius\u003C/code>\u003C/a>\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/border-end-end-radius\">\u003Ccode>border-end-end-radius\u003C/code>\u003C/a>\u003C/td>\u003Ctd>\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/border-bottom-right-radius\">\u003Ccode>border-bottom-right-radius\u003C/code>\u003C/a>\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/margin-block-end\">\u003Ccode>margin-block-end\u003C/code>\u003C/a>\u003C/td>\u003Ctd>\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/margin-bottom\">\u003Ccode>margin-bottom\u003C/code>\u003C/a>\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/margin-block-start\">\u003Ccode>margin-block-start\u003C/code>\u003C/a>\u003C/td>\u003Ctd>\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/margin-top\">\u003Ccode>margin-top\u003C/code>\u003C/a>\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/margin-inline-end\">\u003Ccode>margin-inline-end\u003C/code>\u003C/a>\u003C/td>\u003Ctd>\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/margin-right\">\u003Ccode>margin-right\u003C/code>\u003C/a>\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/margin-inline-start\">\u003Ccode>margin-inline-start\u003C/code>\u003C/a>\u003C/td>\u003Ctd>\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/margin-left\">\u003Ccode>margin-left\u003C/code>\u003C/a>\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/padding-block-end\">\u003Ccode>padding-block-end\u003C/code>\u003C/a>\u003C/td>\u003Ctd>\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/padding-bottom\">\u003Ccode>padding-bottom\u003C/code>\u003C/a>\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/padding-block-start\">\u003Ccode>padding-block-start\u003C/code>\u003C/a>\u003C/td>\u003Ctd>\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/padding-top\">\u003Ccode>padding-top\u003C/code>\u003C/a>\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/padding-inline-end\">\u003Ccode>padding-inline-end\u003C/code>\u003C/a>\u003C/td>\u003Ctd>\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/padding-right\">\u003Ccode>padding-right\u003C/code>\u003C/a>\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/padding-inline-start\">\u003Ccode>padding-inline-start\u003C/code>\u003C/a>\u003C/td>\u003Ctd>\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/padding-left\">\u003Ccode>padding-left\u003C/code>\u003C/a>\u003C/td>\u003C/tr>\u003C/tbody>\u003C/table>\n\u003Cp>还有一些简写属性可以用于让我们同时设置盒子块向或者行向的两侧。这些简写属性没有等价的实体属性。\u003C/p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003Ctable>\u003Cthead>\u003Ctr>\u003Cth>属性\u003C/th>\u003Cth>用途\u003C/th>\u003C/tr>\u003C/thead>\u003Ctbody>\u003Ctr>\u003Ctd>\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/border-block\">\u003Ccode>border-block\u003C/code>\u003C/a>\u003C/td>\u003Ctd>为两个块向边框设置 \u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/border-color\">\u003Ccode>border-color\u003C/code>\u003C/a>、\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/border-style\">\u003Ccode>border-style\u003C/code>\u003C/a> 和 \u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/border-width\">\u003Ccode>border-width\u003C/code>\u003C/a>。\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/border-block-color\">\u003Ccode>border-block-color\u003C/code>\u003C/a>\u003C/td>\u003Ctd>为两个块向边框设置 \u003Ccode>border-color\u003C/code>。\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/border-block-style\">\u003Ccode>border-block-style\u003C/code>\u003C/a>\u003C/td>\u003Ctd>为两个块向边框设置 \u003Ccode>border-style\u003C/code>。\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/border-block-width\">\u003Ccode>border-block-width\u003C/code>\u003C/a>\u003C/td>\u003Ctd>为两个块向边框设置 \u003Ccode>border-width\u003C/code>。\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/border-inline\">\u003Ccode>border-inline\u003C/code>\u003C/a>\u003C/td>\u003Ctd>为两个行向边框设置 \u003Ccode>border-color\u003C/code>、\u003Ccode>border-style\u003C/code> 和 \u003Ccode>border-width\u003C/code>。\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/border-inline-color\">\u003Ccode>border-inline-color\u003C/code>\u003C/a>\u003C/td>\u003Ctd>为两个行向边框设置 \u003Ccode>border-color\u003C/code>。\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/border-inline-style\">\u003Ccode>border-inline-style\u003C/code>\u003C/a>\u003C/td>\u003Ctd>为两个行向边框设置 \u003Ccode>border-style\u003C/code>。\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/border-inline-width\">\u003Ccode>border-inline-width\u003C/code>\u003C/a>\u003C/td>\u003Ctd>为两个行向边框设置 \u003Ccode>border-width\u003C/code>。\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/margin-block\">\u003Ccode>margin-block\u003C/code>\u003C/a>\u003C/td>\u003Ctd>设置所有块向外边距（\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/margin\">\u003Ccode>margin\u003C/code>\u003C/a>）。\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/margin-inline\">\u003Ccode>margin-inline\u003C/code>\u003C/a>\u003C/td>\u003Ctd>设置所有行向外边距（\u003Ccode>margin\u003C/code>）。\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/padding-block\">\u003Ccode>padding-block\u003C/code>\u003C/a>\u003C/td>\u003Ctd>设置块向内边距（\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/padding\">\u003Ccode>padding\u003C/code>\u003C/a>）。\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/padding-inline\">\u003Ccode>padding-inline\u003C/code>\u003C/a>\u003C/td>\u003Ctd>设置行向内边距（\u003Ccode>padding\u003C/code>）。\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>\u003C/td>\u003Ctd>\u003C/td>\u003C/tr>\u003C/tbody>\u003C/table>\n\u003Ch3 id=\"浮动和定位\">浮动和定位\u003C/h3>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003Ctable>\u003Cthead>\u003Ctr>\u003Cth>逻辑属性或逻辑值\u003C/th>\u003Cth>实体属性或实体值\u003C/th>\u003C/tr>\u003C/thead>\u003Ctbody>\u003Ctr>\u003Ctd>\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/float\">\u003Ccode>float\u003C/code>\u003C/a>: inline-start\u003C/td>\u003Ctd>\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/float\">\u003Ccode>float\u003C/code>\u003C/a>: left\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/float\">\u003Ccode>float\u003C/code>\u003C/a>: inline-end\u003C/td>\u003Ctd>\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/float\">\u003Ccode>float\u003C/code>\u003C/a>: right\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/clear\">\u003Ccode>clear\u003C/code>\u003C/a>: inline-start\u003C/td>\u003Ctd>\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/clear\">\u003Ccode>clear\u003C/code>\u003C/a>: left\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/clear\">\u003Ccode>clear\u003C/code>\u003C/a>: inline-end\u003C/td>\u003Ctd>\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/clear\">\u003Ccode>clear\u003C/code>\u003C/a>: right\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/inset-inline-start\">\u003Ccode>inset-inline-start\u003C/code>\u003C/a>\u003C/td>\u003Ctd>\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/left\">\u003Ccode>left\u003C/code>\u003C/a>\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/inset-inline-end\">\u003Ccode>inset-inline-end\u003C/code>\u003C/a>\u003C/td>\u003Ctd>\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/right\">\u003Ccode>right\u003C/code>\u003C/a>\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/inset-block-start\">\u003Ccode>inset-block-start\u003C/code>\u003C/a>\u003C/td>\u003Ctd>\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/top\">\u003Ccode>top\u003C/code>\u003C/a>\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/inset-block-end\">\u003Ccode>inset-block-end\u003C/code>\u003C/a>\u003C/td>\u003Ctd>\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/bottom\">\u003Ccode>bottom\u003C/code>\u003C/a>\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/text-align\">\u003Ccode>text-align\u003C/code>\u003C/a>: start\u003C/td>\u003Ctd>\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/text-align\">\u003Ccode>text-align\u003C/code>\u003C/a>: left\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/text-align\">\u003Ccode>text-align\u003C/code>\u003C/a>: end\u003C/td>\u003Ctd>\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/text-align\">\u003Ccode>text-align\u003C/code>\u003C/a>: right\u003C/td>\u003C/tr>\u003C/tbody>\u003C/table>\n\u003Cp>除了这些有对应关系的属性，另有可以处理块向和行向尺度的简写属性。除 \u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/inset\">\u003Ccode>inset\u003C/code>\u003C/a> 属性外，这些属性没有与实体属性的对应关系。\u003C/p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003Ctable>\u003Cthead>\u003Ctr>\u003Cth>逻辑属性\u003C/th>\u003Cth>用途\u003C/th>\u003C/tr>\u003C/thead>\u003Ctbody>\u003Ctr>\u003Ctd>\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/inset-inline\">\u003Ccode>inset-inline\u003C/code>\u003C/a>\u003C/td>\u003Ctd>为行向尺度同时设置上述两个偏移值。\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/inset-block\">\u003Ccode>inset-block\u003C/code>\u003C/a>\u003C/td>\u003Ctd>为块向尺度同时设置上述两个偏移值。\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/inset\">\u003Ccode>inset\u003C/code>\u003C/a>\u003C/td>\u003Ctd>同时设置四个偏移值，多值语法使用实体对应关系。\u003C/td>\u003C/tr>\u003C/tbody>\u003C/table>",{"headings":189,"localImagePaths":204,"remoteImagePaths":205,"frontmatter":206,"imagePaths":211},[190,193,195,197,199,202],{"depth":31,"slug":191,"text":192},"为何需要逻辑属性","为何需要逻辑属性？",{"depth":31,"slug":194,"text":194},"块向与行向尺度",{"depth":31,"slug":196,"text":196},"逻辑属性与实体属性对应关系",{"depth":37,"slug":198,"text":198},"尺寸",{"depth":37,"slug":200,"text":201},"外边距边框和内边距","外边距、边框和内边距",{"depth":37,"slug":203,"text":203},"浮动和定位",[],[],{"title":177,"description":15,"pubDate":207,"heroImage":179,"date created":207,"date modified":208,"tags":209,"minutesRead":210},"2023-08-13 15:35","2023-08-13",[20,181,182],"5 min read",[],"200-Learning/210-Programing/CSS逻辑属性与逻辑值.md","200-learning/210-programing/how-to-do-great-work",{"id":213,"data":215,"body":220,"filePath":221,"digest":222,"rendered":223,"legacyId":234},{"title":216,"description":15,"draft":16,"pubDate":217,"heroImage":218,"tags":219},"How to do great work",["Date","2023-08-03T03:06:00.000Z"],"https://images.unsplash.com/photo-1689457538959-4d72ca84002b?crop=entropy&cs=srgb&fm=jpg&ixid=M3wzNjM5Nzd8MHwxfHJhbmRvbXx8fHx8fHx8fDE2OTEwMzIwMTF8&ixlib=rb-4.0.3&q=85",[20],"[How to Do Great Work](http://paulgraham.com/greatwork.html)\n\n![CleanShot 2023-07-20 at 09.05.50@2x.png](https://raw.githubusercontent.com/fw6/assets/main/toy_docs/CleanShot%202023-07-20%20at%2009.05.50%402x.png)","src/content/blog/200-Learning/210-Programing/How to do great work.md","46c2a6a31e6f30a6",{"html":224,"metadata":225},"\u003Cp>\u003Ca href=\"http://paulgraham.com/greatwork.html\">How to Do Great Work\u003C/a>\u003C/p>\n\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/fw6/assets/main/toy_docs/CleanShot%202023-07-20%20at%2009.05.50%402x.png\" alt=\"CleanShot 2023-07-20 at 09.05.50@2x.png\">\u003C/p>",{"headings":226,"localImagePaths":227,"remoteImagePaths":228,"frontmatter":229,"imagePaths":233},[],[],[],{"title":216,"description":15,"pubDate":230,"heroImage":218,"date created":230,"date modified":231,"draft":16,"tags":232,"minutesRead":79},"2023-08-03 11:06","2023-08-03",[20],[],"200-Learning/210-Programing/How to do great work.md","200-learning/210-programing/debugging-by-thinking",{"id":235,"data":237,"body":243,"filePath":244,"digest":245,"rendered":246,"legacyId":270},{"title":238,"description":15,"pubDate":239,"heroImage":240,"tags":241},"Debugging by Thinking",["Date","2023-08-06T03:27:00.000Z"],"https://images.unsplash.com/photo-1582845512747-e42001c95638?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1200&q=80",[133,242],"Programming","对该分享的记录：[Debugging Software, June 2023](https://blog.isquaredsoftware.com/presentations/2023-06-debugging-js/?slideIndex=0&stepIndex=0)\n\n\n## WHAT: 什么是Debug？\n\n:::tldr\ndebugging is the process of finding and resolving _bugs_ (defects or problems that prevent correct operation) within computer programs, software, or systems.\n—— Wikipedia\n:::\n\n**Why is it broken, and how do we fix it?**\n\nDebug是关于「为啥出问题，以及我们如何修复」的过程。\n\n## WHY: 为何Debug能力如此重要？\n\n编程不只是写代码，还包括：\n1. Planning/design\n2. Communication\n3. Review\n4. Figuring out why something isn't working\n\n开发者花费大量时间Debug和修复代码。\n\nDebug如此重要，但很多开发者却对此不熟悉，为啥？\n1. 学校不教\n2. 大量知识来自经验\n3. 边走边学的艰难的路\n\n## HOW: 如何Debug？\n\nDebug的一些核心原则:\n1. 每个问题都有根源（但可能并不容易，比如会遇到环境复杂、难以复现等问题）\n2. 理解系统的预期行为很重要（系统没按照预期执行就是bug）\n3. 能复现是关键（用于确认问题、以及修复后的验证）\n4. 有计划的debug（不要漫无目的，一次只改一处，逐渐缩小范围）\n5. 错误信息非常有用（包含where、what、和when等信息）\n\n常用的Debug步骤：\n1. 理解问题描述\n2. 复现问题\n   使用最小化的产生问题的示例场景收窄复现的问题（降低复杂度！）\n3. 如果可能的话，找到根本问题（假设、测试、实验）\n4. 确定解决问题的最佳方案\n   - 尽量修复根本问题，而不是现象\n   - 确定约束条件（严重性、代码要求）\n5. 修复问题（添加测试或错误处理，确保不会再发生）\n6. 完善文档，尽可能多地记录下来\n\n## TIPS\n\n1. 🔧善用工具\n2. 📦深入底层实现（必要时翻源码，如三方库）\n3. 😨别怕（逐步分解问题）\n4. 🧘注意劳逸结合（坚持、专注、适当休息！）","src/content/blog/200-Learning/210-Programing/Debugging by Thinking.md","be31a5352c56a64c",{"html":247,"metadata":248},"\u003Cp>对该分享的记录：\u003Ca href=\"https://blog.isquaredsoftware.com/presentations/2023-06-debugging-js/?slideIndex=0&#x26;stepIndex=0\">Debugging Software, June 2023\u003C/a>\u003C/p>\n\u003Ch2 id=\"what-什么是debug\">WHAT: 什么是Debug？\u003C/h2>\n\u003Caside class=\"callout callout-abstract\">\u003Cdiv class=\"callout-indicator\">\u003Cdiv class=\"callout-hint\">\u003Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"callout-hint-abstract\">\u003Crect x=\"8\" y=\"2\" width=\"8\" height=\"4\" rx=\"1\" ry=\"1\">\u003C/rect>\u003Cpath d=\"M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2\">\u003C/path>\u003Cpath d=\"M12 11h4\">\u003C/path>\u003Cpath d=\"M12 16h4\">\u003C/path>\u003Cpath d=\"M8 11h.01\">\u003C/path>\u003Cpath d=\"M8 16h.01\">\u003C/path>\u003C/svg>\u003C/div>\u003Cdiv class=\"callout-title\">Abstract\u003C/div>\u003C/div>\u003Cdiv class=\"callout-content\">\u003Cp>debugging is the process of finding and resolving \u003Cem>bugs\u003C/em> (defects or problems that prevent correct operation) within computer programs, software, or systems.\n—— Wikipedia\u003C/p>\u003C/div>\u003C/aside>\n\u003Cp>\u003Cstrong>Why is it broken, and how do we fix it?\u003C/strong>\u003C/p>\n\u003Cp>Debug是关于「为啥出问题，以及我们如何修复」的过程。\u003C/p>\n\u003Ch2 id=\"why-为何debug能力如此重要\">WHY: 为何Debug能力如此重要？\u003C/h2>\n\u003Cp>编程不只是写代码，还包括：\u003C/p>\n\u003Col>\n\u003Cli>Planning/design\u003C/li>\n\u003Cli>Communication\u003C/li>\n\u003Cli>Review\u003C/li>\n\u003Cli>Figuring out why something isn’t working\u003C/li>\n\u003C/ol>\n\u003Cp>开发者花费大量时间Debug和修复代码。\u003C/p>\n\u003Cp>Debug如此重要，但很多开发者却对此不熟悉，为啥？\u003C/p>\n\u003Col>\n\u003Cli>学校不教\u003C/li>\n\u003Cli>大量知识来自经验\u003C/li>\n\u003Cli>边走边学的艰难的路\u003C/li>\n\u003C/ol>\n\u003Ch2 id=\"how-如何debug\">HOW: 如何Debug？\u003C/h2>\n\u003Cp>Debug的一些核心原则:\u003C/p>\n\u003Col>\n\u003Cli>每个问题都有根源（但可能并不容易，比如会遇到环境复杂、难以复现等问题）\u003C/li>\n\u003Cli>理解系统的预期行为很重要（系统没按照预期执行就是bug）\u003C/li>\n\u003Cli>能复现是关键（用于确认问题、以及修复后的验证）\u003C/li>\n\u003Cli>有计划的debug（不要漫无目的，一次只改一处，逐渐缩小范围）\u003C/li>\n\u003Cli>错误信息非常有用（包含where、what、和when等信息）\u003C/li>\n\u003C/ol>\n\u003Cp>常用的Debug步骤：\u003C/p>\n\u003Col>\n\u003Cli>理解问题描述\u003C/li>\n\u003Cli>复现问题\n使用最小化的产生问题的示例场景收窄复现的问题（降低复杂度！）\u003C/li>\n\u003Cli>如果可能的话，找到根本问题（假设、测试、实验）\u003C/li>\n\u003Cli>确定解决问题的最佳方案\n\u003Cul>\n\u003Cli>尽量修复根本问题，而不是现象\u003C/li>\n\u003Cli>确定约束条件（严重性、代码要求）\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>修复问题（添加测试或错误处理，确保不会再发生）\u003C/li>\n\u003Cli>完善文档，尽可能多地记录下来\u003C/li>\n\u003C/ol>\n\u003Ch2 id=\"tips\">TIPS\u003C/h2>\n\u003Col>\n\u003Cli>\u003Cspan role=\"img\" aria-label=\"wrench\">🔧\u003C/span>善用工具\u003C/li>\n\u003Cli>\u003Cspan role=\"img\" aria-label=\"package\">📦\u003C/span>深入底层实现（必要时翻源码，如三方库）\u003C/li>\n\u003Cli>\u003Cspan role=\"img\" aria-label=\"fearful face\">😨\u003C/span>别怕（逐步分解问题）\u003C/li>\n\u003Cli>\u003Cspan role=\"img\" aria-label=\"person in lotus position\">🧘\u003C/span>注意劳逸结合（坚持、专注、适当休息！）\u003C/li>\n\u003C/ol>",{"headings":249,"localImagePaths":262,"remoteImagePaths":263,"frontmatter":264,"imagePaths":269},[250,253,256,259],{"depth":31,"slug":251,"text":252},"what-什么是debug","WHAT: 什么是Debug？",{"depth":31,"slug":254,"text":255},"why-为何debug能力如此重要","WHY: 为何Debug能力如此重要？",{"depth":31,"slug":257,"text":258},"how-如何debug","HOW: 如何Debug？",{"depth":31,"slug":260,"text":261},"tips","TIPS",[],[],{"title":238,"description":15,"pubDate":265,"heroImage":240,"date created":266,"date modified":267,"tags":268,"minutesRead":148},"2023-08-06 11:27","2023-08-06 11:26","2023-08-06",[133,242],[],"200-Learning/210-Programing/Debugging by Thinking.md","200-learning/210-programing/optimize-for-core-web-vitals",{"id":271,"data":273,"body":278,"filePath":279,"digest":280,"rendered":281,"legacyId":307},{"title":274,"description":15,"pubDate":275,"heroImage":276,"tags":277},"Optimize for Core Web Vitals",["Date","2023-08-13T09:43:00.000Z"],"https://images.unsplash.com/photo-1539186607619-df476afe6ff1?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1200&q=80",[20],"> Beauty is not in the face; beauty is a light in the heart.\n> — \u003Ccite>Kahlil Gibran\u003C/cite>\n\n- [Core Web Vitals](https://web.dev/learn-core-web-vitals/)\n- [Optimize Largest Contentful Paint](https://web.dev/optimize-lcp/)\n- [Optimize First Input Delay](https://web.dev/optimize-fid/)\n- [Optimize Cumulative Layout Shift](https://web.dev/optimize-cls/)\n- [Optimize for Core Web Vitals - YouTube](https://www.youtube.com/watch?v=AQqFZ5t8uNc&t=1073s)\n\n## 优化LCP\n\n最大内容绘制(LCP) 是核心 Web 指标中的一项指标，用于测量可视区域中最大内容元素变为可见的时间点。该项指标可用于确定页面主要内容在屏幕上完成渲染的时间点。\n\n![image.png](https://raw.githubusercontent.com/fw6/assets/main/toy_docs/20230813204629.png)\n\n导致 LCP 不佳的最常见原因是：\n\n- 缓慢的服务器响应速度\n- 阻塞渲染的 JavaScript 和 CSS\n- 缓慢的资源加载速度\n- 客户端渲染\n\n### 缓慢的服务器响应速度\n\n改进TTFB：\n- 优化服务器基础设施\n- CDN\n- 缓存资产\n  反向代理缓存、云服务缓存服务、CDN内容缓存\n- 优先使用缓存提供HTML页面\n  service worker\n- 尽早建立第三方连接\n  `rel=\"preconnect\"`或`rel=\"dns-prefetch\"`\n- 使用签名交换技术（？[Signed Exchanges (SXGs)](https://web.dev/signed-exchanges/)）\n\n### 阻塞渲染的JavaScript和CSS\n\n优化CSS：\n- 削减CSS\n- 延迟加载非关键CSS\n  [参考](https://www.filamentgroup.com/lab/load-css-simpler/)`\u003Clink rel=\"stylesheet\" href=\"/path/to/my.css\" media=\"print\" onload=\"this.media='all'\">`\n- 内联关键CSS\n  可减少请求\n\n优化JavaScript：\n- 削减压缩JavaScript\n- 延迟加载未使用的JavaScript\n  添加属性：`defer`、`async`\n- 最大限度减少未使用的polyfill\n\n### 缓慢的资源加载速度\n\n优化和压缩图像：\n- 首先考虑不使用图像\n- 将图像转为更新的格式（JPEG2000、JPEG XR或WebP）\n- 使用响应式图像\n- 考虑使用CDN\n- 添加`loading=\"lazy\"`属性\n\n预加载重要资源：\n- `rel=\"preload\"`\n\n压缩文本文件：\n- 检查服务器是否已自动压缩文件\n- 优先使用Brotli算法，能提供更好的压缩率\n- 构建中提前压缩资产，减少服务器开销\n\n自适应服务：\n- 基于网络质量的自适应服务，针对不同设备与连接使用不同资源\n\n使用Service Worker缓存资产\n\n## 优化FID\n\n首次输入延迟 (FID) 是核心 Web 指标中的一项指标，可捕获用户对网站交互性和响应度的第一印象。该项指标测量从用户第一次与您的网站交互直到浏览器实际能够对交互作出响应的时间。FID 是一项实际指标，无法在实验室环境中进行模拟。该项指标需要**真实的用户交互**才能测量响应延迟。\n\n![image.png](https://raw.githubusercontent.com/fw6/assets/main/toy_docs/20230813210924.png)\n\n\n糟糕的 FID 主要是由**繁重的 JavaScript 执行**导致的。优化网页上 JavaScript 的解析、编译和执行方式将直接降低 FID。\n\n1. 将长时间运行的代码拆解为更小的异步任务\n2. 渐进式加载代码和功能\n3. 减少级联数据获取的依赖\n4. 减小客户端需要处理数据的大小\n5. 延迟加载第三方代码（如ads、analysis等服务）\n6. 将非用户界面操作的繁重工作，放到Web worker\n7. 在关键渲染路径或首屏渲染不需要的JavaScript始终延迟加载\n8. 代码分割 + 动态导入\n\n## 优化CLS\n\n累积布局偏移 (CLS)：核心 Web 指标中的一项指标，通过计算未在用户输入 500 毫秒内发生的布局偏移的偏移分数总和来测量内容的不稳定性。该项指标查看可视区域中可见内容的位移量以及受影响元素的位移距离。\n\n![image.png](https://raw.githubusercontent.com/fw6/assets/main/toy_docs/20230813212345.png)\n\nCLS 较差的最常见原因为：\n- 无尺寸的图像\n- 无尺寸的广告、嵌入和 iframe\n- 动态注入的内容\n- 导致不可见文本闪烁 (FOIT)/无样式文本闪烁 (FOUT) 的网络字体\n- 在更新 DOM 之前等待网络响应的操作","src/content/blog/200-Learning/210-Programing/Optimize for Core Web Vitals.md","5efe7084aee88886",{"html":282,"metadata":283},"\u003Cblockquote>\n\u003Cp>Beauty is not in the face; beauty is a light in the heart.\n— \u003Ccite>Kahlil Gibran\u003C/cite>\u003C/p>\n\u003C/blockquote>\n\u003Cul>\n\u003Cli>\u003Ca href=\"https://web.dev/learn-core-web-vitals/\">Core Web Vitals\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://web.dev/optimize-lcp/\">Optimize Largest Contentful Paint\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://web.dev/optimize-fid/\">Optimize First Input Delay\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://web.dev/optimize-cls/\">Optimize Cumulative Layout Shift\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://www.youtube.com/watch?v=AQqFZ5t8uNc&#x26;t=1073s\">Optimize for Core Web Vitals - YouTube\u003C/a>\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"优化lcp\">优化LCP\u003C/h2>\n\u003Cp>最大内容绘制(LCP) 是核心 Web 指标中的一项指标，用于测量可视区域中最大内容元素变为可见的时间点。该项指标可用于确定页面主要内容在屏幕上完成渲染的时间点。\u003C/p>\n\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/fw6/assets/main/toy_docs/20230813204629.png\" alt=\"image.png\">\u003C/p>\n\u003Cp>导致 LCP 不佳的最常见原因是：\u003C/p>\n\u003Cul>\n\u003Cli>缓慢的服务器响应速度\u003C/li>\n\u003Cli>阻塞渲染的 JavaScript 和 CSS\u003C/li>\n\u003Cli>缓慢的资源加载速度\u003C/li>\n\u003Cli>客户端渲染\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"缓慢的服务器响应速度\">缓慢的服务器响应速度\u003C/h3>\n\u003Cp>改进TTFB：\u003C/p>\n\u003Cul>\n\u003Cli>优化服务器基础设施\u003C/li>\n\u003Cli>CDN\u003C/li>\n\u003Cli>缓存资产\n反向代理缓存、云服务缓存服务、CDN内容缓存\u003C/li>\n\u003Cli>优先使用缓存提供HTML页面\nservice worker\u003C/li>\n\u003Cli>尽早建立第三方连接\n\u003Ccode>rel=\"preconnect\"\u003C/code>或\u003Ccode>rel=\"dns-prefetch\"\u003C/code>\u003C/li>\n\u003Cli>使用签名交换技术（？\u003Ca href=\"https://web.dev/signed-exchanges/\">Signed Exchanges (SXGs)\u003C/a>）\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"阻塞渲染的javascript和css\">阻塞渲染的JavaScript和CSS\u003C/h3>\n\u003Cp>优化CSS：\u003C/p>\n\u003Cul>\n\u003Cli>削减CSS\u003C/li>\n\u003Cli>延迟加载非关键CSS\n\u003Ca href=\"https://www.filamentgroup.com/lab/load-css-simpler/\">参考\u003C/a>\u003Ccode>&#x3C;link rel=\"stylesheet\" href=\"/path/to/my.css\" media=\"print\" onload=\"this.media='all'\">\u003C/code>\u003C/li>\n\u003Cli>内联关键CSS\n可减少请求\u003C/li>\n\u003C/ul>\n\u003Cp>优化JavaScript：\u003C/p>\n\u003Cul>\n\u003Cli>削减压缩JavaScript\u003C/li>\n\u003Cli>延迟加载未使用的JavaScript\n添加属性：\u003Ccode>defer\u003C/code>、\u003Ccode>async\u003C/code>\u003C/li>\n\u003Cli>最大限度减少未使用的polyfill\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"缓慢的资源加载速度\">缓慢的资源加载速度\u003C/h3>\n\u003Cp>优化和压缩图像：\u003C/p>\n\u003Cul>\n\u003Cli>首先考虑不使用图像\u003C/li>\n\u003Cli>将图像转为更新的格式（JPEG2000、JPEG XR或WebP）\u003C/li>\n\u003Cli>使用响应式图像\u003C/li>\n\u003Cli>考虑使用CDN\u003C/li>\n\u003Cli>添加\u003Ccode>loading=\"lazy\"\u003C/code>属性\u003C/li>\n\u003C/ul>\n\u003Cp>预加载重要资源：\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ccode>rel=\"preload\"\u003C/code>\u003C/li>\n\u003C/ul>\n\u003Cp>压缩文本文件：\u003C/p>\n\u003Cul>\n\u003Cli>检查服务器是否已自动压缩文件\u003C/li>\n\u003Cli>优先使用Brotli算法，能提供更好的压缩率\u003C/li>\n\u003Cli>构建中提前压缩资产，减少服务器开销\u003C/li>\n\u003C/ul>\n\u003Cp>自适应服务：\u003C/p>\n\u003Cul>\n\u003Cli>基于网络质量的自适应服务，针对不同设备与连接使用不同资源\u003C/li>\n\u003C/ul>\n\u003Cp>使用Service Worker缓存资产\u003C/p>\n\u003Ch2 id=\"优化fid\">优化FID\u003C/h2>\n\u003Cp>首次输入延迟 (FID) 是核心 Web 指标中的一项指标，可捕获用户对网站交互性和响应度的第一印象。该项指标测量从用户第一次与您的网站交互直到浏览器实际能够对交互作出响应的时间。FID 是一项实际指标，无法在实验室环境中进行模拟。该项指标需要\u003Cstrong>真实的用户交互\u003C/strong>才能测量响应延迟。\u003C/p>\n\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/fw6/assets/main/toy_docs/20230813210924.png\" alt=\"image.png\">\u003C/p>\n\u003Cp>糟糕的 FID 主要是由\u003Cstrong>繁重的 JavaScript 执行\u003C/strong>导致的。优化网页上 JavaScript 的解析、编译和执行方式将直接降低 FID。\u003C/p>\n\u003Col>\n\u003Cli>将长时间运行的代码拆解为更小的异步任务\u003C/li>\n\u003Cli>渐进式加载代码和功能\u003C/li>\n\u003Cli>减少级联数据获取的依赖\u003C/li>\n\u003Cli>减小客户端需要处理数据的大小\u003C/li>\n\u003Cli>延迟加载第三方代码（如ads、analysis等服务）\u003C/li>\n\u003Cli>将非用户界面操作的繁重工作，放到Web worker\u003C/li>\n\u003Cli>在关键渲染路径或首屏渲染不需要的JavaScript始终延迟加载\u003C/li>\n\u003Cli>代码分割 + 动态导入\u003C/li>\n\u003C/ol>\n\u003Ch2 id=\"优化cls\">优化CLS\u003C/h2>\n\u003Cp>累积布局偏移 (CLS)：核心 Web 指标中的一项指标，通过计算未在用户输入 500 毫秒内发生的布局偏移的偏移分数总和来测量内容的不稳定性。该项指标查看可视区域中可见内容的位移量以及受影响元素的位移距离。\u003C/p>\n\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/fw6/assets/main/toy_docs/20230813212345.png\" alt=\"image.png\">\u003C/p>\n\u003Cp>CLS 较差的最常见原因为：\u003C/p>\n\u003Cul>\n\u003Cli>无尺寸的图像\u003C/li>\n\u003Cli>无尺寸的广告、嵌入和 iframe\u003C/li>\n\u003Cli>动态注入的内容\u003C/li>\n\u003Cli>导致不可见文本闪烁 (FOIT)/无样式文本闪烁 (FOUT) 的网络字体\u003C/li>\n\u003Cli>在更新 DOM 之前等待网络响应的操作\u003C/li>\n\u003C/ul>",{"headings":284,"localImagePaths":301,"remoteImagePaths":302,"frontmatter":303,"imagePaths":306},[285,288,290,293,295,298],{"depth":31,"slug":286,"text":287},"优化lcp","优化LCP",{"depth":37,"slug":289,"text":289},"缓慢的服务器响应速度",{"depth":37,"slug":291,"text":292},"阻塞渲染的javascript和css","阻塞渲染的JavaScript和CSS",{"depth":37,"slug":294,"text":294},"缓慢的资源加载速度",{"depth":31,"slug":296,"text":297},"优化fid","优化FID",{"depth":31,"slug":299,"text":300},"优化cls","优化CLS",[],[],{"title":274,"description":15,"pubDate":304,"heroImage":276,"date created":304,"date modified":208,"tags":305,"minutesRead":210},"2023-08-13 17:43",[20],[],"200-Learning/210-Programing/Optimize for Core Web Vitals.md","200-learning/210-programing/javascript的词法文法",{"id":308,"data":310,"body":316,"filePath":317,"digest":318,"rendered":319,"legacyId":378},{"title":311,"description":15,"pubDate":312,"heroImage":313,"tags":314},"JavaScript的词法文法",["Date","2023-07-19T13:41:00.000Z"],"https://raw.githubusercontent.com/fw6/assets/main/toy_docs/20230719215441.png",[133,315,242],"JavaScript","## TOC\n\nECMAScript 源码文本会被从左到右扫描，并被转换为一系列的输入元素，包括 token、控制符、行终止符、注释和空白符。ECMAScript 定义了一些关键字、字面量以及行尾分号补全的规则。\n\n### 格式控制符\n\n格式控制符用于控制对源码文本的解释，但是并不会显示出来。\n\n| 码点   | 名称                  | 缩写     | 说明 |\n| ------ | --------------------- | -------- | ---- |\n| U+200C | zero width non-joiner | \\\u003CZWNJ\\> |  放置在一些经常会被当成连字的字符之间，用于将它们分别以独立形式显示（[Wikipedia](http://en.wikipedia.org/wiki/Zero-width_non-joiner)）    |\n| U+200D | zero width joiner | \\\u003CZWJ\\> |   放置在一些通常不会被标记为连字的字符之间，用于将这些字符以连字形式显示（[Wikipedia](http://en.wikipedia.org/wiki/Zero-width_joiner)）   |\n| U+FEFF       |      Byte order mark                 |     \\\u003CBOM\\>     | 在脚本开头使用，除了将脚本标记为 Unicode 格式以外，还用来标记文本的字节流方向（[Wikipedia](http://en.wikipedia.org/wiki/Byte_order_mark)）     |\n在JavaScript源码中，`\u003CZWNJ>`和`\u003CZWJ>`被视为标识符部分，而（当不在文本开头时也被称为零宽不间断空格）被视为空白符。\n\n\n## 空白符\n\n空白符提升了源码的可读性，并将标记 (tokens) 区分开。这些符号通常不影响源码的功能。通常可以用[压缩器](http://en.wikipedia.org/wiki/Minification_%28programming%29)来移除源码中的空白，减少数据传输量。\n\n| 代码点 | 名称              | 缩写     | 说明                                                                                                        | 转义序列 |\n| ------ | ----------------- | -------- | ----------------------------------------------------------------------------------------------------------- | -------- |\n| U+0009 | 制表符            | `\u003CHT>`   | 水平制表符                                                                                                  | \\t       |\n| U+000B | 垂直制表符        | `\u003CVT>`   | 垂直制表符                                                                                                  | \\v       |\n| U+000C | 分页符            | `\u003CFF>`   | 分页符（[Wikipedia](http://en.wikipedia.org/wiki/Page_break#Form_feed)）                                    | \\f       |\n| U+0020 | 空格              | `\u003CSP>`   | 空格                                                                                                        |          |\n| U+00A0 | 无间断空格        | `\u003CNBSP>` | 在该空格处不会换行                                                                                          |          |\n| Others | 其他 Unicode 空白 | `\u003CUSP>`  | [Wikipedia 上对 Unicode 空白的介绍](http://en.wikipedia.org/wiki/Space_%28punctuation%29#Spaces_in_Unicode) |          |\n\n\n## 行终止符\n\n除了空白符之外，行终止符也可以提高源码的可读性。不同的是，行终止符可以影响 JavaScript 代码的执行。行终止符也会影响[自动分号补全](#自动分号补全)的执行。在正则表达式中，行终止符会被 `\\s` 匹配。\n\n在 ECMAScript 中，只有下列 Unicode 字符会被当成行终止符，其他的行终止符（比如 Next Line、NEL、U+0085 等）都会被当成空白符。\n\n| 编码   | 名称     | 缩写   | 说明                                              | 转义序列 |\n| ------ | -------- | ------ | ------------------------------------------------- | -------- |\n| U+000A | 换行符   | `\u003CLF>` | 在 UNIX 系统中起新行                              | \\n       |\n| U+000D | 回车符   | `\u003CCR>` | 在 Commodore 和早期的 Mac 系统中起新行            | \\r       |\n| U+2028 | 行分隔符 | `\u003CLS>` | [Wikipedia](http://en.wikipedia.org/wiki/Newline) |          |\n| U+2029 | 段分隔符 | `\u003CPS>` | [Wikipedia](http://en.wikipedia.org/wiki/Newline) |          |\n\n## 注释\n\n注释用来在源码中增加提示、笔记、建议、警告等信息，可以帮助阅读和理解源码。在调试时，可以用来将一段代码屏蔽掉，防止其运行；这也是一个有价值的调试工具。\n\n在 JavaScript 中，有两种常见的添加注释的方法：行注释和块注释。另外，也有一种特殊的 hashbang 注释语法。\n\n### 行注释\n\n是`//` 风格的注释，会将该行中符号以后的文本都视为注释：\n```js\nfunction comment() {\n  // 这是单行注释\n  console.log(\"Hello world!\");\n}\ncomment();\n```\n\n### 块注释\n是 `/* */` 风格的注释，这种方式更加灵活，可以在单行内使用多行注释，也可以用来实现多行注释，也可以用于行内注释：\n```js\nfunction comment(x) {\n  /* 这是单行注释 */\n  \n  /* \n    这是多行注释， \n    注意在写完注释前无需终止注释 \n  */\n  \n  console.log(\"Hello \" + x /* 引入 x 的值 */ + \" !\");\n}\ncomment(\"world\");\n```\n\n### Hashbang注释\n\n**Hashbang 注释**是一种特殊的注释语法，其行为与单行注释（`//`）完全一样，只是它以 `#!` 开头，并且**只在脚本或模块的最开始处有效**。注意，`#!` 标志之前不能有任何空白字符。注释由 `#!` 之后的所有字符组成直到第一行的末尾；只允许有一条这样的注释。JavaScript 中的 hashbang 注释类似于 [Unix 中的 shebang](https://zh.wikipedia.org/wiki/Shebang)，它提供了一个特定的 JavaScript 解释器的路径，你想用它来执行这个脚本。在 hashbang 注释标准化之前，它已经在非浏览器主机（如 Node.js）中得到了事实上的实现，在那里，它在被传递给引擎之前被从源文本中剥离。示例如下：\n```js\n#!/usr/bin/env node\nconsole.log(\"Hello world\");\n```\n\n下面是`zx`JavaScript解释器的示例：\n```js\n#!/usr/bin/env zx\nawait $`cat package.json | grep name`\n```\n\n## 关键字\n\n### [ECMAScript 6 中的保留关键字](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Lexical_grammar#ecmascript_6_%E4%B8%AD%E7%9A%84%E4%BF%9D%E7%95%99%E5%85%B3%E9%94%AE%E5%AD%97)\n\n- [`break`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/break)\n- [`case`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/switch)\n- [`catch`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/try...catch)\n- [`class`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/class)\n- [`const`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/const)\n- [`continue`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/continue)\n- [`debugger`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/debugger)\n- [`default` (en-US)](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/switch \"Currently only available in English (US)\")\n- [`delete`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/delete)\n- [`do`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/do...while)\n- [`else`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/if...else)\n- [`export`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/export)\n- [`extends`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/class)\n- [`finally`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/try...catch)\n- [`for`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/for)\n- [`function`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/function)\n- [`if`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/if...else)\n- [`import`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/import)\n- [`in`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/in)\n- [`instanceof`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/instanceof)\n- [`new`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/new)\n- [`return`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/return)\n- [`super`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/super)\n- [`switch`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/switch)\n- [`this`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/this)\n- [`throw`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/throw)\n- [`try`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/try...catch)\n- [`typeof`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/typeof)\n- [`var`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/var)\n- [`void`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/void)\n- [`while`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/while)\n- [`with`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/with)\n- [`yield`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/yield)\n\n### [未来保留关键字](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Lexical_grammar#%E6%9C%AA%E6%9D%A5%E4%BF%9D%E7%95%99%E5%85%B3%E9%94%AE%E5%AD%97)\n\n在 ECMAScript 规格中，这些关键字被当成关键字保留。目前它们没有特殊功能，但是在未来某个时间可能会加上。所以这些关键字不能当成标识符使用。这些关键字在严格模式和非严格模式中均不能使用。\n\n- `enum`\n\n以下关键字只在严格模式中被当成保留关键字：\n\n- `implements`\n- `interface`\n- [`let`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/let)\n- `package`\n- `private`\n- `protected`\n- `public`\n- `static`\n\n以下关键字只在模块代码中被当成保留关键字：\n\n- `await`\n\n#### 之前标准中的保留关键字\n\n这里是之前版本中的 ECMAScript（1 到 3）中的保留关键字：\n\n- `abstract`\n- `boolean`\n- `byte`\n- `char`\n- `double`\n- `final`\n- `float`\n- `goto`\n- `int`\n- `long`\n- `native`\n- `short`\n- `synchronized`\n- `transient`\n- `volatile`\n\n另外，字面量 `null`、`true`和`false`同样不能被当成标识使用。\n保留字是仅针对标识符（Identifier）的文法定义而言的（而不是标识符名（IdentifierName）的文法定义）。\n\n```js\n// 标识符用于函数声明式和函数表达式。\nfunction import() {} // Illegal.\n```\n\n## 字面量\n\n### 空字面量\n\n```js\nnull\n```\n\n### 布尔字面量\n```js\ntrue\nfalse\n```\n\n### 数值字面量\n\n```js\n// 十进制\n\n1234567890\n42\n// 谨慎使用 0 开头的数值：\n0888 // 转换为十进制 888\n0777 // 转换为八进制 777，十进制 511\n\n// 二进制\nvar FLT_SIGNBIT  = 0b10000000000000000000000000000000; // 2147483648\nvar FLT_EXPONENT = 0b01111111100000000000000000000000; // 2139095040\nvar FLT_MANTISSA = 0B00000000011111111111111111111111; // 8388607\n\n// 八进制\nvar n = 0O755; // 493\nvar m = 0o644; // 420\n\n// 十六进制\n0xFFFFFFFFFFFFFFFFF // 295147905179352830000\n0x123456789ABCDEF   // 81985529216486900\n0XA                 // 10\n```\n\n:::warning\n十进制数值字面量可以以 0 开头，但是如果 0 以后的最高位比 8 小，数值将会被认为是八进制而不会报错。\n:::\n\n### 对象字面量\n\n```js\nvar o = { a: \"foo\", b: \"bar\", c: 42 };\n\n// ES6 中的简略表示方法\nvar a = \"foo\", b = \"bar\", c = 42;\nvar o = {a, b, c};\n// 不需要这样\nvar o = { a: a, b: b, c: c };\n```\n\n### 数组字面量\n\n```js\n[1954, 1974, 1990, 2014]\n```\n\n### 字符串字面量\n\n```js\n'foo'\n'bar'\n```\n\n十六进制转义序列\n```js\n\"\\xA9\" // \"©\"\n```\n\nUnicode转义序列\n```js\n\"\\u00A9\" // \"©\"\n```\n\nUnicode编码转义\n```js\n\"\\u{2F804}\";\n\n// 使用单纯 Unicode 转义\n\"\\uD87E\\uDC04\";\n```\n\n:::info\nECMAScript 6 新增特性。使用 Unicode 编码转义，任何字符都可以被转义为十六进制编码。最高可以用到`0x10FFFF`。使用单纯的 Unicode 转义通常需要写成分开的两半以达到相同的效果。\n:::\n\n### 正则表达式字面量\n\n```js\n/ab+c/g\n```\n\n### 模板字面量\n\n```js\n`string text`\n\n`string text line 1\n string text line 2`\n\n`string text ${expression} string text`\n\ntag`string text ${expression} string text`\n```\n\n\n## 自动分号补全\n\n一些JavaScript 语句必须用分号结束，所以会被自动分号补全 (ASI) 影响：\n\n- 空语句\n- `let`、`const`、变量声明\n- `import`、`export`、模块定义\n- 表达式语句\n- `debugger`\n- `continue`、`break`、`throw`\n- `return`\n\nECMAScript 规格提到[自动分号补全的三个规则](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-rules-of-automatic-semicolon-insertion)。\n\n1. 当出现一个不允许的行终止符或“}”时，会在其之前插入一个分号。\n2. 当捕获到标识符输入流的结尾，并且无法将单个输入流转换为一个完整的程序时，将在结尾插入一个分号。\n3. 当语句中包含语法限制后跟一个行终止符的时候，将会在结尾插入一个分号。","src/content/blog/200-Learning/210-Programing/JavaScript的词法文法.md","56f91ff0fa90bd06",{"html":320,"metadata":321},"\u003Ch2 id=\"toc\">TOC\u003C/h2>\n\u003Cul>\n\u003Cli>\u003Ca href=\"#%E7%A9%BA%E7%99%BD%E7%AC%A6\">空白符\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#%E8%A1%8C%E7%BB%88%E6%AD%A2%E7%AC%A6\">行终止符\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#%E6%B3%A8%E9%87%8A\">注释\u003C/a>\n\u003Cul>\n\u003Cli>\u003Ca href=\"#%E8%A1%8C%E6%B3%A8%E9%87%8A\">行注释\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#%E5%9D%97%E6%B3%A8%E9%87%8A\">块注释\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#hashbang%E6%B3%A8%E9%87%8A\">Hashbang注释\u003C/a>\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\u003Ca href=\"#%E5%85%B3%E9%94%AE%E5%AD%97\">关键字\u003C/a>\n\u003Cul>\n\u003Cli>\u003Ca href=\"#ecmascript-6-%E4%B8%AD%E7%9A%84%E4%BF%9D%E7%95%99%E5%85%B3%E9%94%AE%E5%AD%97\">ECMAScript 6 中的保留关键字\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#%E6%9C%AA%E6%9D%A5%E4%BF%9D%E7%95%99%E5%85%B3%E9%94%AE%E5%AD%97\">未来保留关键字\u003C/a>\n\u003Cul>\n\u003Cli>\u003Ca href=\"#%E4%B9%8B%E5%89%8D%E6%A0%87%E5%87%86%E4%B8%AD%E7%9A%84%E4%BF%9D%E7%95%99%E5%85%B3%E9%94%AE%E5%AD%97\">之前标准中的保留关键字\u003C/a>\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\u003Ca href=\"#%E5%AD%97%E9%9D%A2%E9%87%8F\">字面量\u003C/a>\n\u003Cul>\n\u003Cli>\u003Ca href=\"#%E7%A9%BA%E5%AD%97%E9%9D%A2%E9%87%8F\">空字面量\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#%E5%B8%83%E5%B0%94%E5%AD%97%E9%9D%A2%E9%87%8F\">布尔字面量\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#%E6%95%B0%E5%80%BC%E5%AD%97%E9%9D%A2%E9%87%8F\">数值字面量\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#%E5%AF%B9%E8%B1%A1%E5%AD%97%E9%9D%A2%E9%87%8F\">对象字面量\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#%E6%95%B0%E7%BB%84%E5%AD%97%E9%9D%A2%E9%87%8F\">数组字面量\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%AD%97%E9%9D%A2%E9%87%8F\">字符串字面量\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%AD%97%E9%9D%A2%E9%87%8F\">正则表达式字面量\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#%E6%A8%A1%E6%9D%BF%E5%AD%97%E9%9D%A2%E9%87%8F\">模板字面量\u003C/a>\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\u003Ca href=\"#%E8%87%AA%E5%8A%A8%E5%88%86%E5%8F%B7%E8%A1%A5%E5%85%A8\">自动分号补全\u003C/a>\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"空白符\">空白符\u003C/h2>\n\u003Cp>空白符提升了源码的可读性，并将标记 (tokens) 区分开。这些符号通常不影响源码的功能。通常可以用\u003Ca href=\"http://en.wikipedia.org/wiki/Minification_%28programming%29\">压缩器\u003C/a>来移除源码中的空白，减少数据传输量。\u003C/p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003Ctable>\u003Cthead>\u003Ctr>\u003Cth>代码点\u003C/th>\u003Cth>名称\u003C/th>\u003Cth>缩写\u003C/th>\u003Cth>说明\u003C/th>\u003Cth>转义序列\u003C/th>\u003C/tr>\u003C/thead>\u003Ctbody>\u003Ctr>\u003Ctd>U+0009\u003C/td>\u003Ctd>制表符\u003C/td>\u003Ctd>\u003Ccode>&#x3C;HT>\u003C/code>\u003C/td>\u003Ctd>水平制表符\u003C/td>\u003Ctd>\\t\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>U+000B\u003C/td>\u003Ctd>垂直制表符\u003C/td>\u003Ctd>\u003Ccode>&#x3C;VT>\u003C/code>\u003C/td>\u003Ctd>垂直制表符\u003C/td>\u003Ctd>\\v\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>U+000C\u003C/td>\u003Ctd>分页符\u003C/td>\u003Ctd>\u003Ccode>&#x3C;FF>\u003C/code>\u003C/td>\u003Ctd>分页符（\u003Ca href=\"http://en.wikipedia.org/wiki/Page_break#Form_feed\">Wikipedia\u003C/a>）\u003C/td>\u003Ctd>\\f\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>U+0020\u003C/td>\u003Ctd>空格\u003C/td>\u003Ctd>\u003Ccode>&#x3C;SP>\u003C/code>\u003C/td>\u003Ctd>空格\u003C/td>\u003Ctd>\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>U+00A0\u003C/td>\u003Ctd>无间断空格\u003C/td>\u003Ctd>\u003Ccode>&#x3C;NBSP>\u003C/code>\u003C/td>\u003Ctd>在该空格处不会换行\u003C/td>\u003Ctd>\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>Others\u003C/td>\u003Ctd>其他 Unicode 空白\u003C/td>\u003Ctd>\u003Ccode>&#x3C;USP>\u003C/code>\u003C/td>\u003Ctd>\u003Ca href=\"http://en.wikipedia.org/wiki/Space_%28punctuation%29#Spaces_in_Unicode\">Wikipedia 上对 Unicode 空白的介绍\u003C/a>\u003C/td>\u003Ctd>\u003C/td>\u003C/tr>\u003C/tbody>\u003C/table>\n\u003Ch2 id=\"行终止符\">行终止符\u003C/h2>\n\u003Cp>除了空白符之外，行终止符也可以提高源码的可读性。不同的是，行终止符可以影响 JavaScript 代码的执行。行终止符也会影响\u003Ca href=\"#%E8%87%AA%E5%8A%A8%E5%88%86%E5%8F%B7%E8%A1%A5%E5%85%A8\">自动分号补全\u003C/a>的执行。在正则表达式中，行终止符会被 \u003Ccode>\\s\u003C/code> 匹配。\u003C/p>\n\u003Cp>在 ECMAScript 中，只有下列 Unicode 字符会被当成行终止符，其他的行终止符（比如 Next Line、NEL、U+0085 等）都会被当成空白符。\u003C/p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003Ctable>\u003Cthead>\u003Ctr>\u003Cth>编码\u003C/th>\u003Cth>名称\u003C/th>\u003Cth>缩写\u003C/th>\u003Cth>说明\u003C/th>\u003Cth>转义序列\u003C/th>\u003C/tr>\u003C/thead>\u003Ctbody>\u003Ctr>\u003Ctd>U+000A\u003C/td>\u003Ctd>换行符\u003C/td>\u003Ctd>\u003Ccode>&#x3C;LF>\u003C/code>\u003C/td>\u003Ctd>在 UNIX 系统中起新行\u003C/td>\u003Ctd>\\n\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>U+000D\u003C/td>\u003Ctd>回车符\u003C/td>\u003Ctd>\u003Ccode>&#x3C;CR>\u003C/code>\u003C/td>\u003Ctd>在 Commodore 和早期的 Mac 系统中起新行\u003C/td>\u003Ctd>\\r\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>U+2028\u003C/td>\u003Ctd>行分隔符\u003C/td>\u003Ctd>\u003Ccode>&#x3C;LS>\u003C/code>\u003C/td>\u003Ctd>\u003Ca href=\"http://en.wikipedia.org/wiki/Newline\">Wikipedia\u003C/a>\u003C/td>\u003Ctd>\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>U+2029\u003C/td>\u003Ctd>段分隔符\u003C/td>\u003Ctd>\u003Ccode>&#x3C;PS>\u003C/code>\u003C/td>\u003Ctd>\u003Ca href=\"http://en.wikipedia.org/wiki/Newline\">Wikipedia\u003C/a>\u003C/td>\u003Ctd>\u003C/td>\u003C/tr>\u003C/tbody>\u003C/table>\n\u003Ch2 id=\"注释\">注释\u003C/h2>\n\u003Cp>注释用来在源码中增加提示、笔记、建议、警告等信息，可以帮助阅读和理解源码。在调试时，可以用来将一段代码屏蔽掉，防止其运行；这也是一个有价值的调试工具。\u003C/p>\n\u003Cp>在 JavaScript 中，有两种常见的添加注释的方法：行注释和块注释。另外，也有一种特殊的 hashbang 注释语法。\u003C/p>\n\u003Ch3 id=\"行注释\">行注释\u003C/h3>\n\u003Cp>是\u003Ccode>//\u003C/code> 风格的注释，会将该行中符号以后的文本都视为注释：\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"js\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">function\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> comment\u003C/span>\u003Cspan style=\"color:#ADBAC7\">() {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">  // 这是单行注释\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">  console.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">log\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#96D0FF\">\"Hello world!\"\u003C/span>\u003Cspan style=\"color:#ADBAC7\">);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">}\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">comment\u003C/span>\u003Cspan style=\"color:#ADBAC7\">();\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Ch3 id=\"块注释\">块注释\u003C/h3>\n\u003Cp>是 \u003Ccode>/* */\u003C/code> 风格的注释，这种方式更加灵活，可以在单行内使用多行注释，也可以用来实现多行注释，也可以用于行内注释：\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"js\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">function\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> comment\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#F69D50\">x\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">  /* 这是单行注释 */\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">  \u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">  /* \u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">    这是多行注释， \u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">    注意在写完注释前无需终止注释 \u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">  */\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">  \u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">  console.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">log\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#96D0FF\">\"Hello \"\u003C/span>\u003Cspan style=\"color:#F47067\"> +\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> x \u003C/span>\u003Cspan style=\"color:#768390\">/* 引入 x 的值 */\u003C/span>\u003Cspan style=\"color:#F47067\"> +\u003C/span>\u003Cspan style=\"color:#96D0FF\"> \" !\"\u003C/span>\u003Cspan style=\"color:#ADBAC7\">);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">}\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">comment\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#96D0FF\">\"world\"\u003C/span>\u003Cspan style=\"color:#ADBAC7\">);\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Ch3 id=\"hashbang注释\">Hashbang注释\u003C/h3>\n\u003Cp>\u003Cstrong>Hashbang 注释\u003C/strong>是一种特殊的注释语法，其行为与单行注释（\u003Ccode>//\u003C/code>）完全一样，只是它以 \u003Ccode>#!\u003C/code> 开头，并且\u003Cstrong>只在脚本或模块的最开始处有效\u003C/strong>。注意，\u003Ccode>#!\u003C/code> 标志之前不能有任何空白字符。注释由 \u003Ccode>#!\u003C/code> 之后的所有字符组成直到第一行的末尾；只允许有一条这样的注释。JavaScript 中的 hashbang 注释类似于 \u003Ca href=\"https://zh.wikipedia.org/wiki/Shebang\">Unix 中的 shebang\u003C/a>，它提供了一个特定的 JavaScript 解释器的路径，你想用它来执行这个脚本。在 hashbang 注释标准化之前，它已经在非浏览器主机（如 Node.js）中得到了事实上的实现，在那里，它在被传递给引擎之前被从源文本中剥离。示例如下：\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"js\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">#!/usr/bin/env node\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">console.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">log\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#96D0FF\">\"Hello world\"\u003C/span>\u003Cspan style=\"color:#ADBAC7\">);\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Cp>下面是\u003Ccode>zx\u003C/code>JavaScript解释器的示例：\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"js\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">#!/usr/bin/env zx\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">await\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> $\u003C/span>\u003Cspan style=\"color:#96D0FF\">`cat package.json | grep name`\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Ch2 id=\"关键字\">关键字\u003C/h2>\n\u003Ch3 id=\"ecmascript-6-中的保留关键字\">\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Lexical_grammar#ecmascript_6_%E4%B8%AD%E7%9A%84%E4%BF%9D%E7%95%99%E5%85%B3%E9%94%AE%E5%AD%97\">ECMAScript 6 中的保留关键字\u003C/a>\u003C/h3>\n\u003Cul>\n\u003Cli>\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/break\">\u003Ccode>break\u003C/code>\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/switch\">\u003Ccode>case\u003C/code>\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/try...catch\">\u003Ccode>catch\u003C/code>\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/class\">\u003Ccode>class\u003C/code>\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/const\">\u003Ccode>const\u003C/code>\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/continue\">\u003Ccode>continue\u003C/code>\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/debugger\">\u003Ccode>debugger\u003C/code>\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/switch\" title=\"Currently only available in English (US)\">\u003Ccode>default\u003C/code> (en-US)\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/delete\">\u003Ccode>delete\u003C/code>\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/do...while\">\u003Ccode>do\u003C/code>\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/if...else\">\u003Ccode>else\u003C/code>\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/export\">\u003Ccode>export\u003C/code>\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/class\">\u003Ccode>extends\u003C/code>\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/try...catch\">\u003Ccode>finally\u003C/code>\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/for\">\u003Ccode>for\u003C/code>\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/function\">\u003Ccode>function\u003C/code>\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/if...else\">\u003Ccode>if\u003C/code>\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/import\">\u003Ccode>import\u003C/code>\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/in\">\u003Ccode>in\u003C/code>\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/instanceof\">\u003Ccode>instanceof\u003C/code>\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/new\">\u003Ccode>new\u003C/code>\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/return\">\u003Ccode>return\u003C/code>\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/super\">\u003Ccode>super\u003C/code>\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/switch\">\u003Ccode>switch\u003C/code>\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/this\">\u003Ccode>this\u003C/code>\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/throw\">\u003Ccode>throw\u003C/code>\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/try...catch\">\u003Ccode>try\u003C/code>\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/typeof\">\u003Ccode>typeof\u003C/code>\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/var\">\u003Ccode>var\u003C/code>\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/void\">\u003Ccode>void\u003C/code>\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/while\">\u003Ccode>while\u003C/code>\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/with\">\u003Ccode>with\u003C/code>\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/yield\">\u003Ccode>yield\u003C/code>\u003C/a>\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"未来保留关键字\">\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Lexical_grammar#%E6%9C%AA%E6%9D%A5%E4%BF%9D%E7%95%99%E5%85%B3%E9%94%AE%E5%AD%97\">未来保留关键字\u003C/a>\u003C/h3>\n\u003Cp>在 ECMAScript 规格中，这些关键字被当成关键字保留。目前它们没有特殊功能，但是在未来某个时间可能会加上。所以这些关键字不能当成标识符使用。这些关键字在严格模式和非严格模式中均不能使用。\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ccode>enum\u003C/code>\u003C/li>\n\u003C/ul>\n\u003Cp>以下关键字只在严格模式中被当成保留关键字：\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ccode>implements\u003C/code>\u003C/li>\n\u003Cli>\u003Ccode>interface\u003C/code>\u003C/li>\n\u003Cli>\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/let\">\u003Ccode>let\u003C/code>\u003C/a>\u003C/li>\n\u003Cli>\u003Ccode>package\u003C/code>\u003C/li>\n\u003Cli>\u003Ccode>private\u003C/code>\u003C/li>\n\u003Cli>\u003Ccode>protected\u003C/code>\u003C/li>\n\u003Cli>\u003Ccode>public\u003C/code>\u003C/li>\n\u003Cli>\u003Ccode>static\u003C/code>\u003C/li>\n\u003C/ul>\n\u003Cp>以下关键字只在模块代码中被当成保留关键字：\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ccode>await\u003C/code>\u003C/li>\n\u003C/ul>\n\u003Ch4 id=\"之前标准中的保留关键字\">之前标准中的保留关键字\u003C/h4>\n\u003Cp>这里是之前版本中的 ECMAScript（1 到 3）中的保留关键字：\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ccode>abstract\u003C/code>\u003C/li>\n\u003Cli>\u003Ccode>boolean\u003C/code>\u003C/li>\n\u003Cli>\u003Ccode>byte\u003C/code>\u003C/li>\n\u003Cli>\u003Ccode>char\u003C/code>\u003C/li>\n\u003Cli>\u003Ccode>double\u003C/code>\u003C/li>\n\u003Cli>\u003Ccode>final\u003C/code>\u003C/li>\n\u003Cli>\u003Ccode>float\u003C/code>\u003C/li>\n\u003Cli>\u003Ccode>goto\u003C/code>\u003C/li>\n\u003Cli>\u003Ccode>int\u003C/code>\u003C/li>\n\u003Cli>\u003Ccode>long\u003C/code>\u003C/li>\n\u003Cli>\u003Ccode>native\u003C/code>\u003C/li>\n\u003Cli>\u003Ccode>short\u003C/code>\u003C/li>\n\u003Cli>\u003Ccode>synchronized\u003C/code>\u003C/li>\n\u003Cli>\u003Ccode>transient\u003C/code>\u003C/li>\n\u003Cli>\u003Ccode>volatile\u003C/code>\u003C/li>\n\u003C/ul>\n\u003Cp>另外，字面量 \u003Ccode>null\u003C/code>、\u003Ccode>true\u003C/code>和\u003Ccode>false\u003C/code>同样不能被当成标识使用。\n保留字是仅针对标识符（Identifier）的文法定义而言的（而不是标识符名（IdentifierName）的文法定义）。\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"js\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">// 标识符用于函数声明式和函数表达式。\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">function\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> import\u003C/span>\u003Cspan style=\"color:#ADBAC7\">() {} \u003C/span>\u003Cspan style=\"color:#768390\">// Illegal.\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Ch2 id=\"字面量\">字面量\u003C/h2>\n\u003Ch3 id=\"空字面量\">空字面量\u003C/h3>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"js\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#6CB6FF\">null\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Ch3 id=\"布尔字面量\">布尔字面量\u003C/h3>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"js\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#6CB6FF\">true\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#6CB6FF\">false\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Ch3 id=\"数值字面量\">数值字面量\u003C/h3>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"js\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">// 十进制\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#6CB6FF\">1234567890\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#6CB6FF\">42\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">// 谨慎使用 0 开头的数值：\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#6CB6FF\">0888\u003C/span>\u003Cspan style=\"color:#768390\"> // 转换为十进制 888\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#6CB6FF\">0777\u003C/span>\u003Cspan style=\"color:#768390\"> // 转换为八进制 777，十进制 511\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">// 二进制\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">var\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> FLT_SIGNBIT\u003C/span>\u003Cspan style=\"color:#F47067\">  =\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> 0b10000000000000000000000000000000\u003C/span>\u003Cspan style=\"color:#ADBAC7\">; \u003C/span>\u003Cspan style=\"color:#768390\">// 2147483648\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">var\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> FLT_EXPONENT\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> 0b01111111100000000000000000000000\u003C/span>\u003Cspan style=\"color:#ADBAC7\">; \u003C/span>\u003Cspan style=\"color:#768390\">// 2139095040\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">var\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> FLT_MANTISSA\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> 0B00000000011111111111111111111111\u003C/span>\u003Cspan style=\"color:#ADBAC7\">; \u003C/span>\u003Cspan style=\"color:#768390\">// 8388607\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">// 八进制\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">var\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> n \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> 0O755\u003C/span>\u003Cspan style=\"color:#ADBAC7\">; \u003C/span>\u003Cspan style=\"color:#768390\">// 493\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">var\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> m \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> 0o644\u003C/span>\u003Cspan style=\"color:#ADBAC7\">; \u003C/span>\u003Cspan style=\"color:#768390\">// 420\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">// 十六进制\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#6CB6FF\">0xFFFFFFFFFFFFFFFFF\u003C/span>\u003Cspan style=\"color:#768390\"> // 295147905179352830000\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#6CB6FF\">0x123456789ABCDEF\u003C/span>\u003Cspan style=\"color:#768390\">   // 81985529216486900\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#6CB6FF\">0XA\u003C/span>\u003Cspan style=\"color:#768390\">                 // 10\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Caside class=\"callout callout-warn\">\u003Cdiv class=\"callout-indicator\">\u003Cdiv class=\"callout-hint\">\u003Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" aria-hidden=\"true\">\u003Cpath d=\"M12 9v4m0 4h.01M8.681 4.082C9.351 2.797 10.621 2 12 2s2.649.797 3.319 2.082l6.203 11.904a4.28 4.28 0 0 1-.046 4.019C20.793 21.241 19.549 22 18.203 22H5.797c-1.346 0-2.59-.759-3.273-1.995a4.28 4.28 0 0 1-.046-4.019L8.681 4.082Z\">\u003C/path>\u003C/svg>\u003C/div>\u003Cdiv class=\"callout-title\">Warning\u003C/div>\u003C/div>\u003Cdiv class=\"callout-content\">\u003Cp>十进制数值字面量可以以 0 开头，但是如果 0 以后的最高位比 8 小，数值将会被认为是八进制而不会报错。\u003C/p>\u003C/div>\u003C/aside>\n\u003Ch3 id=\"对象字面量\">对象字面量\u003C/h3>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"js\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">var\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> o \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> { a: \u003C/span>\u003Cspan style=\"color:#96D0FF\">\"foo\"\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, b: \u003C/span>\u003Cspan style=\"color:#96D0FF\">\"bar\"\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, c: \u003C/span>\u003Cspan style=\"color:#6CB6FF\">42\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> };\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">// ES6 中的简略表示方法\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">var\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> a \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#96D0FF\"> \"foo\"\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, b \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#96D0FF\"> \"bar\"\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, c \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> 42\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">var\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> o \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> {a, b, c};\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">// 不需要这样\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">var\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> o \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> { a: a, b: b, c: c };\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Ch3 id=\"数组字面量\">数组字面量\u003C/h3>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"js\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">[\u003C/span>\u003Cspan style=\"color:#6CB6FF\">1954\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, \u003C/span>\u003Cspan style=\"color:#6CB6FF\">1974\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, \u003C/span>\u003Cspan style=\"color:#6CB6FF\">1990\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, \u003C/span>\u003Cspan style=\"color:#6CB6FF\">2014\u003C/span>\u003Cspan style=\"color:#ADBAC7\">]\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Ch3 id=\"字符串字面量\">字符串字面量\u003C/h3>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"js\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#96D0FF\">'foo'\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#96D0FF\">'bar'\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Cp>十六进制转义序列\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"js\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#96D0FF\">\"\u003C/span>\u003Cspan style=\"color:#F47067\">\\xA9\u003C/span>\u003Cspan style=\"color:#96D0FF\">\"\u003C/span>\u003Cspan style=\"color:#768390\"> // \"©\"\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Cp>Unicode转义序列\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"js\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#96D0FF\">\"\u003C/span>\u003Cspan style=\"color:#F47067\">\\u00A9\u003C/span>\u003Cspan style=\"color:#96D0FF\">\"\u003C/span>\u003Cspan style=\"color:#768390\"> // \"©\"\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Cp>Unicode编码转义\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"js\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#96D0FF\">\"\u003C/span>\u003Cspan style=\"color:#F47067\">\\u{2F804}\u003C/span>\u003Cspan style=\"color:#96D0FF\">\"\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">// 使用单纯 Unicode 转义\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#96D0FF\">\"\u003C/span>\u003Cspan style=\"color:#F47067\">\\uD87E\\uDC04\u003C/span>\u003Cspan style=\"color:#96D0FF\">\"\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Caside class=\"callout callout-assert\">\u003Cdiv class=\"callout-indicator\">\u003Cdiv class=\"callout-hint\">\u003Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" aria-hidden=\"true\">\u003Ccircle cx=\"19\" cy=\"5\" r=\"3\">\u003C/circle>\u003Cpath d=\"M20 11.929V15c0 1.656-1.344 3-3 3h-3l-6 4v-4H5c-1.656 0-3-1.344-3-3V7c0-1.656 1.344-3 3-3h7.071\">\u003C/path>\u003C/svg>\u003C/div>\u003Cdiv class=\"callout-title\">Info\u003C/div>\u003C/div>\u003Cdiv class=\"callout-content\">\u003Cp>ECMAScript 6 新增特性。使用 Unicode 编码转义，任何字符都可以被转义为十六进制编码。最高可以用到\u003Ccode>0x10FFFF\u003C/code>。使用单纯的 Unicode 转义通常需要写成分开的两半以达到相同的效果。\u003C/p>\u003C/div>\u003C/aside>\n\u003Ch3 id=\"正则表达式字面量\">正则表达式字面量\u003C/h3>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"js\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#96D0FF\">/ab\u003C/span>\u003Cspan style=\"color:#F47067\">+\u003C/span>\u003Cspan style=\"color:#96D0FF\">c/\u003C/span>\u003Cspan style=\"color:#F47067\">g\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Ch3 id=\"模板字面量\">模板字面量\u003C/h3>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"js\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#96D0FF\">`string text`\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#96D0FF\">`string text line 1\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#96D0FF\"> string text line 2`\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#96D0FF\">`string text ${\u003C/span>\u003Cspan style=\"color:#ADBAC7\">expression\u003C/span>\u003Cspan style=\"color:#96D0FF\">} string text`\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">tag\u003C/span>\u003Cspan style=\"color:#96D0FF\">`string text ${\u003C/span>\u003Cspan style=\"color:#ADBAC7\">expression\u003C/span>\u003Cspan style=\"color:#96D0FF\">} string text`\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Ch2 id=\"自动分号补全\">自动分号补全\u003C/h2>\n\u003Cp>一些JavaScript 语句必须用分号结束，所以会被自动分号补全 (ASI) 影响：\u003C/p>\n\u003Cul>\n\u003Cli>空语句\u003C/li>\n\u003Cli>\u003Ccode>let\u003C/code>、\u003Ccode>const\u003C/code>、变量声明\u003C/li>\n\u003Cli>\u003Ccode>import\u003C/code>、\u003Ccode>export\u003C/code>、模块定义\u003C/li>\n\u003Cli>表达式语句\u003C/li>\n\u003Cli>\u003Ccode>debugger\u003C/code>\u003C/li>\n\u003Cli>\u003Ccode>continue\u003C/code>、\u003Ccode>break\u003C/code>、\u003Ccode>throw\u003C/code>\u003C/li>\n\u003Cli>\u003Ccode>return\u003C/code>\u003C/li>\n\u003C/ul>\n\u003Cp>ECMAScript 规格提到\u003Ca href=\"https://people.mozilla.org/~jorendorff/es6-draft.html#sec-rules-of-automatic-semicolon-insertion\">自动分号补全的三个规则\u003C/a>。\u003C/p>\n\u003Col>\n\u003Cli>当出现一个不允许的行终止符或“}”时，会在其之前插入一个分号。\u003C/li>\n\u003Cli>当捕获到标识符输入流的结尾，并且无法将单个输入流转换为一个完整的程序时，将在结尾插入一个分号。\u003C/li>\n\u003Cli>当语句中包含语法限制后跟一个行终止符的时候，将会在结尾插入一个分号。\u003C/li>\n\u003C/ol>",{"headings":322,"localImagePaths":369,"remoteImagePaths":370,"frontmatter":371,"imagePaths":377},[323,326,328,330,332,334,336,339,341,344,346,349,351,353,355,357,359,361,363,365,367],{"depth":31,"slug":324,"text":325},"toc","TOC",{"depth":31,"slug":327,"text":327},"空白符",{"depth":31,"slug":329,"text":329},"行终止符",{"depth":31,"slug":331,"text":331},"注释",{"depth":37,"slug":333,"text":333},"行注释",{"depth":37,"slug":335,"text":335},"块注释",{"depth":37,"slug":337,"text":338},"hashbang注释","Hashbang注释",{"depth":31,"slug":340,"text":340},"关键字",{"depth":37,"slug":342,"text":343},"ecmascript-6-中的保留关键字","ECMAScript 6 中的保留关键字",{"depth":37,"slug":345,"text":345},"未来保留关键字",{"depth":347,"slug":348,"text":348},4,"之前标准中的保留关键字",{"depth":31,"slug":350,"text":350},"字面量",{"depth":37,"slug":352,"text":352},"空字面量",{"depth":37,"slug":354,"text":354},"布尔字面量",{"depth":37,"slug":356,"text":356},"数值字面量",{"depth":37,"slug":358,"text":358},"对象字面量",{"depth":37,"slug":360,"text":360},"数组字面量",{"depth":37,"slug":362,"text":362},"字符串字面量",{"depth":37,"slug":364,"text":364},"正则表达式字面量",{"depth":37,"slug":366,"text":366},"模板字面量",{"depth":31,"slug":368,"text":368},"自动分号补全",[],[],{"title":311,"description":15,"pubDate":372,"heroImage":313,"date created":373,"date modified":374,"tags":375,"minutesRead":376},"2023-07-19 21:41",["Date","2023-07-19T00:00:00.000Z"],["Date","2023-07-19T00:00:00.000Z"],[133,315,242],"9 min read",[],"200-Learning/210-Programing/JavaScript的词法文法.md","200-learning/210-programing/javascript尾后逗号",{"id":379,"data":381,"body":386,"filePath":387,"digest":388,"rendered":389,"legacyId":406},{"title":382,"description":15,"pubDate":383,"heroImage":384,"tags":385},"JavaScript尾后逗号",["Date","2023-07-19T13:41:00.000Z"],"https://raw.githubusercontent.com/fw6/assets/main/toy_docs/20230719214259.png",[133,315,242],"**尾后逗号** （有时叫做“终止逗号”）在向 JavaScript 代码添加元素、参数、属性时十分有用。如果你想要添加新的属性，并且上一行已经使用了尾后逗号，你可以仅仅添加新的一行，而不需要修改上一行。这使得版本控制的代码比较（diff）更加清晰，代码编辑过程中遇到的麻烦更少。\n\n```js\nconst arr = [\n    1,\n    2,\n    3, // final commas\n];\narr.length; // 3\n\nconst obj = {\n    a: 'a',\n    b: 'b', // final commas\n};\n\nconst func = (\n    a,\n    b,\n    c,\n) => {};\n\nMath.max(10, 20,);\n```\n\nJavaScript 一开始就支持数组字面量中的尾后逗号，随后向对象字面量（ECMAScript 5）中添加了尾后逗号。最近（ECMAScript 2017），又将其添加到函数参数中。\n\n但是，[JSON](https://developer.mozilla.org/zh-CN/docs/Glossary/JSON) 不允许尾后逗号！\n\n### 不合法的尾后逗号\n\n仅仅包含逗号的函数参数定义或者函数调用会抛出 `SyntaxError`。而且，当使用剩余参数的时候，并不支持尾后逗号：\n```js\nfunction f(,) {} // SyntaxError: missing formal parameter\n(,) => {};       // SyntaxError: expected expression, got ','\nf(,)             // SyntaxError: expected expression, got ','\n\nfunction f(...p,) {} // SyntaxError: parameter after rest parameter\n(...p,) => {}        // SyntaxError: expected closing parenthesis, got ','\n```\n\n### JSON中的尾后逗号\n\n对象中的尾后逗号仅仅在 ECMAScript 5 中引入。由于 JSON 基于 ES5 之前的语法， **JSON 中并不允许尾后逗号**。\n\n下面两行都会抛出 `SyntaxError`：\n```js\nJSON.parse('[1, 2, 3, 4, ]');\nJSON.parse('{\"foo\" : 1, }');\n// SyntaxError JSON.parse: unexpected character\n// at line 1 column 14 of the JSON data\n```","src/content/blog/200-Learning/210-Programing/JavaScript尾后逗号.md","1877e4dd4fea3cd0",{"html":390,"metadata":391},"\u003Cp>\u003Cstrong>尾后逗号\u003C/strong> （有时叫做“终止逗号”）在向 JavaScript 代码添加元素、参数、属性时十分有用。如果你想要添加新的属性，并且上一行已经使用了尾后逗号，你可以仅仅添加新的一行，而不需要修改上一行。这使得版本控制的代码比较（diff）更加清晰，代码编辑过程中遇到的麻烦更少。\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"js\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">const\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> arr\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> [\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#6CB6FF\">    1\u003C/span>\u003Cspan style=\"color:#ADBAC7\">,\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#6CB6FF\">    2\u003C/span>\u003Cspan style=\"color:#ADBAC7\">,\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#6CB6FF\">    3\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, \u003C/span>\u003Cspan style=\"color:#768390\">// final commas\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">];\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">arr.\u003C/span>\u003Cspan style=\"color:#6CB6FF\">length\u003C/span>\u003Cspan style=\"color:#ADBAC7\">; \u003C/span>\u003Cspan style=\"color:#768390\">// 3\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">const\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> obj\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    a: \u003C/span>\u003Cspan style=\"color:#96D0FF\">'a'\u003C/span>\u003Cspan style=\"color:#ADBAC7\">,\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    b: \u003C/span>\u003Cspan style=\"color:#96D0FF\">'b'\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, \u003C/span>\u003Cspan style=\"color:#768390\">// final commas\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">};\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">const\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> func\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F69D50\">    a\u003C/span>\u003Cspan style=\"color:#ADBAC7\">,\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F69D50\">    b\u003C/span>\u003Cspan style=\"color:#ADBAC7\">,\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F69D50\">    c\u003C/span>\u003Cspan style=\"color:#ADBAC7\">,\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">) \u003C/span>\u003Cspan style=\"color:#F47067\">=>\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> {};\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">Math.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">max\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#6CB6FF\">10\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, \u003C/span>\u003Cspan style=\"color:#6CB6FF\">20\u003C/span>\u003Cspan style=\"color:#ADBAC7\">,);\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Cp>JavaScript 一开始就支持数组字面量中的尾后逗号，随后向对象字面量（ECMAScript 5）中添加了尾后逗号。最近（ECMAScript 2017），又将其添加到函数参数中。\u003C/p>\n\u003Cp>但是，\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Glossary/JSON\">JSON\u003C/a> 不允许尾后逗号！\u003C/p>\n\u003Ch3 id=\"不合法的尾后逗号\">不合法的尾后逗号\u003C/h3>\n\u003Cp>仅仅包含逗号的函数参数定义或者函数调用会抛出 \u003Ccode>SyntaxError\u003C/code>。而且，当使用剩余参数的时候，并不支持尾后逗号：\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"js\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">function\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> f\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(,) {} \u003C/span>\u003Cspan style=\"color:#768390\">// SyntaxError: missing formal parameter\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">(,) \u003C/span>\u003Cspan style=\"color:#F47067\">=>\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> {};       \u003C/span>\u003Cspan style=\"color:#768390\">// SyntaxError: expected expression, got ','\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">f\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(,)             \u003C/span>\u003Cspan style=\"color:#768390\">// SyntaxError: expected expression, got ','\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">function\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> f\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#F47067\">...\u003C/span>\u003Cspan style=\"color:#F69D50\">p\u003C/span>\u003Cspan style=\"color:#ADBAC7\">,) {} \u003C/span>\u003Cspan style=\"color:#768390\">// SyntaxError: parameter after rest parameter\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#F47067\">...\u003C/span>\u003Cspan style=\"color:#F69D50\">p\u003C/span>\u003Cspan style=\"color:#ADBAC7\">,) \u003C/span>\u003Cspan style=\"color:#F47067\">=>\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> {}        \u003C/span>\u003Cspan style=\"color:#768390\">// SyntaxError: expected closing parenthesis, got ','\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Ch3 id=\"json中的尾后逗号\">JSON中的尾后逗号\u003C/h3>\n\u003Cp>对象中的尾后逗号仅仅在 ECMAScript 5 中引入。由于 JSON 基于 ES5 之前的语法， \u003Cstrong>JSON 中并不允许尾后逗号\u003C/strong>。\u003C/p>\n\u003Cp>下面两行都会抛出 \u003Ccode>SyntaxError\u003C/code>：\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"js\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#6CB6FF\">JSON\u003C/span>\u003Cspan style=\"color:#ADBAC7\">.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">parse\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#96D0FF\">'[1, 2, 3, 4, ]'\u003C/span>\u003Cspan style=\"color:#ADBAC7\">);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#6CB6FF\">JSON\u003C/span>\u003Cspan style=\"color:#ADBAC7\">.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">parse\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#96D0FF\">'{\"foo\" : 1, }'\u003C/span>\u003Cspan style=\"color:#ADBAC7\">);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">// SyntaxError JSON.parse: unexpected character\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">// at line 1 column 14 of the JSON data\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>",{"headings":392,"localImagePaths":398,"remoteImagePaths":399,"frontmatter":400,"imagePaths":405},[393,395],{"depth":37,"slug":394,"text":394},"不合法的尾后逗号",{"depth":37,"slug":396,"text":397},"json中的尾后逗号","JSON中的尾后逗号",[],[],{"title":382,"description":15,"pubDate":372,"heroImage":384,"date created":401,"date modified":402,"tags":403,"minutesRead":404},["Date","2023-07-19T00:00:00.000Z"],["Date","2023-07-19T00:00:00.000Z"],[133,315,242],"2 min read",[],"200-Learning/210-Programing/JavaScript尾后逗号.md","200-learning/210-programing/proxy--reflect",{"id":407,"data":409,"body":414,"filePath":415,"digest":416,"rendered":417,"legacyId":443},{"title":410,"description":15,"pubDate":411,"heroImage":412,"tags":413},"Proxy & Reflect",["Date","2023-07-31T08:20:00.000Z"],"https://images.unsplash.com/photo-1533284614853-bc4fe23f0824?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1200&q=80",[20,315],"## `Proxy`\n\n:::cite\n**Proxy** 对象用于创建一个对象的代理，从而实现基本操作的拦截和自定义（如属性查找、赋值、枚举、函数调用等）。\n:::\n\n语法：\n```js\nconst p = new Proxy(target, handler)\n```\n\n- `target`是被`Proxy`包装的目标对象（可以是任何类型的对象，包括原生数组、函数，甚至另一个代理）\n- `handler` 定义了若干属性的对象，通常属性值为函数，用于定义在对`Proxy`实例`p`执行各种操作时的行为。\n\n其中`Proxy`还有个静态方法——`Proxy.revocable`，用于创建可撤销的`Proxy`对象。\n\n### `handler`处理器对象\n\n`handler`对象是一个容纳若干特定属性的占位符对象，包含了`Proxy`的各种捕获器（trap，另译为陷阱🪤）\n\n所有捕获器都是可选的，不设置则保留源对象的默认行为。\n\n- `handler.getPrototypeOf()`\n    - `Object.getPrototypeOf` 方法的捕捉器。\n- `handler.setPrototypeOf()`\n    - `Object.setPrototypeOf` 方法的捕捉器。\n- `handler.isExtensible()`\n    - `Object.isExtensible` 方法的捕捉器。\n- `handler.preventExtensions()`\n    - `Object.preventExtensions` 方法的捕捉器。\n- `handler.getOwnPropertyDescriptor()`\n    - `Object.getOwnPropertyDescriptor` 方法的捕捉器。\n- `handler.defineProperty()`\n    - `Object.defineProperty` 方法的捕捉器。\n- `handler.has()`\n    - `in` 操作符的捕捉器。\n- `handler.get()`\n    - 属性读取操作的捕捉器。\n- `handler.set()`\n    - 属性设置操作的捕捉器。\n- `handler.deleteProperty()`\n    - `delete` 操作符的捕捉器。\n- `handler.ownKeys()`\n    - `Object.getOwnPropertyNames` 方法和 `Object.getOwnPropertySymbols` 方法的捕捉器。\n- `handler.apply()`\n    - 函数调用操作的捕捉器。\n- `handler.construct()`\n    - `new` 操作符的捕捉器。\n\n| Operation                     | Intercepted as                  |\n| ----------------------------- | ------------------------------- |\n| `proxy[name]`                 | `handler.get(proxy, name)`      |\n| `proxy[name] = val`           | `handler.set(proxy, name, val)` |\n| `name in proxy`               | `handler.has(name)`             |\n| `delete proxy[name]`          | `handler.delete(name)`          |\n| `for (let name in proxy) {…}` | `handler.iterate()`             |\n| `Object.keys(proxy)`          | `handler.keys()`                |\n\n\n## `Reflect`\n\n`Reflec`t是一个内置对象，提供了拦截JavaScript操作的方法，这些方法与`Proxy`相同。\n\n:::warning\n`Reflect`不是一个构造函数，所以不能通过`new`操作符对其进行调用，或者将`Reflect`作为函数调用。`Reflect`所有属性和方法都是静态的（类似`Math`）\n:::\n\n单独使用`Reflect`用处不大，与直接执行JavaScript操作相比，有如下用处：\n1. 从`Reflect`对象上可以拿到语言内部的方法，如`Object.defineProperty`\n2. 操作对象失败时返回`false`\n3. 操作对象从命令式变为函数式\n4. 操作更易读\n\n```js\n// 旧写法\ntry {\n  Object.defineProperty(target, property, attributes);\n} catch (err) {}\n\n// 新写法\nif (Reflect.defineProperty(target, property, attributes)){} \nelse {}\n\n// 老写法  \n\"assign\" in Object; // true  \n// 新写法  \nReflect.has(Object, \"assign\"); //\n\n// 老写法  \nFunction.prototype.apply.call(Math.floor, undefined, [1.75]) // 1  \n\n// 新写法  \nReflect.apply(Math.floor, undefined, [1.75]) // 1\n```\n\n\n## Reflect在Proxy中的作用\n\n就功能而言，`Reflect.get()`和`Reflect.set()`方法和直接对象赋值没有区别，都是可以互相替代的。\n\n但在实践中，`Proxy`一般搭配`Reflect`使用，原因有以下三点：\n1. `Reflect`提供的静态方法和`Proxy`的`handler`参数方法一模一样\n2. `Proxy get/set`方法需要的返回值正是`Reflect`的`get/set`方法的返回值。可天然配合使用，比直接对象赋值/取值更方便和准确\n3. `receiver`参数具有不可替代性，见下方⬇️\n\n### 关于`receiver`参数\n\n`Proxy` `handler`的`get/set`方法都提供了第三个参数receiver，指代Proxy或继承Proxy的对象（但handler的set方法也可能在原型链上，或以其他方式被间接调用）。\n\n:::info\n备注： 假设有一段代码执行 `obj.name = \"jen\"`， `obj` 不是一个 proxy，且自身不含 `name` 属性，但是它的原型链上有一个 proxy，那么，那个 proxy 的 `set()` 处理器会被调用，而此时，`obj` 会作为 receiver 参数传进来。\n:::\n\n举个例子：\n```js\nconst parent = {\n    name: 'parent name',\n    get value() {\n        return this.name;\n    },\n};\n\nconst handler = {\n    get(target, key, receiver) {\n        return Reflect.get(target, key);\n        // 这里相当于 return target[key]\n    },\n};\n\nconst proxy = new Proxy(parent, handler);\n\nconst child = {\n  name: 'child name',\n};\n\n// 设置obj继承与parent的代理对象proxy\nObject.setPrototypeOf(child, proxy);\n\nconsole.log(child.value); // parent name\n```\n分析以上代码：\n1. 获取`child.value`时，`child`本身没有`value`属性\n2. 在上一步显式指定了`child`的原型对象，此时应从`proxy`上找`value`属性\n3. `proxy`是代理对象，本身通过`handler.get`方法获取`value`属性\n4. 在`handler.get`中直接从目标对象中获取`value`属性，此时目标对象是`parent`，返回的是`parent.value`\n\n可看到这与我们的预期不符，当访问`child.value`时，因原型对象上有`value`且根据`parent`上的定义，应返回自身的`name`属性即`child.name`\n\n要解决该问题，只需在Reflect.get时传递receiver：\n```js {10}\nconst parent = {\n    name: 'parent name',\n    get value() {\n        return this.name;\n    },\n};\n\nconst handler = {\n    get(target, key, receiver) {\n        return Reflect.get(target, key, receiver);\n    },\n};\n\nconst proxy = new Proxy(parent, handler);\n\nconst child = {\n  name: 'child name',\n};\n\nObject.setPrototypeOf(child, proxy);\nconsole.log(child.value); // child name\n```\n\n在`Reflect.get`的定义中，receiver表示：\n**如果`target`对象指定了`getter`，`receiver`则为调用时的`this`值**","src/content/blog/200-Learning/210-Programing/Proxy & Reflect.md","675c9e71e582aea1",{"html":418,"metadata":419},"\u003Ch2 id=\"proxy\">\u003Ccode>Proxy\u003C/code>\u003C/h2>\n\u003Caside class=\"callout callout-quote\">\u003Cdiv class=\"callout-indicator\">\u003Cdiv class=\"callout-hint\">\u003Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"callout-hint-quote\">\u003Cpath d=\"M3 21c3 0 7-1 7-8V5c0-1.25-.756-2.017-2-2H4c-1.25 0-2 .75-2 1.972V11c0 1.25.75 2 2 2 1 0 1 0 1 1v1c0 1-1 2-2 2s-1 .008-1 1.031V20c0 1 0 1 1 1z\">\u003C/path>\u003Cpath d=\"M15 21c3 0 7-1 7-8V5c0-1.25-.757-2.017-2-2h-4c-1.25 0-2 .75-2 1.972V11c0 1.25.75 2 2 2h.75c0 2.25.25 4-2.75 4v3c0 1 0 1 1 1z\">\u003C/path>\u003C/svg>\u003C/div>\u003Cdiv class=\"callout-title\">Quote\u003C/div>\u003C/div>\u003Cdiv class=\"callout-content\">\u003Cp>\u003Cstrong>Proxy\u003C/strong> 对象用于创建一个对象的代理，从而实现基本操作的拦截和自定义（如属性查找、赋值、枚举、函数调用等）。\u003C/p>\u003C/div>\u003C/aside>\n\u003Cp>语法：\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"js\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">const\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> p\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#F47067\"> new\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> Proxy\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(target, handler)\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Cul>\n\u003Cli>\u003Ccode>target\u003C/code>是被\u003Ccode>Proxy\u003C/code>包装的目标对象（可以是任何类型的对象，包括原生数组、函数，甚至另一个代理）\u003C/li>\n\u003Cli>\u003Ccode>handler\u003C/code> 定义了若干属性的对象，通常属性值为函数，用于定义在对\u003Ccode>Proxy\u003C/code>实例\u003Ccode>p\u003C/code>执行各种操作时的行为。\u003C/li>\n\u003C/ul>\n\u003Cp>其中\u003Ccode>Proxy\u003C/code>还有个静态方法——\u003Ccode>Proxy.revocable\u003C/code>，用于创建可撤销的\u003Ccode>Proxy\u003C/code>对象。\u003C/p>\n\u003Ch3 id=\"handler处理器对象\">\u003Ccode>handler\u003C/code>处理器对象\u003C/h3>\n\u003Cp>\u003Ccode>handler\u003C/code>对象是一个容纳若干特定属性的占位符对象，包含了\u003Ccode>Proxy\u003C/code>的各种捕获器（trap，另译为陷阱\u003Cspan role=\"img\" aria-label=\"mouse trap\">🪤\u003C/span>）\u003C/p>\n\u003Cp>所有捕获器都是可选的，不设置则保留源对象的默认行为。\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ccode>handler.getPrototypeOf()\u003C/code>\n\u003Cul>\n\u003Cli>\u003Ccode>Object.getPrototypeOf\u003C/code> 方法的捕捉器。\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\u003Ccode>handler.setPrototypeOf()\u003C/code>\n\u003Cul>\n\u003Cli>\u003Ccode>Object.setPrototypeOf\u003C/code> 方法的捕捉器。\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\u003Ccode>handler.isExtensible()\u003C/code>\n\u003Cul>\n\u003Cli>\u003Ccode>Object.isExtensible\u003C/code> 方法的捕捉器。\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\u003Ccode>handler.preventExtensions()\u003C/code>\n\u003Cul>\n\u003Cli>\u003Ccode>Object.preventExtensions\u003C/code> 方法的捕捉器。\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\u003Ccode>handler.getOwnPropertyDescriptor()\u003C/code>\n\u003Cul>\n\u003Cli>\u003Ccode>Object.getOwnPropertyDescriptor\u003C/code> 方法的捕捉器。\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\u003Ccode>handler.defineProperty()\u003C/code>\n\u003Cul>\n\u003Cli>\u003Ccode>Object.defineProperty\u003C/code> 方法的捕捉器。\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\u003Ccode>handler.has()\u003C/code>\n\u003Cul>\n\u003Cli>\u003Ccode>in\u003C/code> 操作符的捕捉器。\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\u003Ccode>handler.get()\u003C/code>\n\u003Cul>\n\u003Cli>属性读取操作的捕捉器。\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\u003Ccode>handler.set()\u003C/code>\n\u003Cul>\n\u003Cli>属性设置操作的捕捉器。\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\u003Ccode>handler.deleteProperty()\u003C/code>\n\u003Cul>\n\u003Cli>\u003Ccode>delete\u003C/code> 操作符的捕捉器。\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\u003Ccode>handler.ownKeys()\u003C/code>\n\u003Cul>\n\u003Cli>\u003Ccode>Object.getOwnPropertyNames\u003C/code> 方法和 \u003Ccode>Object.getOwnPropertySymbols\u003C/code> 方法的捕捉器。\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\u003Ccode>handler.apply()\u003C/code>\n\u003Cul>\n\u003Cli>函数调用操作的捕捉器。\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\u003Ccode>handler.construct()\u003C/code>\n\u003Cul>\n\u003Cli>\u003Ccode>new\u003C/code> 操作符的捕捉器。\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ul>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003Ctable>\u003Cthead>\u003Ctr>\u003Cth>Operation\u003C/th>\u003Cth>Intercepted as\u003C/th>\u003C/tr>\u003C/thead>\u003Ctbody>\u003Ctr>\u003Ctd>\u003Ccode>proxy[name]\u003C/code>\u003C/td>\u003Ctd>\u003Ccode>handler.get(proxy, name)\u003C/code>\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>\u003Ccode>proxy[name] = val\u003C/code>\u003C/td>\u003Ctd>\u003Ccode>handler.set(proxy, name, val)\u003C/code>\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>\u003Ccode>name in proxy\u003C/code>\u003C/td>\u003Ctd>\u003Ccode>handler.has(name)\u003C/code>\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>\u003Ccode>delete proxy[name]\u003C/code>\u003C/td>\u003Ctd>\u003Ccode>handler.delete(name)\u003C/code>\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>\u003Ccode>for (let name in proxy) {…}\u003C/code>\u003C/td>\u003Ctd>\u003Ccode>handler.iterate()\u003C/code>\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>\u003Ccode>Object.keys(proxy)\u003C/code>\u003C/td>\u003Ctd>\u003Ccode>handler.keys()\u003C/code>\u003C/td>\u003C/tr>\u003C/tbody>\u003C/table>\n\u003Ch2 id=\"reflect\">\u003Ccode>Reflect\u003C/code>\u003C/h2>\n\u003Cp>\u003Ccode>Reflec\u003C/code>t是一个内置对象，提供了拦截JavaScript操作的方法，这些方法与\u003Ccode>Proxy\u003C/code>相同。\u003C/p>\n\u003Caside class=\"callout callout-warn\">\u003Cdiv class=\"callout-indicator\">\u003Cdiv class=\"callout-hint\">\u003Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" aria-hidden=\"true\">\u003Cpath d=\"M12 9v4m0 4h.01M8.681 4.082C9.351 2.797 10.621 2 12 2s2.649.797 3.319 2.082l6.203 11.904a4.28 4.28 0 0 1-.046 4.019C20.793 21.241 19.549 22 18.203 22H5.797c-1.346 0-2.59-.759-3.273-1.995a4.28 4.28 0 0 1-.046-4.019L8.681 4.082Z\">\u003C/path>\u003C/svg>\u003C/div>\u003Cdiv class=\"callout-title\">Warning\u003C/div>\u003C/div>\u003Cdiv class=\"callout-content\">\u003Cp>\u003Ccode>Reflect\u003C/code>不是一个构造函数，所以不能通过\u003Ccode>new\u003C/code>操作符对其进行调用，或者将\u003Ccode>Reflect\u003C/code>作为函数调用。\u003Ccode>Reflect\u003C/code>所有属性和方法都是静态的（类似\u003Ccode>Math\u003C/code>）\u003C/p>\u003C/div>\u003C/aside>\n\u003Cp>单独使用\u003Ccode>Reflect\u003C/code>用处不大，与直接执行JavaScript操作相比，有如下用处：\u003C/p>\n\u003Col>\n\u003Cli>从\u003Ccode>Reflect\u003C/code>对象上可以拿到语言内部的方法，如\u003Ccode>Object.defineProperty\u003C/code>\u003C/li>\n\u003Cli>操作对象失败时返回\u003Ccode>false\u003C/code>\u003C/li>\n\u003Cli>操作对象从命令式变为函数式\u003C/li>\n\u003Cli>操作更易读\u003C/li>\n\u003C/ol>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"js\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">// 旧写法\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">try\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">  Object.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">defineProperty\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(target, property, attributes);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">} \u003C/span>\u003Cspan style=\"color:#F47067\">catch\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (err) {}\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">// 新写法\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">if\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (Reflect.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">defineProperty\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(target, property, attributes)){} \u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">else\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> {}\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">// 老写法  \u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#96D0FF\">\"assign\"\u003C/span>\u003Cspan style=\"color:#F47067\"> in\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> Object; \u003C/span>\u003Cspan style=\"color:#768390\">// true  \u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">// 新写法  \u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">Reflect.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">has\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(Object, \u003C/span>\u003Cspan style=\"color:#96D0FF\">\"assign\"\u003C/span>\u003Cspan style=\"color:#ADBAC7\">); \u003C/span>\u003Cspan style=\"color:#768390\">//\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">// 老写法  \u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#6CB6FF\">Function\u003C/span>\u003Cspan style=\"color:#ADBAC7\">.\u003C/span>\u003Cspan style=\"color:#6CB6FF\">prototype\u003C/span>\u003Cspan style=\"color:#ADBAC7\">.apply.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">call\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(Math.floor, \u003C/span>\u003Cspan style=\"color:#6CB6FF\">undefined\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, [\u003C/span>\u003Cspan style=\"color:#6CB6FF\">1.75\u003C/span>\u003Cspan style=\"color:#ADBAC7\">]) \u003C/span>\u003Cspan style=\"color:#768390\">// 1  \u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">// 新写法  \u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">Reflect.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">apply\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(Math.floor, \u003C/span>\u003Cspan style=\"color:#6CB6FF\">undefined\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, [\u003C/span>\u003Cspan style=\"color:#6CB6FF\">1.75\u003C/span>\u003Cspan style=\"color:#ADBAC7\">]) \u003C/span>\u003Cspan style=\"color:#768390\">// 1\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Ch2 id=\"reflect在proxy中的作用\">Reflect在Proxy中的作用\u003C/h2>\n\u003Cp>就功能而言，\u003Ccode>Reflect.get()\u003C/code>和\u003Ccode>Reflect.set()\u003C/code>方法和直接对象赋值没有区别，都是可以互相替代的。\u003C/p>\n\u003Cp>但在实践中，\u003Ccode>Proxy\u003C/code>一般搭配\u003Ccode>Reflect\u003C/code>使用，原因有以下三点：\u003C/p>\n\u003Col>\n\u003Cli>\u003Ccode>Reflect\u003C/code>提供的静态方法和\u003Ccode>Proxy\u003C/code>的\u003Ccode>handler\u003C/code>参数方法一模一样\u003C/li>\n\u003Cli>\u003Ccode>Proxy get/set\u003C/code>方法需要的返回值正是\u003Ccode>Reflect\u003C/code>的\u003Ccode>get/set\u003C/code>方法的返回值。可天然配合使用，比直接对象赋值/取值更方便和准确\u003C/li>\n\u003Cli>\u003Ccode>receiver\u003C/code>参数具有不可替代性，见下方\u003Cspan role=\"img\" aria-label=\"down arrow\">⬇️\u003C/span>\u003C/li>\n\u003C/ol>\n\u003Ch3 id=\"关于receiver参数\">关于\u003Ccode>receiver\u003C/code>参数\u003C/h3>\n\u003Cp>\u003Ccode>Proxy\u003C/code> \u003Ccode>handler\u003C/code>的\u003Ccode>get/set\u003C/code>方法都提供了第三个参数receiver，指代Proxy或继承Proxy的对象（但handler的set方法也可能在原型链上，或以其他方式被间接调用）。\u003C/p>\n\u003Caside class=\"callout callout-assert\">\u003Cdiv class=\"callout-indicator\">\u003Cdiv class=\"callout-hint\">\u003Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" aria-hidden=\"true\">\u003Ccircle cx=\"19\" cy=\"5\" r=\"3\">\u003C/circle>\u003Cpath d=\"M20 11.929V15c0 1.656-1.344 3-3 3h-3l-6 4v-4H5c-1.656 0-3-1.344-3-3V7c0-1.656 1.344-3 3-3h7.071\">\u003C/path>\u003C/svg>\u003C/div>\u003Cdiv class=\"callout-title\">Info\u003C/div>\u003C/div>\u003Cdiv class=\"callout-content\">\u003Cp>备注： 假设有一段代码执行 \u003Ccode>obj.name = \"jen\"\u003C/code>， \u003Ccode>obj\u003C/code> 不是一个 proxy，且自身不含 \u003Ccode>name\u003C/code> 属性，但是它的原型链上有一个 proxy，那么，那个 proxy 的 \u003Ccode>set()\u003C/code> 处理器会被调用，而此时，\u003Ccode>obj\u003C/code> 会作为 receiver 参数传进来。\u003C/p>\u003C/div>\u003C/aside>\n\u003Cp>举个例子：\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"js\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">const\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> parent\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    name: \u003C/span>\u003Cspan style=\"color:#96D0FF\">'parent name'\u003C/span>\u003Cspan style=\"color:#ADBAC7\">,\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">    get\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> value\u003C/span>\u003Cspan style=\"color:#ADBAC7\">() {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">        return\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> this\u003C/span>\u003Cspan style=\"color:#ADBAC7\">.name;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    },\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">};\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">const\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> handler\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">    get\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#F69D50\">target\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, \u003C/span>\u003Cspan style=\"color:#F69D50\">key\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, \u003C/span>\u003Cspan style=\"color:#F69D50\">receiver\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">        return\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> Reflect.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">get\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(target, key);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">        // 这里相当于 return target[key]\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    },\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">};\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">const\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> proxy\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#F47067\"> new\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> Proxy\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(parent, handler);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">const\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> child\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">  name: \u003C/span>\u003Cspan style=\"color:#96D0FF\">'child name'\u003C/span>\u003Cspan style=\"color:#ADBAC7\">,\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">};\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">// 设置obj继承与parent的代理对象proxy\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">Object.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">setPrototypeOf\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(child, proxy);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">console.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">log\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(child.value); \u003C/span>\u003Cspan style=\"color:#768390\">// parent name\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Cp>分析以上代码：\u003C/p>\n\u003Col>\n\u003Cli>获取\u003Ccode>child.value\u003C/code>时，\u003Ccode>child\u003C/code>本身没有\u003Ccode>value\u003C/code>属性\u003C/li>\n\u003Cli>在上一步显式指定了\u003Ccode>child\u003C/code>的原型对象，此时应从\u003Ccode>proxy\u003C/code>上找\u003Ccode>value\u003C/code>属性\u003C/li>\n\u003Cli>\u003Ccode>proxy\u003C/code>是代理对象，本身通过\u003Ccode>handler.get\u003C/code>方法获取\u003Ccode>value\u003C/code>属性\u003C/li>\n\u003Cli>在\u003Ccode>handler.get\u003C/code>中直接从目标对象中获取\u003Ccode>value\u003C/code>属性，此时目标对象是\u003Ccode>parent\u003C/code>，返回的是\u003Ccode>parent.value\u003C/code>\u003C/li>\n\u003C/ol>\n\u003Cp>可看到这与我们的预期不符，当访问\u003Ccode>child.value\u003C/code>时，因原型对象上有\u003Ccode>value\u003C/code>且根据\u003Ccode>parent\u003C/code>上的定义，应返回自身的\u003Ccode>name\u003C/code>属性即\u003Ccode>child.name\u003C/code>\u003C/p>\n\u003Cp>要解决该问题，只需在Reflect.get时传递receiver：\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"js\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">const\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> parent\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    name: \u003C/span>\u003Cspan style=\"color:#96D0FF\">'parent name'\u003C/span>\u003Cspan style=\"color:#ADBAC7\">,\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">    get\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> value\u003C/span>\u003Cspan style=\"color:#ADBAC7\">() {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">        return\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> this\u003C/span>\u003Cspan style=\"color:#ADBAC7\">.name;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    },\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">};\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">const\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> handler\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">    get\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#F69D50\">target\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, \u003C/span>\u003Cspan style=\"color:#F69D50\">key\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, \u003C/span>\u003Cspan style=\"color:#F69D50\">receiver\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\" data-highlighted-line=\"\">\u003Cspan style=\"color:#F47067\">        return\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> Reflect.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">get\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(target, key, receiver);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    },\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">};\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">const\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> proxy\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#F47067\"> new\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> Proxy\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(parent, handler);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">const\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> child\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">  name: \u003C/span>\u003Cspan style=\"color:#96D0FF\">'child name'\u003C/span>\u003Cspan style=\"color:#ADBAC7\">,\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">};\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">Object.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">setPrototypeOf\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(child, proxy);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">console.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">log\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(child.value); \u003C/span>\u003Cspan style=\"color:#768390\">// child name\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Cp>在\u003Ccode>Reflect.get\u003C/code>的定义中，receiver表示：\n\u003Cstrong>如果\u003Ccode>target\u003C/code>对象指定了\u003Ccode>getter\u003C/code>，\u003Ccode>receiver\u003C/code>则为调用时的\u003Ccode>this\u003C/code>值\u003C/strong>\u003C/p>",{"headings":420,"localImagePaths":434,"remoteImagePaths":435,"frontmatter":436,"imagePaths":442},[421,424,426,429,432],{"depth":31,"slug":422,"text":423},"proxy","Proxy",{"depth":37,"slug":425,"text":425},"handler处理器对象",{"depth":31,"slug":427,"text":428},"reflect","Reflect",{"depth":31,"slug":430,"text":431},"reflect在proxy中的作用","Reflect在Proxy中的作用",{"depth":37,"slug":433,"text":433},"关于receiver参数",[],[],{"title":410,"description":15,"pubDate":437,"heroImage":412,"date created":438,"date modified":439,"tags":440,"minutesRead":441},"2023-07-31 16:20",["Date","2023-07-31T00:00:00.000Z"],["Date","2023-07-31T00:00:00.000Z"],[20,315],"6 min read",[],"200-Learning/210-Programing/Proxy & Reflect.md","200-learning/210-programing/magic-of-tagged-templates-literals-in-javascript",{"id":444,"data":446,"body":451,"filePath":452,"digest":453,"rendered":454,"legacyId":472},{"title":447,"description":15,"pubDate":448,"heroImage":449,"tags":450},"Magic of Tagged Templates Literals in JavaScript",["Date","2023-07-19T08:23:00.000Z"],"https://images.unsplash.com/photo-1626544827763-d516dce335e2?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1200&q=80",[20,315,242],"熟悉`styled-component`的一定对如下写法印象深刻：\n```js\nconst Button = styled.button`\n  background: transparent;\n  border-radius: 3px;\n  border: 2px solid #BF4F74;\n  color: #BF4F74;\n  margin: 0 1em;\n  padding: 0.25em 1em;\n`\n```\n在其官方也揭开了谜底：\n>This unusual backtick syntax is a new JavaScript feature called a [tagged template literal](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#Tagged_templates).\n\n带标签的模板是模板字面量的一种更高级的形式，它允许你使用函数解析模板字面量。\n\n简单来说就是让你能以另一种方式进行`function call`。通常我们熟知的`function call`都是使用小括号，并且在小括号中传入参数，但`tagged template literal`可以让我们利用模板字符串进行`function call`。\n```js\nconsole.log(123) // 123\nconsole.log`123` // { 0: \"123\", length: 1, raw: [\"123\"] }\n```\n\n标签函数的第一个参数包含一个字符串数组，其余的参数与表达式相关。你可以用标签函数对这些参数执行任何操作，并返回被操作过的字符串（或者，也可返回完全不同的内容，见下面的示例）。用作标签的函数名没有限制。\n```js\nconst person = \"Mike\";\nconst age = 28;\n\nfunction myTag(strings, personExp, ageExp) {\n  const str0 = strings[0]; // \"That \"\n  const str1 = strings[1]; // \" is a \"\n  const str2 = strings[2]; // \".\"\n\n  const ageStr = ageExp > 99 ? \"centenarian\" : \"youngster\";\n\n  // 我们甚至可以返回使用模板字面量构建的字符串\n  return `${str0}${personExp}${str1}${ageStr}${str2}`;\n}\n\nconst output = myTag`That ${person} is a ${age}.`;\n\nconsole.log(output);\n// That Mike is a youngster.\n```\n\n标签不必是普通的标识符，你可以使用任何优先级大于 16 的表达式，包括属性访问、函数调用、new 表达式，甚至其他带标签的模板字面量。\n```js\nconsole.log`Hello`; // [ 'Hello' ]\nconsole.log.bind(1, 2)`Hello`; // 2 [ 'Hello' ]\nnew Function(\"console.log(arguments)\")`Hello`; // [Arguments] { '0': [ 'Hello' ] }\n\nfunction recursive(strings, ...values) {\n  console.log(strings, values);\n  return recursive;\n}\nrecursive`Hello``World`;\n// [ 'Hello' ] []\n// [ 'World' ] []\n```\n\n标签函数甚至不需要返回字符串！\n\n标签函数接收到的第一个参数是一个字符串数组。对于任何模板字面量，其长度等于替换次数（`${…}` 出现次数）加一，因此总是非空的。对于任何特定的带标签的模板字面量表达式，无论对字面量求值多少次，都将始终使用完全相同的字面量数组调用标签函数。\n这允许标签函数以其第一个参数作为标识来缓存结果。为了进一步确保数组值不变，第一个参数及其 `raw` 属性都会被冻结，因此你将无法改变它们。\n\n### `raw`属性\n\n标签函数的第一个参数中存在一个特殊的属性`raw`，可通过它来访问模板字符串的原始字符串，而无需转义特殊字符。\n```js\nfunction tag(strings) {\n  console.log(strings.raw[0]);\n}\n\ntag`string text line 1 \\n string text line 2`;\n// logs \"string text line 1 \\n string text line 2\" ,\n// including the two characters '\\' and 'n'\n```\n使用 `String.raw()`方法创建原始字符串与标签函数中的raw属性结果一致。\n```js\nString.raw`Hi\\n${2+3}!` // \"Hi\\\\n5!\"\nString.raw({ raw: ['aaa', 'bbbbb', 'cc'] }, 1, 2) // \"aaa1bbbbb2cc\"\n```\n\n如果字面量不包含任何转义序列，`String.raw` 函数就像一个“identity”标签。\n这对于许多工具来说很有用，它们要对以特定名称为标签的字面量作特殊处理。\n```js\nconst html = (strings, ...values) => String.raw({ raw: strings }, ...values);\n// Some formatters will format this literal's content as HTML\nconst doc = html`\u003C!doctype html>\n  \u003Chtml lang=\"en-US\">\n    \u003Chead>\n      \u003Ctitle>Hello\u003C/title>\n    \u003C/head>\n    \u003Cbody>\n      \u003Ch1>Hello world!\u003C/h1>\n    \u003C/body>\n  \u003C/html>`;\n```\n\n\n## 例子\n\n高亮显示模板字符串内的表达式\n```js\nfunction highlight(strings, ...values) {\n  let str = '';\n  strings.forEach((string, i) => {\n    str += string + typeof values[i] === 'string' ? `\u003Cmark>${values[i]}\u003C/mark>` : '';\n  });\n  return str;\n}\nconst name = 'Snickers';\nconst age = '100';\nconst sentence = highlight`My dog's name is ${name} and he is ${age} years old`;\nconsole.log(sentence); // My dog's name is \u003Cmark>Snickers\u003C/mark> and he is \u003Cmark>100\u003C/mark> years old\n```\n\n使用String.raw生成正则表达式，而无需使用反斜线\n```js\nfunction createNumberRegExp(english) { \n    const PERIOD = english ? String.raw`\\.` : ','; // (A) \n    return new RegExp(`[0-9]+(${PERIOD}[0-9]+)?`); \n}\n```\n\nShell command\n```js\nconst proc = sh`ps ax | grep ${pid}`;\n```\n(Source: [David Herman](https://gist.github.com/dherman/6165867))\n\nByte strings\n```js\nconst buffer = bytes`455336465457210a`;\n```\n(Source: [David Herman](https://gist.github.com/dherman/6165867))\n\nHTTP requests\n```js\nPOST`http://foo.org/bar?a=${a}&b=${b} \n    Content-Type: application/json \n    X-Credentials: ${credentials} { \"foo\": ${foo}, \"bar\": ${bar}}\n    `\n    (myOnReadyStateChangeHandler);\n```\n(Source: [Luke Hoban](https://github.com/lukehoban/es6features#template-strings))\n\nQuery language\n```js\n$`a.${className}[href*='//${domain}/']`\n```\n\n## tagged-template-literal相关学习资源\n\n[tagged-template-literals · GitHub Topics · GitHub](https://github.com/topics/tagged-template-literals)","src/content/blog/200-Learning/210-Programing/Magic of Tagged Templates Literals in JavaScript.md","98829e61edf304b6",{"html":455,"metadata":456},"\u003Cp>熟悉\u003Ccode>styled-component\u003C/code>的一定对如下写法印象深刻：\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"js\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">const\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> Button\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> styled.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">button\u003C/span>\u003Cspan style=\"color:#96D0FF\">`\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#96D0FF\">  background: transparent;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#96D0FF\">  border-radius: 3px;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#96D0FF\">  border: 2px solid #BF4F74;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#96D0FF\">  color: #BF4F74;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#96D0FF\">  margin: 0 1em;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#96D0FF\">  padding: 0.25em 1em;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#96D0FF\">`\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Cp>在其官方也揭开了谜底：\u003C/p>\n\u003Cblockquote>\n\u003Cp>This unusual backtick syntax is a new JavaScript feature called a \u003Ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#Tagged_templates\">tagged template literal\u003C/a>.\u003C/p>\n\u003C/blockquote>\n\u003Cp>带标签的模板是模板字面量的一种更高级的形式，它允许你使用函数解析模板字面量。\u003C/p>\n\u003Cp>简单来说就是让你能以另一种方式进行\u003Ccode>function call\u003C/code>。通常我们熟知的\u003Ccode>function call\u003C/code>都是使用小括号，并且在小括号中传入参数，但\u003Ccode>tagged template literal\u003C/code>可以让我们利用模板字符串进行\u003Ccode>function call\u003C/code>。\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"js\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">console.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">log\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#6CB6FF\">123\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) \u003C/span>\u003Cspan style=\"color:#768390\">// 123\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">console.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">log\u003C/span>\u003Cspan style=\"color:#96D0FF\">`123`\u003C/span>\u003Cspan style=\"color:#768390\"> // { 0: \"123\", length: 1, raw: [\"123\"] }\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Cp>标签函数的第一个参数包含一个字符串数组，其余的参数与表达式相关。你可以用标签函数对这些参数执行任何操作，并返回被操作过的字符串（或者，也可返回完全不同的内容，见下面的示例）。用作标签的函数名没有限制。\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"js\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">const\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> person\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#96D0FF\"> \"Mike\"\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">const\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> age\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> 28\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">function\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> myTag\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#F69D50\">strings\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, \u003C/span>\u003Cspan style=\"color:#F69D50\">personExp\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, \u003C/span>\u003Cspan style=\"color:#F69D50\">ageExp\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">  const\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> str0\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> strings[\u003C/span>\u003Cspan style=\"color:#6CB6FF\">0\u003C/span>\u003Cspan style=\"color:#ADBAC7\">]; \u003C/span>\u003Cspan style=\"color:#768390\">// \"That \"\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">  const\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> str1\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> strings[\u003C/span>\u003Cspan style=\"color:#6CB6FF\">1\u003C/span>\u003Cspan style=\"color:#ADBAC7\">]; \u003C/span>\u003Cspan style=\"color:#768390\">// \" is a \"\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">  const\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> str2\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> strings[\u003C/span>\u003Cspan style=\"color:#6CB6FF\">2\u003C/span>\u003Cspan style=\"color:#ADBAC7\">]; \u003C/span>\u003Cspan style=\"color:#768390\">// \".\"\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">  const\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> ageStr\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> ageExp \u003C/span>\u003Cspan style=\"color:#F47067\">>\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> 99\u003C/span>\u003Cspan style=\"color:#F47067\"> ?\u003C/span>\u003Cspan style=\"color:#96D0FF\"> \"centenarian\"\u003C/span>\u003Cspan style=\"color:#F47067\"> :\u003C/span>\u003Cspan style=\"color:#96D0FF\"> \"youngster\"\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">  // 我们甚至可以返回使用模板字面量构建的字符串\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">  return\u003C/span>\u003Cspan style=\"color:#96D0FF\"> `${\u003C/span>\u003Cspan style=\"color:#ADBAC7\">str0\u003C/span>\u003Cspan style=\"color:#96D0FF\">}${\u003C/span>\u003Cspan style=\"color:#ADBAC7\">personExp\u003C/span>\u003Cspan style=\"color:#96D0FF\">}${\u003C/span>\u003Cspan style=\"color:#ADBAC7\">str1\u003C/span>\u003Cspan style=\"color:#96D0FF\">}${\u003C/span>\u003Cspan style=\"color:#ADBAC7\">ageStr\u003C/span>\u003Cspan style=\"color:#96D0FF\">}${\u003C/span>\u003Cspan style=\"color:#ADBAC7\">str2\u003C/span>\u003Cspan style=\"color:#96D0FF\">}`\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">}\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">const\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> output\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> myTag\u003C/span>\u003Cspan style=\"color:#96D0FF\">`That ${\u003C/span>\u003Cspan style=\"color:#ADBAC7\">person\u003C/span>\u003Cspan style=\"color:#96D0FF\">} is a ${\u003C/span>\u003Cspan style=\"color:#ADBAC7\">age\u003C/span>\u003Cspan style=\"color:#96D0FF\">}.`\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">console.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">log\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(output);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">// That Mike is a youngster.\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Cp>标签不必是普通的标识符，你可以使用任何优先级大于 16 的表达式，包括属性访问、函数调用、new 表达式，甚至其他带标签的模板字面量。\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"js\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">console.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">log\u003C/span>\u003Cspan style=\"color:#96D0FF\">`Hello`\u003C/span>\u003Cspan style=\"color:#ADBAC7\">; \u003C/span>\u003Cspan style=\"color:#768390\">// [ 'Hello' ]\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">console.log.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">bind\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#6CB6FF\">1\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, \u003C/span>\u003Cspan style=\"color:#6CB6FF\">2\u003C/span>\u003Cspan style=\"color:#ADBAC7\">)\u003C/span>\u003Cspan style=\"color:#96D0FF\">`Hello`\u003C/span>\u003Cspan style=\"color:#ADBAC7\">; \u003C/span>\u003Cspan style=\"color:#768390\">// 2 [ 'Hello' ]\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">new\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> Function\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#96D0FF\">\"console.log(arguments)\"\u003C/span>\u003Cspan style=\"color:#ADBAC7\">)\u003C/span>\u003Cspan style=\"color:#96D0FF\">`Hello`\u003C/span>\u003Cspan style=\"color:#ADBAC7\">; \u003C/span>\u003Cspan style=\"color:#768390\">// [Arguments] { '0': [ 'Hello' ] }\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">function\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> recursive\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#F69D50\">strings\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, \u003C/span>\u003Cspan style=\"color:#F47067\">...\u003C/span>\u003Cspan style=\"color:#F69D50\">values\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">  console.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">log\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(strings, values);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">  return\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> recursive;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">}\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">recursive\u003C/span>\u003Cspan style=\"color:#96D0FF\">`Hello``World`\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">// [ 'Hello' ] []\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">// [ 'World' ] []\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Cp>标签函数甚至不需要返回字符串！\u003C/p>\n\u003Cp>标签函数接收到的第一个参数是一个字符串数组。对于任何模板字面量，其长度等于替换次数（\u003Ccode>${…}\u003C/code> 出现次数）加一，因此总是非空的。对于任何特定的带标签的模板字面量表达式，无论对字面量求值多少次，都将始终使用完全相同的字面量数组调用标签函数。\n这允许标签函数以其第一个参数作为标识来缓存结果。为了进一步确保数组值不变，第一个参数及其 \u003Ccode>raw\u003C/code> 属性都会被冻结，因此你将无法改变它们。\u003C/p>\n\u003Ch3 id=\"raw属性\">\u003Ccode>raw\u003C/code>属性\u003C/h3>\n\u003Cp>标签函数的第一个参数中存在一个特殊的属性\u003Ccode>raw\u003C/code>，可通过它来访问模板字符串的原始字符串，而无需转义特殊字符。\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"js\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">function\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> tag\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#F69D50\">strings\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">  console.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">log\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(strings.raw[\u003C/span>\u003Cspan style=\"color:#6CB6FF\">0\u003C/span>\u003Cspan style=\"color:#ADBAC7\">]);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">}\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">tag\u003C/span>\u003Cspan style=\"color:#96D0FF\">`string text line 1 \u003C/span>\u003Cspan style=\"color:#F47067\">\\n\u003C/span>\u003Cspan style=\"color:#96D0FF\"> string text line 2`\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">// logs \"string text line 1 \\n string text line 2\" ,\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">// including the two characters '\\' and 'n'\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Cp>使用 \u003Ccode>String.raw()\u003C/code>方法创建原始字符串与标签函数中的raw属性结果一致。\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"js\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">String.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">raw\u003C/span>\u003Cspan style=\"color:#96D0FF\">`Hi\u003C/span>\u003Cspan style=\"color:#F47067\">\\n\u003C/span>\u003Cspan style=\"color:#96D0FF\">${\u003C/span>\u003Cspan style=\"color:#6CB6FF\">2\u003C/span>\u003Cspan style=\"color:#F47067\">+\u003C/span>\u003Cspan style=\"color:#6CB6FF\">3\u003C/span>\u003Cspan style=\"color:#96D0FF\">}!`\u003C/span>\u003Cspan style=\"color:#768390\"> // \"Hi\\\\n5!\"\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">String.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">raw\u003C/span>\u003Cspan style=\"color:#ADBAC7\">({ raw: [\u003C/span>\u003Cspan style=\"color:#96D0FF\">'aaa'\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, \u003C/span>\u003Cspan style=\"color:#96D0FF\">'bbbbb'\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, \u003C/span>\u003Cspan style=\"color:#96D0FF\">'cc'\u003C/span>\u003Cspan style=\"color:#ADBAC7\">] }, \u003C/span>\u003Cspan style=\"color:#6CB6FF\">1\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, \u003C/span>\u003Cspan style=\"color:#6CB6FF\">2\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) \u003C/span>\u003Cspan style=\"color:#768390\">// \"aaa1bbbbb2cc\"\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Cp>如果字面量不包含任何转义序列，\u003Ccode>String.raw\u003C/code> 函数就像一个“identity”标签。\n这对于许多工具来说很有用，它们要对以特定名称为标签的字面量作特殊处理。\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"js\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">const\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> html\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (\u003C/span>\u003Cspan style=\"color:#F69D50\">strings\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, \u003C/span>\u003Cspan style=\"color:#F47067\">...\u003C/span>\u003Cspan style=\"color:#F69D50\">values\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) \u003C/span>\u003Cspan style=\"color:#F47067\">=>\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> String.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">raw\u003C/span>\u003Cspan style=\"color:#ADBAC7\">({ raw: strings }, \u003C/span>\u003Cspan style=\"color:#F47067\">...\u003C/span>\u003Cspan style=\"color:#ADBAC7\">values);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">// Some formatters will format this literal's content as HTML\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">const\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> doc\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> html\u003C/span>\u003Cspan style=\"color:#96D0FF\">`&#x3C;!doctype html>\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#96D0FF\">  &#x3C;html lang=\"en-US\">\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#96D0FF\">    &#x3C;head>\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#96D0FF\">      &#x3C;title>Hello&#x3C;/title>\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#96D0FF\">    &#x3C;/head>\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#96D0FF\">    &#x3C;body>\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#96D0FF\">      &#x3C;h1>Hello world!&#x3C;/h1>\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#96D0FF\">    &#x3C;/body>\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#96D0FF\">  &#x3C;/html>`\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Ch2 id=\"例子\">例子\u003C/h2>\n\u003Cp>高亮显示模板字符串内的表达式\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"js\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">function\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> highlight\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#F69D50\">strings\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, \u003C/span>\u003Cspan style=\"color:#F47067\">...\u003C/span>\u003Cspan style=\"color:#F69D50\">values\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">  let\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> str \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#96D0FF\"> ''\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">  strings.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">forEach\u003C/span>\u003Cspan style=\"color:#ADBAC7\">((\u003C/span>\u003Cspan style=\"color:#F69D50\">string\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, \u003C/span>\u003Cspan style=\"color:#F69D50\">i\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) \u003C/span>\u003Cspan style=\"color:#F47067\">=>\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    str \u003C/span>\u003Cspan style=\"color:#F47067\">+=\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> string \u003C/span>\u003Cspan style=\"color:#F47067\">+\u003C/span>\u003Cspan style=\"color:#F47067\"> typeof\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> values[i] \u003C/span>\u003Cspan style=\"color:#F47067\">===\u003C/span>\u003Cspan style=\"color:#96D0FF\"> 'string'\u003C/span>\u003Cspan style=\"color:#F47067\"> ?\u003C/span>\u003Cspan style=\"color:#96D0FF\"> `&#x3C;mark>${\u003C/span>\u003Cspan style=\"color:#ADBAC7\">values\u003C/span>\u003Cspan style=\"color:#96D0FF\">[\u003C/span>\u003Cspan style=\"color:#ADBAC7\">i\u003C/span>\u003Cspan style=\"color:#96D0FF\">]\u003C/span>\u003Cspan style=\"color:#96D0FF\">}&#x3C;/mark>`\u003C/span>\u003Cspan style=\"color:#F47067\"> :\u003C/span>\u003Cspan style=\"color:#96D0FF\"> ''\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">  });\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">  return\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> str;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">}\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">const\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> name\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#96D0FF\"> 'Snickers'\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">const\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> age\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#96D0FF\"> '100'\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">const\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> sentence\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> highlight\u003C/span>\u003Cspan style=\"color:#96D0FF\">`My dog's name is ${\u003C/span>\u003Cspan style=\"color:#ADBAC7\">name\u003C/span>\u003Cspan style=\"color:#96D0FF\">} and he is ${\u003C/span>\u003Cspan style=\"color:#ADBAC7\">age\u003C/span>\u003Cspan style=\"color:#96D0FF\">} years old`\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">console.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">log\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(sentence); \u003C/span>\u003Cspan style=\"color:#768390\">// My dog's name is &#x3C;mark>Snickers&#x3C;/mark> and he is &#x3C;mark>100&#x3C;/mark> years old\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Cp>使用String.raw生成正则表达式，而无需使用反斜线\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"js\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">function\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> createNumberRegExp\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#F69D50\">english\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) { \u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">    const\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> PERIOD\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> english \u003C/span>\u003Cspan style=\"color:#F47067\">?\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> String.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">raw\u003C/span>\u003Cspan style=\"color:#96D0FF\">`\u003C/span>\u003Cspan style=\"color:#F47067\">\\.\u003C/span>\u003Cspan style=\"color:#96D0FF\">`\u003C/span>\u003Cspan style=\"color:#F47067\"> :\u003C/span>\u003Cspan style=\"color:#96D0FF\"> ','\u003C/span>\u003Cspan style=\"color:#ADBAC7\">; \u003C/span>\u003Cspan style=\"color:#768390\">// (A) \u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">    return\u003C/span>\u003Cspan style=\"color:#F47067\"> new\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> RegExp\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#96D0FF\">`[0-9]+(${\u003C/span>\u003Cspan style=\"color:#6CB6FF\">PERIOD\u003C/span>\u003Cspan style=\"color:#96D0FF\">}[0-9]+)?`\u003C/span>\u003Cspan style=\"color:#ADBAC7\">); \u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Cp>Shell command\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"js\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">const\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> proc\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> sh\u003C/span>\u003Cspan style=\"color:#96D0FF\">`ps ax | grep ${\u003C/span>\u003Cspan style=\"color:#ADBAC7\">pid\u003C/span>\u003Cspan style=\"color:#96D0FF\">}`\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Cp>(Source: \u003Ca href=\"https://gist.github.com/dherman/6165867\">David Herman\u003C/a>)\u003C/p>\n\u003Cp>Byte strings\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"js\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">const\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> buffer\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> bytes\u003C/span>\u003Cspan style=\"color:#96D0FF\">`455336465457210a`\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Cp>(Source: \u003Ca href=\"https://gist.github.com/dherman/6165867\">David Herman\u003C/a>)\u003C/p>\n\u003Cp>HTTP requests\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"js\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">POST\u003C/span>\u003Cspan style=\"color:#96D0FF\">`http://foo.org/bar?a=${\u003C/span>\u003Cspan style=\"color:#ADBAC7\">a\u003C/span>\u003Cspan style=\"color:#96D0FF\">}&#x26;b=${\u003C/span>\u003Cspan style=\"color:#ADBAC7\">b\u003C/span>\u003Cspan style=\"color:#96D0FF\">} \u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#96D0FF\">    Content-Type: application/json \u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#96D0FF\">    X-Credentials: ${\u003C/span>\u003Cspan style=\"color:#ADBAC7\">credentials\u003C/span>\u003Cspan style=\"color:#96D0FF\">} { \"foo\": ${\u003C/span>\u003Cspan style=\"color:#ADBAC7\">foo\u003C/span>\u003Cspan style=\"color:#96D0FF\">}, \"bar\": ${\u003C/span>\u003Cspan style=\"color:#ADBAC7\">bar\u003C/span>\u003Cspan style=\"color:#96D0FF\">}}\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#96D0FF\">    `\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    (myOnReadyStateChangeHandler);\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Cp>(Source: \u003Ca href=\"https://github.com/lukehoban/es6features#template-strings\">Luke Hoban\u003C/a>)\u003C/p>\n\u003Cp>Query language\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"js\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">$\u003C/span>\u003Cspan style=\"color:#96D0FF\">`a.${\u003C/span>\u003Cspan style=\"color:#ADBAC7\">className\u003C/span>\u003Cspan style=\"color:#96D0FF\">}[href*='//${\u003C/span>\u003Cspan style=\"color:#ADBAC7\">domain\u003C/span>\u003Cspan style=\"color:#96D0FF\">}/']`\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Ch2 id=\"tagged-template-literal相关学习资源\">tagged-template-literal相关学习资源\u003C/h2>\n\u003Cp>\u003Ca href=\"https://github.com/topics/tagged-template-literals\">tagged-template-literals · GitHub Topics · GitHub\u003C/a>\u003C/p>",{"headings":457,"localImagePaths":464,"remoteImagePaths":465,"frontmatter":466,"imagePaths":471},[458,460,462],{"depth":37,"slug":459,"text":459},"raw属性",{"depth":31,"slug":461,"text":461},"例子",{"depth":31,"slug":463,"text":463},"tagged-template-literal相关学习资源",[],[],{"title":447,"description":15,"pubDate":467,"heroImage":449,"date created":468,"date modified":469,"tags":470,"minutesRead":210},"2023-07-19 16:23",["Date","2023-07-19T00:00:00.000Z"],["Date","2023-07-19T00:00:00.000Z"],[20,315,242],[],"200-Learning/210-Programing/Magic of Tagged Templates Literals in JavaScript.md","200-learning/210-programing/rust入门之旅",{"id":473,"data":475,"body":480,"filePath":481,"digest":482,"rendered":483,"legacyId":506},{"title":476,"description":15,"pubDate":477,"heroImage":478,"tags":479},"Rust入门之旅",["Date","2023-07-19T04:12:00.000Z"],"https://plus.unsplash.com/premium_photo-1688114420848-1555448e8fa8?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MnwxfDB8MXxyYW5kb218MHx8fHx8fHx8MTY4OTc1NTk2Ng&ixlib=rb-4.0.3&q=80&w=1200",[133,242],">草际烟光，水心云影，闲中观去，见乾坤最上文章 —《菜根谭》\n\n\n## Rust如何实现零成本抽象\n\n- 在一个`Scope` 下\n    - 一个值只有一个所有者\n    - 但可以有多个不可变引用\n    - 以及唯一的可变引用（`mutual exclusive`）\n    - 引用的生命周期不能超过值的生命周期\n- 在多线程环境下\n    - 类型安全（`Send` / `Sync`）保证并发安全\n\n## Rust FFI\n\n- C/C++/Swift: Cbindgen\n- C++: autocxx\n- Java: jni-rs、flapigen-rs、robusta\n- Erlanh/Elixir：rustler\n- Python: pyo3\n- JavaScript: \n    - [neon-bindings/neon](https://github.com/neon-bindings/neon)\n    - WebAssembly\n    - [mozilla/uniffi-rs](https://github.com/mozilla/uniffi-rs) Mozilla的UniFFI库新增对JS绑定的生成支持（详情: https://hacks.mozilla.org/2023/08/autogenerating-rust-js-bindings-with-uniffi/）\n\n## Rust 对网络协议的支持\n\n![image.png](https://raw.githubusercontent.com/fw6/assets/main/toy_docs/20230719164743.png)\n\n\n### 服务端应用的基本组成部分\n- 数据序列化：serde、protobuf、flatbuffer、capnp、etc...\n- 传输协议：tcp、http、websocket、quic、etc...\n- 安全协议：TLS、noise protocol、secio、etc...\n- 应用协议：application logic\n- 数据在各个部分流转：shared memory、channel、etc...","src/content/blog/200-Learning/210-Programing/Rust入门之旅.md","4da528b8cc532c83",{"html":484,"metadata":485},"\u003Cblockquote>\n\u003Cp>草际烟光，水心云影，闲中观去，见乾坤最上文章 —《菜根谭》\u003C/p>\n\u003C/blockquote>\n\u003Ch2 id=\"rust如何实现零成本抽象\">Rust如何实现零成本抽象\u003C/h2>\n\u003Cul>\n\u003Cli>在一个\u003Ccode>Scope\u003C/code> 下\n\u003Cul>\n\u003Cli>一个值只有一个所有者\u003C/li>\n\u003Cli>但可以有多个不可变引用\u003C/li>\n\u003Cli>以及唯一的可变引用（\u003Ccode>mutual exclusive\u003C/code>）\u003C/li>\n\u003Cli>引用的生命周期不能超过值的生命周期\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>在多线程环境下\n\u003Cul>\n\u003Cli>类型安全（\u003Ccode>Send\u003C/code> / \u003Ccode>Sync\u003C/code>）保证并发安全\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"rust-ffi\">Rust FFI\u003C/h2>\n\u003Cul>\n\u003Cli>C/C++/Swift: Cbindgen\u003C/li>\n\u003Cli>C++: autocxx\u003C/li>\n\u003Cli>Java: jni-rs、flapigen-rs、robusta\u003C/li>\n\u003Cli>Erlanh/Elixir：rustler\u003C/li>\n\u003Cli>Python: pyo3\u003C/li>\n\u003Cli>JavaScript:\n\u003Cul>\n\u003Cli>\u003Ca href=\"https://github.com/neon-bindings/neon\">neon-bindings/neon\u003C/a>\u003C/li>\n\u003Cli>WebAssembly\u003C/li>\n\u003Cli>\u003Ca href=\"https://github.com/mozilla/uniffi-rs\">mozilla/uniffi-rs\u003C/a> Mozilla的UniFFI库新增对JS绑定的生成支持（详情: \u003Ca href=\"https://hacks.mozilla.org/2023/08/autogenerating-rust-js-bindings-with-uniffi/%EF%BC%89\">https://hacks.mozilla.org/2023/08/autogenerating-rust-js-bindings-with-uniffi/）\u003C/a>\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"rust-对网络协议的支持\">Rust 对网络协议的支持\u003C/h2>\n\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/fw6/assets/main/toy_docs/20230719164743.png\" alt=\"image.png\">\u003C/p>\n\u003Ch3 id=\"服务端应用的基本组成部分\">服务端应用的基本组成部分\u003C/h3>\n\u003Cul>\n\u003Cli>数据序列化：serde、protobuf、flatbuffer、capnp、etc…\u003C/li>\n\u003Cli>传输协议：tcp、http、websocket、quic、etc…\u003C/li>\n\u003Cli>安全协议：TLS、noise protocol、secio、etc…\u003C/li>\n\u003Cli>应用协议：application logic\u003C/li>\n\u003Cli>数据在各个部分流转：shared memory、channel、etc…\u003C/li>\n\u003C/ul>",{"headings":486,"localImagePaths":498,"remoteImagePaths":499,"frontmatter":500,"imagePaths":505},[487,490,493,496],{"depth":31,"slug":488,"text":489},"rust如何实现零成本抽象","Rust如何实现零成本抽象",{"depth":31,"slug":491,"text":492},"rust-ffi","Rust FFI",{"depth":31,"slug":494,"text":495},"rust-对网络协议的支持","Rust 对网络协议的支持",{"depth":37,"slug":497,"text":497},"服务端应用的基本组成部分",[],[],{"title":476,"description":15,"pubDate":501,"heroImage":478,"date created":502,"date modified":503,"tags":504,"minutesRead":79},"2023-07-19 12:12","2023-07-19 16:41","2023-07-19",[133,242],[],"200-Learning/210-Programing/Rust入门之旅.md","200-learning/210-programing/service-worker-cookbook",{"id":507,"data":509,"body":515,"filePath":516,"digest":517,"rendered":518,"legacyId":570},{"title":510,"description":511,"pubDate":512,"heroImage":513,"tags":514},"Service Worker Cookbook","本cookbook包含若干Service Worker相关技术的用例与相关API描述",["Date","2023-07-21T11:06:00.000Z"],"https://raw.githubusercontent.com/fw6/assets/main/toy_docs/20230801113904.png",[20,182],"> The winner ain't the one with the fastest car it's the one who refuses to lose.  \n> — \u003Ccite>Dale Earnhardt\u003C/cite>\n\n\n:::tldr \n`Service Worker` 本质上充当 Web 应用程序、浏览器与网络（可用时）之间的代理服务器。这个 API 旨在创建有效的离线体验，它会拦截网络请求并根据网络是否可用来采取适当的动作、更新来自服务器的的资源。它还提供入口以推送通知和访问后台同步 API。  \n:::\n\n## TOC\n\n## 基本概念\n\n`Service Worker` 是一个注册在指定源和路径下的事件驱动 `worker`。它采用 JavaScript 文件的形式，控制关联的页面或者网站，拦截并修改访问和资源请求，细粒度地缓存资源。你可以完全控制应用在特定情形（最常见的情形是网络不可用）下的表现。\n\n`Service Worker` 运行在 `worker` 上下文：因此它无法访问 `DOM`，相对于驱动应用的主 JavaScript 线程，它运行在其他线程中，所以不会造成阻塞。它被设计为完全异步；因此，同步 `XHR` 和 `Web Storage`不能在 `Service Worker` 中使用。\n\n出于安全考量，`Service Worker` 只能由 `HTTPS` 承载，毕竟修改网络请求的能力暴露给中间人攻击会非常危险，如果允许访问这些强大的 API，此类攻击将会变得很严重。在 Firefox 浏览器的用户隐私模式，Service Worker 不可用。\n\n:::tip\nService worker 大量使用 `Promise`，因为通常它们会等待响应后继续，并根据响应返回一个成功或者失败的操作。Promise 非常适合这种场景。 \n:::\n\n## 用法\n\n通常遵循以下基本步骤来使用 service worker：\n\n1. 获取 service worker 代码，然后使用 [`serviceWorkerContainer.register()`](https://developer.mozilla.org/zh-CN/docs/Web/API/ServiceWorkerContainer/register) 来注册。如果成功，service worker 将在 [`ServiceWorkerGlobalScope`](https://developer.mozilla.org/zh-CN/docs/Web/API/ServiceWorkerGlobalScope) 中执行；这本质上是一种特殊的上下文，在主脚本执行线程之外运行，没有访问 DOM 的权限。Service Worker 现在已为处理事件做好准备。\n2. 安装完成。`install` 事件始终是发送给 service worker 的第一个事件（这可用于启动填充 IndexedDB 和缓存站点资源的过程）。在此步骤期间，应用程序正在为离线可用做准备。\n3. 当 `install` 程序处理完成时，service worker 被视为已安装。此时，service worker 的先前版本可能处于激活的状态并控制着打开的页面。由于我们不希望同一 service worker 的两个不同版本同时运行，因此新版本尚未激活。\n4. 一旦 service worker 的旧版本控制的页面都已关闭，就可以安全地停用旧版本，并且新安装的 service worker 将收到 `activate` 事件。`activate` 的主要用途是去清理 service worker 之前版本使用的资源。新的 service worker 可以调用 [`skipWaiting()`](https://developer.mozilla.org/zh-CN/docs/Web/API/ServiceWorkerGlobalScope/skipWaiting) 要求立即激活，而无需要求打开的页面关闭。然后，新的 service worker 将立即收到 `activate` 事件，并将接管任何打开的页面。\n5. 激活后，service worker 将立即控制页面，但是只会控制那些在 `register()` 成功后打开的页面。换句话说，文档必须重新加载才能真正的受到控制，因为文档在有或者没有 service worker 的情况下开始存在，并在其生命周期内维护它。为了覆盖次默认行为并在页面打开的情况下，service worker 可以调用 [`clients.claim()`](https://developer.mozilla.org/zh-CN/docs/Web/API/Clients/claim) 方法。\n6. 每当获取新版本的 service worker 时，都会再次发生此循环，并在新版本的激活期间清理上一个版本的残留。\n\n![image.png](https://raw.githubusercontent.com/fw6/assets/main/toy_docs/20230721213529.png)\n\n以下是可用的 service worker 事件：\n\n- install\n- activate\n- message \n  受控页面可以使用 `ServiceWorker.postMessage()` 方法向 Service Worker 发送消息。 Service Worker 可以选择通过与受控页面相对应的 `Client.postMessage()` 发回响应。\n- 功能性事件\n    - fetch  \n      当主应用线程发出网络请求时，会在 Service Worker 的全局范围内触发 `fetch` 事件。它能够拦截网络请求并发送自定义响应（例如，返回本地缓存）。\n    - sync  \n      当向 `SyncManager` 注册事件的页面（或工作线程）正在运行且网络连接可用时，将触发 `ServiceWorkerGlobalScope` 接口的 `sync` 事件。\n    - push  \n      当 Service Worker 收到推送消息时， `push` 事件将发送到 Service Worker 的全局范围（由 `ServiceWorkerGlobalScope` 接口表示）。\n\n```js\nconst registerServiceWorker = async () => {\n  if (\"serviceWorker\" in navigator) {\n    try {\n      const registration = await navigator.serviceWorker.register(\"/sw.js\", {\n        scope: \"/\",\n      });\n      if (registration.installing) {\n        console.log(\"正在安装 Service worker\");\n      } else if (registration.waiting) {\n        console.log(\"已安装 Service worker installed\");\n      } else if (registration.active) {\n        console.log(\"激活 Service worker\");\n      }\n    } catch (error) {\n      console.error(`注册失败：${error}`);\n    }\n  }\n};\n\n// …\n\nregisterServiceWorker();\n\n```\n\n:::warning \nservice worker 代码只是一个驻留在我们的 app 内的一个 JavaScript 文件（注意，这个文件的 URL 是相对于源（origin）的，而不是相对于引用它的那个 JS 文件）。  \n:::\n\n单个 service worker 可以控制很多页面。每个作用域（scope）里的页面加载完的时候，安装在页面的 service worker 就可以控制它。需要小心 service worker 脚本里的全局变量：每个页面不会有自己独有的 worker。\n\n## 使用Service Worker离线缓存\n\n`install` 事件会在注册成功完成之后触发。`install` 事件通常会这样用，将离线运行 app 产生的资源放置在浏览器离线缓存的空间。为了实现这个，可使用 Service Worker 的存储 API——`cache`——一个 service worker 上的全局对象，它可以存储网络响应发来的资源，并且根据它们的请求来生成 key。这个 API 和浏览器的标准的缓存工作原理很相似，但它特定于域。直到你清理它们之前，这些内容都会持久存在。\n\n```js\nconst addResourcesToCache = async (resources) => {\n    const cache = await caches.open(\"v1\");\n    await cache.addAll(resources);\n};\n\nself.addEventListener(\"install\", (event) => {\n    event.waitUntil(\n        addResourcesToCache([\n              \"/\",\n              \"/index.html\",\n              \"/style.css\",\n              \"/app.js\",\n              \"/image-list.js\",\n              \"/logo.jpg\",\n              \"/gallery/1.jpg\",\n              \"/gallery/2.jpg\",\n              \"/gallery/3.jpg\",\n        ])\n    );\n});\n```\n\n1. 使用`install`事件监听器监听`service worker`（即self），接着在事件内调用`ExtendableEvent.waitUntil()`方法——确保Service Worker不会在`waitUntil`里面的代码执行完之前安装完成。\n2. 在 `addResourcesToCache()` 内，使用了 [`caches.open()`](https://developer.mozilla.org/zh-CN/docs/Web/API/CacheStorage/open) 方法来创建了叫做 `v1` 的新缓存，这将会作为站点资源缓存的第 1 个版本。然后在创建的缓存中调用 `addAll()` 函数，它的参数采用一个 URL 数组，指向想要缓存的所有资源。其中，URL 是相对于 worker 的location)。\n3. 如果 promise 被拒绝，安装就会失败，这个 worker 不会做任何事情。\n4. 当安装成功完成之后，service worker 就会激活。\n\n:::tip\n Web Storage API（`localStorage`）跟 service worker 的 cache 工作原理十分类似，但是它是同步的，所以不允许在 service worker 中使用。\n:::\n\n:::tip\n也可以在 service worker 中使用 [IndexedDB](https://developer.mozilla.org/zh-CN/docs/Web/API/IndexedDB_API) 来做数据存储。\n:::\n\n通过上面一步，已将站点资源缓存了，但还需要告诉Service Worker让它用这些缓存内容做点啥。这个可通过`fetch`事件来处理：\n1. 每次获取 service worker 控制的资源时，都会触发 `fetch` 事件，这些资源包括了指定的作用域内的文档，和这些文档内引用的其他任何资源（比如 `index.html` 发起了一个跨源的请求来嵌入一个图片，这个也会通过 service worker）。\n2. 可以给 service worker 添加一个 `fetch` 的事件监听器，接着调用 event 上的 `respondWith()` 方法来劫持 HTTP 响应，然后可以用自己的方法来更新它们。\n3. 在任何情况下，会首先响应缓存的 URL 和网络请求的 URL 相匹配的资源\n\n```js\nconst putInCache = async (request, response) => {\n    const cache = await caches.open(\"v1\");\n    await cache.put(request, response);\n};\n\nconst cacheFirst = async ({ request, preloadResponsePromise, fallbackUrl }) => {\n    // 首先，尝试从缓存中获取资源\n    const responseFromCache = await caches.match(request);\n    if (responseFromCache) {\n        return responseFromCache;\n    }\n\n    // 然后尝试从网络中获取资源\n    try {\n        const responseFromNetwork = await fetch(request);\n        // 响应可能会被使用\n        // 需要将它的拷贝放入缓存\n        // 然后再返回该响应\n        putInCache(request, responseFromNetwork.clone());\n        return responseFromNetwork;\n    } catch (error) {\n        const fallbackResponse = await caches.match(fallbackUrl);\n        if (fallbackResponse) {\n            return fallbackResponse;\n        }\n        // 当回落的响应也不可用时，便无能为力了，但需要返回 Response 对象\n        return new Response(\"Network error happened\", {\n            status: 408,\n            headers: { \"Content-Type\": \"text/plain\" },\n        });\n    }\n};\n\nself.addEventListener(\"fetch\", (event) => {\n    event.respondWith(\n        cacheFirst({\n            request: event.request,\n            fallbackUrl: \"/gallery/1.jpg\",\n        })\n    );\n});\n\n```\n\n`caches.match(event.request)` 允许对网络请求里的每个资源与缓存里可获取的等效资源进行匹配，查看缓存中是否有相应的资源。该匹配通过 URL 和各种标头进行，就像正常的 HTTP 请求一样。\n\n![image.png](https://raw.githubusercontent.com/fw6/assets/main/toy_docs/20230721215953.png)\n\n\n\n\n## 注册失败的可能原因\n\n- 没有在 HTTPS 下运行你的程序。\n- service worker 文件的路径没有写对——需要相对于源（origin），而不是 app 的根目录。\n- service worker不允许 app 指向不同源（origin）。\n- service worker 只能在 service worker 作用域内捕获客户端发出的请求。\n- service worker 最大的作用域是 worker 所在的位置（换句话说，如果脚本 `sw.js` 位于 `/js/sw.js` 中，默认情况下它只能控制 `/js/` 下的 URL）。可以使用 [`Service-Worker-Allowed`](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Header/Service-Worker-Allowed \"This is a link to an unwritten page\") 标头指定 worker 的最大作用域列表。\n- 在 Firefox 中，若用户处于[无痕浏览模式](https://support.mozilla.org/zh-CN/kb/private-browsing-use-firefox-without-history)、禁用了历史记录或者启用了在 Firefox 关闭时清除历史记录，Service Worker API 将被隐藏而无法使用。\n- 在 Chrome 中，当启用“阻止所有 Cookie（不建议）”选项时，注册将会失败。\n\n\n### Service Worker相关API\n\n### Service Worker\n\n`Service Worker API`的 **`ServiceWorker`** 接口提供了对 service worker 的引用。各个浏览上下文（例如页面、worker 等）可以与相同的 service worker 相关联，每个浏览上下文都可以通过唯一的 `ServiceWorker` 对象访问。\n\n`ServiceWorker` 接口被分配了一系列生命周期事件——`install` 和 `activate`——以及功能型的事件，包括 `fetch`。一个 ServiceWorker 对象有一个与之关联的 `ServiceWorker.state`，指示着它的生命周期。\n\n```js\n/// 下面代码监听了任何`ServiceWorker.state`的改变，并在页面中显示其值\n\nlet serviceWorker;\nif (registration.installing) {\n  serviceWorker = registration.installing;\n  document.querySelector('#kind').textContent = 'installing';\n} else if (registration.waiting) {\n  serviceWorker = registration.waiting;\n  document.querySelector('#kind').textContent = 'waiting';\n} else if (registration.active) {\n  serviceWorker = registration.active;\n  document.querySelector('#kind').textContent = 'active';\n}\n\nif (serviceWorker) {\n  logState(serviceWorker.state);\n  serviceWorker.addEventListener('statechange', function(e) {\n  logState(e.target.state);\n  });\n}\n```\n\n### Fetch\n\nFetch 提供了对 [`Request`](https://developer.mozilla.org/zh-CN/docs/Web/API/Request) 和 [`Response`](https://developer.mozilla.org/zh-CN/docs/Web/API/Response)（以及其他与网络请求有关的）对象的通用定义。这将在未来更多需要它们的地方使用它们，无论是 service worker、Cache API，又或者是其他处理请求和响应的方式，甚至是任何一种需要在程序中生成响应的方式（即使用计算机程序或者个人编程指令）。\n\nFetch 的核心在于对 HTTP 接口的抽象，包括 [`Request`](https://developer.mozilla.org/zh-CN/docs/Web/API/Request)，[`Response`](https://developer.mozilla.org/zh-CN/docs/Web/API/Response)，[`Headers`](https://developer.mozilla.org/zh-CN/docs/Web/API/Headers)，`Body`，以及用于初始化异步请求的 [`global fetch`](https://developer.mozilla.org/zh-CN/docs/Web/API/fetch \"global fetch\")。得益于 JavaScript 实现的这些抽象好的 HTTP 模块，其他接口能够很方便的使用这些功能。\n\n### Cache\n\n**`Cache`** 接口为缓存的 [`Request`](http://fetch.spec.whatwg.org/#request) / `Response` 对象对提供存储机制，例如，作为[`ServiceWorker`](https://developer.mozilla.org/zh-CN/docs/Web/API/ServiceWorker) 生命周期的一部分。请注意，Cache 接口像 workers 一样，是暴露在 window 作用域下的。尽管它被定义在 service worker 的标准中，但是它不必一定要配合 service worker 使用。\n\n一个域可以有多个命名 Cache 对象。你需要在你的脚本 (例如，在 [`ServiceWorker`](https://developer.mozilla.org/zh-CN/docs/Web/API/ServiceWorker) 中) 中处理缓存更新的方式。除非明确地更新缓存，否则缓存将不会被更新；除非删除，否则缓存数据不会过期。使用 [`CacheStorage.open(cacheName)`](https://developer.mozilla.org/zh-CN/docs/Web/API/CacheStorage/open \"CacheStorage.open(cacheName)\") 打开一个 Cache 对象，再使用 Cache 对象的方法去处理缓存。\n\n需要定期地清理缓存条目，因为每个浏览器都硬性限制了一个域下缓存数据的大小。缓存配额使用估算值，可以使用 [`StorageEstimate`](https://developer.mozilla.org/zh-CN/docs/Web/API/StorageManager/estimate) API 获得。浏览器尽其所能去管理磁盘空间，但它有可能删除一个域下的缓存数据。浏览器要么自动删除特定域的全部缓存，要么全部保留。确保按名称安装版本缓存，并仅从可以安全操作的脚本版本中使用缓存。\n\n\n### Push\n\n**Push API** 给与了 Web 应用程序接收从服务器发出的推送消息的能力，无论 Web 应用程序是否在用户设备前台，甚至刚加载完成。这样，开发人员就可以向用户投放异步通知和更新，从而让用户能更及时地获取新内容。\n\n对于一个应用来说，要想要接收到推送消息，需要有一个激活的 service worker。当 service worker 处于激活状态时，可以使用 `PushManager.subscribe()` 来订阅推送通知。\n\n返回的 `PushSubscription`  包含了有关应用需要发送的推送消息的所有信息：端点及发送数据需要的加密密钥。\n\nService worker 会在必要的时候启动并接收传入的推送消息，将其传递给 `onpush`事件处理器。该方法允许应用程序在接收到推送消息时作出反应，例如显示一条通知（使用 `ServiceWorkerRegistration.showNotification()`）。\n\n每一个订阅对 service worker 来说都是唯一的。同时订阅的端点也是一个唯一的功能性 URL：端点的信息是给应用发送信息的全部必要条件。所以端点地址需要保密，否则其他应用也可以向你的应用推送消息。\n\n激活一个 service worker 来提供推送消息会导致资源消耗的增加，尤其是电池。不同的浏览器对此有不同的方案——目前为止还没有标准的机制。Firefox 允许对发送给应用的推送消息做数量限制（配额），但生成通知的推送消息不受此限制。该限制会在站点每一次被访问之后刷新。相比之下，Chrome 选择不作限制。\n\n### Notifications\n\n**Notifications API** 允许网页控制向最终用户显示系统通知 —这些都在顶级浏览上下文视口之外，因此即使用户已经切换标签页或移动到不同的应用程序，也可以显示。该 API 被设计成与不同平台上的现有通知系统兼容。\n\n要显示一个系统通知，首先，用户需要授予当前源的权限以显示系统通知，这通常在应用或站点初始化时，使用`Notification.requestPermission()` 方法来完成。接下来，使用 `Notification()`)构造函数创建一个新通知。这个方法可以传入两个参数。这必须传递一个标题参数，并可以选择性地传递一个选项对象来指定选项，如文本方向，正文，显示图标，通知声音播放，等等。\n\n```js\nNotification.requestPermission( function(status) {\n  console.log(status); // 仅当值为 \"granted\" 时显示通知\n  const n = new Notification(\"title\", {body: \"notification body\"}); // 显示通知\n});\n\n```\n\n:::warning\n\n此特性在 [Web Worker](https://developer.mozilla.org/zh-CN/docs/Web/API/Web_Workers_API) 中可用\n\n:::\n\n### BackgroundSync\n\n`ServiceWorkerRegistration` 接口的 `sync` 属性返回对 `SyncManager` 接口的引用，该接口管理后台同步进程。\n\n后台同步 API 使 Web 应用程序能够推迟任务，以便一旦用户拥有稳定的网络连接，它们就可以在 Service Worker 中运行。\n例如，电子邮件客户端应用程序可以让用户随时撰写和发送消息，即使设备没有网络连接也是如此。应用程序前端仅注册同步请求，当网络再次存在并处理同步时，服务侧会收到警报。\n\n以下示例，展示从浏览器上下文中注册一个标签为`sync-message`的后台同步任务\n```js\nasync function syncMessagesLater() {\n    const registration = await navigator.serviceWorker.ready;\n    try {\n        await registration.sync.register(\"sync-messages\");\n    } catch {\n        console.log(\"Background Sync could not be registered!\");\n    }\n}\n\n```\n\n检查指定标签的后台同步任务：\n```js\nnavigator.serviceWorker.ready.then((registration) => {\n    registration.sync.getTags().then((tags) => {\n        if (tags.includes(\"sync-messages\")) console.log(\"Messages sync already requested\");\n    });\n});\n```\n\n在Service Work中响应后台同步事件：\n```js\nself.addEventListener(\"sync\", (event) => {\n    if (event.tag === \"sync-messages\") {\n        event.waitUntil(sendOutboxMessages());\n    }\n});\n```\n\n[Introducing Background Sync - Chrome Developers](https://developer.chrome.com/blog/background-sync/)\n\n\n## 示例\n\n### Mock Service\n\n:::info\n更专业的库：[MSW – Seamless API mocking library for browser and Node | Mock Service Worker](https://mswjs.io/)\n:::\n\n```js\nself.addEventListener('fetch', function (event) {\n    console.log('Handling fetch event for', event.request.url);\n    const requestUrl = new URL(event.request.url);\n\n    if (requestUrl.pathname === '/urlshortener/v1/url' &&\n        event.request.headers.has('X-Mock-Response')) {\n        const responseBody = {\n            kind: 'urlshortener#url',\n            id: 'http://a.be/rqge13',\n            longUrl: 'https://a-long-request.github.io/index.html'\n        };\n\n        const responseInit = {\n            status: 200,\n            statusText: 'OK',\n            headers: {\n                'Content-Type': 'application/json',\n                'X-Mock-Response': 'yes'\n            }\n        };\n\n        const mockResponse = new Response(JSON.stringify(responseBody), responseInit);\n\n        console.log(' Responding with a mock response body:', responseBody);\n        event.respondWith(mockResponse);\n    }\n});\n```\n\n### Local Download\n\n通常，有必要在单页应用程序中包含下载功能 - 例如，绘图程序可能需要能够导出为 SVG 或生成客户端的位图格式。\n\n使用Service Worker 拦截表单 POST 操作，从请求正文中提取数据。然后，可以将数据放入充当可下载附件的请求中，并将其作为文件反馈给客户端。该文件似乎已被下载，无需发送至服务器。\n```js\nself.addEventListener('fetch', function (event) {\n    if (event.request.url.indexOf(\"download-file\") !== -1) {\n        event.respondWith(event.request.formData().then(function (formdata) {\n            var filename = formdata.get(\"filename\");\n            var body = formdata.get(\"filebody\");\n            var response = new Response(body);\n            response.headers.append('Content-Disposition', 'attachment; filename=\"' + filename + '\"');\n            return response;\n        }));\n    }\n});\n```","src/content/blog/200-Learning/210-Programing/Service Worker Cookbook.md","135756f92a10ccb1",{"html":519,"metadata":520},"\u003Cblockquote>\n\u003Cp>The winner ain’t the one with the fastest car it’s the one who refuses to lose.\u003Cbr>\n— \u003Ccite>Dale Earnhardt\u003C/cite>\u003C/p>\n\u003C/blockquote>\n\u003Caside class=\"callout callout-abstract\">\u003Cdiv class=\"callout-indicator\">\u003Cdiv class=\"callout-hint\">\u003Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"callout-hint-abstract\">\u003Crect x=\"8\" y=\"2\" width=\"8\" height=\"4\" rx=\"1\" ry=\"1\">\u003C/rect>\u003Cpath d=\"M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2\">\u003C/path>\u003Cpath d=\"M12 11h4\">\u003C/path>\u003Cpath d=\"M12 16h4\">\u003C/path>\u003Cpath d=\"M8 11h.01\">\u003C/path>\u003Cpath d=\"M8 16h.01\">\u003C/path>\u003C/svg>\u003C/div>\u003Cdiv class=\"callout-title\">Abstract\u003C/div>\u003C/div>\u003Cdiv class=\"callout-content\">\u003Cp>\u003Ccode>Service Worker\u003C/code> 本质上充当 Web 应用程序、浏览器与网络（可用时）之间的代理服务器。这个 API 旨在创建有效的离线体验，它会拦截网络请求并根据网络是否可用来采取适当的动作、更新来自服务器的的资源。它还提供入口以推送通知和访问后台同步 API。\u003C/p>\u003C/div>\u003C/aside>\n\u003Ch2 id=\"toc\">TOC\u003C/h2>\n\u003Cul>\n\u003Cli>\u003Ca href=\"#%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5\">基本概念\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#%E7%94%A8%E6%B3%95\">用法\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#%E4%BD%BF%E7%94%A8service-worker%E7%A6%BB%E7%BA%BF%E7%BC%93%E5%AD%98\">使用Service Worker离线缓存\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#%E6%B3%A8%E5%86%8C%E5%A4%B1%E8%B4%A5%E7%9A%84%E5%8F%AF%E8%83%BD%E5%8E%9F%E5%9B%A0\">注册失败的可能原因\u003C/a>\n\u003Cul>\n\u003Cli>\u003Ca href=\"#service-worker%E7%9B%B8%E5%85%B3api\">Service Worker相关API\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#service-worker\">Service Worker\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#fetch\">Fetch\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#cache\">Cache\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#push\">Push\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#notifications\">Notifications\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#backgroundsync\">BackgroundSync\u003C/a>\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\u003Ca href=\"#%E7%A4%BA%E4%BE%8B\">示例\u003C/a>\n\u003Cul>\n\u003Cli>\u003Ca href=\"#mock-service\">Mock Service\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#local-download\">Local Download\u003C/a>\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"基本概念\">基本概念\u003C/h2>\n\u003Cp>\u003Ccode>Service Worker\u003C/code> 是一个注册在指定源和路径下的事件驱动 \u003Ccode>worker\u003C/code>。它采用 JavaScript 文件的形式，控制关联的页面或者网站，拦截并修改访问和资源请求，细粒度地缓存资源。你可以完全控制应用在特定情形（最常见的情形是网络不可用）下的表现。\u003C/p>\n\u003Cp>\u003Ccode>Service Worker\u003C/code> 运行在 \u003Ccode>worker\u003C/code> 上下文：因此它无法访问 \u003Ccode>DOM\u003C/code>，相对于驱动应用的主 JavaScript 线程，它运行在其他线程中，所以不会造成阻塞。它被设计为完全异步；因此，同步 \u003Ccode>XHR\u003C/code> 和 \u003Ccode>Web Storage\u003C/code>不能在 \u003Ccode>Service Worker\u003C/code> 中使用。\u003C/p>\n\u003Cp>出于安全考量，\u003Ccode>Service Worker\u003C/code> 只能由 \u003Ccode>HTTPS\u003C/code> 承载，毕竟修改网络请求的能力暴露给中间人攻击会非常危险，如果允许访问这些强大的 API，此类攻击将会变得很严重。在 Firefox 浏览器的用户隐私模式，Service Worker 不可用。\u003C/p>\n\u003Caside class=\"callout callout-tip\">\u003Cdiv class=\"callout-indicator\">\u003Cdiv class=\"callout-hint\">\u003Csvg viewBox=\"0 0 24 24\" width=\"24\" height=\"24\" fill=\"currentColor\" class=\"callout-hint-tip\">\u003Cpath fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M1.43909 8.85483L1.44039 8.85354L4.96668 5.33815C5.30653 4.99386 5.7685 4.79662 6.2524 4.78972L6.26553 4.78963L12.9014 4.78962L13.8479 3.84308C16.9187 0.772319 20.0546 0.770617 21.4678 0.975145C21.8617 1.02914 22.2271 1.21053 22.5083 1.4917C22.7894 1.77284 22.9708 2.13821 23.0248 2.53199C23.2294 3.94517 23.2278 7.08119 20.1569 10.1521L19.2107 11.0983V17.7338L19.2106 17.7469C19.2037 18.2308 19.0067 18.6933 18.6624 19.0331L15.1456 22.5608C14.9095 22.7966 14.6137 22.964 14.29 23.0449C13.9663 23.1259 13.6267 23.1174 13.3074 23.0204C12.9881 22.9235 12.7011 22.7417 12.4771 22.4944C12.2533 22.2473 12.1006 21.9441 12.0355 21.6171L11.1783 17.3417L6.65869 12.822L4.34847 12.3589L2.38351 11.965C2.05664 11.8998 1.75272 11.747 1.50564 11.5232C1.25835 11.2992 1.07653 11.0122 0.979561 10.6929C0.882595 10.3736 0.874125 10.034 0.955057 9.7103C1.03599 9.38659 1.20328 9.09092 1.43909 8.85483ZM6.8186 10.8724L2.94619 10.096L6.32006 6.73268H10.9583L6.8186 10.8724ZM15.2219 5.21703C17.681 2.75787 20.0783 2.75376 21.1124 2.8876C21.2462 3.92172 21.2421 6.31895 18.783 8.77812L12.0728 15.4883L8.51172 11.9272L15.2219 5.21703ZM13.9042 21.0538L13.1279 17.1811L17.2676 13.0414V17.68L13.9042 21.0538Z\">\u003C/path>\u003Cpath d=\"M9.31827 18.3446C9.45046 17.8529 9.17864 17.3369 8.68945 17.1724C8.56178 17.1294 8.43145 17.1145 8.30512 17.1243C8.10513 17.1398 7.91519 17.2172 7.76181 17.3434C7.62613 17.455 7.51905 17.6048 7.45893 17.7835C6.97634 19.2186 5.77062 19.9878 4.52406 20.4029C4.08525 20.549 3.6605 20.644 3.29471 20.7053C3.35607 20.3395 3.45098 19.9148 3.59711 19.476C4.01221 18.2294 4.78141 17.0237 6.21648 16.5411C6.39528 16.481 6.54504 16.3739 6.65665 16.2382C6.85126 16.0016 6.92988 15.678 6.84417 15.3647C6.83922 15.3466 6.83373 15.3286 6.82767 15.3106C6.74106 15.053 6.55701 14.8557 6.33037 14.7459C6.10949 14.6389 5.84816 14.615 5.59715 14.6994C5.47743 14.7397 5.36103 14.7831 5.24786 14.8294C3.22626 15.6569 2.2347 17.4173 1.75357 18.8621C1.49662 19.6337 1.36993 20.3554 1.30679 20.8818C1.27505 21.1464 1.25893 21.3654 1.25072 21.5213C1.24662 21.5993 1.24448 21.6618 1.24337 21.7066L1.243 21.7226L1.24235 21.7605L1.2422 21.7771L1.24217 21.7827L1.24217 21.7856C1.24217 22.3221 1.67703 22.7579 2.2137 22.7579L2.2155 22.7579L2.22337 22.7578L2.23956 22.7577C2.25293 22.7575 2.27096 22.7572 2.29338 22.7567C2.33821 22.7555 2.40073 22.7534 2.47876 22.7493C2.63466 22.7411 2.85361 22.725 3.11822 22.6932C3.64462 22.6301 4.36636 22.5034 5.13797 22.2464C6.58274 21.7653 8.3431 20.7738 9.17063 18.7522C9.21696 18.639 9.26037 18.5226 9.30064 18.4029C9.30716 18.3835 9.31304 18.364 9.31827 18.3446Z\">\u003C/path>\u003C/svg>\u003C/div>\u003Cdiv class=\"callout-title\">Tip\u003C/div>\u003C/div>\u003Cdiv class=\"callout-content\">\u003Cp>Service worker 大量使用 \u003Ccode>Promise\u003C/code>，因为通常它们会等待响应后继续，并根据响应返回一个成功或者失败的操作。Promise 非常适合这种场景。\u003C/p>\u003C/div>\u003C/aside>\n\u003Ch2 id=\"用法\">用法\u003C/h2>\n\u003Cp>通常遵循以下基本步骤来使用 service worker：\u003C/p>\n\u003Col>\n\u003Cli>获取 service worker 代码，然后使用 \u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/ServiceWorkerContainer/register\">\u003Ccode>serviceWorkerContainer.register()\u003C/code>\u003C/a> 来注册。如果成功，service worker 将在 \u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/ServiceWorkerGlobalScope\">\u003Ccode>ServiceWorkerGlobalScope\u003C/code>\u003C/a> 中执行；这本质上是一种特殊的上下文，在主脚本执行线程之外运行，没有访问 DOM 的权限。Service Worker 现在已为处理事件做好准备。\u003C/li>\n\u003Cli>安装完成。\u003Ccode>install\u003C/code> 事件始终是发送给 service worker 的第一个事件（这可用于启动填充 IndexedDB 和缓存站点资源的过程）。在此步骤期间，应用程序正在为离线可用做准备。\u003C/li>\n\u003Cli>当 \u003Ccode>install\u003C/code> 程序处理完成时，service worker 被视为已安装。此时，service worker 的先前版本可能处于激活的状态并控制着打开的页面。由于我们不希望同一 service worker 的两个不同版本同时运行，因此新版本尚未激活。\u003C/li>\n\u003Cli>一旦 service worker 的旧版本控制的页面都已关闭，就可以安全地停用旧版本，并且新安装的 service worker 将收到 \u003Ccode>activate\u003C/code> 事件。\u003Ccode>activate\u003C/code> 的主要用途是去清理 service worker 之前版本使用的资源。新的 service worker 可以调用 \u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/ServiceWorkerGlobalScope/skipWaiting\">\u003Ccode>skipWaiting()\u003C/code>\u003C/a> 要求立即激活，而无需要求打开的页面关闭。然后，新的 service worker 将立即收到 \u003Ccode>activate\u003C/code> 事件，并将接管任何打开的页面。\u003C/li>\n\u003Cli>激活后，service worker 将立即控制页面，但是只会控制那些在 \u003Ccode>register()\u003C/code> 成功后打开的页面。换句话说，文档必须重新加载才能真正的受到控制，因为文档在有或者没有 service worker 的情况下开始存在，并在其生命周期内维护它。为了覆盖次默认行为并在页面打开的情况下，service worker 可以调用 \u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Clients/claim\">\u003Ccode>clients.claim()\u003C/code>\u003C/a> 方法。\u003C/li>\n\u003Cli>每当获取新版本的 service worker 时，都会再次发生此循环，并在新版本的激活期间清理上一个版本的残留。\u003C/li>\n\u003C/ol>\n\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/fw6/assets/main/toy_docs/20230721213529.png\" alt=\"image.png\">\u003C/p>\n\u003Cp>以下是可用的 service worker 事件：\u003C/p>\n\u003Cul>\n\u003Cli>install\u003C/li>\n\u003Cli>activate\u003C/li>\n\u003Cli>message\n受控页面可以使用 \u003Ccode>ServiceWorker.postMessage()\u003C/code> 方法向 Service Worker 发送消息。 Service Worker 可以选择通过与受控页面相对应的 \u003Ccode>Client.postMessage()\u003C/code> 发回响应。\u003C/li>\n\u003Cli>功能性事件\n\u003Cul>\n\u003Cli>fetch\u003Cbr>\n当主应用线程发出网络请求时，会在 Service Worker 的全局范围内触发 \u003Ccode>fetch\u003C/code> 事件。它能够拦截网络请求并发送自定义响应（例如，返回本地缓存）。\u003C/li>\n\u003Cli>sync\u003Cbr>\n当向 \u003Ccode>SyncManager\u003C/code> 注册事件的页面（或工作线程）正在运行且网络连接可用时，将触发 \u003Ccode>ServiceWorkerGlobalScope\u003C/code> 接口的 \u003Ccode>sync\u003C/code> 事件。\u003C/li>\n\u003Cli>push\u003Cbr>\n当 Service Worker 收到推送消息时， \u003Ccode>push\u003C/code> 事件将发送到 Service Worker 的全局范围（由 \u003Ccode>ServiceWorkerGlobalScope\u003C/code> 接口表示）。\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ul>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"js\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">const\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> registerServiceWorker\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#F47067\"> async\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> () \u003C/span>\u003Cspan style=\"color:#F47067\">=>\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">  if\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (\u003C/span>\u003Cspan style=\"color:#96D0FF\">\"serviceWorker\"\u003C/span>\u003Cspan style=\"color:#F47067\"> in\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> navigator) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">    try\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">      const\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> registration\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#F47067\"> await\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> navigator.serviceWorker.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">register\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#96D0FF\">\"/sw.js\"\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">        scope: \u003C/span>\u003Cspan style=\"color:#96D0FF\">\"/\"\u003C/span>\u003Cspan style=\"color:#ADBAC7\">,\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">      });\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">      if\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (registration.installing) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">        console.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">log\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#96D0FF\">\"正在安装 Service worker\"\u003C/span>\u003Cspan style=\"color:#ADBAC7\">);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">      } \u003C/span>\u003Cspan style=\"color:#F47067\">else\u003C/span>\u003Cspan style=\"color:#F47067\"> if\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (registration.waiting) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">        console.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">log\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#96D0FF\">\"已安装 Service worker installed\"\u003C/span>\u003Cspan style=\"color:#ADBAC7\">);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">      } \u003C/span>\u003Cspan style=\"color:#F47067\">else\u003C/span>\u003Cspan style=\"color:#F47067\"> if\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (registration.active) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">        console.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">log\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#96D0FF\">\"激活 Service worker\"\u003C/span>\u003Cspan style=\"color:#ADBAC7\">);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">      }\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    } \u003C/span>\u003Cspan style=\"color:#F47067\">catch\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (error) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">      console.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">error\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#96D0FF\">`注册失败：${\u003C/span>\u003Cspan style=\"color:#ADBAC7\">error\u003C/span>\u003Cspan style=\"color:#96D0FF\">}`\u003C/span>\u003Cspan style=\"color:#ADBAC7\">);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    }\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">  }\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">};\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">// …\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">registerServiceWorker\u003C/span>\u003Cspan style=\"color:#ADBAC7\">();\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Caside class=\"callout callout-warn\">\u003Cdiv class=\"callout-indicator\">\u003Cdiv class=\"callout-hint\">\u003Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" aria-hidden=\"true\">\u003Cpath d=\"M12 9v4m0 4h.01M8.681 4.082C9.351 2.797 10.621 2 12 2s2.649.797 3.319 2.082l6.203 11.904a4.28 4.28 0 0 1-.046 4.019C20.793 21.241 19.549 22 18.203 22H5.797c-1.346 0-2.59-.759-3.273-1.995a4.28 4.28 0 0 1-.046-4.019L8.681 4.082Z\">\u003C/path>\u003C/svg>\u003C/div>\u003Cdiv class=\"callout-title\">Warning\u003C/div>\u003C/div>\u003Cdiv class=\"callout-content\">\u003Cp>service worker 代码只是一个驻留在我们的 app 内的一个 JavaScript 文件（注意，这个文件的 URL 是相对于源（origin）的，而不是相对于引用它的那个 JS 文件）。\u003C/p>\u003C/div>\u003C/aside>\n\u003Cp>单个 service worker 可以控制很多页面。每个作用域（scope）里的页面加载完的时候，安装在页面的 service worker 就可以控制它。需要小心 service worker 脚本里的全局变量：每个页面不会有自己独有的 worker。\u003C/p>\n\u003Ch2 id=\"使用service-worker离线缓存\">使用Service Worker离线缓存\u003C/h2>\n\u003Cp>\u003Ccode>install\u003C/code> 事件会在注册成功完成之后触发。\u003Ccode>install\u003C/code> 事件通常会这样用，将离线运行 app 产生的资源放置在浏览器离线缓存的空间。为了实现这个，可使用 Service Worker 的存储 API——\u003Ccode>cache\u003C/code>——一个 service worker 上的全局对象，它可以存储网络响应发来的资源，并且根据它们的请求来生成 key。这个 API 和浏览器的标准的缓存工作原理很相似，但它特定于域。直到你清理它们之前，这些内容都会持久存在。\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"js\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">const\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> addResourcesToCache\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#F47067\"> async\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (\u003C/span>\u003Cspan style=\"color:#F69D50\">resources\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) \u003C/span>\u003Cspan style=\"color:#F47067\">=>\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">    const\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> cache\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#F47067\"> await\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> caches.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">open\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#96D0FF\">\"v1\"\u003C/span>\u003Cspan style=\"color:#ADBAC7\">);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">    await\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> cache.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">addAll\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(resources);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">};\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">self.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">addEventListener\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#96D0FF\">\"install\"\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, (\u003C/span>\u003Cspan style=\"color:#F69D50\">event\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) \u003C/span>\u003Cspan style=\"color:#F47067\">=>\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    event.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">waitUntil\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">        addResourcesToCache\u003C/span>\u003Cspan style=\"color:#ADBAC7\">([\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#96D0FF\">              \"/\"\u003C/span>\u003Cspan style=\"color:#ADBAC7\">,\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#96D0FF\">              \"/index.html\"\u003C/span>\u003Cspan style=\"color:#ADBAC7\">,\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#96D0FF\">              \"/style.css\"\u003C/span>\u003Cspan style=\"color:#ADBAC7\">,\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#96D0FF\">              \"/app.js\"\u003C/span>\u003Cspan style=\"color:#ADBAC7\">,\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#96D0FF\">              \"/image-list.js\"\u003C/span>\u003Cspan style=\"color:#ADBAC7\">,\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#96D0FF\">              \"/logo.jpg\"\u003C/span>\u003Cspan style=\"color:#ADBAC7\">,\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#96D0FF\">              \"/gallery/1.jpg\"\u003C/span>\u003Cspan style=\"color:#ADBAC7\">,\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#96D0FF\">              \"/gallery/2.jpg\"\u003C/span>\u003Cspan style=\"color:#ADBAC7\">,\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#96D0FF\">              \"/gallery/3.jpg\"\u003C/span>\u003Cspan style=\"color:#ADBAC7\">,\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">        ])\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    );\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">});\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Col>\n\u003Cli>使用\u003Ccode>install\u003C/code>事件监听器监听\u003Ccode>service worker\u003C/code>（即self），接着在事件内调用\u003Ccode>ExtendableEvent.waitUntil()\u003C/code>方法——确保Service Worker不会在\u003Ccode>waitUntil\u003C/code>里面的代码执行完之前安装完成。\u003C/li>\n\u003Cli>在 \u003Ccode>addResourcesToCache()\u003C/code> 内，使用了 \u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/CacheStorage/open\">\u003Ccode>caches.open()\u003C/code>\u003C/a> 方法来创建了叫做 \u003Ccode>v1\u003C/code> 的新缓存，这将会作为站点资源缓存的第 1 个版本。然后在创建的缓存中调用 \u003Ccode>addAll()\u003C/code> 函数，它的参数采用一个 URL 数组，指向想要缓存的所有资源。其中，URL 是相对于 worker 的location)。\u003C/li>\n\u003Cli>如果 promise 被拒绝，安装就会失败，这个 worker 不会做任何事情。\u003C/li>\n\u003Cli>当安装成功完成之后，service worker 就会激活。\u003C/li>\n\u003C/ol>\n\u003Caside class=\"callout callout-tip\">\u003Cdiv class=\"callout-indicator\">\u003Cdiv class=\"callout-hint\">\u003Csvg viewBox=\"0 0 24 24\" width=\"24\" height=\"24\" fill=\"currentColor\" class=\"callout-hint-tip\">\u003Cpath fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M1.43909 8.85483L1.44039 8.85354L4.96668 5.33815C5.30653 4.99386 5.7685 4.79662 6.2524 4.78972L6.26553 4.78963L12.9014 4.78962L13.8479 3.84308C16.9187 0.772319 20.0546 0.770617 21.4678 0.975145C21.8617 1.02914 22.2271 1.21053 22.5083 1.4917C22.7894 1.77284 22.9708 2.13821 23.0248 2.53199C23.2294 3.94517 23.2278 7.08119 20.1569 10.1521L19.2107 11.0983V17.7338L19.2106 17.7469C19.2037 18.2308 19.0067 18.6933 18.6624 19.0331L15.1456 22.5608C14.9095 22.7966 14.6137 22.964 14.29 23.0449C13.9663 23.1259 13.6267 23.1174 13.3074 23.0204C12.9881 22.9235 12.7011 22.7417 12.4771 22.4944C12.2533 22.2473 12.1006 21.9441 12.0355 21.6171L11.1783 17.3417L6.65869 12.822L4.34847 12.3589L2.38351 11.965C2.05664 11.8998 1.75272 11.747 1.50564 11.5232C1.25835 11.2992 1.07653 11.0122 0.979561 10.6929C0.882595 10.3736 0.874125 10.034 0.955057 9.7103C1.03599 9.38659 1.20328 9.09092 1.43909 8.85483ZM6.8186 10.8724L2.94619 10.096L6.32006 6.73268H10.9583L6.8186 10.8724ZM15.2219 5.21703C17.681 2.75787 20.0783 2.75376 21.1124 2.8876C21.2462 3.92172 21.2421 6.31895 18.783 8.77812L12.0728 15.4883L8.51172 11.9272L15.2219 5.21703ZM13.9042 21.0538L13.1279 17.1811L17.2676 13.0414V17.68L13.9042 21.0538Z\">\u003C/path>\u003Cpath d=\"M9.31827 18.3446C9.45046 17.8529 9.17864 17.3369 8.68945 17.1724C8.56178 17.1294 8.43145 17.1145 8.30512 17.1243C8.10513 17.1398 7.91519 17.2172 7.76181 17.3434C7.62613 17.455 7.51905 17.6048 7.45893 17.7835C6.97634 19.2186 5.77062 19.9878 4.52406 20.4029C4.08525 20.549 3.6605 20.644 3.29471 20.7053C3.35607 20.3395 3.45098 19.9148 3.59711 19.476C4.01221 18.2294 4.78141 17.0237 6.21648 16.5411C6.39528 16.481 6.54504 16.3739 6.65665 16.2382C6.85126 16.0016 6.92988 15.678 6.84417 15.3647C6.83922 15.3466 6.83373 15.3286 6.82767 15.3106C6.74106 15.053 6.55701 14.8557 6.33037 14.7459C6.10949 14.6389 5.84816 14.615 5.59715 14.6994C5.47743 14.7397 5.36103 14.7831 5.24786 14.8294C3.22626 15.6569 2.2347 17.4173 1.75357 18.8621C1.49662 19.6337 1.36993 20.3554 1.30679 20.8818C1.27505 21.1464 1.25893 21.3654 1.25072 21.5213C1.24662 21.5993 1.24448 21.6618 1.24337 21.7066L1.243 21.7226L1.24235 21.7605L1.2422 21.7771L1.24217 21.7827L1.24217 21.7856C1.24217 22.3221 1.67703 22.7579 2.2137 22.7579L2.2155 22.7579L2.22337 22.7578L2.23956 22.7577C2.25293 22.7575 2.27096 22.7572 2.29338 22.7567C2.33821 22.7555 2.40073 22.7534 2.47876 22.7493C2.63466 22.7411 2.85361 22.725 3.11822 22.6932C3.64462 22.6301 4.36636 22.5034 5.13797 22.2464C6.58274 21.7653 8.3431 20.7738 9.17063 18.7522C9.21696 18.639 9.26037 18.5226 9.30064 18.4029C9.30716 18.3835 9.31304 18.364 9.31827 18.3446Z\">\u003C/path>\u003C/svg>\u003C/div>\u003Cdiv class=\"callout-title\">Tip\u003C/div>\u003C/div>\u003Cdiv class=\"callout-content\">\u003Cp> Web Storage API（\u003Ccode>localStorage\u003C/code>）跟 service worker 的 cache 工作原理十分类似，但是它是同步的，所以不允许在 service worker 中使用。\u003C/p>\u003C/div>\u003C/aside>\n\u003Caside class=\"callout callout-tip\">\u003Cdiv class=\"callout-indicator\">\u003Cdiv class=\"callout-hint\">\u003Csvg viewBox=\"0 0 24 24\" width=\"24\" height=\"24\" fill=\"currentColor\" class=\"callout-hint-tip\">\u003Cpath fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M1.43909 8.85483L1.44039 8.85354L4.96668 5.33815C5.30653 4.99386 5.7685 4.79662 6.2524 4.78972L6.26553 4.78963L12.9014 4.78962L13.8479 3.84308C16.9187 0.772319 20.0546 0.770617 21.4678 0.975145C21.8617 1.02914 22.2271 1.21053 22.5083 1.4917C22.7894 1.77284 22.9708 2.13821 23.0248 2.53199C23.2294 3.94517 23.2278 7.08119 20.1569 10.1521L19.2107 11.0983V17.7338L19.2106 17.7469C19.2037 18.2308 19.0067 18.6933 18.6624 19.0331L15.1456 22.5608C14.9095 22.7966 14.6137 22.964 14.29 23.0449C13.9663 23.1259 13.6267 23.1174 13.3074 23.0204C12.9881 22.9235 12.7011 22.7417 12.4771 22.4944C12.2533 22.2473 12.1006 21.9441 12.0355 21.6171L11.1783 17.3417L6.65869 12.822L4.34847 12.3589L2.38351 11.965C2.05664 11.8998 1.75272 11.747 1.50564 11.5232C1.25835 11.2992 1.07653 11.0122 0.979561 10.6929C0.882595 10.3736 0.874125 10.034 0.955057 9.7103C1.03599 9.38659 1.20328 9.09092 1.43909 8.85483ZM6.8186 10.8724L2.94619 10.096L6.32006 6.73268H10.9583L6.8186 10.8724ZM15.2219 5.21703C17.681 2.75787 20.0783 2.75376 21.1124 2.8876C21.2462 3.92172 21.2421 6.31895 18.783 8.77812L12.0728 15.4883L8.51172 11.9272L15.2219 5.21703ZM13.9042 21.0538L13.1279 17.1811L17.2676 13.0414V17.68L13.9042 21.0538Z\">\u003C/path>\u003Cpath d=\"M9.31827 18.3446C9.45046 17.8529 9.17864 17.3369 8.68945 17.1724C8.56178 17.1294 8.43145 17.1145 8.30512 17.1243C8.10513 17.1398 7.91519 17.2172 7.76181 17.3434C7.62613 17.455 7.51905 17.6048 7.45893 17.7835C6.97634 19.2186 5.77062 19.9878 4.52406 20.4029C4.08525 20.549 3.6605 20.644 3.29471 20.7053C3.35607 20.3395 3.45098 19.9148 3.59711 19.476C4.01221 18.2294 4.78141 17.0237 6.21648 16.5411C6.39528 16.481 6.54504 16.3739 6.65665 16.2382C6.85126 16.0016 6.92988 15.678 6.84417 15.3647C6.83922 15.3466 6.83373 15.3286 6.82767 15.3106C6.74106 15.053 6.55701 14.8557 6.33037 14.7459C6.10949 14.6389 5.84816 14.615 5.59715 14.6994C5.47743 14.7397 5.36103 14.7831 5.24786 14.8294C3.22626 15.6569 2.2347 17.4173 1.75357 18.8621C1.49662 19.6337 1.36993 20.3554 1.30679 20.8818C1.27505 21.1464 1.25893 21.3654 1.25072 21.5213C1.24662 21.5993 1.24448 21.6618 1.24337 21.7066L1.243 21.7226L1.24235 21.7605L1.2422 21.7771L1.24217 21.7827L1.24217 21.7856C1.24217 22.3221 1.67703 22.7579 2.2137 22.7579L2.2155 22.7579L2.22337 22.7578L2.23956 22.7577C2.25293 22.7575 2.27096 22.7572 2.29338 22.7567C2.33821 22.7555 2.40073 22.7534 2.47876 22.7493C2.63466 22.7411 2.85361 22.725 3.11822 22.6932C3.64462 22.6301 4.36636 22.5034 5.13797 22.2464C6.58274 21.7653 8.3431 20.7738 9.17063 18.7522C9.21696 18.639 9.26037 18.5226 9.30064 18.4029C9.30716 18.3835 9.31304 18.364 9.31827 18.3446Z\">\u003C/path>\u003C/svg>\u003C/div>\u003Cdiv class=\"callout-title\">Tip\u003C/div>\u003C/div>\u003Cdiv class=\"callout-content\">\u003Cp>也可以在 service worker 中使用 \u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/IndexedDB_API\">IndexedDB\u003C/a> 来做数据存储。\u003C/p>\u003C/div>\u003C/aside>\n\u003Cp>通过上面一步，已将站点资源缓存了，但还需要告诉Service Worker让它用这些缓存内容做点啥。这个可通过\u003Ccode>fetch\u003C/code>事件来处理：\u003C/p>\n\u003Col>\n\u003Cli>每次获取 service worker 控制的资源时，都会触发 \u003Ccode>fetch\u003C/code> 事件，这些资源包括了指定的作用域内的文档，和这些文档内引用的其他任何资源（比如 \u003Ccode>index.html\u003C/code> 发起了一个跨源的请求来嵌入一个图片，这个也会通过 service worker）。\u003C/li>\n\u003Cli>可以给 service worker 添加一个 \u003Ccode>fetch\u003C/code> 的事件监听器，接着调用 event 上的 \u003Ccode>respondWith()\u003C/code> 方法来劫持 HTTP 响应，然后可以用自己的方法来更新它们。\u003C/li>\n\u003Cli>在任何情况下，会首先响应缓存的 URL 和网络请求的 URL 相匹配的资源\u003C/li>\n\u003C/ol>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"js\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">const\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> putInCache\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#F47067\"> async\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (\u003C/span>\u003Cspan style=\"color:#F69D50\">request\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, \u003C/span>\u003Cspan style=\"color:#F69D50\">response\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) \u003C/span>\u003Cspan style=\"color:#F47067\">=>\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">    const\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> cache\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#F47067\"> await\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> caches.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">open\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#96D0FF\">\"v1\"\u003C/span>\u003Cspan style=\"color:#ADBAC7\">);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">    await\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> cache.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">put\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(request, response);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">};\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">const\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> cacheFirst\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#F47067\"> async\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> ({ \u003C/span>\u003Cspan style=\"color:#F69D50\">request\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, \u003C/span>\u003Cspan style=\"color:#F69D50\">preloadResponsePromise\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, \u003C/span>\u003Cspan style=\"color:#F69D50\">fallbackUrl\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> }) \u003C/span>\u003Cspan style=\"color:#F47067\">=>\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">    // 首先，尝试从缓存中获取资源\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">    const\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> responseFromCache\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#F47067\"> await\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> caches.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">match\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(request);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">    if\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (responseFromCache) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">        return\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> responseFromCache;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    }\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">    // 然后尝试从网络中获取资源\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">    try\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">        const\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> responseFromNetwork\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#F47067\"> await\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> fetch\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(request);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">        // 响应可能会被使用\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">        // 需要将它的拷贝放入缓存\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">        // 然后再返回该响应\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">        putInCache\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(request, responseFromNetwork.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">clone\u003C/span>\u003Cspan style=\"color:#ADBAC7\">());\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">        return\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> responseFromNetwork;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    } \u003C/span>\u003Cspan style=\"color:#F47067\">catch\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (error) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">        const\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> fallbackResponse\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#F47067\"> await\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> caches.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">match\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(fallbackUrl);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">        if\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (fallbackResponse) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">            return\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> fallbackResponse;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">        }\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">        // 当回落的响应也不可用时，便无能为力了，但需要返回 Response 对象\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">        return\u003C/span>\u003Cspan style=\"color:#F47067\"> new\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> Response\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#96D0FF\">\"Network error happened\"\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">            status: \u003C/span>\u003Cspan style=\"color:#6CB6FF\">408\u003C/span>\u003Cspan style=\"color:#ADBAC7\">,\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">            headers: { \u003C/span>\u003Cspan style=\"color:#96D0FF\">\"Content-Type\"\u003C/span>\u003Cspan style=\"color:#ADBAC7\">: \u003C/span>\u003Cspan style=\"color:#96D0FF\">\"text/plain\"\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> },\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">        });\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    }\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">};\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">self.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">addEventListener\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#96D0FF\">\"fetch\"\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, (\u003C/span>\u003Cspan style=\"color:#F69D50\">event\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) \u003C/span>\u003Cspan style=\"color:#F47067\">=>\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    event.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">respondWith\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">        cacheFirst\u003C/span>\u003Cspan style=\"color:#ADBAC7\">({\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">            request: event.request,\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">            fallbackUrl: \u003C/span>\u003Cspan style=\"color:#96D0FF\">\"/gallery/1.jpg\"\u003C/span>\u003Cspan style=\"color:#ADBAC7\">,\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">        })\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    );\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">});\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Cp>\u003Ccode>caches.match(event.request)\u003C/code> 允许对网络请求里的每个资源与缓存里可获取的等效资源进行匹配，查看缓存中是否有相应的资源。该匹配通过 URL 和各种标头进行，就像正常的 HTTP 请求一样。\u003C/p>\n\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/fw6/assets/main/toy_docs/20230721215953.png\" alt=\"image.png\">\u003C/p>\n\u003Ch2 id=\"注册失败的可能原因\">注册失败的可能原因\u003C/h2>\n\u003Cul>\n\u003Cli>没有在 HTTPS 下运行你的程序。\u003C/li>\n\u003Cli>service worker 文件的路径没有写对——需要相对于源（origin），而不是 app 的根目录。\u003C/li>\n\u003Cli>service worker不允许 app 指向不同源（origin）。\u003C/li>\n\u003Cli>service worker 只能在 service worker 作用域内捕获客户端发出的请求。\u003C/li>\n\u003Cli>service worker 最大的作用域是 worker 所在的位置（换句话说，如果脚本 \u003Ccode>sw.js\u003C/code> 位于 \u003Ccode>/js/sw.js\u003C/code> 中，默认情况下它只能控制 \u003Ccode>/js/\u003C/code> 下的 URL）。可以使用 \u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Header/Service-Worker-Allowed\" title=\"This is a link to an unwritten page\">\u003Ccode>Service-Worker-Allowed\u003C/code>\u003C/a> 标头指定 worker 的最大作用域列表。\u003C/li>\n\u003Cli>在 Firefox 中，若用户处于\u003Ca href=\"https://support.mozilla.org/zh-CN/kb/private-browsing-use-firefox-without-history\">无痕浏览模式\u003C/a>、禁用了历史记录或者启用了在 Firefox 关闭时清除历史记录，Service Worker API 将被隐藏而无法使用。\u003C/li>\n\u003Cli>在 Chrome 中，当启用“阻止所有 Cookie（不建议）”选项时，注册将会失败。\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"service-worker相关api\">Service Worker相关API\u003C/h3>\n\u003Ch3 id=\"service-worker\">Service Worker\u003C/h3>\n\u003Cp>\u003Ccode>Service Worker API\u003C/code>的 \u003Cstrong>\u003Ccode>ServiceWorker\u003C/code>\u003C/strong> 接口提供了对 service worker 的引用。各个浏览上下文（例如页面、worker 等）可以与相同的 service worker 相关联，每个浏览上下文都可以通过唯一的 \u003Ccode>ServiceWorker\u003C/code> 对象访问。\u003C/p>\n\u003Cp>\u003Ccode>ServiceWorker\u003C/code> 接口被分配了一系列生命周期事件——\u003Ccode>install\u003C/code> 和 \u003Ccode>activate\u003C/code>——以及功能型的事件，包括 \u003Ccode>fetch\u003C/code>。一个 ServiceWorker 对象有一个与之关联的 \u003Ccode>ServiceWorker.state\u003C/code>，指示着它的生命周期。\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"js\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">/// 下面代码监听了任何`ServiceWorker.state`的改变，并在页面中显示其值\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">let\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> serviceWorker;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">if\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (registration.installing) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">  serviceWorker \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> registration.installing;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">  document.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">querySelector\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#96D0FF\">'#kind'\u003C/span>\u003Cspan style=\"color:#ADBAC7\">).textContent \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#96D0FF\"> 'installing'\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">} \u003C/span>\u003Cspan style=\"color:#F47067\">else\u003C/span>\u003Cspan style=\"color:#F47067\"> if\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (registration.waiting) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">  serviceWorker \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> registration.waiting;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">  document.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">querySelector\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#96D0FF\">'#kind'\u003C/span>\u003Cspan style=\"color:#ADBAC7\">).textContent \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#96D0FF\"> 'waiting'\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">} \u003C/span>\u003Cspan style=\"color:#F47067\">else\u003C/span>\u003Cspan style=\"color:#F47067\"> if\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (registration.active) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">  serviceWorker \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> registration.active;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">  document.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">querySelector\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#96D0FF\">'#kind'\u003C/span>\u003Cspan style=\"color:#ADBAC7\">).textContent \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#96D0FF\"> 'active'\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">}\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">if\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (serviceWorker) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">  logState\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(serviceWorker.state);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">  serviceWorker.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">addEventListener\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#96D0FF\">'statechange'\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, \u003C/span>\u003Cspan style=\"color:#F47067\">function\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#F69D50\">e\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">  logState\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(e.target.state);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">  });\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Ch3 id=\"fetch\">Fetch\u003C/h3>\n\u003Cp>Fetch 提供了对 \u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Request\">\u003Ccode>Request\u003C/code>\u003C/a> 和 \u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Response\">\u003Ccode>Response\u003C/code>\u003C/a>（以及其他与网络请求有关的）对象的通用定义。这将在未来更多需要它们的地方使用它们，无论是 service worker、Cache API，又或者是其他处理请求和响应的方式，甚至是任何一种需要在程序中生成响应的方式（即使用计算机程序或者个人编程指令）。\u003C/p>\n\u003Cp>Fetch 的核心在于对 HTTP 接口的抽象，包括 \u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Request\">\u003Ccode>Request\u003C/code>\u003C/a>，\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Response\">\u003Ccode>Response\u003C/code>\u003C/a>，\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Headers\">\u003Ccode>Headers\u003C/code>\u003C/a>，\u003Ccode>Body\u003C/code>，以及用于初始化异步请求的 \u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/fetch\" title=\"global fetch\">\u003Ccode>global fetch\u003C/code>\u003C/a>。得益于 JavaScript 实现的这些抽象好的 HTTP 模块，其他接口能够很方便的使用这些功能。\u003C/p>\n\u003Ch3 id=\"cache\">Cache\u003C/h3>\n\u003Cp>\u003Cstrong>\u003Ccode>Cache\u003C/code>\u003C/strong> 接口为缓存的 \u003Ca href=\"http://fetch.spec.whatwg.org/#request\">\u003Ccode>Request\u003C/code>\u003C/a> / \u003Ccode>Response\u003C/code> 对象对提供存储机制，例如，作为\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/ServiceWorker\">\u003Ccode>ServiceWorker\u003C/code>\u003C/a> 生命周期的一部分。请注意，Cache 接口像 workers 一样，是暴露在 window 作用域下的。尽管它被定义在 service worker 的标准中，但是它不必一定要配合 service worker 使用。\u003C/p>\n\u003Cp>一个域可以有多个命名 Cache 对象。你需要在你的脚本 (例如，在 \u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/ServiceWorker\">\u003Ccode>ServiceWorker\u003C/code>\u003C/a> 中) 中处理缓存更新的方式。除非明确地更新缓存，否则缓存将不会被更新；除非删除，否则缓存数据不会过期。使用 \u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/CacheStorage/open\" title=\"CacheStorage.open(cacheName)\">\u003Ccode>CacheStorage.open(cacheName)\u003C/code>\u003C/a> 打开一个 Cache 对象，再使用 Cache 对象的方法去处理缓存。\u003C/p>\n\u003Cp>需要定期地清理缓存条目，因为每个浏览器都硬性限制了一个域下缓存数据的大小。缓存配额使用估算值，可以使用 \u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/StorageManager/estimate\">\u003Ccode>StorageEstimate\u003C/code>\u003C/a> API 获得。浏览器尽其所能去管理磁盘空间，但它有可能删除一个域下的缓存数据。浏览器要么自动删除特定域的全部缓存，要么全部保留。确保按名称安装版本缓存，并仅从可以安全操作的脚本版本中使用缓存。\u003C/p>\n\u003Ch3 id=\"push\">Push\u003C/h3>\n\u003Cp>\u003Cstrong>Push API\u003C/strong> 给与了 Web 应用程序接收从服务器发出的推送消息的能力，无论 Web 应用程序是否在用户设备前台，甚至刚加载完成。这样，开发人员就可以向用户投放异步通知和更新，从而让用户能更及时地获取新内容。\u003C/p>\n\u003Cp>对于一个应用来说，要想要接收到推送消息，需要有一个激活的 service worker。当 service worker 处于激活状态时，可以使用 \u003Ccode>PushManager.subscribe()\u003C/code> 来订阅推送通知。\u003C/p>\n\u003Cp>返回的 \u003Ccode>PushSubscription\u003C/code>  包含了有关应用需要发送的推送消息的所有信息：端点及发送数据需要的加密密钥。\u003C/p>\n\u003Cp>Service worker 会在必要的时候启动并接收传入的推送消息，将其传递给 \u003Ccode>onpush\u003C/code>事件处理器。该方法允许应用程序在接收到推送消息时作出反应，例如显示一条通知（使用 \u003Ccode>ServiceWorkerRegistration.showNotification()\u003C/code>）。\u003C/p>\n\u003Cp>每一个订阅对 service worker 来说都是唯一的。同时订阅的端点也是一个唯一的功能性 URL：端点的信息是给应用发送信息的全部必要条件。所以端点地址需要保密，否则其他应用也可以向你的应用推送消息。\u003C/p>\n\u003Cp>激活一个 service worker 来提供推送消息会导致资源消耗的增加，尤其是电池。不同的浏览器对此有不同的方案——目前为止还没有标准的机制。Firefox 允许对发送给应用的推送消息做数量限制（配额），但生成通知的推送消息不受此限制。该限制会在站点每一次被访问之后刷新。相比之下，Chrome 选择不作限制。\u003C/p>\n\u003Ch3 id=\"notifications\">Notifications\u003C/h3>\n\u003Cp>\u003Cstrong>Notifications API\u003C/strong> 允许网页控制向最终用户显示系统通知 —这些都在顶级浏览上下文视口之外，因此即使用户已经切换标签页或移动到不同的应用程序，也可以显示。该 API 被设计成与不同平台上的现有通知系统兼容。\u003C/p>\n\u003Cp>要显示一个系统通知，首先，用户需要授予当前源的权限以显示系统通知，这通常在应用或站点初始化时，使用\u003Ccode>Notification.requestPermission()\u003C/code> 方法来完成。接下来，使用 \u003Ccode>Notification()\u003C/code>)构造函数创建一个新通知。这个方法可以传入两个参数。这必须传递一个标题参数，并可以选择性地传递一个选项对象来指定选项，如文本方向，正文，显示图标，通知声音播放，等等。\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"js\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">Notification.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">requestPermission\u003C/span>\u003Cspan style=\"color:#ADBAC7\">( \u003C/span>\u003Cspan style=\"color:#F47067\">function\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#F69D50\">status\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">  console.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">log\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(status); \u003C/span>\u003Cspan style=\"color:#768390\">// 仅当值为 \"granted\" 时显示通知\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">  const\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> n\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#F47067\"> new\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> Notification\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#96D0FF\">\"title\"\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, {body: \u003C/span>\u003Cspan style=\"color:#96D0FF\">\"notification body\"\u003C/span>\u003Cspan style=\"color:#ADBAC7\">}); \u003C/span>\u003Cspan style=\"color:#768390\">// 显示通知\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">});\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Caside class=\"callout callout-warn\">\u003Cdiv class=\"callout-indicator\">\u003Cdiv class=\"callout-hint\">\u003Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" aria-hidden=\"true\">\u003Cpath d=\"M12 9v4m0 4h.01M8.681 4.082C9.351 2.797 10.621 2 12 2s2.649.797 3.319 2.082l6.203 11.904a4.28 4.28 0 0 1-.046 4.019C20.793 21.241 19.549 22 18.203 22H5.797c-1.346 0-2.59-.759-3.273-1.995a4.28 4.28 0 0 1-.046-4.019L8.681 4.082Z\">\u003C/path>\u003C/svg>\u003C/div>\u003Cdiv class=\"callout-title\">Warning\u003C/div>\u003C/div>\u003Cdiv class=\"callout-content\">\u003Cp>此特性在 \u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Web_Workers_API\">Web Worker\u003C/a> 中可用\u003C/p>\u003C/div>\u003C/aside>\n\u003Ch3 id=\"backgroundsync\">BackgroundSync\u003C/h3>\n\u003Cp>\u003Ccode>ServiceWorkerRegistration\u003C/code> 接口的 \u003Ccode>sync\u003C/code> 属性返回对 \u003Ccode>SyncManager\u003C/code> 接口的引用，该接口管理后台同步进程。\u003C/p>\n\u003Cp>后台同步 API 使 Web 应用程序能够推迟任务，以便一旦用户拥有稳定的网络连接，它们就可以在 Service Worker 中运行。\n例如，电子邮件客户端应用程序可以让用户随时撰写和发送消息，即使设备没有网络连接也是如此。应用程序前端仅注册同步请求，当网络再次存在并处理同步时，服务侧会收到警报。\u003C/p>\n\u003Cp>以下示例，展示从浏览器上下文中注册一个标签为\u003Ccode>sync-message\u003C/code>的后台同步任务\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"js\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">async\u003C/span>\u003Cspan style=\"color:#F47067\"> function\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> syncMessagesLater\u003C/span>\u003Cspan style=\"color:#ADBAC7\">() {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">    const\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> registration\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#F47067\"> await\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> navigator.serviceWorker.ready;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">    try\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">        await\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> registration.sync.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">register\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#96D0FF\">\"sync-messages\"\u003C/span>\u003Cspan style=\"color:#ADBAC7\">);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    } \u003C/span>\u003Cspan style=\"color:#F47067\">catch\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">        console.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">log\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#96D0FF\">\"Background Sync could not be registered!\"\u003C/span>\u003Cspan style=\"color:#ADBAC7\">);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    }\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">}\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Cp>检查指定标签的后台同步任务：\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"js\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">navigator.serviceWorker.ready.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">then\u003C/span>\u003Cspan style=\"color:#ADBAC7\">((\u003C/span>\u003Cspan style=\"color:#F69D50\">registration\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) \u003C/span>\u003Cspan style=\"color:#F47067\">=>\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    registration.sync.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">getTags\u003C/span>\u003Cspan style=\"color:#ADBAC7\">().\u003C/span>\u003Cspan style=\"color:#DCBDFB\">then\u003C/span>\u003Cspan style=\"color:#ADBAC7\">((\u003C/span>\u003Cspan style=\"color:#F69D50\">tags\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) \u003C/span>\u003Cspan style=\"color:#F47067\">=>\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">        if\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (tags.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">includes\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#96D0FF\">\"sync-messages\"\u003C/span>\u003Cspan style=\"color:#ADBAC7\">)) console.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">log\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#96D0FF\">\"Messages sync already requested\"\u003C/span>\u003Cspan style=\"color:#ADBAC7\">);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    });\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">});\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Cp>在Service Work中响应后台同步事件：\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"js\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">self.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">addEventListener\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#96D0FF\">\"sync\"\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, (\u003C/span>\u003Cspan style=\"color:#F69D50\">event\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) \u003C/span>\u003Cspan style=\"color:#F47067\">=>\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">    if\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (event.tag \u003C/span>\u003Cspan style=\"color:#F47067\">===\u003C/span>\u003Cspan style=\"color:#96D0FF\"> \"sync-messages\"\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">        event.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">waitUntil\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#DCBDFB\">sendOutboxMessages\u003C/span>\u003Cspan style=\"color:#ADBAC7\">());\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    }\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">});\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Cp>\u003Ca href=\"https://developer.chrome.com/blog/background-sync/\">Introducing Background Sync - Chrome Developers\u003C/a>\u003C/p>\n\u003Ch2 id=\"示例\">示例\u003C/h2>\n\u003Ch3 id=\"mock-service\">Mock Service\u003C/h3>\n\u003Caside class=\"callout callout-assert\">\u003Cdiv class=\"callout-indicator\">\u003Cdiv class=\"callout-hint\">\u003Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" aria-hidden=\"true\">\u003Ccircle cx=\"19\" cy=\"5\" r=\"3\">\u003C/circle>\u003Cpath d=\"M20 11.929V15c0 1.656-1.344 3-3 3h-3l-6 4v-4H5c-1.656 0-3-1.344-3-3V7c0-1.656 1.344-3 3-3h7.071\">\u003C/path>\u003C/svg>\u003C/div>\u003Cdiv class=\"callout-title\">Info\u003C/div>\u003C/div>\u003Cdiv class=\"callout-content\">\u003Cp>更专业的库：\u003Ca href=\"https://mswjs.io/\">MSW – Seamless API mocking library for browser and Node | Mock Service Worker\u003C/a>\u003C/p>\u003C/div>\u003C/aside>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"js\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">self.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">addEventListener\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#96D0FF\">'fetch'\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, \u003C/span>\u003Cspan style=\"color:#F47067\">function\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (\u003C/span>\u003Cspan style=\"color:#F69D50\">event\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    console.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">log\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#96D0FF\">'Handling fetch event for'\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, event.request.url);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">    const\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> requestUrl\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#F47067\"> new\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> URL\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(event.request.url);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">    if\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (requestUrl.pathname \u003C/span>\u003Cspan style=\"color:#F47067\">===\u003C/span>\u003Cspan style=\"color:#96D0FF\"> '/urlshortener/v1/url'\u003C/span>\u003Cspan style=\"color:#F47067\"> &#x26;&#x26;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">        event.request.headers.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">has\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#96D0FF\">'X-Mock-Response'\u003C/span>\u003Cspan style=\"color:#ADBAC7\">)) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">        const\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> responseBody\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">            kind: \u003C/span>\u003Cspan style=\"color:#96D0FF\">'urlshortener#url'\u003C/span>\u003Cspan style=\"color:#ADBAC7\">,\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">            id: \u003C/span>\u003Cspan style=\"color:#96D0FF\">'http://a.be/rqge13'\u003C/span>\u003Cspan style=\"color:#ADBAC7\">,\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">            longUrl: \u003C/span>\u003Cspan style=\"color:#96D0FF\">'https://a-long-request.github.io/index.html'\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">        };\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">        const\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> responseInit\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">            status: \u003C/span>\u003Cspan style=\"color:#6CB6FF\">200\u003C/span>\u003Cspan style=\"color:#ADBAC7\">,\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">            statusText: \u003C/span>\u003Cspan style=\"color:#96D0FF\">'OK'\u003C/span>\u003Cspan style=\"color:#ADBAC7\">,\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">            headers: {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#96D0FF\">                'Content-Type'\u003C/span>\u003Cspan style=\"color:#ADBAC7\">: \u003C/span>\u003Cspan style=\"color:#96D0FF\">'application/json'\u003C/span>\u003Cspan style=\"color:#ADBAC7\">,\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#96D0FF\">                'X-Mock-Response'\u003C/span>\u003Cspan style=\"color:#ADBAC7\">: \u003C/span>\u003Cspan style=\"color:#96D0FF\">'yes'\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">            }\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">        };\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">        const\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> mockResponse\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#F47067\"> new\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> Response\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#6CB6FF\">JSON\u003C/span>\u003Cspan style=\"color:#ADBAC7\">.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">stringify\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(responseBody), responseInit);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">        console.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">log\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#96D0FF\">' Responding with a mock response body:'\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, responseBody);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">        event.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">respondWith\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(mockResponse);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    }\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">});\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Ch3 id=\"local-download\">Local Download\u003C/h3>\n\u003Cp>通常，有必要在单页应用程序中包含下载功能 - 例如，绘图程序可能需要能够导出为 SVG 或生成客户端的位图格式。\u003C/p>\n\u003Cp>使用Service Worker 拦截表单 POST 操作，从请求正文中提取数据。然后，可以将数据放入充当可下载附件的请求中，并将其作为文件反馈给客户端。该文件似乎已被下载，无需发送至服务器。\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"js\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">self.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">addEventListener\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#96D0FF\">'fetch'\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, \u003C/span>\u003Cspan style=\"color:#F47067\">function\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (\u003C/span>\u003Cspan style=\"color:#F69D50\">event\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">    if\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (event.request.url.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">indexOf\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#96D0FF\">\"download-file\"\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) \u003C/span>\u003Cspan style=\"color:#F47067\">!==\u003C/span>\u003Cspan style=\"color:#F47067\"> -\u003C/span>\u003Cspan style=\"color:#6CB6FF\">1\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">        event.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">respondWith\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(event.request.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">formData\u003C/span>\u003Cspan style=\"color:#ADBAC7\">().\u003C/span>\u003Cspan style=\"color:#DCBDFB\">then\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#F47067\">function\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (\u003C/span>\u003Cspan style=\"color:#F69D50\">formdata\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">            var\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> filename \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> formdata.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">get\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#96D0FF\">\"filename\"\u003C/span>\u003Cspan style=\"color:#ADBAC7\">);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">            var\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> body \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> formdata.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">get\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#96D0FF\">\"filebody\"\u003C/span>\u003Cspan style=\"color:#ADBAC7\">);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">            var\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> response \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#F47067\"> new\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> Response\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(body);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">            response.headers.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">append\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#96D0FF\">'Content-Disposition'\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, \u003C/span>\u003Cspan style=\"color:#96D0FF\">'attachment; filename=\"'\u003C/span>\u003Cspan style=\"color:#F47067\"> +\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> filename \u003C/span>\u003Cspan style=\"color:#F47067\">+\u003C/span>\u003Cspan style=\"color:#96D0FF\"> '\"'\u003C/span>\u003Cspan style=\"color:#ADBAC7\">);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">            return\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> response;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">        }));\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    }\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">});\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>",{"headings":521,"localImagePaths":561,"remoteImagePaths":562,"frontmatter":563,"imagePaths":569},[522,523,525,527,530,532,535,538,541,544,547,550,553,555,558],{"depth":31,"slug":324,"text":325},{"depth":31,"slug":524,"text":524},"基本概念",{"depth":31,"slug":526,"text":526},"用法",{"depth":31,"slug":528,"text":529},"使用service-worker离线缓存","使用Service Worker离线缓存",{"depth":31,"slug":531,"text":531},"注册失败的可能原因",{"depth":37,"slug":533,"text":534},"service-worker相关api","Service Worker相关API",{"depth":37,"slug":536,"text":537},"service-worker","Service Worker",{"depth":37,"slug":539,"text":540},"fetch","Fetch",{"depth":37,"slug":542,"text":543},"cache","Cache",{"depth":37,"slug":545,"text":546},"push","Push",{"depth":37,"slug":548,"text":549},"notifications","Notifications",{"depth":37,"slug":551,"text":552},"backgroundsync","BackgroundSync",{"depth":31,"slug":554,"text":554},"示例",{"depth":37,"slug":556,"text":557},"mock-service","Mock Service",{"depth":37,"slug":559,"text":560},"local-download","Local Download",[],[],{"title":510,"description":511,"pubDate":564,"heroImage":513,"date created":565,"date modified":566,"tags":567,"minutesRead":568},"2023-07-21 19:06",["Date","2023-07-21T00:00:00.000Z"],["Date","2023-07-21T00:00:00.000Z"],[20,182],"22 min read",[],"200-Learning/210-Programing/Service Worker Cookbook.md","200-learning/210-programing/things-you-forgot-or-never-knew-because-of-react",{"id":571,"data":573,"body":578,"filePath":579,"digest":580,"rendered":581,"legacyId":592},{"title":574,"description":15,"draft":16,"pubDate":575,"heroImage":576,"tags":577},"Things you forgot (or never knew) because of React",["Date","2023-08-15T09:46:00.000Z"],"https://images.unsplash.com/photo-1690375636915-29d19feae92f?crop=entropy&cs=srgb&fm=jpg&ixid=M3wzNjM5Nzd8MHwxfHJhbmRvbXx8fHx8fHx8fDE2OTIwOTI4MjN8&ixlib=rb-4.0.3&q=85",[20],"> If one is lucky, a solitary fantasy can totally transform one million realities.\n> — \u003Ccite>Maya Angelou\u003C/cite>","src/content/blog/200-Learning/210-Programing/Things you forgot (or never knew) because of React.md","888cc1ab82aa85b7",{"html":582,"metadata":583},"\u003Cblockquote>\n\u003Cp>If one is lucky, a solitary fantasy can totally transform one million realities.\n— \u003Ccite>Maya Angelou\u003C/cite>\u003C/p>\n\u003C/blockquote>",{"headings":584,"localImagePaths":585,"remoteImagePaths":586,"frontmatter":587,"imagePaths":591},[],[],[],{"title":574,"description":15,"pubDate":588,"heroImage":576,"date created":588,"date modified":589,"draft":16,"tags":590,"minutesRead":79},"2023-08-15 17:46","2023-08-15",[20],[],"200-Learning/210-Programing/Things you forgot (or never knew) because of React.md","200-learning/210-programing/software-engineering-at-google",{"id":593,"data":595,"body":600,"filePath":601,"digest":602,"rendered":603,"legacyId":619},{"title":596,"description":15,"pubDate":597,"heroImage":598,"tags":599},"《Software Engineering at Google》",["Date","2023-08-30T11:26:00.000Z"],"https://images.unsplash.com/photo-1581091226033-d5c48150dbaa?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1200&q=80",[133,242],"> Mountains cannot be surmounted except by winding paths.\n> — \u003Ccite>Johann Wolfgang von Goethe\u003C/cite>\n\n- 在线版本：[abseil / Software Engineering at Google](https://abseil.io/resources/swe-book)。\n- 中文翻译：[Software Engineering at Google](https://qiangmzsx.github.io/Software-Engineering-at-Google/#/)\n\n\n## TOC\n\n\n\n## What is software engineering?\n\n编程与软件工程的3个关键区别：\n1. Time 时间\n2. Scale 规模\n3. Trade-offs 权衡取舍\n\n在一个软件工程中，工程师需要更多的关注时间成本和需求变更；组织更多关注规模和效率；作为软件工程师，需要做出更复杂、风险更大的决策（往往基于时间和规模增长的不确定性的评估）。\n\n\n了解时间对程序的影响的一种方法是思考“代码的预期生命周期是多少？“。对于一个只需要存活一个小时的程序，你不太可能考虑其底层库、操作系统（OS）、硬件或语言的新版本。这些短期系统实际上“只是”一个编程问题，就像在一个维度中压缩得足够扁的立方体是正方形一样。随着我们扩大时间维度，允许更长的生命周期，改变显得更加重要。在十年或更长的时间里，大多数程序依赖关系，无论是隐式的还是显式的，都可能发生变化。这一认识是我们区分软件工程和编程的根本原因。\n\n:::note {title=\"技术债务\"}\n这也许是一个合理且简单的技术债务定义：那些”应该“做却还未完成的事（代码现状和理想代码之间的差距）\n:::\n\n软件工程任务是团队的工作。早期定义软件工程的尝试为这一观点提供了一个很好的定义：“多人开发的多版本程序”。这表明软件工程和程序设计之间的区别是时间和人的区别。团队协作带来了新的问题，但也提供了比任何单个程序员更多的潜力来产生有价值的系统。\n\n团队组织、项目组成以及软件项目的策略和实践都支配着软件工程复杂性。我们还可以说，软件工程与编程的不同之处在于需要做出的决策的复杂性及其风险。\n\n:::note\n\n[Nothing is Certain Except Death, Taxes and a Short Mobile App Lifespan](https://blog.axway.com/learning-center/software-development/api-development/nothing-is-certain-except-death-taxes-and-a-short-mobile-app-lifespan-2)\n\n:::\n\n:::note\nHyrum’s Law: *With a sufficient number of users of an API, it does not matter what you promise in the contract: all observable behaviors of your system will be depended on by somebody.*\n\n>有了足够数量的 API 用户，在约定中承诺什么并不重要：你的系统的所有可观察行为都将取决于某人。\n\n:::\n\n海勒姆定律代表了一种实践知识，即使有最好的规划、最好的工程师和可靠的代码评审实践，我们也不能假设完全遵守已发布的契约或最佳实践。作为API所有者，通过明确地接口约定，你将获得一定的灵活性和自由度，但在实践中，给定更改的复杂性和难度还取决于用户对你的API的一些可观察行为的有用程度。如果用户不能依赖这些东西，那么你的API将很容易更改。如果有足够的时间和足够的用户，即使是最无害的变更也会破坏某些东西；你对变更价值的分析必须包含调查、识别和解决这些缺陷的难度。","src/content/blog/200-Learning/210-Programing/《Software Engineering at Google》.md","395465553fba27b8",{"html":604,"metadata":605},"\u003Cblockquote>\n\u003Cp>Mountains cannot be surmounted except by winding paths.\n— \u003Ccite>Johann Wolfgang von Goethe\u003C/cite>\u003C/p>\n\u003C/blockquote>\n\u003Cul>\n\u003Cli>在线版本：\u003Ca href=\"https://abseil.io/resources/swe-book\">abseil / Software Engineering at Google\u003C/a>。\u003C/li>\n\u003Cli>中文翻译：\u003Ca href=\"https://qiangmzsx.github.io/Software-Engineering-at-Google/#/\">Software Engineering at Google\u003C/a>\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"toc\">TOC\u003C/h2>\n\u003Cul>\n\u003Cli>\u003Ca href=\"#what-is-software-engineering\">What is software engineering?\u003C/a>\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"what-is-software-engineering\">What is software engineering?\u003C/h2>\n\u003Cp>编程与软件工程的3个关键区别：\u003C/p>\n\u003Col>\n\u003Cli>Time 时间\u003C/li>\n\u003Cli>Scale 规模\u003C/li>\n\u003Cli>Trade-offs 权衡取舍\u003C/li>\n\u003C/ol>\n\u003Cp>在一个软件工程中，工程师需要更多的关注时间成本和需求变更；组织更多关注规模和效率；作为软件工程师，需要做出更复杂、风险更大的决策（往往基于时间和规模增长的不确定性的评估）。\u003C/p>\n\u003Cp>了解时间对程序的影响的一种方法是思考“代码的预期生命周期是多少？“。对于一个只需要存活一个小时的程序，你不太可能考虑其底层库、操作系统（OS）、硬件或语言的新版本。这些短期系统实际上“只是”一个编程问题，就像在一个维度中压缩得足够扁的立方体是正方形一样。随着我们扩大时间维度，允许更长的生命周期，改变显得更加重要。在十年或更长的时间里，大多数程序依赖关系，无论是隐式的还是显式的，都可能发生变化。这一认识是我们区分软件工程和编程的根本原因。\u003C/p>\n\u003Cp>:::note {title=“技术债务”}\n这也许是一个合理且简单的技术债务定义：那些”应该“做却还未完成的事（代码现状和理想代码之间的差距）\n:::\u003C/p>\n\u003Cp>软件工程任务是团队的工作。早期定义软件工程的尝试为这一观点提供了一个很好的定义：“多人开发的多版本程序”。这表明软件工程和程序设计之间的区别是时间和人的区别。团队协作带来了新的问题，但也提供了比任何单个程序员更多的潜力来产生有价值的系统。\u003C/p>\n\u003Cp>团队组织、项目组成以及软件项目的策略和实践都支配着软件工程复杂性。我们还可以说，软件工程与编程的不同之处在于需要做出的决策的复杂性及其风险。\u003C/p>\n\u003Caside class=\"callout callout-note\">\u003Cdiv class=\"callout-indicator\">\u003Cdiv class=\"callout-hint\">\u003Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" aria-hidden=\"true\">\u003Cpath d=\"M12 8h.01M12 12v4\">\u003C/path>\u003Ccircle cx=\"12\" cy=\"12\" r=\"10\">\u003C/circle>\u003C/svg>\u003C/div>\u003Cdiv class=\"callout-title\">Note\u003C/div>\u003C/div>\u003Cdiv class=\"callout-content\">\u003Cp>\u003Ca href=\"https://blog.axway.com/learning-center/software-development/api-development/nothing-is-certain-except-death-taxes-and-a-short-mobile-app-lifespan-2\">Nothing is Certain Except Death, Taxes and a Short Mobile App Lifespan\u003C/a>\u003C/p>\u003C/div>\u003C/aside>\n\u003Caside class=\"callout callout-note\">\u003Cdiv class=\"callout-indicator\">\u003Cdiv class=\"callout-hint\">\u003Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" aria-hidden=\"true\">\u003Cpath d=\"M12 8h.01M12 12v4\">\u003C/path>\u003Ccircle cx=\"12\" cy=\"12\" r=\"10\">\u003C/circle>\u003C/svg>\u003C/div>\u003Cdiv class=\"callout-title\">Note\u003C/div>\u003C/div>\u003Cdiv class=\"callout-content\">\u003Cp>Hyrum’s Law: \u003Cem>With a sufficient number of users of an API, it does not matter what you promise in the contract: all observable behaviors of your system will be depended on by somebody.\u003C/em>\u003C/p>\u003Cblockquote>\n\u003Cp>有了足够数量的 API 用户，在约定中承诺什么并不重要：你的系统的所有可观察行为都将取决于某人。\u003C/p>\n\u003C/blockquote>\u003C/div>\u003C/aside>\n\u003Cp>海勒姆定律代表了一种实践知识，即使有最好的规划、最好的工程师和可靠的代码评审实践，我们也不能假设完全遵守已发布的契约或最佳实践。作为API所有者，通过明确地接口约定，你将获得一定的灵活性和自由度，但在实践中，给定更改的复杂性和难度还取决于用户对你的API的一些可观察行为的有用程度。如果用户不能依赖这些东西，那么你的API将很容易更改。如果有足够的时间和足够的用户，即使是最无害的变更也会破坏某些东西；你对变更价值的分析必须包含调查、识别和解决这些缺陷的难度。\u003C/p>",{"headings":606,"localImagePaths":611,"remoteImagePaths":612,"frontmatter":613,"imagePaths":618},[607,608],{"depth":31,"slug":324,"text":325},{"depth":31,"slug":609,"text":610},"what-is-software-engineering","What is software engineering?",[],[],{"title":596,"description":15,"pubDate":614,"heroImage":598,"date created":615,"date modified":616,"tags":617,"minutesRead":210},"2023-08-30 19:26",["Date","2023-08-30T00:00:00.000Z"],["Date","2023-08-31T00:00:00.000Z"],[133,242],[],"200-Learning/210-Programing/《Software Engineering at Google》.md","200-learning/210-programing/rust编程第一课笔记",{"id":620,"data":622,"body":629,"filePath":630,"digest":631,"rendered":632,"legacyId":652},{"title":623,"description":624,"draft":16,"pubDate":625,"heroImage":626,"tags":627},"《Rust编程第一课》笔记",null,["Date","2024-06-29T03:59:00.000Z"],"https://images.unsplash.com/photo-1717318491193-8320418c40cc?crop=entropy&cs=srgb&fm=jpg&ixid=M3w2Mjc5MjV8MHwxfHJhbmRvbXx8fHx8fHx8fDE3MTk2MzUyNjh8&ixlib=rb-4.0.3&q=85&w=1200h=400",[20,628,242],"Rust","## 01 数据基本运作方式\n\n栈: 存放的数据是静态的, 固定大小, 固定生命周期\n\n队: 数据是动态的, 不固定大小, 不固定生命周期\n\n## 02 编程基础概念\n\n### 数据\n\n> 类型是对值的引用, 它包含了值在内存中的长度、对齐以及值可以进行的操作等信息.\n\n一个值是符合一个特定类型的数据的某个实体.\n\n> [!note]+ Note\n> Note callout\n\n> [!abstract]+ Abstract\n> Alias: Abstract + summary + tldr\n\n> [!info]+ Info\n> Info callout\n\n> [!todo]+ Todo\n> TODO callout\n\n> [!tip]+ Tip\n> Alias: tip + hint + important\n\n> [!success]+ Success\n> Alias: success + check + done\n\n> [!question]+ Question\n> Alias: question + help + faq\n\n> [!warning]+ Warning\n> Alias: warning + caution + attention\n\n> [!fail]+ Failure\n> alias: missing + fail + failure\n\n> [!error]+ Error\n> alias: danger + error\n\n> [!bug]+ Bug\n> bug callout\n\n> [!example]+ Examplebug\n> example callout\n\n> [!quote]+ Quote\n> Alias: quote + cite","src/content/blog/200-Learning/210-Programing/《Rust编程第一课》笔记.md","5f338ccb9e859b40",{"html":633,"metadata":634},"\u003Ch2 id=\"01-数据基本运作方式\">01 数据基本运作方式\u003C/h2>\n\u003Cp>栈: 存放的数据是静态的, 固定大小, 固定生命周期\u003C/p>\n\u003Cp>队: 数据是动态的, 不固定大小, 不固定生命周期\u003C/p>\n\u003Ch2 id=\"02-编程基础概念\">02 编程基础概念\u003C/h2>\n\u003Ch3 id=\"数据\">数据\u003C/h3>\n\u003Cblockquote>\n\u003Cp>类型是对值的引用, 它包含了值在内存中的长度、对齐以及值可以进行的操作等信息.\u003C/p>\n\u003C/blockquote>\n\u003Cp>一个值是符合一个特定类型的数据的某个实体.\u003C/p>\n\u003Cblockquote class=\"callout-note\" data-callout=\"note\" data-expandable=\"true\" data-expanded=\"true\">\n\n                \u003Cdiv class=\"callout-title\">\n                  \u003Cdiv class=\"callout-title-icon\">\u003Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\u003Cline x1=\"18\" y1=\"2\" x2=\"22\" y2=\"6\">\u003C/line>\u003Cpath d=\"M7.5 20.5 19 9l-4-4L3.5 16.5 2 22z\">\u003C/path>\u003C/svg>\u003C/div>\n                  \u003Cdiv class=\"callout-title-text\">Note\u003C/div>\n                \u003C/div>\n                \u003Cdiv class=\"callout-content\">Note callout\u003C/div>\n              \n\u003C/blockquote>\n\u003Cblockquote class=\"callout-abstract\" data-callout=\"abstract\" data-expandable=\"true\" data-expanded=\"true\">\n\n                \u003Cdiv class=\"callout-title\">\n                  \u003Cdiv class=\"callout-title-icon\">\u003Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\u003Crect x=\"8\" y=\"2\" width=\"8\" height=\"4\" rx=\"1\" ry=\"1\">\u003C/rect>\u003Cpath d=\"M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2\">\u003C/path>\u003Cpath d=\"M12 11h4\">\u003C/path>\u003Cpath d=\"M12 16h4\">\u003C/path>\u003Cpath d=\"M8 11h.01\">\u003C/path>\u003Cpath d=\"M8 16h.01\">\u003C/path>\u003C/svg>\u003C/div>\n                  \u003Cdiv class=\"callout-title-text\">Abstract\u003C/div>\n                \u003C/div>\n                \u003Cdiv class=\"callout-content\">Alias: Abstract + summary + tldr\u003C/div>\n              \n\u003C/blockquote>\n\u003Cblockquote class=\"callout-info\" data-callout=\"info\" data-expandable=\"true\" data-expanded=\"true\">\n\n                \u003Cdiv class=\"callout-title\">\n                  \u003Cdiv class=\"callout-title-icon\">\u003Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\u003Ccircle cx=\"12\" cy=\"12\" r=\"10\">\u003C/circle>\u003Cline x1=\"12\" y1=\"16\" x2=\"12\" y2=\"12\">\u003C/line>\u003Cline x1=\"12\" y1=\"8\" x2=\"12.01\" y2=\"8\">\u003C/line>\u003C/svg>\u003C/div>\n                  \u003Cdiv class=\"callout-title-text\">Info\u003C/div>\n                \u003C/div>\n                \u003Cdiv class=\"callout-content\">Info callout\u003C/div>\n              \n\u003C/blockquote>\n\u003Cblockquote class=\"callout-todo\" data-callout=\"todo\" data-expandable=\"true\" data-expanded=\"true\">\n\n                \u003Cdiv class=\"callout-title\">\n                  \u003Cdiv class=\"callout-title-icon\">\u003Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\u003Cpath d=\"M12 22c5.523 0 10-4.477 10-10S17.523 2 12 2 2 6.477 2 12s4.477 10 10 10z\">\u003C/path>\u003Cpath d=\"m9 12 2 2 4-4\">\u003C/path>\u003C/svg>\u003C/div>\n                  \u003Cdiv class=\"callout-title-text\">Todo\u003C/div>\n                \u003C/div>\n                \u003Cdiv class=\"callout-content\">TODO callout\u003C/div>\n              \n\u003C/blockquote>\n\u003Cblockquote class=\"callout-tip\" data-callout=\"tip\" data-expandable=\"true\" data-expanded=\"true\">\n\n                \u003Cdiv class=\"callout-title\">\n                  \u003Cdiv class=\"callout-title-icon\">\u003Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\u003Cpath d=\"M8.5 14.5A2.5 2.5 0 0 0 11 12c0-1.38-.5-2-1-3-1.072-2.143-.224-4.054 2-6 .5 2.5 2 4.9 4 6.5 2 1.6 3 3.5 3 5.5a7 7 0 1 1-14 0c0-1.153.433-2.294 1-3a2.5 2.5 0 0 0 2.5 2.5z\">\u003C/path>\u003C/svg>\u003C/div>\n                  \u003Cdiv class=\"callout-title-text\">Tip\u003C/div>\n                \u003C/div>\n                \u003Cdiv class=\"callout-content\">Alias: tip + hint + important\u003C/div>\n              \n\u003C/blockquote>\n\u003Cblockquote class=\"callout-success\" data-callout=\"success\" data-expandable=\"true\" data-expanded=\"true\">\n\n                \u003Cdiv class=\"callout-title\">\n                  \u003Cdiv class=\"callout-title-icon\">\u003Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\u003Cpolyline points=\"20 6 9 17 4 12\">\u003C/polyline>\u003C/svg>\u003C/div>\n                  \u003Cdiv class=\"callout-title-text\">Success\u003C/div>\n                \u003C/div>\n                \u003Cdiv class=\"callout-content\">Alias: success + check + done\u003C/div>\n              \n\u003C/blockquote>\n\u003Cblockquote class=\"callout-question\" data-callout=\"question\" data-expandable=\"true\" data-expanded=\"true\">\n\n                \u003Cdiv class=\"callout-title\">\n                  \u003Cdiv class=\"callout-title-icon\">\u003Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\u003Ccircle cx=\"12\" cy=\"12\" r=\"10\">\u003C/circle>\u003Cpath d=\"M9.09 9a3 3 0 0 1 5.83 1c0 2-3 3-3 3\">\u003C/path>\u003Cline x1=\"12\" y1=\"17\" x2=\"12.01\" y2=\"17\">\u003C/line>\u003C/svg>\u003C/div>\n                  \u003Cdiv class=\"callout-title-text\">Question\u003C/div>\n                \u003C/div>\n                \u003Cdiv class=\"callout-content\">Alias: question + help + faq\u003C/div>\n              \n\u003C/blockquote>\n\u003Cblockquote class=\"callout-warning\" data-callout=\"warning\" data-expandable=\"true\" data-expanded=\"true\">\n\n                \u003Cdiv class=\"callout-title\">\n                  \u003Cdiv class=\"callout-title-icon\">\u003Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\u003Cpath d=\"m21.73 18-8-14a2 2 0 0 0-3.48 0l-8 14A2 2 0 0 0 4 21h16a2 2 0 0 0 1.73-3Z\">\u003C/path>\u003Cline x1=\"12\" y1=\"9\" x2=\"12\" y2=\"13\">\u003C/line>\u003Cline x1=\"12\" y1=\"17\" x2=\"12.01\" y2=\"17\">\u003C/line>\u003C/svg>\u003C/div>\n                  \u003Cdiv class=\"callout-title-text\">Warning\u003C/div>\n                \u003C/div>\n                \u003Cdiv class=\"callout-content\">Alias: warning + caution + attention\u003C/div>\n              \n\u003C/blockquote>\n\u003Cblockquote class=\"callout-fail\" data-callout=\"fail\" data-expandable=\"true\" data-expanded=\"true\">\n\n                \u003Cdiv class=\"callout-title\">\n                  \u003Cdiv class=\"callout-title-icon\">\u003Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\u003Cline x1=\"18\" y1=\"6\" x2=\"6\" y2=\"18\">\u003C/line>\u003Cline x1=\"6\" y1=\"6\" x2=\"18\" y2=\"18\">\u003C/line>\u003C/svg>\u003C/div>\n                  \u003Cdiv class=\"callout-title-text\">Failure\u003C/div>\n                \u003C/div>\n                \u003Cdiv class=\"callout-content\">alias: missing + fail + failure\u003C/div>\n              \n\u003C/blockquote>\n\u003Cblockquote class=\"callout-error\" data-callout=\"error\" data-expandable=\"true\" data-expanded=\"true\">\n\n                \u003Cdiv class=\"callout-title\">\n                  \u003Cdiv class=\"callout-title-icon\">\u003Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\u003Cpolygon points=\"13 2 3 14 12 14 11 22 21 10 12 10 13 2\">\u003C/polygon>\u003C/svg>\u003C/div>\n                  \u003Cdiv class=\"callout-title-text\">Error\u003C/div>\n                \u003C/div>\n                \u003Cdiv class=\"callout-content\">alias: danger + error\u003C/div>\n              \n\u003C/blockquote>\n\u003Cblockquote class=\"callout-bug\" data-callout=\"bug\" data-expandable=\"true\" data-expanded=\"true\">\n\n                \u003Cdiv class=\"callout-title\">\n                  \u003Cdiv class=\"callout-title-icon\">\u003Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\u003Crect width=\"8\" height=\"14\" x=\"8\" y=\"6\" rx=\"4\">\u003C/rect>\u003Cpath d=\"m19 7-3 2\">\u003C/path>\u003Cpath d=\"m5 7 3 2\">\u003C/path>\u003Cpath d=\"m19 19-3-2\">\u003C/path>\u003Cpath d=\"m5 19 3-2\">\u003C/path>\u003Cpath d=\"M20 13h-4\">\u003C/path>\u003Cpath d=\"M4 13h4\">\u003C/path>\u003Cpath d=\"m10 4 1 2\">\u003C/path>\u003Cpath d=\"m14 4-1 2\">\u003C/path>\u003C/svg>\u003C/div>\n                  \u003Cdiv class=\"callout-title-text\">Bug\u003C/div>\n                \u003C/div>\n                \u003Cdiv class=\"callout-content\">bug callout\u003C/div>\n              \n\u003C/blockquote>\n\u003Cblockquote class=\"callout-example\" data-callout=\"example\" data-expandable=\"true\" data-expanded=\"true\">\n\n                \u003Cdiv class=\"callout-title\">\n                  \u003Cdiv class=\"callout-title-icon\">\u003Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\u003Cline x1=\"8\" y1=\"6\" x2=\"21\" y2=\"6\">\u003C/line>\u003Cline x1=\"8\" y1=\"12\" x2=\"21\" y2=\"12\">\u003C/line>\u003Cline x1=\"8\" y1=\"18\" x2=\"21\" y2=\"18\">\u003C/line>\u003Cline x1=\"3\" y1=\"6\" x2=\"3.01\" y2=\"6\">\u003C/line>\u003Cline x1=\"3\" y1=\"12\" x2=\"3.01\" y2=\"12\">\u003C/line>\u003Cline x1=\"3\" y1=\"18\" x2=\"3.01\" y2=\"18\">\u003C/line>\u003C/svg>\u003C/div>\n                  \u003Cdiv class=\"callout-title-text\">Examplebug\u003C/div>\n                \u003C/div>\n                \u003Cdiv class=\"callout-content\">example callout\u003C/div>\n              \n\u003C/blockquote>\n\u003Cblockquote class=\"callout-quote\" data-callout=\"quote\" data-expandable=\"true\" data-expanded=\"true\">\n\n                \u003Cdiv class=\"callout-title\">\n                  \u003Cdiv class=\"callout-title-icon\">\u003Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\u003Cpath d=\"M3 21c3 0 7-1 7-8V5c0-1.25-.756-2.017-2-2H4c-1.25 0-2 .75-2 1.972V11c0 1.25.75 2 2 2 1 0 1 0 1 1v1c0 1-1 2-2 2s-1 .008-1 1.031V20c0 1 0 1 1 1z\">\u003C/path>\u003Cpath d=\"M15 21c3 0 7-1 7-8V5c0-1.25-.757-2.017-2-2h-4c-1.25 0-2 .75-2 1.972V11c0 1.25.75 2 2 2h.75c0 2.25.25 4-2.75 4v3c0 1 0 1 1 1z\">\u003C/path>\u003C/svg>\u003C/div>\n                  \u003Cdiv class=\"callout-title-text\">Quote\u003C/div>\n                \u003C/div>\n                \u003Cdiv class=\"callout-content\">Alias: quote + cite\u003C/div>\n              \n\u003C/blockquote>",{"headings":635,"localImagePaths":644,"remoteImagePaths":645,"frontmatter":646,"imagePaths":651},[636,639,642],{"depth":31,"slug":637,"text":638},"01-数据基本运作方式","01 数据基本运作方式",{"depth":31,"slug":640,"text":641},"02-编程基础概念","02 编程基础概念",{"depth":37,"slug":643,"text":643},"数据",[],[],{"title":623,"description":624,"pubDate":647,"heroImage":626,"date created":648,"date modified":649,"draft":16,"tags":650,"minutesRead":79},"2024-06-29 11:59",["Date","2024-06-29T00:00:00.000Z"],["Date","2024-06-29T00:00:00.000Z"],"writings Rust Programming",[],"200-Learning/210-Programing/《Rust编程第一课》笔记.md","200-learning/210-programing/compile-svelte-in-your-head1",{"id":653,"data":655,"body":661,"filePath":662,"digest":663,"rendered":664,"legacyId":717},{"title":656,"description":15,"pubDate":657,"heroImage":658,"tags":659},"Compile Svelte in Your Head（1）",["Date","2023-07-21T11:06:00.000Z"],"https://images.unsplash.com/photo-1536319040287-757e83a8198e?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1200&q=80",[20,660],"svelte","> The winner ain't the one with the fastest car it's the one who refuses to lose.\n> — \u003Ccite>Dale Earnhardt\u003C/cite>\n\n## TOC\n\n## Svelte syntax\n\n下方展示svelte的基础语法\n\n:::note\n希望了解更多？强烈推荐[svelte interactive tutorial](https://svelte.dev/tutorial/basics)\n:::\n\n一个基础的Svelte 单文件组件：\n```svelte\n\u003Ch1>Hello world\u003C/h1>\n```\n[Svelte REPL](https://svelte.dev/repl/99aeea705b1e48fe8610b3ccee948280?version=4.1.1)\n\n增加点样式：\n```svelte\n\u003Ch1>Hello world\u003C/h1>\n\n\u003Cstyle>\n    h1 {\n        color: purple;\n    }\n\u003C/style>\n```\n\n给组件增加点数据：\n```svelte\n\u003Cscript>\nlet name = \"world\"\n\u003C/script>\n\n\u003Ch1>Hello {name}\u003C/h1>\n```\n\n绑定事件：\n```svelte\n\u003Cscript>\nlet count = 0;\n\nfunction onClickButton(event) {\n    count++;\n}\n\u003C/script>\n\n\u003Cbutton>Clicked {count}\u003C/button>\n```\n\n接下来看下，上面的Svelte语法是怎么编译为JavaScript的\n\n## Compile Svelte in your Head\n\nsvelte编译器分析编写的代码并生成优化后输出为JavaScript\n\n为研究Svelte如何编译，我们从简单的例子出发，逐步构建代码。通过这个过程，将可看到svelte根据更改逐步添加到输出代码中。\n\n第一个例子如下：\n```svelte\n\u003Ch1>Hello world\u003C/h1>\n```\n[Svelte REPL](https://svelte.dev/repl/99aeea705b1e48fe8610b3ccee948280?version=4.1.1)\n\nJavaScript Output\n```js\nfunction create_fragment(ctx) {\n\tlet h1;\n\n\treturn {\n\t\tc() {\n\t\t\th1 = element(\"h1\");\n\t\t\th1.textContent = \"Hello World\";\n\t\t},\n\t\tm(target, anchor) {\n\t\t\tinsert(target, h1, anchor);\n\t\t},\n\t\tp: noop,\n\t\ti: noop,\n\t\to: noop,\n\t\td(detaching) {\n\t\t\tif (detaching) {\n\t\t\t\tdetach(h1);\n\t\t\t}\n\t\t}\n\t};\n}\n\nclass App extends SvelteComponent {\n\tconstructor(options) {\n\t\tsuper();\n\t\tinit(this, options, null, create_fragment, safe_not_equal, {});\n\t}\n}\n```\n输出的代码分为两部分：\n- `create_fragment`\n- `class App extends SvelteComponent`\n\n### create_fragment\n\nSvelte组件是Svelte应用的一个个构建块。每一个组件只关注于构建最终DOM的一部分或片段。\ncreate_fragment函数为svelte组件提供了如何构建DOM片段的规范。\n\ncreate_fragment函数返回一个有如下方法的对象：\n- c()。create的缩写。包含创建元素的所有指令\n- m()。mount的缩写。包含如何将创建的元素与DOM树连接\n- d()。destroy的缩写。将当前节点从DOM树中移除\n\n### class App extends SvelteComponent\n\n每个svelte组件都是一个class，你可以参考[这个文档](https://svelte.dev/docs/client-side-component-api)导入和实例化它。\n在构造函数中，我们使用组成组件的相关信息初始化组件，例如create_fragment。svelte只会传递需要的信息，并在不必要的时候删除他们。\n\n例如注释掉`\u003Ch1>`标签，得到JavaScript为：\n```svelte\n\u003C!-- empty -->\n```\n```js\nclass App extends SvelteComponent {\n\tconstructor(options) {\n\t\tsuper();\n\t\tinit(this, options, null, null, safe_not_equal, {});\n\t}\n}\n```\nsvele将传入null而不是create_fragment。\n\ninit函数是初始化大部分内置功能的地方，例如：\n- 组件的props，ctx和context\n- 组件的生命周期事件\n- 组件的更新机制\n最后，svelte调用create_fragment来创建元素和与DOM树进行连接\n\n所有的内部状态和方法都附加到`this.$$`上了。因此如果你直接使用`this.$$`访问组件内部属性，需要尤其注意⚠️👮\n\n### Adding Data\n\n现在让我们给组件增加点数据：\n```svelte\n\u003Cscript>\nlet name = 'world'\n\u003C/script>\n\n\u003Ch1>Hello {name}\u003C/h1>\n```\n\nJavaScript Output：\n```js\nfunction create_fragment(ctx) {\n\tlet h1;\n\n\treturn {\n\t\tc() {\n\t\t\th1 = element(\"h1\");\n\t\t\th1.textContent = `Hello ${name}`;\n\t\t},\n\t\tm(target, anchor) {\n\t\t\tinsert(target, h1, anchor);\n\t\t},\n\t\tp: noop,\n\t\ti: noop,\n\t\to: noop,\n\t\td(detaching) {\n\t\t\tif (detaching) detach(h1);\n\t\t}\n\t};\n}\n\nlet name = \"world\";\n\nclass App extends SvelteComponent {\n\tconstructor(options) {\n\t\tsuper();\n\t\tinit(this, options, null, create_fragment, safe_not_equal, {});\n\t}\n}\n```\n\n与第一个例子相比，生成的代码中类似如下结构：\n```js\nlet name = 'world'\n{\n    h1.textContent = `Hello ${name}`;\n}\n```\n\n- 在script中写的代码被放到了顶级作用域\n- h1的内容变为了模板字面量\n\n### Updating Data\n让我们添加一个函数用于更新name：\n```svelte\n\u003Cscript>\nlet name = 'world'\nfunction update() {\n    name = 'Svelte'\n}\n\u003C/script>\n\n\u003Ch1>Hello {name}\u003C/h1>\n```\n[Svelte REPL](https://svelte.dev/repl/3237a87f7da947cb845aa2cbc9d8ea2e?version=4.1.1)\n\nJavaScript Output:\n```js {2-4,10,17-19,28-36, 41}\nfunction create_fragment(ctx) {\n\tlet h1;\n\tlet t0;\n\tlet t1;\n\n\treturn {\n\t\tc() {\n\t\t\th1 = element(\"h1\");\n\t\t\tt0 = text(\"Hello \");\n\t\t\tt1 = text(/*name*/ ctx[0]);\n\t\t},\n\t\tm(target, anchor) {\n\t\t\tinsert(target, h1, anchor);\n\t\t\tappend(h1, t0);\n\t\t\tappend(h1, t1);\n\t\t},\n\t\tp(ctx, [dirty]) {\n\t\t\tif (dirty & /*name*/ 1) set_data(t1, /*name*/ ctx[0]);\n\t\t},\n\t\td(detaching) {\n\t\t\tif (detaching) {\n\t\t\t\tdetach(h1);\n\t\t\t}\n\t\t}\n\t};\n}\n\nfunction instance($$self, $$props, $$invalidate) {\n\tlet name = 'World';\n\n\tfunction update() {\n\t\t$$invalidate(0, name = 'Svelte');\n\t}\n\n\treturn [name];\n}\n\nclass App extends SvelteComponent {\n\tconstructor(options) {\n\t\tsuper();\n\t\tinit(this, options, instance, create_fragment, safe_not_equal, {});\n\t}\n}\n```\n\n多出的地方：\n- `h1`的内容被拆分为两个文本元素\n- `create_fragment`返回的对象增加了一个新的方法`p`\n- 新的函数`instance`被创建\n- 在svelte组件的script内写的内容被放到了`instance`\n- 在`create_fragment`中被用到的数据`name`现在被替换为`ctx[0]`\n\nsvelte编译器跟踪所有在script中定义的变量，它跟踪变量是否：\n1. 可以被改变，如：`count++`\n2. 可被重新赋值，如：`name = ‘svelte’`\n3. 是否在模板中被引用？如：`\u003Ch1>Hello {name}\u003C/h1>`\n4. 是否可写？例如：`const i = 1` vs `let i = 1`\n5. ...more\n\n当svelte编译器意识到变量名可被重新分配时，它会将h1的文本内容分解为多个部分，这样他就能动态更新部分文本。\n\n你可以看到新方法来更新文本节点：\n\n#### `p(ctx, dirty)`\n\nupdate的简写。它根据状态（dirty）和组件状态（ctx）的变化来更新元素\n\n#### instance variable\n\n变量名不能在不同组件实例上共享，这就是为什么它将变量名移动到一个名为instance的函数中。\n\ninstance函数返回组件实例的变量列表，这些变量是：\n1. 在模板中被使用\n2. 被改变或重新赋值（在组件的实例内被更改）\n在组件中，这个列表被称为`ctx`\n在init函数中，svelte执行instance函数创建ctx，然后使用它创建fragment：\n```js\nconst ctx = instance(/*...*/)\nconst fragment = create_fragment(ctx)\n// create the fragment\nfragment.c()\n// mount the fragment onto the DOM\nfragment.m(target)\n```\n\n现在不访问组件实例的变量名，而是通过ctx拿到name的值：\n```js\nt1 = text(/*name*/ ctx[0])\n```\nctx是数组而非对象或Map，与一项位掩码的优化技术有关，参考[相关讨论](https://github.com/sveltejs/svelte/issues/1922) [stackoverflow](https://stackoverflow.com/questions/59541070/how-is-svelte-making-a-component-dirty)\n``\n#### `$$invalidate`\n\nsvelte响应式系统背后的秘密是`$$invalidate`函数，每一个变量如果可被：\n- `reassigned/mutated`\n- 被模板引用\n都会有`$$invalidate`函数被插入到`reassigned/mutated`所在位置的右侧:\n```js\nname = 'svelte';\ncount++;\nfoo.a = 1;\n\n// compiled\nname='svelte';\n$$invalidate(/* name */, name);\n\ncount++;\n$$invalidate(/* count */, count);\n\nfoo.a = 1;\n$$invalidate(/* foo */, foo);\n```\n\n`$$invalidate`函数将变量标记为`dirty`并安排组件的更新：\n```js\n// conceptually...\nconst ctx = instance(/*...*/);\nconst fragment = create_fragment(ctx);\n// to track which variable has changed\nconst dirty = new Set();\nconst $$invalidate = (variable, newValue) => {\n    // update ctx\n    ctx[variable] = newValue;\n    // mark variable as dirty\n    dirty.add(variable);\n    // schedules update for the component\n    scheduleUpdate(component);\n};\n\n// gets called when update is scheduled\nfunction flushUpdate() {\n    // update the fragment\n    fragment.p(ctx, dirty);\n    // clear the dirty\n    dirty.clear();\n}\n```\n\n### Adding event listeners\n\n在svelte组件中增加一个事件监听:\n```svelte {7}\n\u003Cscript>\n\tlet name = 'world';\n\tfunction update() {\n\t\tname = 'Svelte';\n\t}\n\u003C/script>\n\u003Ch1 on:click={update}>Hello {name}\u003C/h1>\n```\n[Svelte REPL](https://svelte.dev/repl/a9893863475049149ca72e1416eef7e5?version=4.1.1)\n\nJavaScript Output:\n```js {20,33,45}\nfunction create_fragment(ctx) {\n\tlet h1;\n\tlet t0;\n\tlet t1;\n\tlet mounted;\n\tlet dispose;\n\n\treturn {\n\t\tc() {\n\t\t\th1 = element(\"h1\");\n\t\t\tt0 = text(\"Hello \");\n\t\t\tt1 = text(/*name*/ ctx[0]);\n\t\t},\n\t\tm(target, anchor) {\n\t\t\tinsert(target, h1, anchor);\n\t\t\tappend(h1, t0);\n\t\t\tappend(h1, t1);\n\n\t\t\tif (!mounted) {\n\t\t\t\tdispose = listen(h1, \"click\", /*update*/ ctx[1]);\n\t\t\t\tmounted = true;\n\t\t\t}\n\t\t},\n\t\tp(ctx, [dirty]) {\n\t\t\tif (dirty & /*name*/ 1) set_data(t1, /*name*/ ctx[0]);\n\t\t},\n\t\td(detaching) {\n\t\t\tif (detaching) {\n\t\t\t\tdetach(h1);\n\t\t\t}\n\n\t\t\tmounted = false;\n\t\t\tdispose();\n\t\t}\n\t};\n}\n\nfunction instance($$self, $$props, $$invalidate) {\n\tlet name = 'world';\n\n\tfunction update() {\n\t\t$$invalidate(0, name = 'Svelte');\n\t}\n\n\treturn [name, update];\n}\n\nclass App extends SvelteComponent {\n\tconstructor(options) {\n\t\tsuper();\n\t\tinit(this, options, instance, create_fragment, safe_not_equal, {});\n\t}\n}\n```\n\n多出的地方：\n1. instance函数返回了内部的update函数\n2. 在mount时添加了事件监听，destroy时移除事件\n\n如上所述，instance函数返回模板中引用的变量，并且这些变量会被修改或重分配。\n因在template中引用了update函数，所以update也作为了ctx的一部分被返回\n\nsvelte编译器尝试生成紧凑的JavaScript代码，如果非必要则不会返回额外的变量。\n\n#### listen & dispose\n\n每当在svelte组件中增加事件监听器时，svelte都会注入代码添加事件，并在DOM片段被移除时将事件移除。\n\n当有多个事件被绑定时，svelte编译器会压缩多个事件：\n```js {1-5,7}\ndispose = [\n  listen(h1, 'click', /*update*/ ctx[1]),\n  listen(h1, 'mousedown', /*update*/ ctx[1]),\n  listen(h1, 'touchstart', /*update*/ ctx[1], { passive: true }),\n];\n// ...\nrun_all(dispose);\n```\n\n\n## 总结\n\nsvelte语法是HTML的超集。\n\n一个svelte组件会通过svelte编译器分析并生成优化后的JavaScript代码。\n\n输出的JavaScript代码可分成3部分：\n\n### create_fragment\n返回一个对象，包含了通过组件创建一个元素片段所需的方法。\n\n###  instance\n\n1. 写在script标签内的大多数代码作为instance的内容\n2. 返回一个数组表示组件实例的若干状态（可变动、且在template中被引用的变量）\n3. `$$invalidate`被插入到每个改变变量值的后面。\n\n### class App extends SvelteComponent\n1. 初始化组件（create_fragment、instance）\n2. 设置组件内部结构\n3. 提供组件对外的API","src/content/blog/200-Learning/210-Programing/Compile Svelte in Your Head（1）.md","da28a03d006e7689",{"html":665,"metadata":666},"\u003Cblockquote>\n\u003Cp>The winner ain’t the one with the fastest car it’s the one who refuses to lose.\n— \u003Ccite>Dale Earnhardt\u003C/cite>\u003C/p>\n\u003C/blockquote>\n\u003Ch2 id=\"toc\">TOC\u003C/h2>\n\u003Cul>\n\u003Cli>\u003Ca href=\"#svelte-syntax\">Svelte syntax\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#compile-svelte-in-your-head\">Compile Svelte in your Head\u003C/a>\n\u003Cul>\n\u003Cli>\u003Ca href=\"#create_fragment\">create_fragment\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#class-app-extends-sveltecomponent\">class App extends SvelteComponent\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#adding-data\">Adding Data\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#updating-data\">Updating Data\u003C/a>\n\u003Cul>\n\u003Cli>\u003Ca href=\"#pctx-dirty\">\u003Ccode>p(ctx, dirty)\u003C/code>\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#instance-variable\">instance variable\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#invalidate\">\u003Ccode>$$invalidate\u003C/code>\u003C/a>\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\u003Ca href=\"#adding-event-listeners\">Adding event listeners\u003C/a>\n\u003Cul>\n\u003Cli>\u003Ca href=\"#listen--dispose\">listen &#x26; dispose\u003C/a>\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\u003Ca href=\"#%E6%80%BB%E7%BB%93\">总结\u003C/a>\n\u003Cul>\n\u003Cli>\u003Ca href=\"#create_fragment-1\">create_fragment\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#instance\">instance\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#class-app-extends-sveltecomponent-1\">class App extends SvelteComponent\u003C/a>\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"svelte-syntax\">Svelte syntax\u003C/h2>\n\u003Cp>下方展示svelte的基础语法\u003C/p>\n\u003Caside class=\"callout callout-note\">\u003Cdiv class=\"callout-indicator\">\u003Cdiv class=\"callout-hint\">\u003Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" aria-hidden=\"true\">\u003Cpath d=\"M12 8h.01M12 12v4\">\u003C/path>\u003Ccircle cx=\"12\" cy=\"12\" r=\"10\">\u003C/circle>\u003C/svg>\u003C/div>\u003Cdiv class=\"callout-title\">Note\u003C/div>\u003C/div>\u003Cdiv class=\"callout-content\">\u003Cp>希望了解更多？强烈推荐\u003Ca href=\"https://svelte.dev/tutorial/basics\">svelte interactive tutorial\u003C/a>\u003C/p>\u003C/div>\u003C/aside>\n\u003Cp>一个基础的Svelte 单文件组件：\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"svelte\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"svelte\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">&#x3C;\u003C/span>\u003Cspan style=\"color:#8DDB8C\">h1\u003C/span>\u003Cspan style=\"color:#ADBAC7\">>Hello world&#x3C;/\u003C/span>\u003Cspan style=\"color:#8DDB8C\">h1\u003C/span>\u003Cspan style=\"color:#ADBAC7\">>\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Cp>\u003Ca href=\"https://svelte.dev/repl/99aeea705b1e48fe8610b3ccee948280?version=4.1.1\">Svelte REPL\u003C/a>\u003C/p>\n\u003Cp>增加点样式：\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"svelte\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"svelte\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">&#x3C;\u003C/span>\u003Cspan style=\"color:#8DDB8C\">h1\u003C/span>\u003Cspan style=\"color:#ADBAC7\">>Hello world&#x3C;/\u003C/span>\u003Cspan style=\"color:#8DDB8C\">h1\u003C/span>\u003Cspan style=\"color:#ADBAC7\">>\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">&#x3C;\u003C/span>\u003Cspan style=\"color:#8DDB8C\">style\u003C/span>\u003Cspan style=\"color:#ADBAC7\">>\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#8DDB8C\">    h1\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#6CB6FF\">        color\u003C/span>\u003Cspan style=\"color:#ADBAC7\">: \u003C/span>\u003Cspan style=\"color:#6CB6FF\">purple\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    }\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">&#x3C;/\u003C/span>\u003Cspan style=\"color:#8DDB8C\">style\u003C/span>\u003Cspan style=\"color:#ADBAC7\">>\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Cp>给组件增加点数据：\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"svelte\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"svelte\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">&#x3C;\u003C/span>\u003Cspan style=\"color:#8DDB8C\">script\u003C/span>\u003Cspan style=\"color:#ADBAC7\">>\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">let\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> name \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#96D0FF\"> \"world\"\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">&#x3C;/\u003C/span>\u003Cspan style=\"color:#8DDB8C\">script\u003C/span>\u003Cspan style=\"color:#ADBAC7\">>\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">&#x3C;\u003C/span>\u003Cspan style=\"color:#8DDB8C\">h1\u003C/span>\u003Cspan style=\"color:#ADBAC7\">>Hello \u003C/span>\u003Cspan style=\"color:#F47067\">{\u003C/span>\u003Cspan style=\"color:#ADBAC7\">name\u003C/span>\u003Cspan style=\"color:#F47067\">}\u003C/span>\u003Cspan style=\"color:#ADBAC7\">&#x3C;/\u003C/span>\u003Cspan style=\"color:#8DDB8C\">h1\u003C/span>\u003Cspan style=\"color:#ADBAC7\">>\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Cp>绑定事件：\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"svelte\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"svelte\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">&#x3C;\u003C/span>\u003Cspan style=\"color:#8DDB8C\">script\u003C/span>\u003Cspan style=\"color:#ADBAC7\">>\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">let\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> count \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> 0\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">function\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> onClickButton\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#F69D50\">event\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    count\u003C/span>\u003Cspan style=\"color:#F47067\">++\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">}\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">&#x3C;/\u003C/span>\u003Cspan style=\"color:#8DDB8C\">script\u003C/span>\u003Cspan style=\"color:#ADBAC7\">>\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">&#x3C;\u003C/span>\u003Cspan style=\"color:#8DDB8C\">button\u003C/span>\u003Cspan style=\"color:#ADBAC7\">>Clicked \u003C/span>\u003Cspan style=\"color:#F47067\">{\u003C/span>\u003Cspan style=\"color:#ADBAC7\">count\u003C/span>\u003Cspan style=\"color:#F47067\">}\u003C/span>\u003Cspan style=\"color:#ADBAC7\">&#x3C;/\u003C/span>\u003Cspan style=\"color:#8DDB8C\">button\u003C/span>\u003Cspan style=\"color:#ADBAC7\">>\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Cp>接下来看下，上面的Svelte语法是怎么编译为JavaScript的\u003C/p>\n\u003Ch2 id=\"compile-svelte-in-your-head\">Compile Svelte in your Head\u003C/h2>\n\u003Cp>svelte编译器分析编写的代码并生成优化后输出为JavaScript\u003C/p>\n\u003Cp>为研究Svelte如何编译，我们从简单的例子出发，逐步构建代码。通过这个过程，将可看到svelte根据更改逐步添加到输出代码中。\u003C/p>\n\u003Cp>第一个例子如下：\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"svelte\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"svelte\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">&#x3C;\u003C/span>\u003Cspan style=\"color:#8DDB8C\">h1\u003C/span>\u003Cspan style=\"color:#ADBAC7\">>Hello world&#x3C;/\u003C/span>\u003Cspan style=\"color:#8DDB8C\">h1\u003C/span>\u003Cspan style=\"color:#ADBAC7\">>\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Cp>\u003Ca href=\"https://svelte.dev/repl/99aeea705b1e48fe8610b3ccee948280?version=4.1.1\">Svelte REPL\u003C/a>\u003C/p>\n\u003Cp>JavaScript Output\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"js\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">function\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> create_fragment\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#F69D50\">ctx\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">\tlet\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> h1;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">\treturn\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">\t\tc\u003C/span>\u003Cspan style=\"color:#ADBAC7\">() {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">\t\t\th1 \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> element\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#96D0FF\">\"h1\"\u003C/span>\u003Cspan style=\"color:#ADBAC7\">);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">\t\t\th1.textContent \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#96D0FF\"> \"Hello World\"\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">\t\t},\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">\t\tm\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#F69D50\">target\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, \u003C/span>\u003Cspan style=\"color:#F69D50\">anchor\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">\t\t\tinsert\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(target, h1, anchor);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">\t\t},\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">\t\tp: noop,\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">\t\ti: noop,\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">\t\to: noop,\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">\t\td\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#F69D50\">detaching\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">\t\t\tif\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (detaching) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">\t\t\t\tdetach\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(h1);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">\t\t\t}\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">\t\t}\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">\t};\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">}\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">class\u003C/span>\u003Cspan style=\"color:#F69D50\"> App\u003C/span>\u003Cspan style=\"color:#F47067\"> extends\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> SvelteComponent\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">\tconstructor\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#F69D50\">options\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#6CB6FF\">\t\tsuper\u003C/span>\u003Cspan style=\"color:#ADBAC7\">();\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">\t\tinit\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#6CB6FF\">this\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, options, \u003C/span>\u003Cspan style=\"color:#6CB6FF\">null\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, create_fragment, safe_not_equal, {});\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">\t}\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Cp>输出的代码分为两部分：\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ccode>create_fragment\u003C/code>\u003C/li>\n\u003Cli>\u003Ccode>class App extends SvelteComponent\u003C/code>\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"create_fragment\">create_fragment\u003C/h3>\n\u003Cp>Svelte组件是Svelte应用的一个个构建块。每一个组件只关注于构建最终DOM的一部分或片段。\ncreate_fragment函数为svelte组件提供了如何构建DOM片段的规范。\u003C/p>\n\u003Cp>create_fragment函数返回一个有如下方法的对象：\u003C/p>\n\u003Cul>\n\u003Cli>c()。create的缩写。包含创建元素的所有指令\u003C/li>\n\u003Cli>m()。mount的缩写。包含如何将创建的元素与DOM树连接\u003C/li>\n\u003Cli>d()。destroy的缩写。将当前节点从DOM树中移除\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"class-app-extends-sveltecomponent\">class App extends SvelteComponent\u003C/h3>\n\u003Cp>每个svelte组件都是一个class，你可以参考\u003Ca href=\"https://svelte.dev/docs/client-side-component-api\">这个文档\u003C/a>导入和实例化它。\n在构造函数中，我们使用组成组件的相关信息初始化组件，例如create_fragment。svelte只会传递需要的信息，并在不必要的时候删除他们。\u003C/p>\n\u003Cp>例如注释掉\u003Ccode>&#x3C;h1>\u003C/code>标签，得到JavaScript为：\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"svelte\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"svelte\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">&#x3C;!-- empty -->\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"js\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">class\u003C/span>\u003Cspan style=\"color:#F69D50\"> App\u003C/span>\u003Cspan style=\"color:#F47067\"> extends\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> SvelteComponent\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">\tconstructor\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#F69D50\">options\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#6CB6FF\">\t\tsuper\u003C/span>\u003Cspan style=\"color:#ADBAC7\">();\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">\t\tinit\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#6CB6FF\">this\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, options, \u003C/span>\u003Cspan style=\"color:#6CB6FF\">null\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, \u003C/span>\u003Cspan style=\"color:#6CB6FF\">null\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, safe_not_equal, {});\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">\t}\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Cp>svele将传入null而不是create_fragment。\u003C/p>\n\u003Cp>init函数是初始化大部分内置功能的地方，例如：\u003C/p>\n\u003Cul>\n\u003Cli>组件的props，ctx和context\u003C/li>\n\u003Cli>组件的生命周期事件\u003C/li>\n\u003Cli>组件的更新机制\n最后，svelte调用create_fragment来创建元素和与DOM树进行连接\u003C/li>\n\u003C/ul>\n\u003Cp>所有的内部状态和方法都附加到\u003Ccode>this.$$\u003C/code>上了。因此如果你直接使用\u003Ccode>this.$$\u003C/code>访问组件内部属性，需要尤其注意\u003Cspan role=\"img\" aria-label=\"warning\">⚠️\u003C/span>\u003Cspan role=\"img\" aria-label=\"police officer\">👮\u003C/span>\u003C/p>\n\u003Ch3 id=\"adding-data\">Adding Data\u003C/h3>\n\u003Cp>现在让我们给组件增加点数据：\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"svelte\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"svelte\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">&#x3C;\u003C/span>\u003Cspan style=\"color:#8DDB8C\">script\u003C/span>\u003Cspan style=\"color:#ADBAC7\">>\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">let\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> name \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#96D0FF\"> 'world'\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">&#x3C;/\u003C/span>\u003Cspan style=\"color:#8DDB8C\">script\u003C/span>\u003Cspan style=\"color:#ADBAC7\">>\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">&#x3C;\u003C/span>\u003Cspan style=\"color:#8DDB8C\">h1\u003C/span>\u003Cspan style=\"color:#ADBAC7\">>Hello \u003C/span>\u003Cspan style=\"color:#F47067\">{\u003C/span>\u003Cspan style=\"color:#ADBAC7\">name\u003C/span>\u003Cspan style=\"color:#F47067\">}\u003C/span>\u003Cspan style=\"color:#ADBAC7\">&#x3C;/\u003C/span>\u003Cspan style=\"color:#8DDB8C\">h1\u003C/span>\u003Cspan style=\"color:#ADBAC7\">>\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Cp>JavaScript Output：\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"js\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">function\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> create_fragment\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#F69D50\">ctx\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">\tlet\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> h1;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">\treturn\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">\t\tc\u003C/span>\u003Cspan style=\"color:#ADBAC7\">() {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">\t\t\th1 \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> element\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#96D0FF\">\"h1\"\u003C/span>\u003Cspan style=\"color:#ADBAC7\">);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">\t\t\th1.textContent \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#96D0FF\"> `Hello ${\u003C/span>\u003Cspan style=\"color:#ADBAC7\">name\u003C/span>\u003Cspan style=\"color:#96D0FF\">}`\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">\t\t},\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">\t\tm\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#F69D50\">target\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, \u003C/span>\u003Cspan style=\"color:#F69D50\">anchor\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">\t\t\tinsert\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(target, h1, anchor);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">\t\t},\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">\t\tp: noop,\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">\t\ti: noop,\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">\t\to: noop,\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">\t\td\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#F69D50\">detaching\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">\t\t\tif\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (detaching) \u003C/span>\u003Cspan style=\"color:#DCBDFB\">detach\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(h1);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">\t\t}\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">\t};\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">}\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">let\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> name \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#96D0FF\"> \"world\"\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">class\u003C/span>\u003Cspan style=\"color:#F69D50\"> App\u003C/span>\u003Cspan style=\"color:#F47067\"> extends\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> SvelteComponent\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">\tconstructor\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#F69D50\">options\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#6CB6FF\">\t\tsuper\u003C/span>\u003Cspan style=\"color:#ADBAC7\">();\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">\t\tinit\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#6CB6FF\">this\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, options, \u003C/span>\u003Cspan style=\"color:#6CB6FF\">null\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, create_fragment, safe_not_equal, {});\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">\t}\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Cp>与第一个例子相比，生成的代码中类似如下结构：\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"js\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">let\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> name \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#96D0FF\"> 'world'\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">{\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    h1.textContent \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#96D0FF\"> `Hello ${\u003C/span>\u003Cspan style=\"color:#ADBAC7\">name\u003C/span>\u003Cspan style=\"color:#96D0FF\">}`\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Cul>\n\u003Cli>在script中写的代码被放到了顶级作用域\u003C/li>\n\u003Cli>h1的内容变为了模板字面量\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"updating-data\">Updating Data\u003C/h3>\n\u003Cp>让我们添加一个函数用于更新name：\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"svelte\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"svelte\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">&#x3C;\u003C/span>\u003Cspan style=\"color:#8DDB8C\">script\u003C/span>\u003Cspan style=\"color:#ADBAC7\">>\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">let\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> name \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#96D0FF\"> 'world'\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">function\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> update\u003C/span>\u003Cspan style=\"color:#ADBAC7\">() {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    name \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#96D0FF\"> 'Svelte'\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">}\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">&#x3C;/\u003C/span>\u003Cspan style=\"color:#8DDB8C\">script\u003C/span>\u003Cspan style=\"color:#ADBAC7\">>\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">&#x3C;\u003C/span>\u003Cspan style=\"color:#8DDB8C\">h1\u003C/span>\u003Cspan style=\"color:#ADBAC7\">>Hello \u003C/span>\u003Cspan style=\"color:#F47067\">{\u003C/span>\u003Cspan style=\"color:#ADBAC7\">name\u003C/span>\u003Cspan style=\"color:#F47067\">}\u003C/span>\u003Cspan style=\"color:#ADBAC7\">&#x3C;/\u003C/span>\u003Cspan style=\"color:#8DDB8C\">h1\u003C/span>\u003Cspan style=\"color:#ADBAC7\">>\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Cp>\u003Ca href=\"https://svelte.dev/repl/3237a87f7da947cb845aa2cbc9d8ea2e?version=4.1.1\">Svelte REPL\u003C/a>\u003C/p>\n\u003Cp>JavaScript Output:\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"js\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">function\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> create_fragment\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#F69D50\">ctx\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\" data-highlighted-line=\"\">\u003Cspan style=\"color:#F47067\">\tlet\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> h1;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\" data-highlighted-line=\"\">\u003Cspan style=\"color:#F47067\">\tlet\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> t0;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\" data-highlighted-line=\"\">\u003Cspan style=\"color:#F47067\">\tlet\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> t1;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">\treturn\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">\t\tc\u003C/span>\u003Cspan style=\"color:#ADBAC7\">() {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">\t\t\th1 \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> element\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#96D0FF\">\"h1\"\u003C/span>\u003Cspan style=\"color:#ADBAC7\">);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">\t\t\tt0 \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> text\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#96D0FF\">\"Hello \"\u003C/span>\u003Cspan style=\"color:#ADBAC7\">);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\" data-highlighted-line=\"\">\u003Cspan style=\"color:#ADBAC7\">\t\t\tt1 \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> text\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#768390\">/*name*/\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> ctx[\u003C/span>\u003Cspan style=\"color:#6CB6FF\">0\u003C/span>\u003Cspan style=\"color:#ADBAC7\">]);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">\t\t},\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">\t\tm\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#F69D50\">target\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, \u003C/span>\u003Cspan style=\"color:#F69D50\">anchor\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">\t\t\tinsert\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(target, h1, anchor);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">\t\t\tappend\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(h1, t0);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">\t\t\tappend\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(h1, t1);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">\t\t},\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\" data-highlighted-line=\"\">\u003Cspan style=\"color:#DCBDFB\">\t\tp\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#F69D50\">ctx\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, [\u003C/span>\u003Cspan style=\"color:#F69D50\">dirty\u003C/span>\u003Cspan style=\"color:#ADBAC7\">]) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\" data-highlighted-line=\"\">\u003Cspan style=\"color:#F47067\">\t\t\tif\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (dirty \u003C/span>\u003Cspan style=\"color:#F47067\">&#x26;\u003C/span>\u003Cspan style=\"color:#768390\"> /*name*/\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> 1\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) \u003C/span>\u003Cspan style=\"color:#DCBDFB\">set_data\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(t1, \u003C/span>\u003Cspan style=\"color:#768390\">/*name*/\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> ctx[\u003C/span>\u003Cspan style=\"color:#6CB6FF\">0\u003C/span>\u003Cspan style=\"color:#ADBAC7\">]);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\" data-highlighted-line=\"\">\u003Cspan style=\"color:#ADBAC7\">\t\t},\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">\t\td\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#F69D50\">detaching\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">\t\t\tif\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (detaching) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">\t\t\t\tdetach\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(h1);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">\t\t\t}\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">\t\t}\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">\t};\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">}\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\" data-highlighted-line=\"\">\u003Cspan style=\"color:#F47067\">function\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> instance\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#F69D50\">$$self\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, \u003C/span>\u003Cspan style=\"color:#F69D50\">$$props\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, \u003C/span>\u003Cspan style=\"color:#F69D50\">$$invalidate\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\" data-highlighted-line=\"\">\u003Cspan style=\"color:#F47067\">\tlet\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> name \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#96D0FF\"> 'World'\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\" data-highlighted-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\" data-highlighted-line=\"\">\u003Cspan style=\"color:#F47067\">\tfunction\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> update\u003C/span>\u003Cspan style=\"color:#ADBAC7\">() {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\" data-highlighted-line=\"\">\u003Cspan style=\"color:#DCBDFB\">\t\t$$invalidate\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#6CB6FF\">0\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, name \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#96D0FF\"> 'Svelte'\u003C/span>\u003Cspan style=\"color:#ADBAC7\">);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\" data-highlighted-line=\"\">\u003Cspan style=\"color:#ADBAC7\">\t}\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\" data-highlighted-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\" data-highlighted-line=\"\">\u003Cspan style=\"color:#F47067\">\treturn\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> [name];\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\" data-highlighted-line=\"\">\u003Cspan style=\"color:#ADBAC7\">}\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">class\u003C/span>\u003Cspan style=\"color:#F69D50\"> App\u003C/span>\u003Cspan style=\"color:#F47067\"> extends\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> SvelteComponent\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">\tconstructor\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#F69D50\">options\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#6CB6FF\">\t\tsuper\u003C/span>\u003Cspan style=\"color:#ADBAC7\">();\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\" data-highlighted-line=\"\">\u003Cspan style=\"color:#DCBDFB\">\t\tinit\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#6CB6FF\">this\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, options, instance, create_fragment, safe_not_equal, {});\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">\t}\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Cp>多出的地方：\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ccode>h1\u003C/code>的内容被拆分为两个文本元素\u003C/li>\n\u003Cli>\u003Ccode>create_fragment\u003C/code>返回的对象增加了一个新的方法\u003Ccode>p\u003C/code>\u003C/li>\n\u003Cli>新的函数\u003Ccode>instance\u003C/code>被创建\u003C/li>\n\u003Cli>在svelte组件的script内写的内容被放到了\u003Ccode>instance\u003C/code>\u003C/li>\n\u003Cli>在\u003Ccode>create_fragment\u003C/code>中被用到的数据\u003Ccode>name\u003C/code>现在被替换为\u003Ccode>ctx[0]\u003C/code>\u003C/li>\n\u003C/ul>\n\u003Cp>svelte编译器跟踪所有在script中定义的变量，它跟踪变量是否：\u003C/p>\n\u003Col>\n\u003Cli>可以被改变，如：\u003Ccode>count++\u003C/code>\u003C/li>\n\u003Cli>可被重新赋值，如：\u003Ccode>name = ‘svelte’\u003C/code>\u003C/li>\n\u003Cli>是否在模板中被引用？如：\u003Ccode>&#x3C;h1>Hello {name}&#x3C;/h1>\u003C/code>\u003C/li>\n\u003Cli>是否可写？例如：\u003Ccode>const i = 1\u003C/code> vs \u003Ccode>let i = 1\u003C/code>\u003C/li>\n\u003Cli>…more\u003C/li>\n\u003C/ol>\n\u003Cp>当svelte编译器意识到变量名可被重新分配时，它会将h1的文本内容分解为多个部分，这样他就能动态更新部分文本。\u003C/p>\n\u003Cp>你可以看到新方法来更新文本节点：\u003C/p>\n\u003Ch4 id=\"pctx-dirty\">\u003Ccode>p(ctx, dirty)\u003C/code>\u003C/h4>\n\u003Cp>update的简写。它根据状态（dirty）和组件状态（ctx）的变化来更新元素\u003C/p>\n\u003Ch4 id=\"instance-variable\">instance variable\u003C/h4>\n\u003Cp>变量名不能在不同组件实例上共享，这就是为什么它将变量名移动到一个名为instance的函数中。\u003C/p>\n\u003Cp>instance函数返回组件实例的变量列表，这些变量是：\u003C/p>\n\u003Col>\n\u003Cli>在模板中被使用\u003C/li>\n\u003Cli>被改变或重新赋值（在组件的实例内被更改）\n在组件中，这个列表被称为\u003Ccode>ctx\u003C/code>\n在init函数中，svelte执行instance函数创建ctx，然后使用它创建fragment：\u003C/li>\n\u003C/ol>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"js\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">const\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> ctx\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> instance\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#768390\">/*...*/\u003C/span>\u003Cspan style=\"color:#ADBAC7\">)\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">const\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> fragment\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> create_fragment\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(ctx)\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">// create the fragment\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">fragment.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">c\u003C/span>\u003Cspan style=\"color:#ADBAC7\">()\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">// mount the fragment onto the DOM\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">fragment.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">m\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(target)\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Cp>现在不访问组件实例的变量名，而是通过ctx拿到name的值：\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"js\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">t1 \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> text\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#768390\">/*name*/\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> ctx[\u003C/span>\u003Cspan style=\"color:#6CB6FF\">0\u003C/span>\u003Cspan style=\"color:#ADBAC7\">])\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Cp>ctx是数组而非对象或Map，与一项位掩码的优化技术有关，参考\u003Ca href=\"https://github.com/sveltejs/svelte/issues/1922\">相关讨论\u003C/a> \u003Ca href=\"https://stackoverflow.com/questions/59541070/how-is-svelte-making-a-component-dirty\">stackoverflow\u003C/a>\n“\u003C/p>\n\u003Ch4 id=\"invalidate\">\u003Ccode>$$invalidate\u003C/code>\u003C/h4>\n\u003Cp>svelte响应式系统背后的秘密是\u003Ccode>$$invalidate\u003C/code>函数，每一个变量如果可被：\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ccode>reassigned/mutated\u003C/code>\u003C/li>\n\u003Cli>被模板引用\n都会有\u003Ccode>$$invalidate\u003C/code>函数被插入到\u003Ccode>reassigned/mutated\u003C/code>所在位置的右侧:\u003C/li>\n\u003C/ul>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"js\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">name \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#96D0FF\"> 'svelte'\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">count\u003C/span>\u003Cspan style=\"color:#F47067\">++\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">foo.a \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> 1\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">// compiled\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">name\u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#96D0FF\">'svelte'\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">$$invalidate\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#768390\">/* name */\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, name);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">count\u003C/span>\u003Cspan style=\"color:#F47067\">++\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">$$invalidate\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#768390\">/* count */\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, count);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">foo.a \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> 1\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">$$invalidate\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#768390\">/* foo */\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, foo);\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Cp>\u003Ccode>$$invalidate\u003C/code>函数将变量标记为\u003Ccode>dirty\u003C/code>并安排组件的更新：\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"js\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">// conceptually...\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">const\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> ctx\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> instance\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#768390\">/*...*/\u003C/span>\u003Cspan style=\"color:#ADBAC7\">);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">const\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> fragment\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> create_fragment\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(ctx);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">// to track which variable has changed\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">const\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> dirty\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#F47067\"> new\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> Set\u003C/span>\u003Cspan style=\"color:#ADBAC7\">();\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">const\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> $$invalidate\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (\u003C/span>\u003Cspan style=\"color:#F69D50\">variable\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, \u003C/span>\u003Cspan style=\"color:#F69D50\">newValue\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) \u003C/span>\u003Cspan style=\"color:#F47067\">=>\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">    // update ctx\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    ctx[variable] \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> newValue;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">    // mark variable as dirty\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    dirty.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">add\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(variable);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">    // schedules update for the component\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">    scheduleUpdate\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(component);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">};\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">// gets called when update is scheduled\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">function\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> flushUpdate\u003C/span>\u003Cspan style=\"color:#ADBAC7\">() {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">    // update the fragment\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    fragment.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">p\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(ctx, dirty);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">    // clear the dirty\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    dirty.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">clear\u003C/span>\u003Cspan style=\"color:#ADBAC7\">();\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Ch3 id=\"adding-event-listeners\">Adding event listeners\u003C/h3>\n\u003Cp>在svelte组件中增加一个事件监听:\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"svelte\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"svelte\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">&#x3C;\u003C/span>\u003Cspan style=\"color:#8DDB8C\">script\u003C/span>\u003Cspan style=\"color:#ADBAC7\">>\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">\tlet\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> name \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#96D0FF\"> 'world'\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">\tfunction\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> update\u003C/span>\u003Cspan style=\"color:#ADBAC7\">() {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">\t\tname \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#96D0FF\"> 'Svelte'\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">\t}\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">&#x3C;/\u003C/span>\u003Cspan style=\"color:#8DDB8C\">script\u003C/span>\u003Cspan style=\"color:#ADBAC7\">>\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\" data-highlighted-line=\"\">\u003Cspan style=\"color:#ADBAC7\">&#x3C;\u003C/span>\u003Cspan style=\"color:#8DDB8C\">h1\u003C/span>\u003Cspan style=\"color:#F47067\"> on\u003C/span>\u003Cspan style=\"color:#ADBAC7\">:\u003C/span>\u003Cspan style=\"color:#F69D50\">click\u003C/span>\u003Cspan style=\"color:#ADBAC7\">=\u003C/span>\u003Cspan style=\"color:#F47067\">{\u003C/span>\u003Cspan style=\"color:#ADBAC7\">update\u003C/span>\u003Cspan style=\"color:#F47067\">}\u003C/span>\u003Cspan style=\"color:#ADBAC7\">>Hello \u003C/span>\u003Cspan style=\"color:#F47067\">{\u003C/span>\u003Cspan style=\"color:#ADBAC7\">name\u003C/span>\u003Cspan style=\"color:#F47067\">}\u003C/span>\u003Cspan style=\"color:#ADBAC7\">&#x3C;/\u003C/span>\u003Cspan style=\"color:#8DDB8C\">h1\u003C/span>\u003Cspan style=\"color:#ADBAC7\">>\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Cp>\u003Ca href=\"https://svelte.dev/repl/a9893863475049149ca72e1416eef7e5?version=4.1.1\">Svelte REPL\u003C/a>\u003C/p>\n\u003Cp>JavaScript Output:\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"js\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">function\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> create_fragment\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#F69D50\">ctx\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">\tlet\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> h1;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">\tlet\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> t0;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">\tlet\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> t1;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">\tlet\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> mounted;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">\tlet\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> dispose;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">\treturn\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">\t\tc\u003C/span>\u003Cspan style=\"color:#ADBAC7\">() {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">\t\t\th1 \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> element\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#96D0FF\">\"h1\"\u003C/span>\u003Cspan style=\"color:#ADBAC7\">);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">\t\t\tt0 \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> text\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#96D0FF\">\"Hello \"\u003C/span>\u003Cspan style=\"color:#ADBAC7\">);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">\t\t\tt1 \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> text\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#768390\">/*name*/\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> ctx[\u003C/span>\u003Cspan style=\"color:#6CB6FF\">0\u003C/span>\u003Cspan style=\"color:#ADBAC7\">]);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">\t\t},\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">\t\tm\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#F69D50\">target\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, \u003C/span>\u003Cspan style=\"color:#F69D50\">anchor\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">\t\t\tinsert\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(target, h1, anchor);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">\t\t\tappend\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(h1, t0);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">\t\t\tappend\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(h1, t1);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">\t\t\tif\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (\u003C/span>\u003Cspan style=\"color:#F47067\">!\u003C/span>\u003Cspan style=\"color:#ADBAC7\">mounted) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\" data-highlighted-line=\"\">\u003Cspan style=\"color:#ADBAC7\">\t\t\t\tdispose \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> listen\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(h1, \u003C/span>\u003Cspan style=\"color:#96D0FF\">\"click\"\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, \u003C/span>\u003Cspan style=\"color:#768390\">/*update*/\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> ctx[\u003C/span>\u003Cspan style=\"color:#6CB6FF\">1\u003C/span>\u003Cspan style=\"color:#ADBAC7\">]);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">\t\t\t\tmounted \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> true\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">\t\t\t}\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">\t\t},\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">\t\tp\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#F69D50\">ctx\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, [\u003C/span>\u003Cspan style=\"color:#F69D50\">dirty\u003C/span>\u003Cspan style=\"color:#ADBAC7\">]) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">\t\t\tif\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (dirty \u003C/span>\u003Cspan style=\"color:#F47067\">&#x26;\u003C/span>\u003Cspan style=\"color:#768390\"> /*name*/\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> 1\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) \u003C/span>\u003Cspan style=\"color:#DCBDFB\">set_data\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(t1, \u003C/span>\u003Cspan style=\"color:#768390\">/*name*/\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> ctx[\u003C/span>\u003Cspan style=\"color:#6CB6FF\">0\u003C/span>\u003Cspan style=\"color:#ADBAC7\">]);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">\t\t},\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">\t\td\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#F69D50\">detaching\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">\t\t\tif\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (detaching) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">\t\t\t\tdetach\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(h1);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">\t\t\t}\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">\t\t\tmounted \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> false\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\" data-highlighted-line=\"\">\u003Cspan style=\"color:#DCBDFB\">\t\t\tdispose\u003C/span>\u003Cspan style=\"color:#ADBAC7\">();\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">\t\t}\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">\t};\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">}\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">function\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> instance\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#F69D50\">$$self\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, \u003C/span>\u003Cspan style=\"color:#F69D50\">$$props\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, \u003C/span>\u003Cspan style=\"color:#F69D50\">$$invalidate\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">\tlet\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> name \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#96D0FF\"> 'world'\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">\tfunction\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> update\u003C/span>\u003Cspan style=\"color:#ADBAC7\">() {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">\t\t$$invalidate\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#6CB6FF\">0\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, name \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#96D0FF\"> 'Svelte'\u003C/span>\u003Cspan style=\"color:#ADBAC7\">);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">\t}\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\" data-highlighted-line=\"\">\u003Cspan style=\"color:#F47067\">\treturn\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> [name, update];\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">}\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">class\u003C/span>\u003Cspan style=\"color:#F69D50\"> App\u003C/span>\u003Cspan style=\"color:#F47067\"> extends\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> SvelteComponent\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">\tconstructor\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#F69D50\">options\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#6CB6FF\">\t\tsuper\u003C/span>\u003Cspan style=\"color:#ADBAC7\">();\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">\t\tinit\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#6CB6FF\">this\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, options, instance, create_fragment, safe_not_equal, {});\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">\t}\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Cp>多出的地方：\u003C/p>\n\u003Col>\n\u003Cli>instance函数返回了内部的update函数\u003C/li>\n\u003Cli>在mount时添加了事件监听，destroy时移除事件\u003C/li>\n\u003C/ol>\n\u003Cp>如上所述，instance函数返回模板中引用的变量，并且这些变量会被修改或重分配。\n因在template中引用了update函数，所以update也作为了ctx的一部分被返回\u003C/p>\n\u003Cp>svelte编译器尝试生成紧凑的JavaScript代码，如果非必要则不会返回额外的变量。\u003C/p>\n\u003Ch4 id=\"listen--dispose\">listen &#x26; dispose\u003C/h4>\n\u003Cp>每当在svelte组件中增加事件监听器时，svelte都会注入代码添加事件，并在DOM片段被移除时将事件移除。\u003C/p>\n\u003Cp>当有多个事件被绑定时，svelte编译器会压缩多个事件：\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"js\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\" data-highlighted-line=\"\">\u003Cspan style=\"color:#ADBAC7\">dispose \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> [\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\" data-highlighted-line=\"\">\u003Cspan style=\"color:#DCBDFB\">  listen\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(h1, \u003C/span>\u003Cspan style=\"color:#96D0FF\">'click'\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, \u003C/span>\u003Cspan style=\"color:#768390\">/*update*/\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> ctx[\u003C/span>\u003Cspan style=\"color:#6CB6FF\">1\u003C/span>\u003Cspan style=\"color:#ADBAC7\">]),\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\" data-highlighted-line=\"\">\u003Cspan style=\"color:#DCBDFB\">  listen\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(h1, \u003C/span>\u003Cspan style=\"color:#96D0FF\">'mousedown'\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, \u003C/span>\u003Cspan style=\"color:#768390\">/*update*/\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> ctx[\u003C/span>\u003Cspan style=\"color:#6CB6FF\">1\u003C/span>\u003Cspan style=\"color:#ADBAC7\">]),\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\" data-highlighted-line=\"\">\u003Cspan style=\"color:#DCBDFB\">  listen\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(h1, \u003C/span>\u003Cspan style=\"color:#96D0FF\">'touchstart'\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, \u003C/span>\u003Cspan style=\"color:#768390\">/*update*/\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> ctx[\u003C/span>\u003Cspan style=\"color:#6CB6FF\">1\u003C/span>\u003Cspan style=\"color:#ADBAC7\">], { passive: \u003C/span>\u003Cspan style=\"color:#6CB6FF\">true\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> }),\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\" data-highlighted-line=\"\">\u003Cspan style=\"color:#ADBAC7\">];\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">// ...\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\" data-highlighted-line=\"\">\u003Cspan style=\"color:#DCBDFB\">run_all\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(dispose);\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Ch2 id=\"总结\">总结\u003C/h2>\n\u003Cp>svelte语法是HTML的超集。\u003C/p>\n\u003Cp>一个svelte组件会通过svelte编译器分析并生成优化后的JavaScript代码。\u003C/p>\n\u003Cp>输出的JavaScript代码可分成3部分：\u003C/p>\n\u003Ch3 id=\"create_fragment-1\">create_fragment\u003C/h3>\n\u003Cp>返回一个对象，包含了通过组件创建一个元素片段所需的方法。\u003C/p>\n\u003Ch3 id=\"instance\">instance\u003C/h3>\n\u003Col>\n\u003Cli>写在script标签内的大多数代码作为instance的内容\u003C/li>\n\u003Cli>返回一个数组表示组件实例的若干状态（可变动、且在template中被引用的变量）\u003C/li>\n\u003Cli>\u003Ccode>$$invalidate\u003C/code>被插入到每个改变变量值的后面。\u003C/li>\n\u003C/ol>\n\u003Ch3 id=\"class-app-extends-sveltecomponent-1\">class App extends SvelteComponent\u003C/h3>\n\u003Col>\n\u003Cli>初始化组件（create_fragment、instance）\u003C/li>\n\u003Cli>设置组件内部结构\u003C/li>\n\u003Cli>提供组件对外的API\u003C/li>\n\u003C/ol>",{"headings":667,"localImagePaths":709,"remoteImagePaths":710,"frontmatter":711,"imagePaths":716},[668,669,672,675,677,680,683,686,689,692,695,698,701,703,705,707],{"depth":31,"slug":324,"text":325},{"depth":31,"slug":670,"text":671},"svelte-syntax","Svelte syntax",{"depth":31,"slug":673,"text":674},"compile-svelte-in-your-head","Compile Svelte in your Head",{"depth":37,"slug":676,"text":676},"create_fragment",{"depth":37,"slug":678,"text":679},"class-app-extends-sveltecomponent","class App extends SvelteComponent",{"depth":37,"slug":681,"text":682},"adding-data","Adding Data",{"depth":37,"slug":684,"text":685},"updating-data","Updating Data",{"depth":347,"slug":687,"text":688},"pctx-dirty","p(ctx, dirty)",{"depth":347,"slug":690,"text":691},"instance-variable","instance variable",{"depth":347,"slug":693,"text":694},"invalidate","$$invalidate",{"depth":37,"slug":696,"text":697},"adding-event-listeners","Adding event listeners",{"depth":347,"slug":699,"text":700},"listen--dispose","listen & dispose",{"depth":31,"slug":702,"text":702},"总结",{"depth":37,"slug":704,"text":676},"create_fragment-1",{"depth":37,"slug":706,"text":706},"instance",{"depth":37,"slug":708,"text":679},"class-app-extends-sveltecomponent-1",[],[],{"title":656,"description":15,"pubDate":564,"heroImage":658,"date created":712,"date modified":713,"tags":714,"minutesRead":715},"2023-07-21 19:05","2023-07-21",[20,660],"10 min read",[],"200-Learning/210-Programing/Compile Svelte in Your Head（1）.md","200-learning/210-programing/compile-svelte-in-your-head3",{"id":718,"data":720,"body":725,"filePath":726,"digest":727,"rendered":728,"legacyId":779},{"title":721,"description":15,"pubDate":722,"heroImage":723,"tags":724},"Compile Svelte in Your Head（3）",["Date","2023-07-31T05:46:00.000Z"],"https://images.unsplash.com/photo-1593720213428-28a5b9e94613?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1200&q=80",[20,660],"本文将介绍3个DOM相关的指令：\n- `on:` 事件绑定\n- `bind:`属性的双向绑定\n- `use:`绑定`action`（元素创建时调用的函数）\n\n## TOC\n\n\n## 在Svelte模板如何使用\n\n### `on:`event name\n\n使用`on:`指令在DOM元素或Svelte组件上绑定事件\n\n```svelte\n\u003Cscript>\nfunction handleMouseMove(event) {}\nfunction handleClick(event) {}\n\u003C/script>\n\n\u003C!-- You can pass in as variable -->\n\u003Cdiv on:mousemove={handleMouseMove} />\n\n\u003C!-- or you can inline the event handler -->\n\u003Cdiv on:mousemove={event => { /*...*/ }} />\n\n\u003C!-- You can modify event handler with modifiers  -->\n\u003Cdiv on:click|stopPropagation|once={handleClick}>\n```\n\n### `bind:`property\n\n将变量绑定到元素的属性上，更新变量将更新元素的属性。表单元素绑定的值被修改也会导致变量更新。\n\n```svelte\n\u003Cscript>\n  let value, name, yes, text, selected;\n\u003C/script>\n\n\u003Cinput bind:value />\n\u003Cinput bind:value={name} />\n\n\u003Ctextarea bind:value={text} />\n\n\u003Cinput type=\"checkbox\" bind:checked={yes} />\n\n\u003Cselect bind:value={selected}>\n    \u003Coption value={a}>a\u003C/option>\n    \u003Coption value={b}>b\u003C/option>\n    \u003Coption value={c}>c\u003C/option>\n\u003C/select>\n```\n\n### `use:` actions\n\n`use:`指令用于绑定`action`，`action`提供了另一种方式增强元素功能，当与第三方库一起使用时可使用。\n`action`是一个函数，该函数将在绑定DOM元素创建时执行。\n该函数返回一个对象，`destroy`在绑定到DOM元素从文档树中被移除时触发；当给action传递参数时，`update`在参数被更新时触发。\n\n```svelte\n\u003Cscript>\n/** @type {import('svelte/action').Action}  */\nfunction foo(node) {\n    // the node has been mounted in the DOM\n    return {\n        destroy() {\n        // the node has been removed from the DOM\n        }\n    };\n}\n\u003C/script>\n\n\u003Cdiv use:foo />\n```\n\n## Vanilla JavaScript\n\n下面展示在不使用任何框架的情况下实现事件处理程序、绑定和`action`\n\n### Event handler\n\n使用[事件监听器](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener)\n```js\nelement.addEventListener('click', handleClick);\n```\n事件监听器接受一个可选的第三个参数，用于指定事件处理程序的特征：\n```js\nelement.addEventListener('click', handleClick, {\n    capture: true, // triggered before any child element\n    once: true, // triggered at most once\n    passive: true, // indicates that will never call `preventDefault` to improve performance\n});\n```\n\n要删除事件处理器，需要使用相同的事件、监听器、`capture`/`useCapture`\n\n### Bindings\n\n绑定是在变量值和属性值之间进行同步。\n\n要将变量同步到属性，需要观察变量的值，当变量变化时将其应用到元素的属性上。\n另一方面，为了将元素的属性同步到变量，需要根据属性坚挺元素的事件，并在事件发生时更新变量的值。\n\n```js\n// binding variable `checked` with the checkbox `checked` property\nlet checked;\nlet input = document.querySelector('#checkbox');\n\n// synchronise variable `checked` to checkbox `checked` property\nobserve(checked, newValue => {\n    input.checked = newValue;\n});\n\n// synchronise checkbox `checked` property to variable `checked`\n// listen to `change` event for `checked` property\ninput.addEventListener('change', event => {\n    checked = input.checked;\n});\n```\n\n事件的名称和元素的属性名称可能各不相同，例如：`\u003Cinput type=\"text\">`可监听`input`事件中value属性变化，但复选框`\u003Cinput type=\"checkbox\">`监听`checked`属性的`change`事件\n\n:::warning\n如果元素没触发任何事件来指示属性已更改，则几乎不可能绑定元素的属性，例如[HTMLDialogElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLDialogElement)有close事件但没有open事件！\n另一种选择是使用[`MutationObserver`](https://developer.mozilla.org/zh-CN/docs/Web/API/MutationObserver)。\n:::\n\n### Action\n\naction是一个在DOM元素创建时调用的函数，返回一个对象，有如下两个方法：\n- `update`当参数改变时调用\n- `destroy`当元素从文档中断开时被调用\n\n```js\nfunction actionFn(element, parameter) {\n    return {\n        update(newParameter) {},\n        destroy() {},\n    };\n}\n\n// When element is mounted onto the DOM\nlet parameter = 1;\nconst actionObj = actionFn(element, parameter);\n\n// When parameter changes\nparameter = 2;\nactionObj.update(parameter);\n\n// When element is removed from the DOM\nactionObj.destroy();\n```\n\n## The Compiled JavaScript\n\n现在看经过svelte编译器编译后输出的代码：\n\n### `on:`\n\n```svelte\n\u003Cscript>\n    function onChange() {}\n\u003C/script>\n\u003Cinput on:change={onChange} />\n```\n\noutput:\n```js {11-12,16,26}\nfunction create_fragment(ctx) {\n    let input;\n    let dispose;\n\n    return {\n        c() {\n            input = element('input');\n        },\n        m(target, anchor, remount) {\n            insert(target, input, anchor);\n            if (remount) dispose();\n            dispose = listen(input, 'change', /*onChange*/ ctx[0]);\n        },\n        d(detaching) {\n            if (detaching) detach(input);\n            dispose();\n        },\n    };\n}\n\nfunction instance($$self) {\n    let i = 0;\n    function onChange() {\n        i++;\n    }\n    return [onChange];\n}\n```\n\n- svelte在`mount`时添加事件处理程序`listen(...)`\n- svelte在`destroy`时删除了事件处理程序`dispose()`\n\n### 事件修饰符\n\n在绑定事件时可以传入事件修饰符，如：\n```svelte\n\u003Cscript>\nlet i=0;\nfunction onClick() {\n    i++;\n}\n\u003C/script>\n\n\u003Cbutton on:click|preventDefault={onClick} />\n\u003Cbutton on:change|stopPropagation={onClick} />\n\u003Cbutton on:change|once={onClick} />\n\u003Cbutton on:change|capture={onClick} />\n\n\u003C!-- Chain multiple modifiers -->\n\u003Cbutton on:click|preventDefault|stopPropagation|once|capture={onClick} />\n```\n\n编译后的代码：\n```js {7-18}\nfunction create_fragment(ctx) {\n  // ...\n    return {\n        c() { /* ... */ },\n        m(target, anchor, remount) {\n          // ...\n            dispose = [\n                listen(button0, \"click\", prevent_default(/*onClick*/ ctx[0])),\n                listen(button1, \"change\", stop_propagation(/*onClick*/ ctx[0])),\n                listen(button2, \"change\", /*onClick*/ ctx[0], { once: true }),\n                listen(button3, \"change\", /*onClick*/ ctx[0], true),\n                listen(\n                    button4,\n                    \"click\",\n                    stop_propagation(prevent_default(/*onClick*/ ctx[0])),\n                    { once: true, capture: true }\n                ),\n            ];\n        },\n    // ...\n    };\n}\n```\n\n- svelte以不同的方式处理事件修饰符\n- 对于`capture`、`once`, `passive`将他们作为选项传递到`listen`\n- 对于`stopPropagation`、`preventDefault` 和`self`，事件处理器使用各自的装饰器函数嵌套\n\n\n`preventDefault`装饰器函数的示例实现：\n```js\nfunction prevent_default(fn) {\n    return function(event) {\n        event.preventDefault();\n        return fn.call(this, event);\n    };\n}\n```\n\n### `bind:`\n\n```svelte\n\u003Cscript>\n    let checked = false;\n    function updateChecked() {\n        checked = true;\n    }\n\u003C/script>\n\u003Cinput type=\"checkbox\" bind:checked />\n```\n\nOutput：\n```js {10-11,14-16,20,29,32-35}\nfunction create_fragment(ctx) {\n    let input;\n    let dispose;\n    \n    return {\n        c() { /* ... */ },\n        m(target, anchor, remount) {\n            insert(target, input, anchor);\n            input.checked = /*checked*/ ctx[0];\n            if (remount) dispose();\n            dispose = listen(input, 'change', /*input_change_handler*/ ctx[1]);\n        },\n        p(ctx, [dirty]) {\n            if (dirty & /*checked*/ 1) {\n                input.checked = /*checked*/ ctx[0];\n            }\n        },\n        d(detaching) {\n            if (detaching) detach(input);\n            dispose();\n        },\n    };\n}\n\nfunction instance($$self, $$props, $$invalidate) {\n    let checked = false;\n    \n    function updateChecked() {\n        $$invalidate(0, (checked = true));\n    }\n    \n    function input_change_handler() {\n        checked = this.checked;\n        $$invalidate(0, checked);\n    }\n    \n    return [checked, input_change_handler];\n}\n```\n\n- 将变量值同步到元素属性\n    - 用`$$invalidate(...)`包装变量`checked`的更新\n    - 在`update`方法中如果变量`checked`更新，则将`input.checked`设置为变量`checked`的值\n- 将元素属性的更改同步到变量\n    - svelte创建一个`input`事件的`handler`，读取`this.checked`属性值并调用`$$invalidate`更新它\n    - svelte在`mount`时设置了`listen(...)`，在`destroy`时`dispose`\n\n### `use:`\n\n```svelte\n\u003Cscript>\nlet i = '';\nfunction action() {}\nfunction updateI() {\n    i++;\n}\n\u003C/script>\n\u003Cdiv use:action={i} />\n```\n\nOutput:\n```js {9-12,15-16,20}\nfunction create_fragment(ctx) {\n  // ...\n    let action_action;\n    \n    return {\n        c() { /* ... */ },\n        m(target, anchor, remount) {\n            insert(target, div, anchor);\n            if (remount) dispose();\n            dispose = action_destroyer(\n                (action_action = action.call(null, div, /*i*/ ctx[0]))\n            );\n        },\n        p(ctx, [dirty]) {\n            if (action_action && is_function(action_action.update) && dirty & /*i*/ 1)\n                action_action.update.call(null, /*i*/ ctx[0]);\n        },\n        d(detaching) {\n            if (detaching) detach(div);\n            dispose();\n        },\n    };\n}\n```\n\n- 在`mount`时通过调用`action`函数创建`action_action`并使用`action_destroyer`包装为`dispose`\n- 当参数改变时，使用update方法中更新的参数调用`action_action.update`方法\n- 在destroy时调用第一步中由`action_destroyer`返回的`dispose`函数","src/content/blog/200-Learning/210-Programing/Compile Svelte in Your Head（3）.md","a065058b6b604ee9",{"html":729,"metadata":730},"\u003Cp>本文将介绍3个DOM相关的指令：\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ccode>on:\u003C/code> 事件绑定\u003C/li>\n\u003Cli>\u003Ccode>bind:\u003C/code>属性的双向绑定\u003C/li>\n\u003Cli>\u003Ccode>use:\u003C/code>绑定\u003Ccode>action\u003C/code>（元素创建时调用的函数）\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"toc\">TOC\u003C/h2>\n\u003Cul>\n\u003Cli>\u003Ca href=\"#%E5%9C%A8svelte%E6%A8%A1%E6%9D%BF%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8\">在Svelte模板如何使用\u003C/a>\n\u003Cul>\n\u003Cli>\u003Ca href=\"#onevent-name\">\u003Ccode>on:\u003C/code>event name\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#bindproperty\">\u003Ccode>bind:\u003C/code>property\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#use-actions\">\u003Ccode>use:\u003C/code> actions\u003C/a>\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\u003Ca href=\"#vanilla-javascript\">Vanilla JavaScript\u003C/a>\n\u003Cul>\n\u003Cli>\u003Ca href=\"#event-handler\">Event handler\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#bindings\">Bindings\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#action\">Action\u003C/a>\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\u003Ca href=\"#the-compiled-javascript\">The Compiled JavaScript\u003C/a>\n\u003Cul>\n\u003Cli>\u003Ca href=\"#on\">\u003Ccode>on:\u003C/code>\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#%E4%BA%8B%E4%BB%B6%E4%BF%AE%E9%A5%B0%E7%AC%A6\">事件修饰符\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#bind\">\u003Ccode>bind:\u003C/code>\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#use\">\u003Ccode>use:\u003C/code>\u003C/a>\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"在svelte模板如何使用\">在Svelte模板如何使用\u003C/h2>\n\u003Ch3 id=\"onevent-name\">\u003Ccode>on:\u003C/code>event name\u003C/h3>\n\u003Cp>使用\u003Ccode>on:\u003C/code>指令在DOM元素或Svelte组件上绑定事件\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"svelte\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"svelte\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">&#x3C;\u003C/span>\u003Cspan style=\"color:#8DDB8C\">script\u003C/span>\u003Cspan style=\"color:#ADBAC7\">>\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">function\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> handleMouseMove\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#F69D50\">event\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) {}\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">function\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> handleClick\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#F69D50\">event\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) {}\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">&#x3C;/\u003C/span>\u003Cspan style=\"color:#8DDB8C\">script\u003C/span>\u003Cspan style=\"color:#ADBAC7\">>\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">&#x3C;!-- You can pass in as variable -->\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">&#x3C;\u003C/span>\u003Cspan style=\"color:#8DDB8C\">div\u003C/span>\u003Cspan style=\"color:#F47067\"> on\u003C/span>\u003Cspan style=\"color:#ADBAC7\">:\u003C/span>\u003Cspan style=\"color:#F69D50\">mousemove\u003C/span>\u003Cspan style=\"color:#ADBAC7\">=\u003C/span>\u003Cspan style=\"color:#F47067\">{\u003C/span>\u003Cspan style=\"color:#ADBAC7\">handleMouseMove\u003C/span>\u003Cspan style=\"color:#F47067\">}\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> />\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">&#x3C;!-- or you can inline the event handler -->\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">&#x3C;\u003C/span>\u003Cspan style=\"color:#8DDB8C\">div\u003C/span>\u003Cspan style=\"color:#F47067\"> on\u003C/span>\u003Cspan style=\"color:#ADBAC7\">:\u003C/span>\u003Cspan style=\"color:#F69D50\">mousemove\u003C/span>\u003Cspan style=\"color:#ADBAC7\">=\u003C/span>\u003Cspan style=\"color:#F47067\">{\u003C/span>\u003Cspan style=\"color:#F69D50\">event\u003C/span>\u003Cspan style=\"color:#F47067\"> =>\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> { \u003C/span>\u003Cspan style=\"color:#768390\">/*...*/\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> }\u003C/span>\u003Cspan style=\"color:#F47067\">}\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> />\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">&#x3C;!-- You can modify event handler with modifiers  -->\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">&#x3C;\u003C/span>\u003Cspan style=\"color:#8DDB8C\">div\u003C/span>\u003Cspan style=\"color:#F47067\"> on\u003C/span>\u003Cspan style=\"color:#ADBAC7\">:\u003C/span>\u003Cspan style=\"color:#F69D50\">click\u003C/span>\u003Cspan style=\"color:#ADBAC7\">|\u003C/span>\u003Cspan style=\"color:#6CB6FF\">stopPropagation\u003C/span>\u003Cspan style=\"color:#ADBAC7\">|\u003C/span>\u003Cspan style=\"color:#6CB6FF\">once\u003C/span>\u003Cspan style=\"color:#ADBAC7\">=\u003C/span>\u003Cspan style=\"color:#F47067\">{\u003C/span>\u003Cspan style=\"color:#ADBAC7\">handleClick\u003C/span>\u003Cspan style=\"color:#F47067\">}\u003C/span>\u003Cspan style=\"color:#ADBAC7\">>\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Ch3 id=\"bindproperty\">\u003Ccode>bind:\u003C/code>property\u003C/h3>\n\u003Cp>将变量绑定到元素的属性上，更新变量将更新元素的属性。表单元素绑定的值被修改也会导致变量更新。\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"svelte\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"svelte\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">&#x3C;\u003C/span>\u003Cspan style=\"color:#8DDB8C\">script\u003C/span>\u003Cspan style=\"color:#ADBAC7\">>\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">  let\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> value, name, yes, text, selected;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">&#x3C;/\u003C/span>\u003Cspan style=\"color:#8DDB8C\">script\u003C/span>\u003Cspan style=\"color:#ADBAC7\">>\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">&#x3C;\u003C/span>\u003Cspan style=\"color:#8DDB8C\">input\u003C/span>\u003Cspan style=\"color:#F47067\"> bind\u003C/span>\u003Cspan style=\"color:#ADBAC7\">:\u003C/span>\u003Cspan style=\"color:#F69D50\">value\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> />\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">&#x3C;\u003C/span>\u003Cspan style=\"color:#8DDB8C\">input\u003C/span>\u003Cspan style=\"color:#F47067\"> bind\u003C/span>\u003Cspan style=\"color:#ADBAC7\">:\u003C/span>\u003Cspan style=\"color:#F69D50\">value\u003C/span>\u003Cspan style=\"color:#ADBAC7\">=\u003C/span>\u003Cspan style=\"color:#F47067\">{\u003C/span>\u003Cspan style=\"color:#ADBAC7\">name\u003C/span>\u003Cspan style=\"color:#F47067\">}\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> />\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">&#x3C;\u003C/span>\u003Cspan style=\"color:#8DDB8C\">textarea\u003C/span>\u003Cspan style=\"color:#F47067\"> bind\u003C/span>\u003Cspan style=\"color:#ADBAC7\">:\u003C/span>\u003Cspan style=\"color:#F69D50\">value\u003C/span>\u003Cspan style=\"color:#ADBAC7\">=\u003C/span>\u003Cspan style=\"color:#F47067\">{\u003C/span>\u003Cspan style=\"color:#ADBAC7\">text\u003C/span>\u003Cspan style=\"color:#F47067\">}\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> />\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">&#x3C;\u003C/span>\u003Cspan style=\"color:#8DDB8C\">input\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> type\u003C/span>\u003Cspan style=\"color:#ADBAC7\">=\u003C/span>\u003Cspan style=\"color:#96D0FF\">\"checkbox\"\u003C/span>\u003Cspan style=\"color:#F47067\"> bind\u003C/span>\u003Cspan style=\"color:#ADBAC7\">:\u003C/span>\u003Cspan style=\"color:#F69D50\">checked\u003C/span>\u003Cspan style=\"color:#ADBAC7\">=\u003C/span>\u003Cspan style=\"color:#F47067\">{\u003C/span>\u003Cspan style=\"color:#ADBAC7\">yes\u003C/span>\u003Cspan style=\"color:#F47067\">}\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> />\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">&#x3C;\u003C/span>\u003Cspan style=\"color:#8DDB8C\">select\u003C/span>\u003Cspan style=\"color:#F47067\"> bind\u003C/span>\u003Cspan style=\"color:#ADBAC7\">:\u003C/span>\u003Cspan style=\"color:#F69D50\">value\u003C/span>\u003Cspan style=\"color:#ADBAC7\">=\u003C/span>\u003Cspan style=\"color:#F47067\">{\u003C/span>\u003Cspan style=\"color:#ADBAC7\">selected\u003C/span>\u003Cspan style=\"color:#F47067\">}\u003C/span>\u003Cspan style=\"color:#ADBAC7\">>\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    &#x3C;\u003C/span>\u003Cspan style=\"color:#8DDB8C\">option\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> value\u003C/span>\u003Cspan style=\"color:#ADBAC7\">=\u003C/span>\u003Cspan style=\"color:#F47067\">{\u003C/span>\u003Cspan style=\"color:#ADBAC7\">a\u003C/span>\u003Cspan style=\"color:#F47067\">}\u003C/span>\u003Cspan style=\"color:#ADBAC7\">>a&#x3C;/\u003C/span>\u003Cspan style=\"color:#8DDB8C\">option\u003C/span>\u003Cspan style=\"color:#ADBAC7\">>\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    &#x3C;\u003C/span>\u003Cspan style=\"color:#8DDB8C\">option\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> value\u003C/span>\u003Cspan style=\"color:#ADBAC7\">=\u003C/span>\u003Cspan style=\"color:#F47067\">{\u003C/span>\u003Cspan style=\"color:#ADBAC7\">b\u003C/span>\u003Cspan style=\"color:#F47067\">}\u003C/span>\u003Cspan style=\"color:#ADBAC7\">>b&#x3C;/\u003C/span>\u003Cspan style=\"color:#8DDB8C\">option\u003C/span>\u003Cspan style=\"color:#ADBAC7\">>\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    &#x3C;\u003C/span>\u003Cspan style=\"color:#8DDB8C\">option\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> value\u003C/span>\u003Cspan style=\"color:#ADBAC7\">=\u003C/span>\u003Cspan style=\"color:#F47067\">{\u003C/span>\u003Cspan style=\"color:#ADBAC7\">c\u003C/span>\u003Cspan style=\"color:#F47067\">}\u003C/span>\u003Cspan style=\"color:#ADBAC7\">>c&#x3C;/\u003C/span>\u003Cspan style=\"color:#8DDB8C\">option\u003C/span>\u003Cspan style=\"color:#ADBAC7\">>\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">&#x3C;/\u003C/span>\u003Cspan style=\"color:#8DDB8C\">select\u003C/span>\u003Cspan style=\"color:#ADBAC7\">>\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Ch3 id=\"use-actions\">\u003Ccode>use:\u003C/code> actions\u003C/h3>\n\u003Cp>\u003Ccode>use:\u003C/code>指令用于绑定\u003Ccode>action\u003C/code>，\u003Ccode>action\u003C/code>提供了另一种方式增强元素功能，当与第三方库一起使用时可使用。\n\u003Ccode>action\u003C/code>是一个函数，该函数将在绑定DOM元素创建时执行。\n该函数返回一个对象，\u003Ccode>destroy\u003C/code>在绑定到DOM元素从文档树中被移除时触发；当给action传递参数时，\u003Ccode>update\u003C/code>在参数被更新时触发。\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"svelte\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"svelte\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">&#x3C;\u003C/span>\u003Cspan style=\"color:#8DDB8C\">script\u003C/span>\u003Cspan style=\"color:#ADBAC7\">>\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">/** \u003C/span>\u003Cspan style=\"color:#F47067\">@type\u003C/span>\u003Cspan style=\"color:#F69D50\"> {import('svelte/action').Action}\u003C/span>\u003Cspan style=\"color:#768390\">  */\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">function\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> foo\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#F69D50\">node\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">    // the node has been mounted in the DOM\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">    return\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">        destroy\u003C/span>\u003Cspan style=\"color:#ADBAC7\">() {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">        // the node has been removed from the DOM\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">        }\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    };\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">}\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">&#x3C;/\u003C/span>\u003Cspan style=\"color:#8DDB8C\">script\u003C/span>\u003Cspan style=\"color:#ADBAC7\">>\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">&#x3C;\u003C/span>\u003Cspan style=\"color:#8DDB8C\">div\u003C/span>\u003Cspan style=\"color:#F47067\"> use\u003C/span>\u003Cspan style=\"color:#ADBAC7\">:\u003C/span>\u003Cspan style=\"color:#F69D50\">foo\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> />\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Ch2 id=\"vanilla-javascript\">Vanilla JavaScript\u003C/h2>\n\u003Cp>下面展示在不使用任何框架的情况下实现事件处理程序、绑定和\u003Ccode>action\u003C/code>\u003C/p>\n\u003Ch3 id=\"event-handler\">Event handler\u003C/h3>\n\u003Cp>使用\u003Ca href=\"https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener\">事件监听器\u003C/a>\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"js\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">element.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">addEventListener\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#96D0FF\">'click'\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, handleClick);\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Cp>事件监听器接受一个可选的第三个参数，用于指定事件处理程序的特征：\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"js\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">element.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">addEventListener\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#96D0FF\">'click'\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, handleClick, {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    capture: \u003C/span>\u003Cspan style=\"color:#6CB6FF\">true\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, \u003C/span>\u003Cspan style=\"color:#768390\">// triggered before any child element\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    once: \u003C/span>\u003Cspan style=\"color:#6CB6FF\">true\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, \u003C/span>\u003Cspan style=\"color:#768390\">// triggered at most once\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    passive: \u003C/span>\u003Cspan style=\"color:#6CB6FF\">true\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, \u003C/span>\u003Cspan style=\"color:#768390\">// indicates that will never call `preventDefault` to improve performance\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">});\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Cp>要删除事件处理器，需要使用相同的事件、监听器、\u003Ccode>capture\u003C/code>/\u003Ccode>useCapture\u003C/code>\u003C/p>\n\u003Ch3 id=\"bindings\">Bindings\u003C/h3>\n\u003Cp>绑定是在变量值和属性值之间进行同步。\u003C/p>\n\u003Cp>要将变量同步到属性，需要观察变量的值，当变量变化时将其应用到元素的属性上。\n另一方面，为了将元素的属性同步到变量，需要根据属性坚挺元素的事件，并在事件发生时更新变量的值。\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"js\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">// binding variable `checked` with the checkbox `checked` property\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">let\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> checked;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">let\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> input \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> document.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">querySelector\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#96D0FF\">'#checkbox'\u003C/span>\u003Cspan style=\"color:#ADBAC7\">);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">// synchronise variable `checked` to checkbox `checked` property\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">observe\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(checked, \u003C/span>\u003Cspan style=\"color:#F69D50\">newValue\u003C/span>\u003Cspan style=\"color:#F47067\"> =>\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    input.checked \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> newValue;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">});\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">// synchronise checkbox `checked` property to variable `checked`\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">// listen to `change` event for `checked` property\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">input.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">addEventListener\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#96D0FF\">'change'\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, \u003C/span>\u003Cspan style=\"color:#F69D50\">event\u003C/span>\u003Cspan style=\"color:#F47067\"> =>\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    checked \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> input.checked;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">});\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Cp>事件的名称和元素的属性名称可能各不相同，例如：\u003Ccode>&#x3C;input type=\"text\">\u003C/code>可监听\u003Ccode>input\u003C/code>事件中value属性变化，但复选框\u003Ccode>&#x3C;input type=\"checkbox\">\u003C/code>监听\u003Ccode>checked\u003C/code>属性的\u003Ccode>change\u003C/code>事件\u003C/p>\n\u003Caside class=\"callout callout-warn\">\u003Cdiv class=\"callout-indicator\">\u003Cdiv class=\"callout-hint\">\u003Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" aria-hidden=\"true\">\u003Cpath d=\"M12 9v4m0 4h.01M8.681 4.082C9.351 2.797 10.621 2 12 2s2.649.797 3.319 2.082l6.203 11.904a4.28 4.28 0 0 1-.046 4.019C20.793 21.241 19.549 22 18.203 22H5.797c-1.346 0-2.59-.759-3.273-1.995a4.28 4.28 0 0 1-.046-4.019L8.681 4.082Z\">\u003C/path>\u003C/svg>\u003C/div>\u003Cdiv class=\"callout-title\">Warning\u003C/div>\u003C/div>\u003Cdiv class=\"callout-content\">\u003Cp>如果元素没触发任何事件来指示属性已更改，则几乎不可能绑定元素的属性，例如\u003Ca href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLDialogElement\">HTMLDialogElement\u003C/a>有close事件但没有open事件！\n另一种选择是使用\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/MutationObserver\">\u003Ccode>MutationObserver\u003C/code>\u003C/a>。\u003C/p>\u003C/div>\u003C/aside>\n\u003Ch3 id=\"action\">Action\u003C/h3>\n\u003Cp>action是一个在DOM元素创建时调用的函数，返回一个对象，有如下两个方法：\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ccode>update\u003C/code>当参数改变时调用\u003C/li>\n\u003Cli>\u003Ccode>destroy\u003C/code>当元素从文档中断开时被调用\u003C/li>\n\u003C/ul>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"js\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">function\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> actionFn\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#F69D50\">element\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, \u003C/span>\u003Cspan style=\"color:#F69D50\">parameter\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">    return\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">        update\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#F69D50\">newParameter\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) {},\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">        destroy\u003C/span>\u003Cspan style=\"color:#ADBAC7\">() {},\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    };\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">}\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">// When element is mounted onto the DOM\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">let\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> parameter \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> 1\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">const\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> actionObj\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> actionFn\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(element, parameter);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">// When parameter changes\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">parameter \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> 2\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">actionObj.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">update\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(parameter);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">// When element is removed from the DOM\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">actionObj.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">destroy\u003C/span>\u003Cspan style=\"color:#ADBAC7\">();\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Ch2 id=\"the-compiled-javascript\">The Compiled JavaScript\u003C/h2>\n\u003Cp>现在看经过svelte编译器编译后输出的代码：\u003C/p>\n\u003Ch3 id=\"on\">\u003Ccode>on:\u003C/code>\u003C/h3>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"svelte\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"svelte\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">&#x3C;\u003C/span>\u003Cspan style=\"color:#8DDB8C\">script\u003C/span>\u003Cspan style=\"color:#ADBAC7\">>\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">    function\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> onChange\u003C/span>\u003Cspan style=\"color:#ADBAC7\">() {}\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">&#x3C;/\u003C/span>\u003Cspan style=\"color:#8DDB8C\">script\u003C/span>\u003Cspan style=\"color:#ADBAC7\">>\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">&#x3C;\u003C/span>\u003Cspan style=\"color:#8DDB8C\">input\u003C/span>\u003Cspan style=\"color:#F47067\"> on\u003C/span>\u003Cspan style=\"color:#ADBAC7\">:\u003C/span>\u003Cspan style=\"color:#F69D50\">change\u003C/span>\u003Cspan style=\"color:#ADBAC7\">=\u003C/span>\u003Cspan style=\"color:#F47067\">{\u003C/span>\u003Cspan style=\"color:#ADBAC7\">onChange\u003C/span>\u003Cspan style=\"color:#F47067\">}\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> />\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Cp>output:\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"js\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">function\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> create_fragment\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#F69D50\">ctx\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">    let\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> input;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">    let\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> dispose;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">    return\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">        c\u003C/span>\u003Cspan style=\"color:#ADBAC7\">() {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">            input \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> element\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#96D0FF\">'input'\u003C/span>\u003Cspan style=\"color:#ADBAC7\">);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">        },\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">        m\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#F69D50\">target\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, \u003C/span>\u003Cspan style=\"color:#F69D50\">anchor\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, \u003C/span>\u003Cspan style=\"color:#F69D50\">remount\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">            insert\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(target, input, anchor);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\" data-highlighted-line=\"\">\u003Cspan style=\"color:#F47067\">            if\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (remount) \u003C/span>\u003Cspan style=\"color:#DCBDFB\">dispose\u003C/span>\u003Cspan style=\"color:#ADBAC7\">();\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\" data-highlighted-line=\"\">\u003Cspan style=\"color:#ADBAC7\">            dispose \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> listen\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(input, \u003C/span>\u003Cspan style=\"color:#96D0FF\">'change'\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, \u003C/span>\u003Cspan style=\"color:#768390\">/*onChange*/\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> ctx[\u003C/span>\u003Cspan style=\"color:#6CB6FF\">0\u003C/span>\u003Cspan style=\"color:#ADBAC7\">]);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">        },\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">        d\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#F69D50\">detaching\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">            if\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (detaching) \u003C/span>\u003Cspan style=\"color:#DCBDFB\">detach\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(input);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\" data-highlighted-line=\"\">\u003Cspan style=\"color:#DCBDFB\">            dispose\u003C/span>\u003Cspan style=\"color:#ADBAC7\">();\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">        },\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    };\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">}\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">function\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> instance\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#F69D50\">$$self\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">    let\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> i \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> 0\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">    function\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> onChange\u003C/span>\u003Cspan style=\"color:#ADBAC7\">() {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">        i\u003C/span>\u003Cspan style=\"color:#F47067\">++\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    }\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\" data-highlighted-line=\"\">\u003Cspan style=\"color:#F47067\">    return\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> [onChange];\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Cul>\n\u003Cli>svelte在\u003Ccode>mount\u003C/code>时添加事件处理程序\u003Ccode>listen(...)\u003C/code>\u003C/li>\n\u003Cli>svelte在\u003Ccode>destroy\u003C/code>时删除了事件处理程序\u003Ccode>dispose()\u003C/code>\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"事件修饰符\">事件修饰符\u003C/h3>\n\u003Cp>在绑定事件时可以传入事件修饰符，如：\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"svelte\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"svelte\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">&#x3C;\u003C/span>\u003Cspan style=\"color:#8DDB8C\">script\u003C/span>\u003Cspan style=\"color:#ADBAC7\">>\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">let\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> i\u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#6CB6FF\">0\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">function\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> onClick\u003C/span>\u003Cspan style=\"color:#ADBAC7\">() {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    i\u003C/span>\u003Cspan style=\"color:#F47067\">++\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">}\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">&#x3C;/\u003C/span>\u003Cspan style=\"color:#8DDB8C\">script\u003C/span>\u003Cspan style=\"color:#ADBAC7\">>\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">&#x3C;\u003C/span>\u003Cspan style=\"color:#8DDB8C\">button\u003C/span>\u003Cspan style=\"color:#F47067\"> on\u003C/span>\u003Cspan style=\"color:#ADBAC7\">:\u003C/span>\u003Cspan style=\"color:#F69D50\">click\u003C/span>\u003Cspan style=\"color:#ADBAC7\">|\u003C/span>\u003Cspan style=\"color:#6CB6FF\">preventDefault\u003C/span>\u003Cspan style=\"color:#ADBAC7\">=\u003C/span>\u003Cspan style=\"color:#F47067\">{\u003C/span>\u003Cspan style=\"color:#ADBAC7\">onClick\u003C/span>\u003Cspan style=\"color:#F47067\">}\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> />\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">&#x3C;\u003C/span>\u003Cspan style=\"color:#8DDB8C\">button\u003C/span>\u003Cspan style=\"color:#F47067\"> on\u003C/span>\u003Cspan style=\"color:#ADBAC7\">:\u003C/span>\u003Cspan style=\"color:#F69D50\">change\u003C/span>\u003Cspan style=\"color:#ADBAC7\">|\u003C/span>\u003Cspan style=\"color:#6CB6FF\">stopPropagation\u003C/span>\u003Cspan style=\"color:#ADBAC7\">=\u003C/span>\u003Cspan style=\"color:#F47067\">{\u003C/span>\u003Cspan style=\"color:#ADBAC7\">onClick\u003C/span>\u003Cspan style=\"color:#F47067\">}\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> />\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">&#x3C;\u003C/span>\u003Cspan style=\"color:#8DDB8C\">button\u003C/span>\u003Cspan style=\"color:#F47067\"> on\u003C/span>\u003Cspan style=\"color:#ADBAC7\">:\u003C/span>\u003Cspan style=\"color:#F69D50\">change\u003C/span>\u003Cspan style=\"color:#ADBAC7\">|\u003C/span>\u003Cspan style=\"color:#6CB6FF\">once\u003C/span>\u003Cspan style=\"color:#ADBAC7\">=\u003C/span>\u003Cspan style=\"color:#F47067\">{\u003C/span>\u003Cspan style=\"color:#ADBAC7\">onClick\u003C/span>\u003Cspan style=\"color:#F47067\">}\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> />\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">&#x3C;\u003C/span>\u003Cspan style=\"color:#8DDB8C\">button\u003C/span>\u003Cspan style=\"color:#F47067\"> on\u003C/span>\u003Cspan style=\"color:#ADBAC7\">:\u003C/span>\u003Cspan style=\"color:#F69D50\">change\u003C/span>\u003Cspan style=\"color:#ADBAC7\">|\u003C/span>\u003Cspan style=\"color:#6CB6FF\">capture\u003C/span>\u003Cspan style=\"color:#ADBAC7\">=\u003C/span>\u003Cspan style=\"color:#F47067\">{\u003C/span>\u003Cspan style=\"color:#ADBAC7\">onClick\u003C/span>\u003Cspan style=\"color:#F47067\">}\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> />\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">&#x3C;!-- Chain multiple modifiers -->\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">&#x3C;\u003C/span>\u003Cspan style=\"color:#8DDB8C\">button\u003C/span>\u003Cspan style=\"color:#F47067\"> on\u003C/span>\u003Cspan style=\"color:#ADBAC7\">:\u003C/span>\u003Cspan style=\"color:#F69D50\">click\u003C/span>\u003Cspan style=\"color:#ADBAC7\">|\u003C/span>\u003Cspan style=\"color:#6CB6FF\">preventDefault\u003C/span>\u003Cspan style=\"color:#ADBAC7\">|\u003C/span>\u003Cspan style=\"color:#6CB6FF\">stopPropagation\u003C/span>\u003Cspan style=\"color:#ADBAC7\">|\u003C/span>\u003Cspan style=\"color:#6CB6FF\">once\u003C/span>\u003Cspan style=\"color:#ADBAC7\">|\u003C/span>\u003Cspan style=\"color:#6CB6FF\">capture\u003C/span>\u003Cspan style=\"color:#ADBAC7\">=\u003C/span>\u003Cspan style=\"color:#F47067\">{\u003C/span>\u003Cspan style=\"color:#ADBAC7\">onClick\u003C/span>\u003Cspan style=\"color:#F47067\">}\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> />\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Cp>编译后的代码：\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"js\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">function\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> create_fragment\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#F69D50\">ctx\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">  // ...\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">    return\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">        c\u003C/span>\u003Cspan style=\"color:#ADBAC7\">() { \u003C/span>\u003Cspan style=\"color:#768390\">/* ... */\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> },\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">        m\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#F69D50\">target\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, \u003C/span>\u003Cspan style=\"color:#F69D50\">anchor\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, \u003C/span>\u003Cspan style=\"color:#F69D50\">remount\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">          // ...\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\" data-highlighted-line=\"\">\u003Cspan style=\"color:#ADBAC7\">            dispose \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> [\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\" data-highlighted-line=\"\">\u003Cspan style=\"color:#DCBDFB\">                listen\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(button0, \u003C/span>\u003Cspan style=\"color:#96D0FF\">\"click\"\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, \u003C/span>\u003Cspan style=\"color:#DCBDFB\">prevent_default\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#768390\">/*onClick*/\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> ctx[\u003C/span>\u003Cspan style=\"color:#6CB6FF\">0\u003C/span>\u003Cspan style=\"color:#ADBAC7\">])),\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\" data-highlighted-line=\"\">\u003Cspan style=\"color:#DCBDFB\">                listen\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(button1, \u003C/span>\u003Cspan style=\"color:#96D0FF\">\"change\"\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, \u003C/span>\u003Cspan style=\"color:#DCBDFB\">stop_propagation\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#768390\">/*onClick*/\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> ctx[\u003C/span>\u003Cspan style=\"color:#6CB6FF\">0\u003C/span>\u003Cspan style=\"color:#ADBAC7\">])),\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\" data-highlighted-line=\"\">\u003Cspan style=\"color:#DCBDFB\">                listen\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(button2, \u003C/span>\u003Cspan style=\"color:#96D0FF\">\"change\"\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, \u003C/span>\u003Cspan style=\"color:#768390\">/*onClick*/\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> ctx[\u003C/span>\u003Cspan style=\"color:#6CB6FF\">0\u003C/span>\u003Cspan style=\"color:#ADBAC7\">], { once: \u003C/span>\u003Cspan style=\"color:#6CB6FF\">true\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> }),\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\" data-highlighted-line=\"\">\u003Cspan style=\"color:#DCBDFB\">                listen\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(button3, \u003C/span>\u003Cspan style=\"color:#96D0FF\">\"change\"\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, \u003C/span>\u003Cspan style=\"color:#768390\">/*onClick*/\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> ctx[\u003C/span>\u003Cspan style=\"color:#6CB6FF\">0\u003C/span>\u003Cspan style=\"color:#ADBAC7\">], \u003C/span>\u003Cspan style=\"color:#6CB6FF\">true\u003C/span>\u003Cspan style=\"color:#ADBAC7\">),\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\" data-highlighted-line=\"\">\u003Cspan style=\"color:#DCBDFB\">                listen\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\" data-highlighted-line=\"\">\u003Cspan style=\"color:#ADBAC7\">                    button4,\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\" data-highlighted-line=\"\">\u003Cspan style=\"color:#96D0FF\">                    \"click\"\u003C/span>\u003Cspan style=\"color:#ADBAC7\">,\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\" data-highlighted-line=\"\">\u003Cspan style=\"color:#DCBDFB\">                    stop_propagation\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#DCBDFB\">prevent_default\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#768390\">/*onClick*/\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> ctx[\u003C/span>\u003Cspan style=\"color:#6CB6FF\">0\u003C/span>\u003Cspan style=\"color:#ADBAC7\">])),\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\" data-highlighted-line=\"\">\u003Cspan style=\"color:#ADBAC7\">                    { once: \u003C/span>\u003Cspan style=\"color:#6CB6FF\">true\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, capture: \u003C/span>\u003Cspan style=\"color:#6CB6FF\">true\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> }\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\" data-highlighted-line=\"\">\u003Cspan style=\"color:#ADBAC7\">                ),\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\" data-highlighted-line=\"\">\u003Cspan style=\"color:#ADBAC7\">            ];\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">        },\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">    // ...\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    };\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Cul>\n\u003Cli>svelte以不同的方式处理事件修饰符\u003C/li>\n\u003Cli>对于\u003Ccode>capture\u003C/code>、\u003Ccode>once\u003C/code>, \u003Ccode>passive\u003C/code>将他们作为选项传递到\u003Ccode>listen\u003C/code>\u003C/li>\n\u003Cli>对于\u003Ccode>stopPropagation\u003C/code>、\u003Ccode>preventDefault\u003C/code> 和\u003Ccode>self\u003C/code>，事件处理器使用各自的装饰器函数嵌套\u003C/li>\n\u003C/ul>\n\u003Cp>\u003Ccode>preventDefault\u003C/code>装饰器函数的示例实现：\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"js\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">function\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> prevent_default\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#F69D50\">fn\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">    return\u003C/span>\u003Cspan style=\"color:#F47067\"> function\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#F69D50\">event\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">        event.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">preventDefault\u003C/span>\u003Cspan style=\"color:#ADBAC7\">();\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">        return\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> fn.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">call\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#6CB6FF\">this\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, event);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    };\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Ch3 id=\"bind\">\u003Ccode>bind:\u003C/code>\u003C/h3>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"svelte\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"svelte\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">&#x3C;\u003C/span>\u003Cspan style=\"color:#8DDB8C\">script\u003C/span>\u003Cspan style=\"color:#ADBAC7\">>\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">    let\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> checked \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> false\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">    function\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> updateChecked\u003C/span>\u003Cspan style=\"color:#ADBAC7\">() {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">        checked \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> true\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    }\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">&#x3C;/\u003C/span>\u003Cspan style=\"color:#8DDB8C\">script\u003C/span>\u003Cspan style=\"color:#ADBAC7\">>\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">&#x3C;\u003C/span>\u003Cspan style=\"color:#8DDB8C\">input\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> type\u003C/span>\u003Cspan style=\"color:#ADBAC7\">=\u003C/span>\u003Cspan style=\"color:#96D0FF\">\"checkbox\"\u003C/span>\u003Cspan style=\"color:#F47067\"> bind\u003C/span>\u003Cspan style=\"color:#ADBAC7\">:\u003C/span>\u003Cspan style=\"color:#F69D50\">checked\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> />\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Cp>Output：\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"js\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">function\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> create_fragment\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#F69D50\">ctx\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">    let\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> input;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">    let\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> dispose;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    \u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">    return\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">        c\u003C/span>\u003Cspan style=\"color:#ADBAC7\">() { \u003C/span>\u003Cspan style=\"color:#768390\">/* ... */\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> },\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">        m\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#F69D50\">target\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, \u003C/span>\u003Cspan style=\"color:#F69D50\">anchor\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, \u003C/span>\u003Cspan style=\"color:#F69D50\">remount\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">            insert\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(target, input, anchor);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">            input.checked \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#768390\"> /*checked*/\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> ctx[\u003C/span>\u003Cspan style=\"color:#6CB6FF\">0\u003C/span>\u003Cspan style=\"color:#ADBAC7\">];\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\" data-highlighted-line=\"\">\u003Cspan style=\"color:#F47067\">            if\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (remount) \u003C/span>\u003Cspan style=\"color:#DCBDFB\">dispose\u003C/span>\u003Cspan style=\"color:#ADBAC7\">();\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\" data-highlighted-line=\"\">\u003Cspan style=\"color:#ADBAC7\">            dispose \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> listen\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(input, \u003C/span>\u003Cspan style=\"color:#96D0FF\">'change'\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, \u003C/span>\u003Cspan style=\"color:#768390\">/*input_change_handler*/\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> ctx[\u003C/span>\u003Cspan style=\"color:#6CB6FF\">1\u003C/span>\u003Cspan style=\"color:#ADBAC7\">]);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">        },\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">        p\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#F69D50\">ctx\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, [\u003C/span>\u003Cspan style=\"color:#F69D50\">dirty\u003C/span>\u003Cspan style=\"color:#ADBAC7\">]) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\" data-highlighted-line=\"\">\u003Cspan style=\"color:#F47067\">            if\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (dirty \u003C/span>\u003Cspan style=\"color:#F47067\">&#x26;\u003C/span>\u003Cspan style=\"color:#768390\"> /*checked*/\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> 1\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\" data-highlighted-line=\"\">\u003Cspan style=\"color:#ADBAC7\">                input.checked \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#768390\"> /*checked*/\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> ctx[\u003C/span>\u003Cspan style=\"color:#6CB6FF\">0\u003C/span>\u003Cspan style=\"color:#ADBAC7\">];\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\" data-highlighted-line=\"\">\u003Cspan style=\"color:#ADBAC7\">            }\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">        },\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">        d\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#F69D50\">detaching\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">            if\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (detaching) \u003C/span>\u003Cspan style=\"color:#DCBDFB\">detach\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(input);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\" data-highlighted-line=\"\">\u003Cspan style=\"color:#DCBDFB\">            dispose\u003C/span>\u003Cspan style=\"color:#ADBAC7\">();\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">        },\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    };\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">}\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">function\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> instance\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#F69D50\">$$self\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, \u003C/span>\u003Cspan style=\"color:#F69D50\">$$props\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, \u003C/span>\u003Cspan style=\"color:#F69D50\">$$invalidate\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">    let\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> checked \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> false\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    \u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">    function\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> updateChecked\u003C/span>\u003Cspan style=\"color:#ADBAC7\">() {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\" data-highlighted-line=\"\">\u003Cspan style=\"color:#DCBDFB\">        $$invalidate\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#6CB6FF\">0\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, (checked \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> true\u003C/span>\u003Cspan style=\"color:#ADBAC7\">));\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    }\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    \u003C/span>\u003C/span>\n\u003Cspan data-line=\"\" data-highlighted-line=\"\">\u003Cspan style=\"color:#F47067\">    function\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> input_change_handler\u003C/span>\u003Cspan style=\"color:#ADBAC7\">() {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\" data-highlighted-line=\"\">\u003Cspan style=\"color:#ADBAC7\">        checked \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> this\u003C/span>\u003Cspan style=\"color:#ADBAC7\">.checked;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\" data-highlighted-line=\"\">\u003Cspan style=\"color:#DCBDFB\">        $$invalidate\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#6CB6FF\">0\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, checked);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\" data-highlighted-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    }\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    \u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">    return\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> [checked, input_change_handler];\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Cul>\n\u003Cli>将变量值同步到元素属性\n\u003Cul>\n\u003Cli>用\u003Ccode>$$invalidate(...)\u003C/code>包装变量\u003Ccode>checked\u003C/code>的更新\u003C/li>\n\u003Cli>在\u003Ccode>update\u003C/code>方法中如果变量\u003Ccode>checked\u003C/code>更新，则将\u003Ccode>input.checked\u003C/code>设置为变量\u003Ccode>checked\u003C/code>的值\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>将元素属性的更改同步到变量\n\u003Cul>\n\u003Cli>svelte创建一个\u003Ccode>input\u003C/code>事件的\u003Ccode>handler\u003C/code>，读取\u003Ccode>this.checked\u003C/code>属性值并调用\u003Ccode>$$invalidate\u003C/code>更新它\u003C/li>\n\u003Cli>svelte在\u003Ccode>mount\u003C/code>时设置了\u003Ccode>listen(...)\u003C/code>，在\u003Ccode>destroy\u003C/code>时\u003Ccode>dispose\u003C/code>\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"use\">\u003Ccode>use:\u003C/code>\u003C/h3>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"svelte\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"svelte\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">&#x3C;\u003C/span>\u003Cspan style=\"color:#8DDB8C\">script\u003C/span>\u003Cspan style=\"color:#ADBAC7\">>\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">let\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> i \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#96D0FF\"> ''\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">function\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> action\u003C/span>\u003Cspan style=\"color:#ADBAC7\">() {}\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">function\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> updateI\u003C/span>\u003Cspan style=\"color:#ADBAC7\">() {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    i\u003C/span>\u003Cspan style=\"color:#F47067\">++\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">}\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">&#x3C;/\u003C/span>\u003Cspan style=\"color:#8DDB8C\">script\u003C/span>\u003Cspan style=\"color:#ADBAC7\">>\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">&#x3C;\u003C/span>\u003Cspan style=\"color:#8DDB8C\">div\u003C/span>\u003Cspan style=\"color:#F47067\"> use\u003C/span>\u003Cspan style=\"color:#ADBAC7\">:\u003C/span>\u003Cspan style=\"color:#F69D50\">action\u003C/span>\u003Cspan style=\"color:#ADBAC7\">=\u003C/span>\u003Cspan style=\"color:#F47067\">{\u003C/span>\u003Cspan style=\"color:#ADBAC7\">i\u003C/span>\u003Cspan style=\"color:#F47067\">}\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> />\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Cp>Output:\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"js\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">function\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> create_fragment\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#F69D50\">ctx\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">  // ...\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">    let\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> action_action;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    \u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">    return\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">        c\u003C/span>\u003Cspan style=\"color:#ADBAC7\">() { \u003C/span>\u003Cspan style=\"color:#768390\">/* ... */\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> },\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">        m\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#F69D50\">target\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, \u003C/span>\u003Cspan style=\"color:#F69D50\">anchor\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, \u003C/span>\u003Cspan style=\"color:#F69D50\">remount\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">            insert\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(target, div, anchor);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\" data-highlighted-line=\"\">\u003Cspan style=\"color:#F47067\">            if\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (remount) \u003C/span>\u003Cspan style=\"color:#DCBDFB\">dispose\u003C/span>\u003Cspan style=\"color:#ADBAC7\">();\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\" data-highlighted-line=\"\">\u003Cspan style=\"color:#ADBAC7\">            dispose \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> action_destroyer\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\" data-highlighted-line=\"\">\u003Cspan style=\"color:#ADBAC7\">                (action_action \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> action.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">call\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#6CB6FF\">null\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, div, \u003C/span>\u003Cspan style=\"color:#768390\">/*i*/\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> ctx[\u003C/span>\u003Cspan style=\"color:#6CB6FF\">0\u003C/span>\u003Cspan style=\"color:#ADBAC7\">]))\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\" data-highlighted-line=\"\">\u003Cspan style=\"color:#ADBAC7\">            );\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">        },\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">        p\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#F69D50\">ctx\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, [\u003C/span>\u003Cspan style=\"color:#F69D50\">dirty\u003C/span>\u003Cspan style=\"color:#ADBAC7\">]) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\" data-highlighted-line=\"\">\u003Cspan style=\"color:#F47067\">            if\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (action_action \u003C/span>\u003Cspan style=\"color:#F47067\">&#x26;&#x26;\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> is_function\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(action_action.update) \u003C/span>\u003Cspan style=\"color:#F47067\">&#x26;&#x26;\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> dirty \u003C/span>\u003Cspan style=\"color:#F47067\">&#x26;\u003C/span>\u003Cspan style=\"color:#768390\"> /*i*/\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> 1\u003C/span>\u003Cspan style=\"color:#ADBAC7\">)\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\" data-highlighted-line=\"\">\u003Cspan style=\"color:#ADBAC7\">                action_action.update.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">call\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#6CB6FF\">null\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, \u003C/span>\u003Cspan style=\"color:#768390\">/*i*/\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> ctx[\u003C/span>\u003Cspan style=\"color:#6CB6FF\">0\u003C/span>\u003Cspan style=\"color:#ADBAC7\">]);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">        },\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">        d\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#F69D50\">detaching\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">            if\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (detaching) \u003C/span>\u003Cspan style=\"color:#DCBDFB\">detach\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(div);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\" data-highlighted-line=\"\">\u003Cspan style=\"color:#DCBDFB\">            dispose\u003C/span>\u003Cspan style=\"color:#ADBAC7\">();\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">        },\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    };\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Cul>\n\u003Cli>在\u003Ccode>mount\u003C/code>时通过调用\u003Ccode>action\u003C/code>函数创建\u003Ccode>action_action\u003C/code>并使用\u003Ccode>action_destroyer\u003C/code>包装为\u003Ccode>dispose\u003C/code>\u003C/li>\n\u003Cli>当参数改变时，使用update方法中更新的参数调用\u003Ccode>action_action.update\u003C/code>方法\u003C/li>\n\u003Cli>在destroy时调用第一步中由\u003Ccode>action_destroyer\u003C/code>返回的\u003Ccode>dispose\u003C/code>函数\u003C/li>\n\u003C/ul>",{"headings":731,"localImagePaths":771,"remoteImagePaths":772,"frontmatter":773,"imagePaths":778},[732,733,736,739,742,745,748,751,754,757,760,763,765,768],{"depth":31,"slug":324,"text":325},{"depth":31,"slug":734,"text":735},"在svelte模板如何使用","在Svelte模板如何使用",{"depth":37,"slug":737,"text":738},"onevent-name","on:event name",{"depth":37,"slug":740,"text":741},"bindproperty","bind:property",{"depth":37,"slug":743,"text":744},"use-actions","use: actions",{"depth":31,"slug":746,"text":747},"vanilla-javascript","Vanilla JavaScript",{"depth":37,"slug":749,"text":750},"event-handler","Event handler",{"depth":37,"slug":752,"text":753},"bindings","Bindings",{"depth":37,"slug":755,"text":756},"action","Action",{"depth":31,"slug":758,"text":759},"the-compiled-javascript","The Compiled JavaScript",{"depth":37,"slug":761,"text":762},"on","on:",{"depth":37,"slug":764,"text":764},"事件修饰符",{"depth":37,"slug":766,"text":767},"bind","bind:",{"depth":37,"slug":769,"text":770},"use","use:",[],[],{"title":721,"description":15,"pubDate":774,"heroImage":723,"date created":774,"date modified":775,"tags":776,"minutesRead":777},"2023-07-31 13:46","2023-07-31",[20,660],"8 min read",[],"200-Learning/210-Programing/Compile Svelte in Your Head（3）.md","200-learning/210-programing/compile-svelte-in-your-head2",{"id":780,"data":782,"body":787,"filePath":788,"digest":789,"rendered":790,"legacyId":821},{"title":783,"description":15,"pubDate":784,"heroImage":785,"tags":786},"Compile Svelte in Your Head（2）",["Date","2023-07-28T11:06:00.000Z"],"https://images.unsplash.com/photo-1617791160536-598cf32026fb?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1200&q=80",[20,660],"## TOC\n\n## `$$invalidate`\n\n`$$invalidate`在概念上的工作原理如下：\n```js\n// conceptually...\nconst ctx = instance(/*...*/);\nconst fragment = create_fragment(ctx);\n// to track which variable has changed\nconst dirty = new Set();\nconst $$invalidate = (variable, newValue) => {\n    // update ctx\n    ctx[variable] = newValue;\n    // mark variable as dirty\n    dirty.add(variable);\n    // schedules update for the component\n    scheduleUpdate(component);\n};\n\n// gets called when update is scheduled\nfunction flushUpdate() {\n    // update the fragment\n    fragment.p(ctx, dirty);\n    // clear the dirty\n    dirty.clear();\n}\n```\n但这并非其确切实现，在本文中，我们将了解`$$invalidate`在svelte中是如何实现的。\n\n`$$invalidate`是Svelte响应式背后的秘密㊙️。每当一个变量是：\n- reassigned（foo = 1）\n- mutated（foo.bar = 1）\nsvelte将用`$$invalidate`函数包装赋值或更新：\n\n```js\nname = 'Svelte';\ncount++;\nfoo.a = 1;\nbar = baz = 3;\n// compiled into\n$$invalidate('name', (name = 'Svelte'));\n$$invalidate('count', count++, count);\n$$invalidate('foo', (foo.a = 1), foo);\n$$invalidate('bar', (bar = $$invalidate('baz', (baz = 3))));\n```\n\n`$$invalidate`函数将：\n1. 更新`$$ctx`的变量\n2. 在`$$.dirty`中标记变量\n3. schedule update\n4. 返回赋值或更新表达式的值\n\n```js\n//https://github.com/sveltejs/svelte/blob/99a3cc93b66bf2c6be551e23101bfdbdb2c6bf72/packages/svelte/src/runtime/internal/Component.js#L124C2-L133C8\n// 1. update the variable in $$.ctx\n$$.ctx = instance\n\t\t? instance(component, options.props || {}, (i, ret, ...rest) => {\n\t\t\t\tconst value = rest.length ? rest[0] : ret;\n\t\t\t\tif ($$.ctx && not_equal($$.ctx[i], ($$.ctx[i] = value))) {\n\t\t\t\t\tif (!$$.skip_bound && $$.bound[i]) $$.bound[i](value);\n\t\t\t\t\t// 2a. mark the variable in $$.dirty\n\t\t\t\t\tif (ready) make_dirty(component, i);\n\t\t\t\t}\n    \t\t\t// 4. return the value of the assignment or update expression\n\t\t\t\treturn ret;\n\t\t  })\n\t\t: [];\n\n\n//https://github.com/sveltejs/svelte/blob/99a3cc93b66bf2c6be551e23101bfdbdb2c6bf72/packages/svelte/src/runtime/internal/Component.js#L78\n/** @returns {void} */\nfunction make_dirty(component, i) {\n\tif (component.$$.dirty[0] === -1) {\n\t\tdirty_components.push(component);\n\t\t// 3. schedule an update\n\t\tschedule_update();\n\t\t// initialise $$.dirty\n\t\tcomponent.$$.dirty.fill(0);\n\t}\n\t// 2b. mark the variable in $$.dirty\n\tcomponent.$$.dirty[(i / 31) | 0] |= 1 \u003C\u003C i % 31;\n}\n\n```\n\n在3.16.0以前，svelte源码使用对象将变量标记为脏：\n```js\n$$.dirty = { givenName: true, familyName: false };\n```\n\n在之后使用位掩码的技术跟踪更改。\nsvelte为每个变量分配索引:\n```\ngivenName -> 0\nfamilyName -> 1\n```\n并使用位掩码存储脏信息：\n```js\n$$.dirty = [0b0000_0011]\n// 0和1位标记为true\n```\n\n### Bitmask\n\n最紧凑的的方式表示一组true或false的方式，是使用位。如果该位为1，则为true，为0则为false。\n\n数字可以使用二进制表示，5就是二进制的`0b0101`\n\n如果5用4位二进制表示，那么可以存储4个布尔值，第0和第2位为true，第1位和第3位为false（从右到左，从最低有效位到最高有效位）。\n\n在JavaScript中，数字可以用64位表示。但是，当对数字使用按位运算时，JavaScript会将数字视为32位。\n要坚持和修改存储在数字中的布尔值，可以使用按位运算：\n```js\n// set 1st boolean to true\n0b0101 | 0b0010 = 0b0111;\n\n// set 2nd boolean to false\n0b0101 & 0b1011 = 0b0001;\n\n// is 2nd boolean true?\n((0b0101 & 0b0100) > 0) === true;\n\n// NOTE: You can test multiple boolean values at once\n// is 2nd and 3rd boolean true?\n((0b0101 & 0b1100) > 0) === true;\n```\n在位运算中使用的第二个操作数，就像掩码，允许我们定位第一个数字中存储布尔值的特定位。\n在这里称掩码为位掩码。\n\n### Bitmask in Svelte\n\n如上所述，为每个变量分配一个索引：\n```\ngivenName -> 0\nfamilyName -> 1\n```\n在instance函数中，返回的ctx作为数组：\n```js {3}\nfunction instance($$self, $$props, $$invalidate) {\n  // ...\n  return [givenName, familyName];\n}\n```\n\n此后访问变量可通过索引，而非变量名：\n```js\n$$.ctx[0] + $$.ctx[1];\n```\n\n`$$invalidate`函数的工作原理相同：\n```js\n$$invalidate(0, (givenName = 'Li Hau'));\n```\n\n`$$.dirty`现在也存储数组，数组每一项携带31个布尔值，每个布尔值指示该索引的变量是否为`dirty`.\n\n要将数据设置为脏变量，可直接使用位运算：\n```js\n$$.dirty[0] |= 1 \u003C\u003C 0;\n```\n要验证是否位脏，也使用位运算：\n```js\nif ($dirty[0] & 1) { /* ... */ }\nif ($dirty[0] & 3) { /* ... */ }\n```\n\n使用位掩码后，`$$.dirty`重置为`[-1]`而不是`null`\n\n:::tip\n`-1`是二进制的`0b1111_1111`，所有位都为`1`\n:::\n\n## 响应式声明\n\nsvelte允许使用label语句申明响应值：\n```svelte {3-6}\n\u003Cscript>\n  export let count = 0;\n  // `doubled`, `tripled`, `quadrupled` are reactive\n  $: doubled = count * 2;\n  $: tripled = count * 3;\n  $: quadrupled = doubled * 2;\n\u003C/script>\n{doubled} {tripled} {quadrupled}\n```\n\n如果查看编译后的输出，会发现声明语句出现在instance函数中：\n```js {3-13}\nfunction instance($$self, $$props, $$invalidate) {\n    // ...\n    $$self.$$.update = () => {\n        if ($$self.$$.dirty & /*count*/ 8) {\n            $: $$invalidate(0, doubled = count * 2);\n        }\n        if ($$self.$$.dirty & /*count*/ 8) {\n            $: $$invalidate(1, tripled = count * 3);\n        }\n        if ($$self.$$.dirty & /*doubled*/ 1) {\n            $: $$invalidate(2, quadrupled = doubled * 2);\n        }\n    };\n    \n\treturn [doubled, tripled, quadrupled, count];\n}\n```\n\n- 当存在响应式声明时，svelte定义`$$.update`方法。\n    - `$$.update`函数默认是无操作函数\n- svelte也使用`$$invalidate`更新响应式变量的值\n- svelte根据申明与语句之间的依赖关系对响应式声明和语句排序\n\n由于所有响应式声明和语句都分组到`$$.update`方法中，而且svelte会根据它们的依赖关系对声明和语法排序，因此最终输出结果与源码中声明的位置和顺序无关。\n\n以下组件是有效的：\n```svelte\n\u003Cscript>\n// NOTE: use `count` in a reactive declaration before `count` is declared\n$: doubled = count * 2;\nlet count = 1;\n\u003C/script>\n{count} * 2 = {doubled}\n```\n\n在`flush`函数中调用了一个`update`函数，其结构如下：\n```js {4}\n//https://github.com/sveltejs/svelte/blob/99a3cc93b66bf2c6be551e23101bfdbdb2c6bf72/packages/svelte/src/runtime/internal/scheduler.js#L113\nfunction update($$) {\n\tif ($$.fragment !== null) {\n\t\t$$.update();\n\t\trun_all($$.before_update);\n\t\tconst dirty = $$.dirty;\n\t\t$$.dirty = [-1];\n\t\t$$.fragment && $$.fragment.p($$.ctx, dirty);\n\t\t$$.after_update.forEach(add_render_callback);\n\t}\n}\n```\n\n`$$.update`函数在DOM更新的同一个微任务中被调用，就是调用`$$.fragment.p()`更新DOM之前。\n\n从上方update函数可得出：\n\n### 所有响应式声明和语句都是批处理的\n\n正如DOM更新的批处理方式一样：\n```svelte\n\u003Cscript>\nlet givenName = '', familyName = '';\nfunction update() {\n    givenName = 'Li Hau';\n    familyName = 'Tan';\n}\n$: name = givenName + \" \" + familyName;\n$: console.log('name', name);\n\u003C/script>\n```\n当update被调用时：\n1. 与上述流程类似，为givenName和familyName执行`$$invalidate`，并安排更新\n2. 任务结束\n3. 微任务开始\n4. `flush()`执行时为每个标记为脏的组件调用`update`函数\n5. 允许`$$.update`\n    1. 由于`givenName`和`familyName`被更改，执行`name`的`$$invalidate`\n    2. 由于`name`被更改，执行`console.log('name', name);`\n6. 调用`$$.fragment.p(...)`更新DOM\n\n如⬆上，即使更新了`givenName`和`familyName`，也只更新`name`和执行`console.log('name', name);`一次而不是两次\n\n### 响应式声明或语句外的响应式变量可能不是最新的\n\n由于反应式声明和语句是在下一个微任务中批量执行的，因此您不能期望值会同步更新。\n```svelte {6}\n\u003Cscript>\nlet givenName = '', familyName = '';\nfunction update() {\n    givenName = 'Li Hau';\n    familyName = 'Tan';\n    console.log('name', name); // Logs ''\n}\n$: name = givenName + \" \" + familyName;\n\u003C/script>\n```\n\n可在另一个响应式语句中引用响应式变量：\n```svelte {8}\n\u003Cscript>\nlet givenName = '', familyName = '';\nfunction update() {\n    givenName = 'Li Hau';\n    familyName = 'Tan';\n}\n$: name = givenName + \" \" + familyName;\n$: console.log('name', name); // Logs 'Li Hau Tan'\n\u003C/script>\n```\n\n### 响应式声明和语句的排序\n\nSvelte 尝试尽可能保留反应式声明和语句的声明顺序。\n但是，如果一个反应式声明或语句引用了另一个反应式声明定义的变量，那么它将被插入到后一个反应式声明之后：\n\n```svelte {4,6,12-13}\n\u003Cscript>\nlet count = 0;\n// NOTE: refers to `doubled`\n$: quadrupled = doubled * 2;\n// NOTE: defined `doubled`\n$: doubled = count * 2;\n\n// compiles into:\n\n$$self.$$.update = () => {\n    // ...\n    $: $$invalidate(/* doubled */, doubled = count * 2);\n    $: $$invalidate(/* quadrupled */, quadrupled = doubled * 2);\n    // ...\n}\n\u003C/script>\n```\n\n### 非响应式变量\n\nsvelte编译器会跟踪`\u003Cscript>`脚本中所有变量。如果响应式声明或语句中变量使用了但未发生`mutated`或`reassigned`，则该响应式声明或语句将不会被添加到`$$.update`中。\n\n```svelte\n\u003Cscript>\n  let count = 0;\n  $: doubled = count * 2;\n\u003C/script>\n{ count } x 2 = {doubled}\n```\n[Svelte REPL](https://svelte.dev/repl/23b2476accac46608807c73539b03953?version=3.20.1)\n\nJavaScript output\n```js\nfunction instance($$self, $$props, $$invalidate) {\n\tlet doubled;\n\t$: $$invalidate(0, doubled = count * 2);\n\treturn [doubled];\n}\n```\n\n由于`count`未被`mutated`或`reassigned`，svelte通过不定义`$$self.$$.update`来优化输出。\n\n\n## 总结\n\n1. Svelte在编译阶段追踪被`dirty`的变量并在DOM更新时批量更新\n2. Svelte使用位掩码技术生成更加紧凑的运行时JavaScript代码\n3. 响应式声明和语句和DOM更新类似，也是批量执行","src/content/blog/200-Learning/210-Programing/Compile Svelte in Your Head（2）.md","ec4594ca1b8fab96",{"html":791,"metadata":792},"\u003Ch2 id=\"toc\">TOC\u003C/h2>\n\u003Cul>\n\u003Cli>\u003Ca href=\"#invalidate\">\u003Ccode>$$invalidate\u003C/code>\u003C/a>\n\u003Cul>\n\u003Cli>\u003Ca href=\"#bitmask\">Bitmask\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#bitmask-in-svelte\">Bitmask in Svelte\u003C/a>\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\u003Ca href=\"#%E5%93%8D%E5%BA%94%E5%BC%8F%E5%A3%B0%E6%98%8E\">响应式声明\u003C/a>\n\u003Cul>\n\u003Cli>\u003Ca href=\"#%E6%89%80%E6%9C%89%E5%93%8D%E5%BA%94%E5%BC%8F%E5%A3%B0%E6%98%8E%E5%92%8C%E8%AF%AD%E5%8F%A5%E9%83%BD%E6%98%AF%E6%89%B9%E5%A4%84%E7%90%86%E7%9A%84\">所有响应式声明和语句都是批处理的\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#%E5%93%8D%E5%BA%94%E5%BC%8F%E5%A3%B0%E6%98%8E%E6%88%96%E8%AF%AD%E5%8F%A5%E5%A4%96%E7%9A%84%E5%93%8D%E5%BA%94%E5%BC%8F%E5%8F%98%E9%87%8F%E5%8F%AF%E8%83%BD%E4%B8%8D%E6%98%AF%E6%9C%80%E6%96%B0%E7%9A%84\">响应式声明或语句外的响应式变量可能不是最新的\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#%E5%93%8D%E5%BA%94%E5%BC%8F%E5%A3%B0%E6%98%8E%E5%92%8C%E8%AF%AD%E5%8F%A5%E7%9A%84%E6%8E%92%E5%BA%8F\">响应式声明和语句的排序\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#%E9%9D%9E%E5%93%8D%E5%BA%94%E5%BC%8F%E5%8F%98%E9%87%8F\">非响应式变量\u003C/a>\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\u003Ca href=\"#%E6%80%BB%E7%BB%93\">总结\u003C/a>\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"invalidate\">\u003Ccode>$$invalidate\u003C/code>\u003C/h2>\n\u003Cp>\u003Ccode>$$invalidate\u003C/code>在概念上的工作原理如下：\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"js\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">// conceptually...\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">const\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> ctx\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> instance\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#768390\">/*...*/\u003C/span>\u003Cspan style=\"color:#ADBAC7\">);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">const\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> fragment\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> create_fragment\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(ctx);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">// to track which variable has changed\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">const\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> dirty\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#F47067\"> new\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> Set\u003C/span>\u003Cspan style=\"color:#ADBAC7\">();\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">const\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> $$invalidate\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (\u003C/span>\u003Cspan style=\"color:#F69D50\">variable\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, \u003C/span>\u003Cspan style=\"color:#F69D50\">newValue\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) \u003C/span>\u003Cspan style=\"color:#F47067\">=>\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">    // update ctx\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    ctx[variable] \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> newValue;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">    // mark variable as dirty\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    dirty.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">add\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(variable);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">    // schedules update for the component\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">    scheduleUpdate\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(component);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">};\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">// gets called when update is scheduled\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">function\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> flushUpdate\u003C/span>\u003Cspan style=\"color:#ADBAC7\">() {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">    // update the fragment\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    fragment.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">p\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(ctx, dirty);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">    // clear the dirty\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    dirty.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">clear\u003C/span>\u003Cspan style=\"color:#ADBAC7\">();\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Cp>但这并非其确切实现，在本文中，我们将了解\u003Ccode>$$invalidate\u003C/code>在svelte中是如何实现的。\u003C/p>\n\u003Cp>\u003Ccode>$$invalidate\u003C/code>是Svelte响应式背后的秘密\u003Cspan role=\"img\" aria-label=\"Japanese “secret” button\">㊙️\u003C/span>。每当一个变量是：\u003C/p>\n\u003Cul>\n\u003Cli>reassigned（foo = 1）\u003C/li>\n\u003Cli>mutated（foo.bar = 1）\nsvelte将用\u003Ccode>$$invalidate\u003C/code>函数包装赋值或更新：\u003C/li>\n\u003C/ul>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"js\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">name \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#96D0FF\"> 'Svelte'\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">count\u003C/span>\u003Cspan style=\"color:#F47067\">++\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">foo.a \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> 1\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">bar \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> baz \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> 3\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">// compiled into\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">$$invalidate\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#96D0FF\">'name'\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, (name \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#96D0FF\"> 'Svelte'\u003C/span>\u003Cspan style=\"color:#ADBAC7\">));\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">$$invalidate\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#96D0FF\">'count'\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, count\u003C/span>\u003Cspan style=\"color:#F47067\">++\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, count);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">$$invalidate\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#96D0FF\">'foo'\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, (foo.a \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> 1\u003C/span>\u003Cspan style=\"color:#ADBAC7\">), foo);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">$$invalidate\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#96D0FF\">'bar'\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, (bar \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> $$invalidate\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#96D0FF\">'baz'\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, (baz \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> 3\u003C/span>\u003Cspan style=\"color:#ADBAC7\">))));\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Cp>\u003Ccode>$$invalidate\u003C/code>函数将：\u003C/p>\n\u003Col>\n\u003Cli>更新\u003Ccode>$$ctx\u003C/code>的变量\u003C/li>\n\u003Cli>在\u003Ccode>$$.dirty\u003C/code>中标记变量\u003C/li>\n\u003Cli>schedule update\u003C/li>\n\u003Cli>返回赋值或更新表达式的值\u003C/li>\n\u003C/ol>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"js\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">//https://github.com/sveltejs/svelte/blob/99a3cc93b66bf2c6be551e23101bfdbdb2c6bf72/packages/svelte/src/runtime/internal/Component.js#L124C2-L133C8\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">// 1. update the variable in $$.ctx\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">$$.ctx \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> instance\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">\t\t?\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> instance\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(component, options.props \u003C/span>\u003Cspan style=\"color:#F47067\">||\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> {}, (\u003C/span>\u003Cspan style=\"color:#F69D50\">i\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, \u003C/span>\u003Cspan style=\"color:#F69D50\">ret\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, \u003C/span>\u003Cspan style=\"color:#F47067\">...\u003C/span>\u003Cspan style=\"color:#F69D50\">rest\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) \u003C/span>\u003Cspan style=\"color:#F47067\">=>\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">\t\t\t\tconst\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> value\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> rest.\u003C/span>\u003Cspan style=\"color:#6CB6FF\">length\u003C/span>\u003Cspan style=\"color:#F47067\"> ?\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> rest[\u003C/span>\u003Cspan style=\"color:#6CB6FF\">0\u003C/span>\u003Cspan style=\"color:#ADBAC7\">] \u003C/span>\u003Cspan style=\"color:#F47067\">:\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> ret;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">\t\t\t\tif\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> ($$.ctx \u003C/span>\u003Cspan style=\"color:#F47067\">&#x26;&#x26;\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> not_equal\u003C/span>\u003Cspan style=\"color:#ADBAC7\">($$.ctx[i], ($$.ctx[i] \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> value))) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">\t\t\t\t\tif\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (\u003C/span>\u003Cspan style=\"color:#F47067\">!\u003C/span>\u003Cspan style=\"color:#ADBAC7\">$$.skip_bound \u003C/span>\u003Cspan style=\"color:#F47067\">&#x26;&#x26;\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> $$.bound[i]) $$.bound[i](value);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">\t\t\t\t\t// 2a. mark the variable in $$.dirty\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">\t\t\t\t\tif\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (ready) \u003C/span>\u003Cspan style=\"color:#DCBDFB\">make_dirty\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(component, i);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">\t\t\t\t}\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">    \t\t\t// 4. return the value of the assignment or update expression\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">\t\t\t\treturn\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> ret;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">\t\t  })\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">\t\t:\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> [];\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">//https://github.com/sveltejs/svelte/blob/99a3cc93b66bf2c6be551e23101bfdbdb2c6bf72/packages/svelte/src/runtime/internal/Component.js#L78\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">/** \u003C/span>\u003Cspan style=\"color:#F47067\">@returns\u003C/span>\u003Cspan style=\"color:#F69D50\"> {void}\u003C/span>\u003Cspan style=\"color:#768390\"> */\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">function\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> make_dirty\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#F69D50\">component\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, \u003C/span>\u003Cspan style=\"color:#F69D50\">i\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">\tif\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (component.$$.dirty[\u003C/span>\u003Cspan style=\"color:#6CB6FF\">0\u003C/span>\u003Cspan style=\"color:#ADBAC7\">] \u003C/span>\u003Cspan style=\"color:#F47067\">===\u003C/span>\u003Cspan style=\"color:#F47067\"> -\u003C/span>\u003Cspan style=\"color:#6CB6FF\">1\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">\t\tdirty_components.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">push\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(component);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">\t\t// 3. schedule an update\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">\t\tschedule_update\u003C/span>\u003Cspan style=\"color:#ADBAC7\">();\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">\t\t// initialise $$.dirty\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">\t\tcomponent.$$.dirty.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">fill\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#6CB6FF\">0\u003C/span>\u003Cspan style=\"color:#ADBAC7\">);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">\t}\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">\t// 2b. mark the variable in $$.dirty\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">\tcomponent.$$.dirty[(i \u003C/span>\u003Cspan style=\"color:#F47067\">/\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> 31\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) \u003C/span>\u003Cspan style=\"color:#F47067\">|\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> 0\u003C/span>\u003Cspan style=\"color:#ADBAC7\">] \u003C/span>\u003Cspan style=\"color:#F47067\">|=\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> 1\u003C/span>\u003Cspan style=\"color:#F47067\"> &#x3C;&#x3C;\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> i \u003C/span>\u003Cspan style=\"color:#F47067\">%\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> 31\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">}\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Cp>在3.16.0以前，svelte源码使用对象将变量标记为脏：\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"js\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">$$.dirty \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> { givenName: \u003C/span>\u003Cspan style=\"color:#6CB6FF\">true\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, familyName: \u003C/span>\u003Cspan style=\"color:#6CB6FF\">false\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> };\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Cp>在之后使用位掩码的技术跟踪更改。\nsvelte为每个变量分配索引:\u003C/p>\n\u003Cpre>\u003Ccode>givenName -> 0\nfamilyName -> 1\n\u003C/code>\u003C/pre>\n\u003Cp>并使用位掩码存储脏信息：\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"js\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">$$.dirty \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> [\u003C/span>\u003Cspan style=\"color:#6CB6FF\">0b0000_0011\u003C/span>\u003Cspan style=\"color:#ADBAC7\">]\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">// 0和1位标记为true\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Ch3 id=\"bitmask\">Bitmask\u003C/h3>\n\u003Cp>最紧凑的的方式表示一组true或false的方式，是使用位。如果该位为1，则为true，为0则为false。\u003C/p>\n\u003Cp>数字可以使用二进制表示，5就是二进制的\u003Ccode>0b0101\u003C/code>\u003C/p>\n\u003Cp>如果5用4位二进制表示，那么可以存储4个布尔值，第0和第2位为true，第1位和第3位为false（从右到左，从最低有效位到最高有效位）。\u003C/p>\n\u003Cp>在JavaScript中，数字可以用64位表示。但是，当对数字使用按位运算时，JavaScript会将数字视为32位。\n要坚持和修改存储在数字中的布尔值，可以使用按位运算：\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"js\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">// set 1st boolean to true\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#6CB6FF\">0b0101\u003C/span>\u003Cspan style=\"color:#F47067\"> |\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> 0b0010\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> 0b0111\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">// set 2nd boolean to false\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#6CB6FF\">0b0101\u003C/span>\u003Cspan style=\"color:#F47067\"> &#x26;\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> 0b1011\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> 0b0001\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">// is 2nd boolean true?\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">((\u003C/span>\u003Cspan style=\"color:#6CB6FF\">0b0101\u003C/span>\u003Cspan style=\"color:#F47067\"> &#x26;\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> 0b0100\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) \u003C/span>\u003Cspan style=\"color:#F47067\">>\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> 0\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) \u003C/span>\u003Cspan style=\"color:#F47067\">===\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> true\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">// NOTE: You can test multiple boolean values at once\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">// is 2nd and 3rd boolean true?\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">((\u003C/span>\u003Cspan style=\"color:#6CB6FF\">0b0101\u003C/span>\u003Cspan style=\"color:#F47067\"> &#x26;\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> 0b1100\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) \u003C/span>\u003Cspan style=\"color:#F47067\">>\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> 0\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) \u003C/span>\u003Cspan style=\"color:#F47067\">===\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> true\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Cp>在位运算中使用的第二个操作数，就像掩码，允许我们定位第一个数字中存储布尔值的特定位。\n在这里称掩码为位掩码。\u003C/p>\n\u003Ch3 id=\"bitmask-in-svelte\">Bitmask in Svelte\u003C/h3>\n\u003Cp>如上所述，为每个变量分配一个索引：\u003C/p>\n\u003Cpre>\u003Ccode>givenName -> 0\nfamilyName -> 1\n\u003C/code>\u003C/pre>\n\u003Cp>在instance函数中，返回的ctx作为数组：\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"js\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">function\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> instance\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#F69D50\">$$self\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, \u003C/span>\u003Cspan style=\"color:#F69D50\">$$props\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, \u003C/span>\u003Cspan style=\"color:#F69D50\">$$invalidate\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">  // ...\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\" data-highlighted-line=\"\">\u003Cspan style=\"color:#F47067\">  return\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> [givenName, familyName];\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Cp>此后访问变量可通过索引，而非变量名：\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"js\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">$$.ctx[\u003C/span>\u003Cspan style=\"color:#6CB6FF\">0\u003C/span>\u003Cspan style=\"color:#ADBAC7\">] \u003C/span>\u003Cspan style=\"color:#F47067\">+\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> $$.ctx[\u003C/span>\u003Cspan style=\"color:#6CB6FF\">1\u003C/span>\u003Cspan style=\"color:#ADBAC7\">];\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Cp>\u003Ccode>$$invalidate\u003C/code>函数的工作原理相同：\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"js\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">$$invalidate\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#6CB6FF\">0\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, (givenName \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#96D0FF\"> 'Li Hau'\u003C/span>\u003Cspan style=\"color:#ADBAC7\">));\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Cp>\u003Ccode>$$.dirty\u003C/code>现在也存储数组，数组每一项携带31个布尔值，每个布尔值指示该索引的变量是否为\u003Ccode>dirty\u003C/code>.\u003C/p>\n\u003Cp>要将数据设置为脏变量，可直接使用位运算：\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"js\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">$$.dirty[\u003C/span>\u003Cspan style=\"color:#6CB6FF\">0\u003C/span>\u003Cspan style=\"color:#ADBAC7\">] \u003C/span>\u003Cspan style=\"color:#F47067\">|=\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> 1\u003C/span>\u003Cspan style=\"color:#F47067\"> &#x3C;&#x3C;\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> 0\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Cp>要验证是否位脏，也使用位运算：\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"js\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">if\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> ($dirty[\u003C/span>\u003Cspan style=\"color:#6CB6FF\">0\u003C/span>\u003Cspan style=\"color:#ADBAC7\">] \u003C/span>\u003Cspan style=\"color:#F47067\">&#x26;\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> 1\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) { \u003C/span>\u003Cspan style=\"color:#768390\">/* ... */\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> }\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">if\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> ($dirty[\u003C/span>\u003Cspan style=\"color:#6CB6FF\">0\u003C/span>\u003Cspan style=\"color:#ADBAC7\">] \u003C/span>\u003Cspan style=\"color:#F47067\">&#x26;\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> 3\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) { \u003C/span>\u003Cspan style=\"color:#768390\">/* ... */\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> }\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Cp>使用位掩码后，\u003Ccode>$$.dirty\u003C/code>重置为\u003Ccode>[-1]\u003C/code>而不是\u003Ccode>null\u003C/code>\u003C/p>\n\u003Caside class=\"callout callout-tip\">\u003Cdiv class=\"callout-indicator\">\u003Cdiv class=\"callout-hint\">\u003Csvg viewBox=\"0 0 24 24\" width=\"24\" height=\"24\" fill=\"currentColor\" class=\"callout-hint-tip\">\u003Cpath fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M1.43909 8.85483L1.44039 8.85354L4.96668 5.33815C5.30653 4.99386 5.7685 4.79662 6.2524 4.78972L6.26553 4.78963L12.9014 4.78962L13.8479 3.84308C16.9187 0.772319 20.0546 0.770617 21.4678 0.975145C21.8617 1.02914 22.2271 1.21053 22.5083 1.4917C22.7894 1.77284 22.9708 2.13821 23.0248 2.53199C23.2294 3.94517 23.2278 7.08119 20.1569 10.1521L19.2107 11.0983V17.7338L19.2106 17.7469C19.2037 18.2308 19.0067 18.6933 18.6624 19.0331L15.1456 22.5608C14.9095 22.7966 14.6137 22.964 14.29 23.0449C13.9663 23.1259 13.6267 23.1174 13.3074 23.0204C12.9881 22.9235 12.7011 22.7417 12.4771 22.4944C12.2533 22.2473 12.1006 21.9441 12.0355 21.6171L11.1783 17.3417L6.65869 12.822L4.34847 12.3589L2.38351 11.965C2.05664 11.8998 1.75272 11.747 1.50564 11.5232C1.25835 11.2992 1.07653 11.0122 0.979561 10.6929C0.882595 10.3736 0.874125 10.034 0.955057 9.7103C1.03599 9.38659 1.20328 9.09092 1.43909 8.85483ZM6.8186 10.8724L2.94619 10.096L6.32006 6.73268H10.9583L6.8186 10.8724ZM15.2219 5.21703C17.681 2.75787 20.0783 2.75376 21.1124 2.8876C21.2462 3.92172 21.2421 6.31895 18.783 8.77812L12.0728 15.4883L8.51172 11.9272L15.2219 5.21703ZM13.9042 21.0538L13.1279 17.1811L17.2676 13.0414V17.68L13.9042 21.0538Z\">\u003C/path>\u003Cpath d=\"M9.31827 18.3446C9.45046 17.8529 9.17864 17.3369 8.68945 17.1724C8.56178 17.1294 8.43145 17.1145 8.30512 17.1243C8.10513 17.1398 7.91519 17.2172 7.76181 17.3434C7.62613 17.455 7.51905 17.6048 7.45893 17.7835C6.97634 19.2186 5.77062 19.9878 4.52406 20.4029C4.08525 20.549 3.6605 20.644 3.29471 20.7053C3.35607 20.3395 3.45098 19.9148 3.59711 19.476C4.01221 18.2294 4.78141 17.0237 6.21648 16.5411C6.39528 16.481 6.54504 16.3739 6.65665 16.2382C6.85126 16.0016 6.92988 15.678 6.84417 15.3647C6.83922 15.3466 6.83373 15.3286 6.82767 15.3106C6.74106 15.053 6.55701 14.8557 6.33037 14.7459C6.10949 14.6389 5.84816 14.615 5.59715 14.6994C5.47743 14.7397 5.36103 14.7831 5.24786 14.8294C3.22626 15.6569 2.2347 17.4173 1.75357 18.8621C1.49662 19.6337 1.36993 20.3554 1.30679 20.8818C1.27505 21.1464 1.25893 21.3654 1.25072 21.5213C1.24662 21.5993 1.24448 21.6618 1.24337 21.7066L1.243 21.7226L1.24235 21.7605L1.2422 21.7771L1.24217 21.7827L1.24217 21.7856C1.24217 22.3221 1.67703 22.7579 2.2137 22.7579L2.2155 22.7579L2.22337 22.7578L2.23956 22.7577C2.25293 22.7575 2.27096 22.7572 2.29338 22.7567C2.33821 22.7555 2.40073 22.7534 2.47876 22.7493C2.63466 22.7411 2.85361 22.725 3.11822 22.6932C3.64462 22.6301 4.36636 22.5034 5.13797 22.2464C6.58274 21.7653 8.3431 20.7738 9.17063 18.7522C9.21696 18.639 9.26037 18.5226 9.30064 18.4029C9.30716 18.3835 9.31304 18.364 9.31827 18.3446Z\">\u003C/path>\u003C/svg>\u003C/div>\u003Cdiv class=\"callout-title\">Tip\u003C/div>\u003C/div>\u003Cdiv class=\"callout-content\">\u003Cp>\u003Ccode>-1\u003C/code>是二进制的\u003Ccode>0b1111_1111\u003C/code>，所有位都为\u003Ccode>1\u003C/code>\u003C/p>\u003C/div>\u003C/aside>\n\u003Ch2 id=\"响应式声明\">响应式声明\u003C/h2>\n\u003Cp>svelte允许使用label语句申明响应值：\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"svelte\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"svelte\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">&#x3C;\u003C/span>\u003Cspan style=\"color:#8DDB8C\">script\u003C/span>\u003Cspan style=\"color:#ADBAC7\">>\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">  export\u003C/span>\u003Cspan style=\"color:#F47067\"> let\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> count \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> 0\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\" data-highlighted-line=\"\">\u003Cspan style=\"color:#768390\">  // `doubled`, `tripled`, `quadrupled` are reactive\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\" data-highlighted-line=\"\">\u003Cspan style=\"color:#F69D50\">  $\u003C/span>\u003Cspan style=\"color:#ADBAC7\">: doubled \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> count \u003C/span>\u003Cspan style=\"color:#F47067\">*\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> 2\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\" data-highlighted-line=\"\">\u003Cspan style=\"color:#F69D50\">  $\u003C/span>\u003Cspan style=\"color:#ADBAC7\">: tripled \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> count \u003C/span>\u003Cspan style=\"color:#F47067\">*\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> 3\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\" data-highlighted-line=\"\">\u003Cspan style=\"color:#F69D50\">  $\u003C/span>\u003Cspan style=\"color:#ADBAC7\">: quadrupled \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> doubled \u003C/span>\u003Cspan style=\"color:#F47067\">*\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> 2\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">&#x3C;/\u003C/span>\u003Cspan style=\"color:#8DDB8C\">script\u003C/span>\u003Cspan style=\"color:#ADBAC7\">>\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">{\u003C/span>\u003Cspan style=\"color:#ADBAC7\">doubled\u003C/span>\u003Cspan style=\"color:#F47067\">}\u003C/span>\u003Cspan style=\"color:#F47067\"> {\u003C/span>\u003Cspan style=\"color:#ADBAC7\">tripled\u003C/span>\u003Cspan style=\"color:#F47067\">}\u003C/span>\u003Cspan style=\"color:#F47067\"> {\u003C/span>\u003Cspan style=\"color:#ADBAC7\">quadrupled\u003C/span>\u003Cspan style=\"color:#F47067\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Cp>如果查看编译后的输出，会发现声明语句出现在instance函数中：\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"js\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">function\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> instance\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#F69D50\">$$self\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, \u003C/span>\u003Cspan style=\"color:#F69D50\">$$props\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, \u003C/span>\u003Cspan style=\"color:#F69D50\">$$invalidate\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">    // ...\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\" data-highlighted-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    $$self.$$.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">update\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> () \u003C/span>\u003Cspan style=\"color:#F47067\">=>\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\" data-highlighted-line=\"\">\u003Cspan style=\"color:#F47067\">        if\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> ($$self.$$.dirty \u003C/span>\u003Cspan style=\"color:#F47067\">&#x26;\u003C/span>\u003Cspan style=\"color:#768390\"> /*count*/\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> 8\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\" data-highlighted-line=\"\">\u003Cspan style=\"color:#F69D50\">            $\u003C/span>\u003Cspan style=\"color:#ADBAC7\">: \u003C/span>\u003Cspan style=\"color:#DCBDFB\">$$invalidate\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#6CB6FF\">0\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, doubled \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> count \u003C/span>\u003Cspan style=\"color:#F47067\">*\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> 2\u003C/span>\u003Cspan style=\"color:#ADBAC7\">);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\" data-highlighted-line=\"\">\u003Cspan style=\"color:#ADBAC7\">        }\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\" data-highlighted-line=\"\">\u003Cspan style=\"color:#F47067\">        if\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> ($$self.$$.dirty \u003C/span>\u003Cspan style=\"color:#F47067\">&#x26;\u003C/span>\u003Cspan style=\"color:#768390\"> /*count*/\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> 8\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\" data-highlighted-line=\"\">\u003Cspan style=\"color:#F69D50\">            $\u003C/span>\u003Cspan style=\"color:#ADBAC7\">: \u003C/span>\u003Cspan style=\"color:#DCBDFB\">$$invalidate\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#6CB6FF\">1\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, tripled \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> count \u003C/span>\u003Cspan style=\"color:#F47067\">*\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> 3\u003C/span>\u003Cspan style=\"color:#ADBAC7\">);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\" data-highlighted-line=\"\">\u003Cspan style=\"color:#ADBAC7\">        }\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\" data-highlighted-line=\"\">\u003Cspan style=\"color:#F47067\">        if\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> ($$self.$$.dirty \u003C/span>\u003Cspan style=\"color:#F47067\">&#x26;\u003C/span>\u003Cspan style=\"color:#768390\"> /*doubled*/\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> 1\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\" data-highlighted-line=\"\">\u003Cspan style=\"color:#F69D50\">            $\u003C/span>\u003Cspan style=\"color:#ADBAC7\">: \u003C/span>\u003Cspan style=\"color:#DCBDFB\">$$invalidate\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#6CB6FF\">2\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, quadrupled \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> doubled \u003C/span>\u003Cspan style=\"color:#F47067\">*\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> 2\u003C/span>\u003Cspan style=\"color:#ADBAC7\">);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\" data-highlighted-line=\"\">\u003Cspan style=\"color:#ADBAC7\">        }\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\" data-highlighted-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    };\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    \u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">\treturn\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> [doubled, tripled, quadrupled, count];\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Cul>\n\u003Cli>当存在响应式声明时，svelte定义\u003Ccode>$$.update\u003C/code>方法。\n\u003Cul>\n\u003Cli>\u003Ccode>$$.update\u003C/code>函数默认是无操作函数\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>svelte也使用\u003Ccode>$$invalidate\u003C/code>更新响应式变量的值\u003C/li>\n\u003Cli>svelte根据申明与语句之间的依赖关系对响应式声明和语句排序\u003C/li>\n\u003C/ul>\n\u003Cp>由于所有响应式声明和语句都分组到\u003Ccode>$$.update\u003C/code>方法中，而且svelte会根据它们的依赖关系对声明和语法排序，因此最终输出结果与源码中声明的位置和顺序无关。\u003C/p>\n\u003Cp>以下组件是有效的：\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"svelte\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"svelte\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">&#x3C;\u003C/span>\u003Cspan style=\"color:#8DDB8C\">script\u003C/span>\u003Cspan style=\"color:#ADBAC7\">>\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">// NOTE: use `count` in a reactive declaration before `count` is declared\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F69D50\">$\u003C/span>\u003Cspan style=\"color:#ADBAC7\">: doubled \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> count \u003C/span>\u003Cspan style=\"color:#F47067\">*\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> 2\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">let\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> count \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> 1\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">&#x3C;/\u003C/span>\u003Cspan style=\"color:#8DDB8C\">script\u003C/span>\u003Cspan style=\"color:#ADBAC7\">>\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">{\u003C/span>\u003Cspan style=\"color:#ADBAC7\">count\u003C/span>\u003Cspan style=\"color:#F47067\">}\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> * 2 = \u003C/span>\u003Cspan style=\"color:#F47067\">{\u003C/span>\u003Cspan style=\"color:#ADBAC7\">doubled\u003C/span>\u003Cspan style=\"color:#F47067\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Cp>在\u003Ccode>flush\u003C/code>函数中调用了一个\u003Ccode>update\u003C/code>函数，其结构如下：\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"js\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">//https://github.com/sveltejs/svelte/blob/99a3cc93b66bf2c6be551e23101bfdbdb2c6bf72/packages/svelte/src/runtime/internal/scheduler.js#L113\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">function\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> update\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#F69D50\">$$\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">\tif\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> ($$.fragment \u003C/span>\u003Cspan style=\"color:#F47067\">!==\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> null\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\" data-highlighted-line=\"\">\u003Cspan style=\"color:#ADBAC7\">\t\t$$.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">update\u003C/span>\u003Cspan style=\"color:#ADBAC7\">();\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">\t\trun_all\u003C/span>\u003Cspan style=\"color:#ADBAC7\">($$.before_update);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">\t\tconst\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> dirty\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> $$.dirty;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">\t\t$$.dirty \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> [\u003C/span>\u003Cspan style=\"color:#F47067\">-\u003C/span>\u003Cspan style=\"color:#6CB6FF\">1\u003C/span>\u003Cspan style=\"color:#ADBAC7\">];\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">\t\t$$.fragment \u003C/span>\u003Cspan style=\"color:#F47067\">&#x26;&#x26;\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> $$.fragment.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">p\u003C/span>\u003Cspan style=\"color:#ADBAC7\">($$.ctx, dirty);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">\t\t$$.after_update.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">forEach\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(add_render_callback);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">\t}\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Cp>\u003Ccode>$$.update\u003C/code>函数在DOM更新的同一个微任务中被调用，就是调用\u003Ccode>$$.fragment.p()\u003C/code>更新DOM之前。\u003C/p>\n\u003Cp>从上方update函数可得出：\u003C/p>\n\u003Ch3 id=\"所有响应式声明和语句都是批处理的\">所有响应式声明和语句都是批处理的\u003C/h3>\n\u003Cp>正如DOM更新的批处理方式一样：\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"svelte\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"svelte\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">&#x3C;\u003C/span>\u003Cspan style=\"color:#8DDB8C\">script\u003C/span>\u003Cspan style=\"color:#ADBAC7\">>\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">let\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> givenName \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#96D0FF\"> ''\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, familyName \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#96D0FF\"> ''\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">function\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> update\u003C/span>\u003Cspan style=\"color:#ADBAC7\">() {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    givenName \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#96D0FF\"> 'Li Hau'\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    familyName \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#96D0FF\"> 'Tan'\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">}\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F69D50\">$\u003C/span>\u003Cspan style=\"color:#ADBAC7\">: name \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> givenName \u003C/span>\u003Cspan style=\"color:#F47067\">+\u003C/span>\u003Cspan style=\"color:#96D0FF\"> \" \"\u003C/span>\u003Cspan style=\"color:#F47067\"> +\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> familyName;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F69D50\">$\u003C/span>\u003Cspan style=\"color:#ADBAC7\">: console.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">log\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#96D0FF\">'name'\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, name);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">&#x3C;/\u003C/span>\u003Cspan style=\"color:#8DDB8C\">script\u003C/span>\u003Cspan style=\"color:#ADBAC7\">>\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Cp>当update被调用时：\u003C/p>\n\u003Col>\n\u003Cli>与上述流程类似，为givenName和familyName执行\u003Ccode>$$invalidate\u003C/code>，并安排更新\u003C/li>\n\u003Cli>任务结束\u003C/li>\n\u003Cli>微任务开始\u003C/li>\n\u003Cli>\u003Ccode>flush()\u003C/code>执行时为每个标记为脏的组件调用\u003Ccode>update\u003C/code>函数\u003C/li>\n\u003Cli>允许\u003Ccode>$$.update\u003C/code>\n\u003Col>\n\u003Cli>由于\u003Ccode>givenName\u003C/code>和\u003Ccode>familyName\u003C/code>被更改，执行\u003Ccode>name\u003C/code>的\u003Ccode>$$invalidate\u003C/code>\u003C/li>\n\u003Cli>由于\u003Ccode>name\u003C/code>被更改，执行\u003Ccode>console.log('name', name);\u003C/code>\u003C/li>\n\u003C/ol>\n\u003C/li>\n\u003Cli>调用\u003Ccode>$$.fragment.p(...)\u003C/code>更新DOM\u003C/li>\n\u003C/ol>\n\u003Cp>如\u003Cspan role=\"img\" aria-label=\"up arrow\">⬆\u003C/span>上，即使更新了\u003Ccode>givenName\u003C/code>和\u003Ccode>familyName\u003C/code>，也只更新\u003Ccode>name\u003C/code>和执行\u003Ccode>console.log('name', name);\u003C/code>一次而不是两次\u003C/p>\n\u003Ch3 id=\"响应式声明或语句外的响应式变量可能不是最新的\">响应式声明或语句外的响应式变量可能不是最新的\u003C/h3>\n\u003Cp>由于反应式声明和语句是在下一个微任务中批量执行的，因此您不能期望值会同步更新。\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"svelte\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"svelte\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">&#x3C;\u003C/span>\u003Cspan style=\"color:#8DDB8C\">script\u003C/span>\u003Cspan style=\"color:#ADBAC7\">>\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">let\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> givenName \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#96D0FF\"> ''\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, familyName \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#96D0FF\"> ''\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">function\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> update\u003C/span>\u003Cspan style=\"color:#ADBAC7\">() {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    givenName \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#96D0FF\"> 'Li Hau'\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    familyName \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#96D0FF\"> 'Tan'\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\" data-highlighted-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    console.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">log\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#96D0FF\">'name'\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, name); \u003C/span>\u003Cspan style=\"color:#768390\">// Logs ''\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">}\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F69D50\">$\u003C/span>\u003Cspan style=\"color:#ADBAC7\">: name \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> givenName \u003C/span>\u003Cspan style=\"color:#F47067\">+\u003C/span>\u003Cspan style=\"color:#96D0FF\"> \" \"\u003C/span>\u003Cspan style=\"color:#F47067\"> +\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> familyName;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">&#x3C;/\u003C/span>\u003Cspan style=\"color:#8DDB8C\">script\u003C/span>\u003Cspan style=\"color:#ADBAC7\">>\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Cp>可在另一个响应式语句中引用响应式变量：\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"svelte\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"svelte\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">&#x3C;\u003C/span>\u003Cspan style=\"color:#8DDB8C\">script\u003C/span>\u003Cspan style=\"color:#ADBAC7\">>\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">let\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> givenName \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#96D0FF\"> ''\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, familyName \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#96D0FF\"> ''\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">function\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> update\u003C/span>\u003Cspan style=\"color:#ADBAC7\">() {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    givenName \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#96D0FF\"> 'Li Hau'\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    familyName \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#96D0FF\"> 'Tan'\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">}\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F69D50\">$\u003C/span>\u003Cspan style=\"color:#ADBAC7\">: name \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> givenName \u003C/span>\u003Cspan style=\"color:#F47067\">+\u003C/span>\u003Cspan style=\"color:#96D0FF\"> \" \"\u003C/span>\u003Cspan style=\"color:#F47067\"> +\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> familyName;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\" data-highlighted-line=\"\">\u003Cspan style=\"color:#F69D50\">$\u003C/span>\u003Cspan style=\"color:#ADBAC7\">: console.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">log\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#96D0FF\">'name'\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, name); \u003C/span>\u003Cspan style=\"color:#768390\">// Logs 'Li Hau Tan'\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">&#x3C;/\u003C/span>\u003Cspan style=\"color:#8DDB8C\">script\u003C/span>\u003Cspan style=\"color:#ADBAC7\">>\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Ch3 id=\"响应式声明和语句的排序\">响应式声明和语句的排序\u003C/h3>\n\u003Cp>Svelte 尝试尽可能保留反应式声明和语句的声明顺序。\n但是，如果一个反应式声明或语句引用了另一个反应式声明定义的变量，那么它将被插入到后一个反应式声明之后：\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"svelte\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"svelte\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">&#x3C;\u003C/span>\u003Cspan style=\"color:#8DDB8C\">script\u003C/span>\u003Cspan style=\"color:#ADBAC7\">>\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">let\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> count \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> 0\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">// NOTE: refers to `doubled`\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\" data-highlighted-line=\"\">\u003Cspan style=\"color:#F69D50\">$\u003C/span>\u003Cspan style=\"color:#ADBAC7\">: quadrupled \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> doubled \u003C/span>\u003Cspan style=\"color:#F47067\">*\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> 2\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">// NOTE: defined `doubled`\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\" data-highlighted-line=\"\">\u003Cspan style=\"color:#F69D50\">$\u003C/span>\u003Cspan style=\"color:#ADBAC7\">: doubled \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> count \u003C/span>\u003Cspan style=\"color:#F47067\">*\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> 2\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">// compiles into:\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">$$self.$$.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">update\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> () \u003C/span>\u003Cspan style=\"color:#F47067\">=>\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">    // ...\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\" data-highlighted-line=\"\">\u003Cspan style=\"color:#F69D50\">    $\u003C/span>\u003Cspan style=\"color:#ADBAC7\">: \u003C/span>\u003Cspan style=\"color:#DCBDFB\">$$invalidate\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#768390\">/* doubled */\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, doubled \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> count \u003C/span>\u003Cspan style=\"color:#F47067\">*\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> 2\u003C/span>\u003Cspan style=\"color:#ADBAC7\">);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\" data-highlighted-line=\"\">\u003Cspan style=\"color:#F69D50\">    $\u003C/span>\u003Cspan style=\"color:#ADBAC7\">: \u003C/span>\u003Cspan style=\"color:#DCBDFB\">$$invalidate\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#768390\">/* quadrupled */\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, quadrupled \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> doubled \u003C/span>\u003Cspan style=\"color:#F47067\">*\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> 2\u003C/span>\u003Cspan style=\"color:#ADBAC7\">);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">    // ...\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">}\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">&#x3C;/\u003C/span>\u003Cspan style=\"color:#8DDB8C\">script\u003C/span>\u003Cspan style=\"color:#ADBAC7\">>\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Ch3 id=\"非响应式变量\">非响应式变量\u003C/h3>\n\u003Cp>svelte编译器会跟踪\u003Ccode>&#x3C;script>\u003C/code>脚本中所有变量。如果响应式声明或语句中变量使用了但未发生\u003Ccode>mutated\u003C/code>或\u003Ccode>reassigned\u003C/code>，则该响应式声明或语句将不会被添加到\u003Ccode>$$.update\u003C/code>中。\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"svelte\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"svelte\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">&#x3C;\u003C/span>\u003Cspan style=\"color:#8DDB8C\">script\u003C/span>\u003Cspan style=\"color:#ADBAC7\">>\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">  let\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> count \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> 0\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F69D50\">  $\u003C/span>\u003Cspan style=\"color:#ADBAC7\">: doubled \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> count \u003C/span>\u003Cspan style=\"color:#F47067\">*\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> 2\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">&#x3C;/\u003C/span>\u003Cspan style=\"color:#8DDB8C\">script\u003C/span>\u003Cspan style=\"color:#ADBAC7\">>\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">{\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> count \u003C/span>\u003Cspan style=\"color:#F47067\">}\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> x 2 = \u003C/span>\u003Cspan style=\"color:#F47067\">{\u003C/span>\u003Cspan style=\"color:#ADBAC7\">doubled\u003C/span>\u003Cspan style=\"color:#F47067\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Cp>\u003Ca href=\"https://svelte.dev/repl/23b2476accac46608807c73539b03953?version=3.20.1\">Svelte REPL\u003C/a>\u003C/p>\n\u003Cp>JavaScript output\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"js\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">function\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> instance\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#F69D50\">$$self\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, \u003C/span>\u003Cspan style=\"color:#F69D50\">$$props\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, \u003C/span>\u003Cspan style=\"color:#F69D50\">$$invalidate\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">\tlet\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> doubled;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F69D50\">\t$\u003C/span>\u003Cspan style=\"color:#ADBAC7\">: \u003C/span>\u003Cspan style=\"color:#DCBDFB\">$$invalidate\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#6CB6FF\">0\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, doubled \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> count \u003C/span>\u003Cspan style=\"color:#F47067\">*\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> 2\u003C/span>\u003Cspan style=\"color:#ADBAC7\">);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">\treturn\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> [doubled];\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Cp>由于\u003Ccode>count\u003C/code>未被\u003Ccode>mutated\u003C/code>或\u003Ccode>reassigned\u003C/code>，svelte通过不定义\u003Ccode>$$self.$$.update\u003C/code>来优化输出。\u003C/p>\n\u003Ch2 id=\"总结\">总结\u003C/h2>\n\u003Col>\n\u003Cli>Svelte在编译阶段追踪被\u003Ccode>dirty\u003C/code>的变量并在DOM更新时批量更新\u003C/li>\n\u003Cli>Svelte使用位掩码技术生成更加紧凑的运行时JavaScript代码\u003C/li>\n\u003Cli>响应式声明和语句和DOM更新类似，也是批量执行\u003C/li>\n\u003C/ol>",{"headings":793,"localImagePaths":813,"remoteImagePaths":814,"frontmatter":815,"imagePaths":820},[794,795,796,799,802,804,806,808,810,812],{"depth":31,"slug":324,"text":325},{"depth":31,"slug":693,"text":694},{"depth":37,"slug":797,"text":798},"bitmask","Bitmask",{"depth":37,"slug":800,"text":801},"bitmask-in-svelte","Bitmask in Svelte",{"depth":31,"slug":803,"text":803},"响应式声明",{"depth":37,"slug":805,"text":805},"所有响应式声明和语句都是批处理的",{"depth":37,"slug":807,"text":807},"响应式声明或语句外的响应式变量可能不是最新的",{"depth":37,"slug":809,"text":809},"响应式声明和语句的排序",{"depth":37,"slug":811,"text":811},"非响应式变量",{"depth":31,"slug":702,"text":702},[],[],{"title":783,"description":15,"pubDate":816,"heroImage":785,"date created":817,"date modified":818,"tags":819,"minutesRead":715},"2023-07-28 19:06","2023-07-28 19:03","2023-07-28",[20,660],[],"200-Learning/210-Programing/Compile Svelte in Your Head（2）.md","200-learning/210-programing/程序人生",{"id":822,"data":824,"body":829,"filePath":830,"digest":831,"rendered":832,"legacyId":927},{"title":825,"description":15,"pubDate":826,"heroImage":827,"tags":828},"《程序人生》",["Date","2023-08-14T05:26:00.000Z"],"https://images.unsplash.com/photo-1535551951406-a19828b0a76b?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1200&q=80",[133,242],"> 生命不在于你活了多少日子，而是你记住了多少日子。\n\n## TOC\n\n\n## 两万字长文：聊聊程序人生\n\n\n[https://mp.weixin.qq.com/s/Ctc_Gs65Q0_ekqdikP45lw](https://mp.weixin.qq.com/s/Ctc_Gs65Q0_ekqdikP45lw)\n\n\n### 我想独立完成一个产品，技术上该怎么提升？\n\n1. 对自己的定位。个人独立完成，还是只是前端工程师、后端工程师\n2. 要带着问题去学习\n   - 发现缺失的很多知识点，怎么弥补？\n   - 开发中使用什么架构？\n   - 前端开发领域如何做技术选型？\n   - 后端技术栈如何抉择？\n   - ...\n3. 吸收和消化为了解决具体问题而寻找的助力，内化成自己的东西\n   边做边学，边做边探索，然后总结，内化\n\n### 怎么找到好玩的项目？\n\n- 涉及到信息来源的问题\n- 逛个两三次 hacker news 和 Github trending（or followers's stars）、看一看各个开发者聚集的地方如Reddit相关主题贴、一些公众号\n\n### 看过的或者学过的技术，如何在需要的时候找回来？\n\n在开始看某个东西时，如果觉得未来在某个场景下会去使用它，会在笔记的对应的主题下面\n\n比如说我在 Github 上 Star 了很多很有意思的做搜索的项目，比如说现在在 Rust 上面比较火的一个叫 meilisearch，一个叫 Sonic，这些东西我现在并不需要，所以我现在可能不见得会用到他们，但是我会放在搜索的主题下面，下次我要深入了解探索这个方向的时候，那么可能会深入探索。\n\n不光是 Github repo，还有我在 Youtube 和 B 站上看过的视频，我都会放在专门的页面里面，做成 database。\n\n如果多少年之后成为一个什么样的人，比如架构师，那么其实你需要做的就是你平时对你所用的东西，你感兴趣的东西，保持一份好奇心：你看到一个一个产品，就要去想这个产品背后的逻辑是什么，它的功能是怎么样实现的。如果我自己要实现的话， 这一块功能，那块功能我该用什么样的工具实现，我是自己实现，还是我拿第三方工具，我有哪些工具可以使用。这样你就可以把平日里看到的东西和你的思路串联起来。\n\n你可以顺便多想一些，比如：如果真得要实现的话，实现到一个什么样的程度，大概花多少钱？这些东西我觉得可以反复可以在自己的脑海里面去探索，你不一定去做，因为很多时候我们遇到的东西太多了，真正值得你去深入下面去做的，一年可能也就是两三个，因为你的时间精力毕竟有限。\n\n大部分的时候你即便不做，你可以去想，因为想本身想的过程就本身已经足够好了，因为你在思考的时候你会你会遇到问题，这个问题即便你不是去写代码解决，你也可以通过去搜索，你可以去看看别人是别人的解决方案是什么，甚至你可以对这个产品本身做 reverse engineering，去验证你的想法和人家做的是不是一样。\n\n这些东西其实都是你在思考，你在使用 reverse engineering 的时候，你会发现这是一个问题，他没有解决好。那我该怎么样解决呢？我的方法是不是好，如果好为什么好，如果不好的话，还有什么更好的解决办法等等。这个循环往复的过程会让你的进步会很快，很多人说我在大公司里面或者在公司里面，我作为一个程序员就是一颗螺丝钉，每天能接触的事情就那么一点，那是因为很多时候有一个更广阔的世界我们可能还没有去发现。\n\n### 如何定义搬砖？如何形成反搬砖的文化？\n\n搬砖与否，因为其实我觉得很多公司的，程序员都会有这样的感慨，就是我的工作好像就是在搬砖，我的工作好像就是在被动处理产品经理的想法，他们不管最终这个产品本身会给技术带来多少的技术债，都要求必须要在规定的时间，以规定的方式来完成，这就会让大家产生一种搬砖的无力感。我觉得这是很多公司在文化上面形成的一种氛围，很多时候需要靠时间来慢慢去把它改变。\n\n第一个对我们所做的事情，不光知其然，还知其所以然。\n>希望我们招的工程师，或者说我们的工程师本身要有极大的热情，想成为一个非常牛逼的工程师。怎么叫牛逼的工程师，我觉得这可能也是我们每一个技术人应该去追寻的方向，\n\n第二个就是你要对你所做的，领域产品有强烈的主人翁的意识，ownership，就说这个东西好像就像我的孩子一样，我不知道大家有多少有孩子，你对你的孩子付出的努力跟对，别人家的孩子付出的努力，那是完全不是一个概念的。\n\n第三个就是你的方案，你提出来的方案一定是要能够，落地，能够交付的这样一个解决方案，不是天马行空的画一个大的 picture，画一个非常酷的 architect，最后谁落地，反正我就提方案你们来落地，我们不需要这样的人。\n\n第四个就是你要对产品中的槽点要零容忍，你的产品经理提出来的一些不合理的产品的需求，你要能给他打回去，你如果打不回去，你要能让你的经理去打回去。当然你要有充足的理由，充足的数据来说明这个事情不对。\n\n第五个就是你对重复的任务和bug是一种零容忍的态度，我们工程师为什么会产生一种搬砖的感觉，除了刚才讲的产品上面你有很多问题，你无力去打破，还有一个在工作中我们可能有太多不停重复的任务，因为产品的需求截止日期太严苛，导致于我们只能着眼于以现在，没办法着眼于未来，没办法把这个东西抽象在一个更高的层次上面去抽象，把它做成某一个service，或者做成一个就是能涵盖包含了这个场景下面一系列场景的解决方案。\n\n第六点是：当你成为某个领域的专家之后，你应该还是保持一个非常开放的心态，随时愿意切换你的技术栈和方法论。你不会去抗拒任何不同的思想。比如说我是一个函数式编程的粉丝，我就鄙视一切面向过程编程的所有的方法论；我是一个 react 的开发者，我就对 vue 充满了不屑和鄙视，认为它是初级程序员的专利，是那些理解不了 react 的人才会写的东西。我觉得我们程序员不应该有这样的心态，我们还是要像小王子里面说的那样，像一个小孩子一样，对什么东西都保持天然的好奇心，愿意把自己的那些「星星」都放到天空中，而不是把它包裹起来藏得很深。所以有必要的话你应该愿意去切换技术栈，切换方法论，有更好的方法，你会愿意去尝试，你会愿意去用数据来说服自己和别人：这个东西值得我们去去投入。\n\n最后一点是你要总是能够让你的团队变得更强。你自己强还不够，你怎么样能用你自己的强大，你的影响力，无论是技术的影响力还是其他方面的影响力，让你周围的人变得更强。\n\n工程师需要足够的时间去内化他所学的东西，去深度地考虑产品，在无数个可能的解决方案中去寻找潜在的最好的方案。\n\n所以这是一个悖论，就是产品的需求，我明天后天下周我就要这么个东西，而很多时候不是你给我一个固定的时间，我就能把这个事情完成的。而且一旦你给了我一个固定的时间，我能采用的方案，大概率是众多的方案中不那么好的，或者说仅仅是为了解决问题而解决问题的方案。在这种时间的压力下，会导致工程师没有安全感，因为我没有时间去充分思考，我没有时间去探索，产品中有无数的bug，我没有时间去处理，我没有时间去追根跑底，我只能去一个的想办法把它绕过它，找一个「快而脏」，而不是一个终极的解决办法去敷衍。所以这需要时间，需要给工程师一个足够足够长的时间去来出来消化这个东西，让工程师足够有足够的权威，能够 push back，说这个东西我觉得不合理，你产品还没想清楚，你想清楚了之后在跟我谈，为什么我说你没想清楚，因为 case1，case2，case3 等等这些东西你没有考虑到，这些场景下我们该怎么样去处理，你没有想，所以这个东西我不能做。这是很多国内的公司还缺乏的一种文化：就是工程师来能够对产品说 NO。因为不能说 NO，所以 996甚至 007 也要把它弄完。这其实是一个是一个很折磨人的过程，这对我们工程师来讲，成长是不利的；长远来讲，短期公司得到的一些利益，长远可能也不见得那么有利。\n\n### 如何处理有限的资源和产品质量之间的冲突？\n\n大部分的决策我们要去去讨论的，是 why，为什么我们要做这件事情，这件事情做出来之后对我们的好处是什么，很多时候公司的 CEO 也会拍脑门做一些决定，不见得 CEO 做的决定都是对的，有可能其中 40% 能被我们挡掉，但剩下的60%，无论如何是不得不做的，并且它是有一些截止日期的压力，比如说你要为了某个事件，在这个事件之前，我必须要做出来某个产品的 feature，甚至某个产品来应对这个事件，因为我知道这样的时机一旦错过，可能下一个几年才能遇到的东西。这个时候我们如果说商业决策想清楚了，ROI 都算好了，那就是一个调动资源的问题，这个东西我们要评估它的 scope 有多大，有多少资源可以去使用，我们愿意为它付出多少代价，这个代价不光是内部的，还有外部的。如果自己做受限于资源无法做到更加稳定，那么可不可以找付费的供应商去做？\n\n我觉得是当我们有一些截止日期不得不去满足的时候，我们从工程师从 CTO 或者技术骨干的角度，我们需要去考虑：有些东西我们是不是这个时刻必须要自研？就像clubhouse这样，我的核心的功能是什么，我怎么样去调配我的核心资源去做我的核心功能，把不那么核心的功能，我如果能多花一些钱就能解决的，是不是可以先把它在这个时刻用第三方服务解决？因为所有技术我一起上的话，以我现在的资源就是满足不了这个日程。所以这是一个博弈的过程，你需要跟做商业决策的那些stakeholder，比如说CEO要去博弈这些东西，你可以提出一些技术的解决方案，你说 ok 为了做这么一个东西，我需要用这些第三方服务，这些服务如果用户量级在这个程度下一个月的cost是多少。我把这个东西列出来，如果 CEO 不同意，那么我们需要这么多资源，并且我没办法保证能在日程截止之前我能完成这样的东西。这就是一个博弈的过程，需要讨价还价。不是说什么东西，别人说 ok 我就要做，我就让我手下的这兄弟们拼命地加班，没日没夜的去做这个东西。这样子长久不了，可能还会带来很多的技术债。\n\n### 团队做大，人才密度是肯定下降的，不能要求人人都有主人翁的心，能不能用精细的流程来避免搬砖？\n\n我觉得讨论就是大家和而不同，我赞同你里面的很多观点，也不赞同里面的一些观点，比如说我赞同人才密度降低这件事情，就是当你公司做大人才密度肯定，是以指数级下降，很难去避免。怎么样去尽量让下降的速度慢一些呢？我觉得一个很好的方式是通过文化来保证，你怎么样通过同一种文化的感召力去召唤那些认同你的文化的人进入到你的公司。这里相关的东西我就不展开来谈了。我稍微不太认同的是过于严谨的规则。每个公司都有一堆的规章制度，有一堆的流程，这无可厚非。\n\n流程应该是能被自动化的东西，它不需要你去学习和遵循，工具本身就帮助你准守流程了。\n\n比如说当你的代码提交之后，有一堆的 pre commit check，要去check你的代码风格对不对，你是不是过了静态检查，是不是过了单元测试，所有这些都通过后才会允许你提交代码。你 push 上去的时候会有一堆的 github action 去执行，去从各个维度去看你这个代码，是不是符合足够质量的，是不是破坏了现有的 code coverage 等等。这些东西不应该是写成文字去，让每个工程师去遵守的，而是就在你的工具链里，在你的公司的日常运作的过程中，自然而然地去使用规则和流程约束每个工程师的行为。而且越好的团队你会发现自动化的流程越多，就像我们写代码一样，框架是干什么的，框架就是一堆东西来限制开发者的行为，让我们有所为有所不为。为什么我们要做信息隐藏，为什么我们要去做各种各样的解耦，为什么我们要去使用各种各样的设计模式，这些其实都是流程，这些流程都是刻在我们平时开发者骨子里的流程。我觉得这些自然而然发生的流程，是最好的流程。\n\n从另外一个角度来讲，我觉得真正的人才，如果真的把程序员看做艺术家的话，我们很难用规则去来框定它，就像截止日期件事情，如果说你毕加索在 10 天之内画出来某幅指定要求的画，那么毕加索可能画出来的，就跟我们普通的一个画师画出来的是一样的东西。梭罗在瓦尔登湖里面，讲过一句话，我特别喜欢，他说：能维持一只兔子生活的田野一定是贫瘠无比的，我觉得好的公司它就是好的公司，不好的公司它就是不好的公司，很多公司大了之后，它可能只是比小的时候没有那么，好而已，但它依旧是好的公司，好的公司很多公司它很小的时候，就跟上可能不是一个好的公司，它大了之后也一定不会是一个好的公司。\n\n\n## 客户端软件的轮回：更好还是更糟糕？\n\n对 SaaS 软件的愿景\n- 客户端软件可以真正做到数据的 local first，云端的数据更像是一个数据的超集或者备份。\n- 当数据 local first 后，对数据的各种操作（聚合，过滤，查询等）都可以利用本地 CPU 的强悍性能直接处理，而无需跨过网络。\n- 协同工作，对公司（组织，团队等）内部的人员来说，由权限系统以及要同时处理某一个文档或者数据的 N 个人（设备）之间的可信共识（比如 raft concensus）处理即可 —— 这应该是绝大多数的使用场景；如果参与者不可信，可以考虑使用不可信共识（比如 BFT consensus）。\n- 如果能进一步，刨除服务器（或者服务器仅仅做备份的功用），完全去中心化，那将更加美妙，不过在资本市场这个故事很难讲好（需要新的估值模型）。\n\n\n## 想象力，工程方法以及取舍\n\n[https://mp.weixin.qq.com/s/3OlEBl9ybiNQ2s328DVCEQ](https://mp.weixin.qq.com/s/3OlEBl9ybiNQ2s328DVCEQ)\n\n### 如何保证 single source of truth（以下简称 SST）?\n![image.png](https://raw.githubusercontent.com/fw6/assets/main/toy_docs/20230814140759.png)\n在分布式系统里，能被正确用作 SST 的只有事件（event，或者 operation）。从整个应用的角度，主流的思想是把广义的数据库（RDBMS，DDBMS，kv store，object store）作为 SST，这无可厚非，但我们不能因此推断出数据库就等同于 SST，或者得出结论没有数据库就没有 SST。从数据库的角度看，数据库里存储的数据（状态）并不是 SST，数据库的 SST 是一个个的 op —— 你可以理解为增删改的动作 —— 它们就是一个个事件。这是最原始，也最容易在集群中复制的信息，数据库的状态可以通过这些 oplog/WAL 按顺序迭加恢复出来。\n\n在 web app 里，我们在更高的层次实现业务逻辑，因此可以把数据库里的数据（状态）作为 SST。因为我们知道，不管数据库的实现是强一致性，还是弱一致性，它们都能保证最终一致性（当更新停止时，最终所有的数据库节点都能聚合到同样的数据）。而保证了最终一致性的数据库，就有资格被当做 SST。\n\n当我们把数据下放到每个客户端时，每个客户端其实可以被看做所有客户端维护的数据库系统的一个节点。上图中一个个 list，就是状态。我们的目标是这些状态的最终一致性。而根据数据库的思路，SST 是事件 —— 用户对 list 的各种操作。这些事件主要有：\n- 在 list 里添加一个新的数据项\n- 修改一个已有的数据项\n- 删除一个已有的数据项\n- 移动一个已有的数据项\n\n我们如果能在所有参与的节点中确保所有的事件都被正确扩散，那么，通过迭加这些事件，我们可以得到最终一致的状态。\n\n### 通过迭加这些事件，得到最终一致的状态?\n\n「不可能先生」的头几个质疑：\n1. 网络不稳定，事件有可能丢；\n2. 事件到达不同客户端的顺序可能不一致。\n\n假设我们有办法做到不丢事件，并且保持同样的事件顺序。所有的客户端的状态都可以被描述成（S 代表状态，E 代表事件，+ 代表事件叠加）：\n![image.png](https://raw.githubusercontent.com/fw6/assets/main/toy_docs/20230814141201.png)\n\n不丢事件如何保证？\n- 如果用中心化的解决方法，可以引入一个 message queue（其实变相引入了 raft 这类 CFT 共识算法）\n- 如果去中心化的解决方案，需要引入类似区块链技术使用的共识机制来确保顺序（区块链的区块，实质上是一个全局时钟，它用来提供一致的事件顺序\n\n要求所有的客户端都看到顺序一致的事件？\n- 事件到了服务器之后被排序，客户端需要按照服务器要求的顺序生成状态。\n  不仅仅要支持迭加的操作（+），还需要支持回滚（-）\n产生了新的问题🙋，如何解决冲突？先按下不表\n\n![image.png](https://raw.githubusercontent.com/fw6/assets/main/toy_docs/20230814141801.png)\n\n如何确保不同客户端看到的数据一致？\n1. list 里所有数据都有全局唯一的 id。这里我们用 task1, task2, ...。数据的 id 中包含客户端的 id。\n2. 每个数据有一个指针，指向前一个数据，以便于我们定位其相对位置，移动数据的时候，我们需要更新这个指针来保持数据的相对位置。\n3. id 之间是可以比较的，比如上图 A 和 B 都在 task5 之后插入了一个新的 item，我们定义 b6 > a6 的比较关系（这个无所谓，也可以 a6 > b6），这样，task_b6 的前一个数据是 task5，而 task_a6 的前一个数据 task_b6。\n\n### 如何解决冲突？\n\n幸运的是，目前已经有很多已知的算法来解决在线协作的问题。其中典型的两种算法是 OT（Operational Transformation）和 CRDT（Conflict-free Replicated Data Types）。\n\n:::tip\n一篇很不错的文章，来自国内AlloyTeam的[协同编辑冲突处理算法综述](https://mp.weixin.qq.com/s/nvh-z61vWGlv_lbCrjZ59w)\n:::\n\n#### OT\n\nOT 是一个思路简单，但实现复杂的算法，其基本思想是，不同的节点在收到不同顺序的事件（在 OT 下是 operation）时，将后续的 OP 进行 transform，使其能够分别聚合出相同的状态，如下图：\n![image.png](https://raw.githubusercontent.com/fw6/assets/main/toy_docs/20230814142057.png)\n那么谁来做这个 transformation 呢？服务器。Peer1 和 peer2 在执行了自己的操作 OP1 和 OP2 后，将操作通过服务器发送给对端，服务器根据收到的 OP，可以确定一个唯一的顺序，也就是能够确定一个唯一的最终状态，然后服务器再根据每个客户端的不同情况，对将要转发给客户端的 OP（对于 pper1 是 OP2，对于 peer2 是 OP1）进行相应的 transformation，然后发送之。这样，客户端在接收到修改后的 OP 后，可以生成和服务器一致的状态。\n\n#### CRDT\n\n如果说 OT 是一个中心化的解决方案，那么 CRDT 则是一个非中心化的解决方案。\n\n:::tip\n文章、播客：\n- 来自AlloyTeam的公众号文章[Yjs——一个基于CRDT的数据协同框架](https://mp.weixin.qq.com/s/cHqXWL54TKSQjL33JSGQ_w)\n- 来自Zed代码编辑器团队的博客：[How CRDTs make multiplayer text editing part of Zed's DNA](https://zed.dev/blog/crdts)\n- 一个专门介绍CRDT的网站：[crdt.tech](https://crdt.tech/)\n\n相关Repos：\n- [GitHub - automerge/automerge: A JSON-like data structure (a CRDT) that can be modified concurrently by different users, and merged again automatically.](https://github.com/automerge/automerge)\n- [GitHub - y-crdt/y-crdt: Rust port of Yjs](https://github.com/y-crdt/y-crdt)\n- [GitHub - yjs/yjs: Shared data types for building collaborative software](https://github.com/yjs/yjs)\n:::\n\n### 继续放飞想象力\n\n我们还以 Notion 为例。一个 Notion 用户可以有多个 workspace。如果数据全部放在本地，以 CRDT 的形式保存成文件，那么一个 workspace 在本地可以存储在一个目录下。根目录下可以存放这个 workspace 下所有用户的基本信息，用一个 automerge 下的 table（姑且简称 amt），存为 user.amt。这个文件里的用户信息，当前用户只能修改自己那一行；workspace 的 owner / admin 可以增删改。用户信息之外，我们还需要一个 permission.amt，存储每个用户在不同上下文下的角色。这样，我们可以使用 oso[7]，通过 RABC 来处理授权。user/permission 相当于 workspace 的 metadata，其它的 metadata（比如配置）我们放下不表。\n\nworkspace 承载的是用户的数据。对于目录树，我们可以用一个 workspace.amt 来保存目录树的 CRDT 数据。目录树下有子目录或文件，子目录下有更深的目录或者文件。和文件系统的目录树类似，这里的文件我们放一个引用，然后文件本身有单独的 amt，如 doc4.amt。整个 workspace 的结构如下：\n\n![image.png](https://raw.githubusercontent.com/fw6/assets/main/toy_docs/20230814142643.png)\n\n当用户在 UI 上对某个文档做了一个改动后，这个改动的 `change` 会从前端界面发送到应用的后端（非服务器的后端）。在应用的后端，automerge backend 对改动进行处理后，会生成一个 patch，提交回 frontend 去 `apply`。同时，这个改动通过网络（可以是服务器中转，也可以是 p2p 网络）传播出去。比如我们可以使用 libp2p 下的 gossipsub，在某个 topic 下传播。topic 可以是某一个 workspace，只有在这个 workspace 下的用户才能加入到这个 topic 下。当客户端 B 收到这个 `syncMessage` 后，它会提交给 automerge backend，生成 patch，提交给 frontend `apply`。\n\n![image.png](https://raw.githubusercontent.com/fw6/assets/main/toy_docs/20230814142732.png)\n\n如果整个系统中有服务器中转事件，那么服务器可以 tap 出一份 amt 作为备份。一个新加入的客户端可以迅速从服务器拿到整个历史记录，进而参与到 workspace 的协作中。如果整个系统中没有服务器中转事件，使用的是 p2p 网络，那么服务器可以充当 p2p 网络中的一个节点，tap 出 amt 做备份。新加入的客户端节点可以从其任一个邻居那里要完整的数据。\n\n### 取舍（Trade off）\n\nCRDT的好处：\n- - local first：数据存储到本地，即时的响应速度，允许离线处理。\n- 可以不依赖服务器而在客户端提供各种各样的数据访问的方式（filter, aggregate, projection, gorupby 等等），甚至，可以提供 API 让本地数据很容易被 pandas 等工具使用。\n- 即便使用服务器中转，其服务器资源的开销相对要小很多，对于一个大型的项目，节省的资金会很可观。\n\n缺点：\n- 随着时间本地数据会增长得越来越大，由于存储着数据的全集，这个数量可能会很可观（可以有一些优化，比如用户上传的图片，视频这样的静态资源可以放在 S3，本地只放链接，访问时再获取 presigned url），所以，这种方法很可能**不适合在浏览器端使用**。\n- 整个系统的复杂度比大家熟悉的 web 技术栈要大很多。\n- 技术栈小众，很难找到合适的工程师（当然，这也意味着一旦找到，必然是优秀的工程师）。\n- 市场上缺乏成功的先例（我指专门处理列表和文档这块的 sequence CRDT，其实 CRDT 在很多软件中已经得到了广泛使用，比如 phoenix framework，redis 等）。\n\n## 激荡二十年：HTTP API的变迁\n\n[激荡二十年：HTTP API 的变迁 | 程序人生](https://mp.weixin.qq.com/s/9TAYgS74yVdNmjduRycy4A)\n\n这篇文章所介绍的 API 的变迁，特指客户端和服务器之间运行的 HTTP API。一切其他协议的 API（如 TCP），或者服务器之间的 HTTP API（如 gRPC），不在深入讨论之列。\n\n### 2005年之前：API 的狂野西部\n\n早期的互联网是非常狂野的，没有所谓前端后端之分。PHP 开发者可以把从处理用户的 HTTP 请求，连接 mysql，组装 SQL 进行查询，将查询结果转换成 HTML，一路到 HTML 响应返回给用户的整个业务逻辑放在一个（或者若干个）如意大利面条般的脚本中。\n![image.png](https://raw.githubusercontent.com/fw6/assets/main/toy_docs/20230816172450.png)\n\n早期微软把太多的赌注放在了曲高和寡的 WSDL（以及服务发现协议 UDDI）上，其主打做 web 开发的 ASP.Net 一直不温不火，根本无法与红遍天的 PHP 相提并论。在 2005 年之前，可以说，（在 web 世界里），**PHP 是宇宙中最好的语言**。\n\n### 2005-2010：从混沌到有序 — Ruby on Rails 横空出世\n\nrails 是一个足以载入史册的框架：它把软件开发中的很多非常有益的概念、模式和思想（包括但不限于 `ORM`，`CoC`，`MVC` 等）糅合在自己体内，构建了一个强大同时非常易用的 web 开发系统。在 rails 下，哪怕你是个 web 开发的小白，在学习了 rails 的开发文档后，也能很快撰写出一套让很多 web 开发老鸟艳羡的系统。在 rails 诸多创新之中，要数 `ActiveRecord` 最为经验，它以简洁优雅的表述，颠覆了人们传统上对数据库的认知，并且几乎凭借一己之力，把 ORM 捧上了神坛。\n\n随着 rails 一起成长的还有 XMLHttp object （俗称 Ajax）的标准化，以及 JSON 的广泛使用。其中，Google 通过其旗下的 gmail / google maps 大大促进了人们对 Ajax 的认知，而 PHP5 和 rails 3 则将 JSON 在广大开发者中推广开来，使其逐渐取代笨拙低效的 XML。有意思的是，Ajax 最初是 *Asynchronous Javascript And XML*，JSON 普及后，这个 XML 再也没人提及。\n\n由 rails 刮起的 ORM 之风愈演愈烈，它几乎成为了 web 开发者访问数据库的唯一标准。渐渐的，存储过程（stored procedure / function）被雪藏，触发器（trigger）被遗忘，数据库复杂而迷人的权限管理被弃之不顾，取而代之的是用一个几乎具有 root 权限的用户来连接数据库，而权限的管理全部被前移到了应用层。这和 ORM 所倡导的「一套代码处理多种数据库」有莫大的联系。事实上，ORM 带给大家切换数据库的好处，可能仅限于开发环境用 sqlite，生产环境用 postgres 这样的便利。但从管理的角度，ORM 让开发者绕过 DBA（或者干脆不要 DBA）进行快速开发，对于小型项目，可以高效开发，且不需要构建数据库领域的专有技能，毕竟培养一个 web 工程师，两三个月的训练营就可以让一个素人很好掌握开发框架，进行「高效」 CRUD 开发；而培养一个合格的 DBA，需要整个计算机体系知识的沉淀。\n\n### 2010-2015：移动互联网 — API 飞上枝头变凤凰\n\n由于移动应用拥有自己的 UI 层，不像浏览器那样，UI 层是由服务器返回的 HTML 渲染出来，因而移动端和服务器之间有着强烈的对简洁高效且标准化的 API 层的需求。在这种需求的催生下，REST（Representational state transfer）这个当时已不新鲜的概念渐渐从象牙塔走入了工业界。人们发现，与其自己随机指定一套 HTTP API 的规约，不如遵循 HTTP/1.1 规范，让 API 的表述和规范靠拢。这个时期，各个框架要么开始内建对 RESTful API 的支持，要么在框架之上，独立出一套专门为 API 优化的框架，比如 2012 年就比较成熟的 django REST framework：\n\n![image.png](https://raw.githubusercontent.com/fw6/assets/main/toy_docs/20230816173059.png)\n\n这个时期，如雨后春笋般绽放的众多 REST API framework 给开发者带来的巨大好处是，你即便不掌握 HTTP/1.1 协议的细节，也可以做出像样的 API，来处理客户端和服务器间的交互。\n\n然而，并不是所有的 API 框架都足够严谨，足够遵循协议本身。很多 API 框架，在处理复杂的协议流程时，要么会有自相矛盾的处理，要么把这些细节完全交由开发者处理。然而，你如何保证只热衷于进行 CRUD 的开发者能够正确使用 ETag 作为乐观锁（optimistic locking）进行条件更新（conditional update）呢？\n\n在 web 世界不为人知的角落，Erlang 的 webmachine 尽着最大的努力来确保 API 的处理符合 HTTP 协议。得益于 erlang 强大的 pattern matching 的能力，webmachine 在内部构建了一张庞大的决策树，涵盖了 API 处理的每一个细节，连每个错误返回的状态码都精益求精。\n![image.png](https://raw.githubusercontent.com/fw6/assets/main/toy_docs/20230816173300.png)\n\n另一个小众语言 clojure 的小众框架 liberator 也把 webmachine 的这一思想学了过去，并发扬光大：\n![image.png](https://raw.githubusercontent.com/fw6/assets/main/toy_docs/20230816173347.png)\n\n\n然而，移动互联网不是小众语言和小众框架的战场。何况，API 毕竟是客户端和服务器共同的约定，在那个年代，服务端的严谨会给客户端带来不小的困惑：相较于 412 Preconditional failed 而言，客户端工程师更钟情于一招鲜吃遍天的 400 Bad request\n\n### 2015-2020：类型安全 — 新的共识\n\n2015 年，facebook 首先用开源的内部项目 GraphQL 向业界打出了意图取代 RESTful API 的一记重拳。GraphQL 从输入和输出入手，在 HTTP 协议之上定义了一套查询语言 —— 客户端和服务器之间需要定义好支持的 query / mutation / subscription 的 schema，以及输入和输出数据结构的 type。\n\nGraphQL 提出了一个看待 API 的全新视角：客户端使用者可以根据需要灵活定义他们想查询的数据，而不需要看服务端老爷们的脸色。在固执的 RESTful API 的原教旨主义者眼里，API 应该严格对应资源，因而一个 app 页面如果包含三种不同的资源，那么它就要访问三个不同的 API 来获得结果。对客户端来说，这额外多了两个浪费用户宝贵等待时间的 roud trip，为什么不能一个查询就获得我想要的数据，且仅包含我想要的数据呢？\n\n这个想法很有创意，但它忽视了灵活性带来的可能并不值得的复杂性。GraphQL 的理想情况一直没有很好地达成，因为服务端不可能为一个多层随意嵌套的查询去准备数据。同时 GraphQL 还有其他很多设计上考虑不周的问题，其中最让人诟病的是，对 HTTP 协议的无视，也就导致整个 HTTP 生态和 GraphQL 工作地很别扭，还有查询时 n+1 的问题（data loader 只是个特定场景的解决办法）。\n\n大部分支持 GraphQL 或者 OpenAPI 的框架遵从程序员的本性，让你可以专注于写代码，顺带生成相应的 schema。这是典型的 code first 的思维。\n\n而 schema first 的代表要数 gRPC —— 你撰写 protobuf 定义，相应的编译器会替你生成代码。\n\n这两种方案的背后，实际上是框架思维和编译器思维的较量。\n\n![image.png](https://raw.githubusercontent.com/fw6/assets/main/toy_docs/20230816173910.png)\n\n### 2020-至今：低代码时代 — API 何去何从？\n\n#### postgREST\n\n以数据库 schema 为单一数据来源，由内及外地生成 API schema，甚至 API 本身。\n\n使用 postgREST，开发者只需正常定义数据库中的表，视图，函数，触发器等，并为它们的使用权限赋予相应的角色即可。postgREST 可以根据数据库的 infoschema，掌握详细的 metadata，并用这些 metadata 来验证 API 的输入，也就是 Request，如果验证通过，会根据 Request 生成相应的 SQL 查询，然后把结果序列化成客户端需要的结构，以 Response 返回。举个例子，对于这样一个 API 请求：`GET /people?age=gte.18&student=is.true` ，postgREST 会验证数据库中包含 people 表或者视图，并且其含有 age / student 这两个字段，前者是整型，后者是布尔型。如果一切符合，并且用户具备 people 表或者视图的 SELECT 权限，那么它就会生成 `select * from people where age >= 18 and student = true` 这样一条查询，返回相应的 JSON（默认客户端 `accept: application/json`）。\n\npostgREST 还跟 postgres 的 RLS（Row Level Security）深度绑定，来解决用户个人信息安全访问和更新的需求。比如用户只能修改自己的帖子，但可以读别人的帖子这样的业务需求，如果没有 RLS，很难从数据库级别直接安全地实现。\n\n#### Hasura\n\nHasura 试图回答一个问题：有没有可能把 GraphQL 的 query 一对一转换成 SQL 语句？\n\n我们知道 GraphQL 查询会被编译成 Graph AST，而 SQL 查询会被编译成 SQL AST，所以上述那个问题就变为：Graph AST 可以被安全高效地转换成 SQL AST 么？\n\n\n## 思考，问题和方法\n\n>人的成长是有诱因的，但不外乎得到他人指点，和自己开悟两种情况。\n\n孔子说三十而立，立的是什么？是立德、立功、立言这三不朽么？还是小家子些的，立身，立家，立业？每个在奔四路上的人都会有自己的体味和解读。但不容置疑的是，三十岁往上，要渐渐形成自己的思想和方法论\n\n而在 Joe 的眼里，erlang 其实没有什么神秘的，仅仅六个函数就能涵盖它的全部：spawn，send，receive，register，whereis，self。\n\n仔细想想，它简单地可怕，就像物理学的大一统理论一样，试图从纷繁复杂中跳脱出来，回归本源。更可怕的是，这六个函数不仅仅涵盖了 erlang，似乎也可以解释软件领域里的很多系统 —— 它们无所不在，在系统里面的意义就像原力之于星战。\n- spawn：创建一个资源。对于 erlang，这资源是 process；对某个 service，是 service 本身。\n- send / receive：给资源发指令和接受指令。对于 erlang，这指令是 message，封装成 erlang term，走的是 IPC/RPC；而对某个 http service，指令是 request，封装成 json / msgpack / protobuf，走的是 http / http2。\n- register / whereis：资源怎么注册，怎么发现。对于 erlang，这是 process 在 name register 的注册和发现；对于某个 service，可以是 Consul / DNS。\n- self：返回自己的 identity。在 erlang 里，这是 process 找寻自我的方式；在 micro service 的场景下，每个 service 隐含着有自己的 identity。\n\n我喜爱 Joe，和我喜欢 Rich Hickey 一样，他们在传播知识的同时，传播他们自己对事物独特的理解和思考。\n\n\n## 谈谈边界\n\n我们做系统，做设计，很多时候其实就是在明确边界。函数和函数要明确边界，模块和模块要明确边界，服务和服务要明确边界，应用和应用要明确边界。明确边界能让我们的代码逻辑严谨，条理清晰。边界之内，对于外部世界，是个黑盒，一切物质的非物质的交换都只能在边界上通过已知的接口（interface）完成；同时来自外部世界的 impure data 在这里被校验（validate），过滤（filter），变换（transform）成为符合内部世界运行的 pure data。\n\n函数的边界是其 signature，一个函数的 signature 由其名字，输入参数及其类型，返回值及其类型共同构成。外部访问者无需了解函数的实现，通过调用函数来执行其代码。函数类似于生物体中的细胞。\n\n随着软件日益复杂，若干函数被组织成类，或者模块，来完成某个功能，从此，作用域的概念开始深入人心。有些函数承担对外的接口，他们是 public 的，有些完成内部功能，他们是 private 的。类或者模块的边界由文件名，类名（模块名）和公有方法组成。类或者模块类似于生物体中的组织。\n\n进一步地，若干类/模块聚合起来，提供某个服务，就形成了组件（component）。组件的表现形式往往是一个目录（或者子目录），它有自己的抽象接口（start / stop / process_message / ... ）。组件的边界由组件所在的目录，抽象接口和 public class / module 组成。组件类似于生物体的器官。\n\n![image.png](https://raw.githubusercontent.com/fw6/assets/main/toy_docs/20230821161404.png)\n生物体和软件很相通的一点是它们也拒绝 single point of failure。上图是人类的肾脏器官，经典的 active-active cluster 设置。那些卖肾买 iPhone 4 或者 iPhone 6P 的同学至今还活蹦乱跳的一个原因是，即便一个肾没了，另一个也会负担起所有的流量，保证体液循环畅通无阻（当然，最大承载的流量打了折扣）。\n\n就像乐高积木一样，进一步，我们可以把若干组件聚合起来，实现某个目的，这就构成了应用（application）或者子系统（sub-system）。应用的表现形式是一个由若干目录组成的项目。它的边界由它的名字，使用的资源（比如端口）以及应用的入口（比如 main 函数）组成。应用类似于生物体中的系统，比如下图的循环系统：\n![image.png](https://raw.githubusercontent.com/fw6/assets/main/toy_docs/20230821161501.png)\n\n再往上，若干个应用组成了一个解决方案（solution），为某个业务目的保驾护航。解决方案就像一个完整的生物体，它的边界大到一份复杂的商业蓝图，小到 iOS 上的一个工具软件。类比于一个完整的生物体，当我们做一个解决方案时，我们要界定它的子系统，哪些应该是：\n- dummy system - 就像我们的呼吸系统一样，风雨无阻，就连睡觉也会自动工作。我能想到的例子有，日志系统，监控系统，错误报告系统等。\n- intelligent system - 就像我们的免疫系统一样，根据外部的变化而应对之。这样的 system 一般在 behavior based reaction system 中，如 firewall，dynamic user classification 中使用。\n- C&C system - command and control，就像我们的大脑一样，发号施令，控制整个机体的行为。前几年 热络的 SDN 中的 S 就是这个东东。\n\n![image.png](https://raw.githubusercontent.com/fw6/assets/main/toy_docs/20230821161643.png)\n\n## Concurrency\n\nConcurrency VS. Parallelism:\n- Concurrency同时处理很多事情；Parallelism同时做很多事情；\n- Concurrency关于结构；Parallelism关于执行；\n- 以并发方式构建解决方案，可免费获得并行性。\n\n常见并发模型：\nlock based concurrency，locks/semaphore/mutex。\n产生的问题：\n- 需要太多锁\n- 容易产生错误的锁\n- 需要保证锁的顺序\n- 错误恢复\n- 能以组合\n\nCSP。顺序执行；通过channels同步通信；交替复用通道\n>Do not communicate by sharing memory; instead, share memory by communicating.\n>— Effective Go\n\n\nActor Model。称为进程的轻量级对象；没有共享数据；消息保存在mailbox中并按序处理。与CSP相比：\n- 没有匿名的processes\n- 点对点通信\n- 消息传递是异步的\n- 传递大数据时性能较差\n\n\nSTM：Future（Promise/Observable...）\n>Future: An object that hold data which is not resolved immediately.\n\n[GitHub - tc39/proposal-observable: Observables for ECMAScript](https://github.com/tc39/proposal-observable)\n\n:::tip\n\n飞猪论的进一步讨论:\n> 第一层是什么样的风口是风口？第二层是你赌对了风口，风口来了，鸡犬升天后为何你升的最快？第三层则是风停了，你为何不掉下来，你的核心业务和核心壁垒到底是什么？好风凭借力，送我上青云的境遇人人心中都有，但为何又落在你头上。\n\n:::\n\n\n## 技术债：人的因素\n\n在维基百科中，技术债是这么定义的：\n\n> Technical debt is a concept in software development that reflects the implied cost of additional rework caused by choosing an easy (limited) solution now instead of using a better approach that would take longer.\n\n所以我们可以把技术债看做是一种捷径 —— 一种带来短期利益（交付期更短）但需要未来花费更多时间弥补的技术捷径。\n\n技术债分成几个部分：1) 架构和设计上的技术债 2) 代码实现层引入的技术债 3) 软件测试的技术债 4) 文档技术债。\n\n开发者是否对已有系统有足够的了解，往往决定了这个功能的质量。\n\n正因为人的因素在软件开发的各个环节中如此重要，为了减少不必要的技术债的产生，最好的方法是不断招募足够优秀的人才，进行合适的培训，并且给予他们最大的上下文来处理要处理的问题；同时，不断优化和自动化开发流程，使得每一次新的 commit，引入的熵尽可能少。","src/content/blog/200-Learning/210-Programing/《程序人生》.md","dd19598cbf25f5dc",{"html":833,"metadata":834},"\u003Cblockquote>\n\u003Cp>生命不在于你活了多少日子，而是你记住了多少日子。\u003C/p>\n\u003C/blockquote>\n\u003Ch2 id=\"toc\">TOC\u003C/h2>\n\u003Cul>\n\u003Cli>\u003Ca href=\"#%E4%B8%A4%E4%B8%87%E5%AD%97%E9%95%BF%E6%96%87%E8%81%8A%E8%81%8A%E7%A8%8B%E5%BA%8F%E4%BA%BA%E7%94%9F\">两万字长文：聊聊程序人生\u003C/a>\n\u003Cul>\n\u003Cli>\u003Ca href=\"#%E6%88%91%E6%83%B3%E7%8B%AC%E7%AB%8B%E5%AE%8C%E6%88%90%E4%B8%80%E4%B8%AA%E4%BA%A7%E5%93%81%E6%8A%80%E6%9C%AF%E4%B8%8A%E8%AF%A5%E6%80%8E%E4%B9%88%E6%8F%90%E5%8D%87\">我想独立完成一个产品，技术上该怎么提升？\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#%E6%80%8E%E4%B9%88%E6%89%BE%E5%88%B0%E5%A5%BD%E7%8E%A9%E7%9A%84%E9%A1%B9%E7%9B%AE\">怎么找到好玩的项目？\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#%E7%9C%8B%E8%BF%87%E7%9A%84%E6%88%96%E8%80%85%E5%AD%A6%E8%BF%87%E7%9A%84%E6%8A%80%E6%9C%AF%E5%A6%82%E4%BD%95%E5%9C%A8%E9%9C%80%E8%A6%81%E7%9A%84%E6%97%B6%E5%80%99%E6%89%BE%E5%9B%9E%E6%9D%A5\">看过的或者学过的技术，如何在需要的时候找回来？\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#%E5%A6%82%E4%BD%95%E5%AE%9A%E4%B9%89%E6%90%AC%E7%A0%96%E5%A6%82%E4%BD%95%E5%BD%A2%E6%88%90%E5%8F%8D%E6%90%AC%E7%A0%96%E7%9A%84%E6%96%87%E5%8C%96\">如何定义搬砖？如何形成反搬砖的文化？\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#%E5%A6%82%E4%BD%95%E5%A4%84%E7%90%86%E6%9C%89%E9%99%90%E7%9A%84%E8%B5%84%E6%BA%90%E5%92%8C%E4%BA%A7%E5%93%81%E8%B4%A8%E9%87%8F%E4%B9%8B%E9%97%B4%E7%9A%84%E5%86%B2%E7%AA%81\">如何处理有限的资源和产品质量之间的冲突？\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#%E5%9B%A2%E9%98%9F%E5%81%9A%E5%A4%A7%E4%BA%BA%E6%89%8D%E5%AF%86%E5%BA%A6%E6%98%AF%E8%82%AF%E5%AE%9A%E4%B8%8B%E9%99%8D%E7%9A%84%E4%B8%8D%E8%83%BD%E8%A6%81%E6%B1%82%E4%BA%BA%E4%BA%BA%E9%83%BD%E6%9C%89%E4%B8%BB%E4%BA%BA%E7%BF%81%E7%9A%84%E5%BF%83%E8%83%BD%E4%B8%8D%E8%83%BD%E7%94%A8%E7%B2%BE%E7%BB%86%E7%9A%84%E6%B5%81%E7%A8%8B%E6%9D%A5%E9%81%BF%E5%85%8D%E6%90%AC%E7%A0%96\">团队做大，人才密度是肯定下降的，不能要求人人都有主人翁的心，能不能用精细的流程来避免搬砖？\u003C/a>\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\u003Ca href=\"#%E5%AE%A2%E6%88%B7%E7%AB%AF%E8%BD%AF%E4%BB%B6%E7%9A%84%E8%BD%AE%E5%9B%9E%E6%9B%B4%E5%A5%BD%E8%BF%98%E6%98%AF%E6%9B%B4%E7%B3%9F%E7%B3%95\">客户端软件的轮回：更好还是更糟糕？\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#%E6%83%B3%E8%B1%A1%E5%8A%9B%E5%B7%A5%E7%A8%8B%E6%96%B9%E6%B3%95%E4%BB%A5%E5%8F%8A%E5%8F%96%E8%88%8D\">想象力，工程方法以及取舍\u003C/a>\n\u003Cul>\n\u003Cli>\u003Ca href=\"#%E5%A6%82%E4%BD%95%E4%BF%9D%E8%AF%81-single-source-of-truth%E4%BB%A5%E4%B8%8B%E7%AE%80%E7%A7%B0-sst\">如何保证 single source of truth（以下简称 SST）?\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#%E9%80%9A%E8%BF%87%E8%BF%AD%E5%8A%A0%E8%BF%99%E4%BA%9B%E4%BA%8B%E4%BB%B6%E5%BE%97%E5%88%B0%E6%9C%80%E7%BB%88%E4%B8%80%E8%87%B4%E7%9A%84%E7%8A%B6%E6%80%81\">通过迭加这些事件，得到最终一致的状态?\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3%E5%86%B2%E7%AA%81\">如何解决冲突？\u003C/a>\n\u003Cul>\n\u003Cli>\u003Ca href=\"#ot\">OT\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#crdt\">CRDT\u003C/a>\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\u003Ca href=\"#%E7%BB%A7%E7%BB%AD%E6%94%BE%E9%A3%9E%E6%83%B3%E8%B1%A1%E5%8A%9B\">继续放飞想象力\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#%E5%8F%96%E8%88%8Dtrade-off\">取舍（Trade off）\u003C/a>\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\u003Ca href=\"#%E6%BF%80%E8%8D%A1%E4%BA%8C%E5%8D%81%E5%B9%B4http-api%E7%9A%84%E5%8F%98%E8%BF%81\">激荡二十年：HTTP API的变迁\u003C/a>\n\u003Cul>\n\u003Cli>\u003Ca href=\"#2005%E5%B9%B4%E4%B9%8B%E5%89%8Dapi-%E7%9A%84%E7%8B%82%E9%87%8E%E8%A5%BF%E9%83%A8\">2005年之前：API 的狂野西部\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#2005-2010%E4%BB%8E%E6%B7%B7%E6%B2%8C%E5%88%B0%E6%9C%89%E5%BA%8F--ruby-on-rails-%E6%A8%AA%E7%A9%BA%E5%87%BA%E4%B8%96\">2005-2010：从混沌到有序 — Ruby on Rails 横空出世\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#2010-2015%E7%A7%BB%E5%8A%A8%E4%BA%92%E8%81%94%E7%BD%91--api-%E9%A3%9E%E4%B8%8A%E6%9E%9D%E5%A4%B4%E5%8F%98%E5%87%A4%E5%87%B0\">2010-2015：移动互联网 — API 飞上枝头变凤凰\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#2015-2020%E7%B1%BB%E5%9E%8B%E5%AE%89%E5%85%A8--%E6%96%B0%E7%9A%84%E5%85%B1%E8%AF%86\">2015-2020：类型安全 — 新的共识\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#2020-%E8%87%B3%E4%BB%8A%E4%BD%8E%E4%BB%A3%E7%A0%81%E6%97%B6%E4%BB%A3--api-%E4%BD%95%E5%8E%BB%E4%BD%95%E4%BB%8E\">2020-至今：低代码时代 — API 何去何从？\u003C/a>\n\u003Cul>\n\u003Cli>\u003Ca href=\"#postgrest\">postgREST\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#hasura\">Hasura\u003C/a>\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\u003Ca href=\"#%E6%80%9D%E8%80%83%E9%97%AE%E9%A2%98%E5%92%8C%E6%96%B9%E6%B3%95\">思考，问题和方法\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#%E8%B0%88%E8%B0%88%E8%BE%B9%E7%95%8C\">谈谈边界\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#concurrency\">Concurrency\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#%E6%8A%80%E6%9C%AF%E5%80%BA%E4%BA%BA%E7%9A%84%E5%9B%A0%E7%B4%A0\">技术债：人的因素\u003C/a>\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"两万字长文聊聊程序人生\">两万字长文：聊聊程序人生\u003C/h2>\n\u003Cp>\u003Ca href=\"https://mp.weixin.qq.com/s/Ctc_Gs65Q0_ekqdikP45lw\">https://mp.weixin.qq.com/s/Ctc_Gs65Q0_ekqdikP45lw\u003C/a>\u003C/p>\n\u003Ch3 id=\"我想独立完成一个产品技术上该怎么提升\">我想独立完成一个产品，技术上该怎么提升？\u003C/h3>\n\u003Col>\n\u003Cli>对自己的定位。个人独立完成，还是只是前端工程师、后端工程师\u003C/li>\n\u003Cli>要带着问题去学习\n\u003Cul>\n\u003Cli>发现缺失的很多知识点，怎么弥补？\u003C/li>\n\u003Cli>开发中使用什么架构？\u003C/li>\n\u003Cli>前端开发领域如何做技术选型？\u003C/li>\n\u003Cli>后端技术栈如何抉择？\u003C/li>\n\u003Cli>…\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>吸收和消化为了解决具体问题而寻找的助力，内化成自己的东西\n边做边学，边做边探索，然后总结，内化\u003C/li>\n\u003C/ol>\n\u003Ch3 id=\"怎么找到好玩的项目\">怎么找到好玩的项目？\u003C/h3>\n\u003Cul>\n\u003Cli>涉及到信息来源的问题\u003C/li>\n\u003Cli>逛个两三次 hacker news 和 Github trending（or followers’s stars）、看一看各个开发者聚集的地方如Reddit相关主题贴、一些公众号\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"看过的或者学过的技术如何在需要的时候找回来\">看过的或者学过的技术，如何在需要的时候找回来？\u003C/h3>\n\u003Cp>在开始看某个东西时，如果觉得未来在某个场景下会去使用它，会在笔记的对应的主题下面\u003C/p>\n\u003Cp>比如说我在 Github 上 Star 了很多很有意思的做搜索的项目，比如说现在在 Rust 上面比较火的一个叫 meilisearch，一个叫 Sonic，这些东西我现在并不需要，所以我现在可能不见得会用到他们，但是我会放在搜索的主题下面，下次我要深入了解探索这个方向的时候，那么可能会深入探索。\u003C/p>\n\u003Cp>不光是 Github repo，还有我在 Youtube 和 B 站上看过的视频，我都会放在专门的页面里面，做成 database。\u003C/p>\n\u003Cp>如果多少年之后成为一个什么样的人，比如架构师，那么其实你需要做的就是你平时对你所用的东西，你感兴趣的东西，保持一份好奇心：你看到一个一个产品，就要去想这个产品背后的逻辑是什么，它的功能是怎么样实现的。如果我自己要实现的话， 这一块功能，那块功能我该用什么样的工具实现，我是自己实现，还是我拿第三方工具，我有哪些工具可以使用。这样你就可以把平日里看到的东西和你的思路串联起来。\u003C/p>\n\u003Cp>你可以顺便多想一些，比如：如果真得要实现的话，实现到一个什么样的程度，大概花多少钱？这些东西我觉得可以反复可以在自己的脑海里面去探索，你不一定去做，因为很多时候我们遇到的东西太多了，真正值得你去深入下面去做的，一年可能也就是两三个，因为你的时间精力毕竟有限。\u003C/p>\n\u003Cp>大部分的时候你即便不做，你可以去想，因为想本身想的过程就本身已经足够好了，因为你在思考的时候你会你会遇到问题，这个问题即便你不是去写代码解决，你也可以通过去搜索，你可以去看看别人是别人的解决方案是什么，甚至你可以对这个产品本身做 reverse engineering，去验证你的想法和人家做的是不是一样。\u003C/p>\n\u003Cp>这些东西其实都是你在思考，你在使用 reverse engineering 的时候，你会发现这是一个问题，他没有解决好。那我该怎么样解决呢？我的方法是不是好，如果好为什么好，如果不好的话，还有什么更好的解决办法等等。这个循环往复的过程会让你的进步会很快，很多人说我在大公司里面或者在公司里面，我作为一个程序员就是一颗螺丝钉，每天能接触的事情就那么一点，那是因为很多时候有一个更广阔的世界我们可能还没有去发现。\u003C/p>\n\u003Ch3 id=\"如何定义搬砖如何形成反搬砖的文化\">如何定义搬砖？如何形成反搬砖的文化？\u003C/h3>\n\u003Cp>搬砖与否，因为其实我觉得很多公司的，程序员都会有这样的感慨，就是我的工作好像就是在搬砖，我的工作好像就是在被动处理产品经理的想法，他们不管最终这个产品本身会给技术带来多少的技术债，都要求必须要在规定的时间，以规定的方式来完成，这就会让大家产生一种搬砖的无力感。我觉得这是很多公司在文化上面形成的一种氛围，很多时候需要靠时间来慢慢去把它改变。\u003C/p>\n\u003Cp>第一个对我们所做的事情，不光知其然，还知其所以然。\u003C/p>\n\u003Cblockquote>\n\u003Cp>希望我们招的工程师，或者说我们的工程师本身要有极大的热情，想成为一个非常牛逼的工程师。怎么叫牛逼的工程师，我觉得这可能也是我们每一个技术人应该去追寻的方向，\u003C/p>\n\u003C/blockquote>\n\u003Cp>第二个就是你要对你所做的，领域产品有强烈的主人翁的意识，ownership，就说这个东西好像就像我的孩子一样，我不知道大家有多少有孩子，你对你的孩子付出的努力跟对，别人家的孩子付出的努力，那是完全不是一个概念的。\u003C/p>\n\u003Cp>第三个就是你的方案，你提出来的方案一定是要能够，落地，能够交付的这样一个解决方案，不是天马行空的画一个大的 picture，画一个非常酷的 architect，最后谁落地，反正我就提方案你们来落地，我们不需要这样的人。\u003C/p>\n\u003Cp>第四个就是你要对产品中的槽点要零容忍，你的产品经理提出来的一些不合理的产品的需求，你要能给他打回去，你如果打不回去，你要能让你的经理去打回去。当然你要有充足的理由，充足的数据来说明这个事情不对。\u003C/p>\n\u003Cp>第五个就是你对重复的任务和bug是一种零容忍的态度，我们工程师为什么会产生一种搬砖的感觉，除了刚才讲的产品上面你有很多问题，你无力去打破，还有一个在工作中我们可能有太多不停重复的任务，因为产品的需求截止日期太严苛，导致于我们只能着眼于以现在，没办法着眼于未来，没办法把这个东西抽象在一个更高的层次上面去抽象，把它做成某一个service，或者做成一个就是能涵盖包含了这个场景下面一系列场景的解决方案。\u003C/p>\n\u003Cp>第六点是：当你成为某个领域的专家之后，你应该还是保持一个非常开放的心态，随时愿意切换你的技术栈和方法论。你不会去抗拒任何不同的思想。比如说我是一个函数式编程的粉丝，我就鄙视一切面向过程编程的所有的方法论；我是一个 react 的开发者，我就对 vue 充满了不屑和鄙视，认为它是初级程序员的专利，是那些理解不了 react 的人才会写的东西。我觉得我们程序员不应该有这样的心态，我们还是要像小王子里面说的那样，像一个小孩子一样，对什么东西都保持天然的好奇心，愿意把自己的那些「星星」都放到天空中，而不是把它包裹起来藏得很深。所以有必要的话你应该愿意去切换技术栈，切换方法论，有更好的方法，你会愿意去尝试，你会愿意去用数据来说服自己和别人：这个东西值得我们去去投入。\u003C/p>\n\u003Cp>最后一点是你要总是能够让你的团队变得更强。你自己强还不够，你怎么样能用你自己的强大，你的影响力，无论是技术的影响力还是其他方面的影响力，让你周围的人变得更强。\u003C/p>\n\u003Cp>工程师需要足够的时间去内化他所学的东西，去深度地考虑产品，在无数个可能的解决方案中去寻找潜在的最好的方案。\u003C/p>\n\u003Cp>所以这是一个悖论，就是产品的需求，我明天后天下周我就要这么个东西，而很多时候不是你给我一个固定的时间，我就能把这个事情完成的。而且一旦你给了我一个固定的时间，我能采用的方案，大概率是众多的方案中不那么好的，或者说仅仅是为了解决问题而解决问题的方案。在这种时间的压力下，会导致工程师没有安全感，因为我没有时间去充分思考，我没有时间去探索，产品中有无数的bug，我没有时间去处理，我没有时间去追根跑底，我只能去一个的想办法把它绕过它，找一个「快而脏」，而不是一个终极的解决办法去敷衍。所以这需要时间，需要给工程师一个足够足够长的时间去来出来消化这个东西，让工程师足够有足够的权威，能够 push back，说这个东西我觉得不合理，你产品还没想清楚，你想清楚了之后在跟我谈，为什么我说你没想清楚，因为 case1，case2，case3 等等这些东西你没有考虑到，这些场景下我们该怎么样去处理，你没有想，所以这个东西我不能做。这是很多国内的公司还缺乏的一种文化：就是工程师来能够对产品说 NO。因为不能说 NO，所以 996甚至 007 也要把它弄完。这其实是一个是一个很折磨人的过程，这对我们工程师来讲，成长是不利的；长远来讲，短期公司得到的一些利益，长远可能也不见得那么有利。\u003C/p>\n\u003Ch3 id=\"如何处理有限的资源和产品质量之间的冲突\">如何处理有限的资源和产品质量之间的冲突？\u003C/h3>\n\u003Cp>大部分的决策我们要去去讨论的，是 why，为什么我们要做这件事情，这件事情做出来之后对我们的好处是什么，很多时候公司的 CEO 也会拍脑门做一些决定，不见得 CEO 做的决定都是对的，有可能其中 40% 能被我们挡掉，但剩下的60%，无论如何是不得不做的，并且它是有一些截止日期的压力，比如说你要为了某个事件，在这个事件之前，我必须要做出来某个产品的 feature，甚至某个产品来应对这个事件，因为我知道这样的时机一旦错过，可能下一个几年才能遇到的东西。这个时候我们如果说商业决策想清楚了，ROI 都算好了，那就是一个调动资源的问题，这个东西我们要评估它的 scope 有多大，有多少资源可以去使用，我们愿意为它付出多少代价，这个代价不光是内部的，还有外部的。如果自己做受限于资源无法做到更加稳定，那么可不可以找付费的供应商去做？\u003C/p>\n\u003Cp>我觉得是当我们有一些截止日期不得不去满足的时候，我们从工程师从 CTO 或者技术骨干的角度，我们需要去考虑：有些东西我们是不是这个时刻必须要自研？就像clubhouse这样，我的核心的功能是什么，我怎么样去调配我的核心资源去做我的核心功能，把不那么核心的功能，我如果能多花一些钱就能解决的，是不是可以先把它在这个时刻用第三方服务解决？因为所有技术我一起上的话，以我现在的资源就是满足不了这个日程。所以这是一个博弈的过程，你需要跟做商业决策的那些stakeholder，比如说CEO要去博弈这些东西，你可以提出一些技术的解决方案，你说 ok 为了做这么一个东西，我需要用这些第三方服务，这些服务如果用户量级在这个程度下一个月的cost是多少。我把这个东西列出来，如果 CEO 不同意，那么我们需要这么多资源，并且我没办法保证能在日程截止之前我能完成这样的东西。这就是一个博弈的过程，需要讨价还价。不是说什么东西，别人说 ok 我就要做，我就让我手下的这兄弟们拼命地加班，没日没夜的去做这个东西。这样子长久不了，可能还会带来很多的技术债。\u003C/p>\n\u003Ch3 id=\"团队做大人才密度是肯定下降的不能要求人人都有主人翁的心能不能用精细的流程来避免搬砖\">团队做大，人才密度是肯定下降的，不能要求人人都有主人翁的心，能不能用精细的流程来避免搬砖？\u003C/h3>\n\u003Cp>我觉得讨论就是大家和而不同，我赞同你里面的很多观点，也不赞同里面的一些观点，比如说我赞同人才密度降低这件事情，就是当你公司做大人才密度肯定，是以指数级下降，很难去避免。怎么样去尽量让下降的速度慢一些呢？我觉得一个很好的方式是通过文化来保证，你怎么样通过同一种文化的感召力去召唤那些认同你的文化的人进入到你的公司。这里相关的东西我就不展开来谈了。我稍微不太认同的是过于严谨的规则。每个公司都有一堆的规章制度，有一堆的流程，这无可厚非。\u003C/p>\n\u003Cp>流程应该是能被自动化的东西，它不需要你去学习和遵循，工具本身就帮助你准守流程了。\u003C/p>\n\u003Cp>比如说当你的代码提交之后，有一堆的 pre commit check，要去check你的代码风格对不对，你是不是过了静态检查，是不是过了单元测试，所有这些都通过后才会允许你提交代码。你 push 上去的时候会有一堆的 github action 去执行，去从各个维度去看你这个代码，是不是符合足够质量的，是不是破坏了现有的 code coverage 等等。这些东西不应该是写成文字去，让每个工程师去遵守的，而是就在你的工具链里，在你的公司的日常运作的过程中，自然而然地去使用规则和流程约束每个工程师的行为。而且越好的团队你会发现自动化的流程越多，就像我们写代码一样，框架是干什么的，框架就是一堆东西来限制开发者的行为，让我们有所为有所不为。为什么我们要做信息隐藏，为什么我们要去做各种各样的解耦，为什么我们要去使用各种各样的设计模式，这些其实都是流程，这些流程都是刻在我们平时开发者骨子里的流程。我觉得这些自然而然发生的流程，是最好的流程。\u003C/p>\n\u003Cp>从另外一个角度来讲，我觉得真正的人才，如果真的把程序员看做艺术家的话，我们很难用规则去来框定它，就像截止日期件事情，如果说你毕加索在 10 天之内画出来某幅指定要求的画，那么毕加索可能画出来的，就跟我们普通的一个画师画出来的是一样的东西。梭罗在瓦尔登湖里面，讲过一句话，我特别喜欢，他说：能维持一只兔子生活的田野一定是贫瘠无比的，我觉得好的公司它就是好的公司，不好的公司它就是不好的公司，很多公司大了之后，它可能只是比小的时候没有那么，好而已，但它依旧是好的公司，好的公司很多公司它很小的时候，就跟上可能不是一个好的公司，它大了之后也一定不会是一个好的公司。\u003C/p>\n\u003Ch2 id=\"客户端软件的轮回更好还是更糟糕\">客户端软件的轮回：更好还是更糟糕？\u003C/h2>\n\u003Cp>对 SaaS 软件的愿景\u003C/p>\n\u003Cul>\n\u003Cli>客户端软件可以真正做到数据的 local first，云端的数据更像是一个数据的超集或者备份。\u003C/li>\n\u003Cli>当数据 local first 后，对数据的各种操作（聚合，过滤，查询等）都可以利用本地 CPU 的强悍性能直接处理，而无需跨过网络。\u003C/li>\n\u003Cli>协同工作，对公司（组织，团队等）内部的人员来说，由权限系统以及要同时处理某一个文档或者数据的 N 个人（设备）之间的可信共识（比如 raft concensus）处理即可 —— 这应该是绝大多数的使用场景；如果参与者不可信，可以考虑使用不可信共识（比如 BFT consensus）。\u003C/li>\n\u003Cli>如果能进一步，刨除服务器（或者服务器仅仅做备份的功用），完全去中心化，那将更加美妙，不过在资本市场这个故事很难讲好（需要新的估值模型）。\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"想象力工程方法以及取舍\">想象力，工程方法以及取舍\u003C/h2>\n\u003Cp>\u003Ca href=\"https://mp.weixin.qq.com/s/3OlEBl9ybiNQ2s328DVCEQ\">https://mp.weixin.qq.com/s/3OlEBl9ybiNQ2s328DVCEQ\u003C/a>\u003C/p>\n\u003Ch3 id=\"如何保证-single-source-of-truth以下简称-sst\">如何保证 single source of truth（以下简称 SST）?\u003C/h3>\n\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/fw6/assets/main/toy_docs/20230814140759.png\" alt=\"image.png\">\n在分布式系统里，能被正确用作 SST 的只有事件（event，或者 operation）。从整个应用的角度，主流的思想是把广义的数据库（RDBMS，DDBMS，kv store，object store）作为 SST，这无可厚非，但我们不能因此推断出数据库就等同于 SST，或者得出结论没有数据库就没有 SST。从数据库的角度看，数据库里存储的数据（状态）并不是 SST，数据库的 SST 是一个个的 op —— 你可以理解为增删改的动作 —— 它们就是一个个事件。这是最原始，也最容易在集群中复制的信息，数据库的状态可以通过这些 oplog/WAL 按顺序迭加恢复出来。\u003C/p>\n\u003Cp>在 web app 里，我们在更高的层次实现业务逻辑，因此可以把数据库里的数据（状态）作为 SST。因为我们知道，不管数据库的实现是强一致性，还是弱一致性，它们都能保证最终一致性（当更新停止时，最终所有的数据库节点都能聚合到同样的数据）。而保证了最终一致性的数据库，就有资格被当做 SST。\u003C/p>\n\u003Cp>当我们把数据下放到每个客户端时，每个客户端其实可以被看做所有客户端维护的数据库系统的一个节点。上图中一个个 list，就是状态。我们的目标是这些状态的最终一致性。而根据数据库的思路，SST 是事件 —— 用户对 list 的各种操作。这些事件主要有：\u003C/p>\n\u003Cul>\n\u003Cli>在 list 里添加一个新的数据项\u003C/li>\n\u003Cli>修改一个已有的数据项\u003C/li>\n\u003Cli>删除一个已有的数据项\u003C/li>\n\u003Cli>移动一个已有的数据项\u003C/li>\n\u003C/ul>\n\u003Cp>我们如果能在所有参与的节点中确保所有的事件都被正确扩散，那么，通过迭加这些事件，我们可以得到最终一致的状态。\u003C/p>\n\u003Ch3 id=\"通过迭加这些事件得到最终一致的状态\">通过迭加这些事件，得到最终一致的状态?\u003C/h3>\n\u003Cp>「不可能先生」的头几个质疑：\u003C/p>\n\u003Col>\n\u003Cli>网络不稳定，事件有可能丢；\u003C/li>\n\u003Cli>事件到达不同客户端的顺序可能不一致。\u003C/li>\n\u003C/ol>\n\u003Cp>假设我们有办法做到不丢事件，并且保持同样的事件顺序。所有的客户端的状态都可以被描述成（S 代表状态，E 代表事件，+ 代表事件叠加）：\n\u003Cimg src=\"https://raw.githubusercontent.com/fw6/assets/main/toy_docs/20230814141201.png\" alt=\"image.png\">\u003C/p>\n\u003Cp>不丢事件如何保证？\u003C/p>\n\u003Cul>\n\u003Cli>如果用中心化的解决方法，可以引入一个 message queue（其实变相引入了 raft 这类 CFT 共识算法）\u003C/li>\n\u003Cli>如果去中心化的解决方案，需要引入类似区块链技术使用的共识机制来确保顺序（区块链的区块，实质上是一个全局时钟，它用来提供一致的事件顺序\u003C/li>\n\u003C/ul>\n\u003Cp>要求所有的客户端都看到顺序一致的事件？\u003C/p>\n\u003Cul>\n\u003Cli>事件到了服务器之后被排序，客户端需要按照服务器要求的顺序生成状态。\n不仅仅要支持迭加的操作（+），还需要支持回滚（-）\n产生了新的问题\u003Cspan role=\"img\" aria-label=\"person raising hand\">🙋\u003C/span>，如何解决冲突？先按下不表\u003C/li>\n\u003C/ul>\n\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/fw6/assets/main/toy_docs/20230814141801.png\" alt=\"image.png\">\u003C/p>\n\u003Cp>如何确保不同客户端看到的数据一致？\u003C/p>\n\u003Col>\n\u003Cli>list 里所有数据都有全局唯一的 id。这里我们用 task1, task2, …。数据的 id 中包含客户端的 id。\u003C/li>\n\u003Cli>每个数据有一个指针，指向前一个数据，以便于我们定位其相对位置，移动数据的时候，我们需要更新这个指针来保持数据的相对位置。\u003C/li>\n\u003Cli>id 之间是可以比较的，比如上图 A 和 B 都在 task5 之后插入了一个新的 item，我们定义 b6 > a6 的比较关系（这个无所谓，也可以 a6 > b6），这样，task_b6 的前一个数据是 task5，而 task_a6 的前一个数据 task_b6。\u003C/li>\n\u003C/ol>\n\u003Ch3 id=\"如何解决冲突\">如何解决冲突？\u003C/h3>\n\u003Cp>幸运的是，目前已经有很多已知的算法来解决在线协作的问题。其中典型的两种算法是 OT（Operational Transformation）和 CRDT（Conflict-free Replicated Data Types）。\u003C/p>\n\u003Caside class=\"callout callout-tip\">\u003Cdiv class=\"callout-indicator\">\u003Cdiv class=\"callout-hint\">\u003Csvg viewBox=\"0 0 24 24\" width=\"24\" height=\"24\" fill=\"currentColor\" class=\"callout-hint-tip\">\u003Cpath fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M1.43909 8.85483L1.44039 8.85354L4.96668 5.33815C5.30653 4.99386 5.7685 4.79662 6.2524 4.78972L6.26553 4.78963L12.9014 4.78962L13.8479 3.84308C16.9187 0.772319 20.0546 0.770617 21.4678 0.975145C21.8617 1.02914 22.2271 1.21053 22.5083 1.4917C22.7894 1.77284 22.9708 2.13821 23.0248 2.53199C23.2294 3.94517 23.2278 7.08119 20.1569 10.1521L19.2107 11.0983V17.7338L19.2106 17.7469C19.2037 18.2308 19.0067 18.6933 18.6624 19.0331L15.1456 22.5608C14.9095 22.7966 14.6137 22.964 14.29 23.0449C13.9663 23.1259 13.6267 23.1174 13.3074 23.0204C12.9881 22.9235 12.7011 22.7417 12.4771 22.4944C12.2533 22.2473 12.1006 21.9441 12.0355 21.6171L11.1783 17.3417L6.65869 12.822L4.34847 12.3589L2.38351 11.965C2.05664 11.8998 1.75272 11.747 1.50564 11.5232C1.25835 11.2992 1.07653 11.0122 0.979561 10.6929C0.882595 10.3736 0.874125 10.034 0.955057 9.7103C1.03599 9.38659 1.20328 9.09092 1.43909 8.85483ZM6.8186 10.8724L2.94619 10.096L6.32006 6.73268H10.9583L6.8186 10.8724ZM15.2219 5.21703C17.681 2.75787 20.0783 2.75376 21.1124 2.8876C21.2462 3.92172 21.2421 6.31895 18.783 8.77812L12.0728 15.4883L8.51172 11.9272L15.2219 5.21703ZM13.9042 21.0538L13.1279 17.1811L17.2676 13.0414V17.68L13.9042 21.0538Z\">\u003C/path>\u003Cpath d=\"M9.31827 18.3446C9.45046 17.8529 9.17864 17.3369 8.68945 17.1724C8.56178 17.1294 8.43145 17.1145 8.30512 17.1243C8.10513 17.1398 7.91519 17.2172 7.76181 17.3434C7.62613 17.455 7.51905 17.6048 7.45893 17.7835C6.97634 19.2186 5.77062 19.9878 4.52406 20.4029C4.08525 20.549 3.6605 20.644 3.29471 20.7053C3.35607 20.3395 3.45098 19.9148 3.59711 19.476C4.01221 18.2294 4.78141 17.0237 6.21648 16.5411C6.39528 16.481 6.54504 16.3739 6.65665 16.2382C6.85126 16.0016 6.92988 15.678 6.84417 15.3647C6.83922 15.3466 6.83373 15.3286 6.82767 15.3106C6.74106 15.053 6.55701 14.8557 6.33037 14.7459C6.10949 14.6389 5.84816 14.615 5.59715 14.6994C5.47743 14.7397 5.36103 14.7831 5.24786 14.8294C3.22626 15.6569 2.2347 17.4173 1.75357 18.8621C1.49662 19.6337 1.36993 20.3554 1.30679 20.8818C1.27505 21.1464 1.25893 21.3654 1.25072 21.5213C1.24662 21.5993 1.24448 21.6618 1.24337 21.7066L1.243 21.7226L1.24235 21.7605L1.2422 21.7771L1.24217 21.7827L1.24217 21.7856C1.24217 22.3221 1.67703 22.7579 2.2137 22.7579L2.2155 22.7579L2.22337 22.7578L2.23956 22.7577C2.25293 22.7575 2.27096 22.7572 2.29338 22.7567C2.33821 22.7555 2.40073 22.7534 2.47876 22.7493C2.63466 22.7411 2.85361 22.725 3.11822 22.6932C3.64462 22.6301 4.36636 22.5034 5.13797 22.2464C6.58274 21.7653 8.3431 20.7738 9.17063 18.7522C9.21696 18.639 9.26037 18.5226 9.30064 18.4029C9.30716 18.3835 9.31304 18.364 9.31827 18.3446Z\">\u003C/path>\u003C/svg>\u003C/div>\u003Cdiv class=\"callout-title\">Tip\u003C/div>\u003C/div>\u003Cdiv class=\"callout-content\">\u003Cp>一篇很不错的文章，来自国内AlloyTeam的\u003Ca href=\"https://mp.weixin.qq.com/s/nvh-z61vWGlv_lbCrjZ59w\">协同编辑冲突处理算法综述\u003C/a>\u003C/p>\u003C/div>\u003C/aside>\n\u003Ch4 id=\"ot\">OT\u003C/h4>\n\u003Cp>OT 是一个思路简单，但实现复杂的算法，其基本思想是，不同的节点在收到不同顺序的事件（在 OT 下是 operation）时，将后续的 OP 进行 transform，使其能够分别聚合出相同的状态，如下图：\n\u003Cimg src=\"https://raw.githubusercontent.com/fw6/assets/main/toy_docs/20230814142057.png\" alt=\"image.png\">\n那么谁来做这个 transformation 呢？服务器。Peer1 和 peer2 在执行了自己的操作 OP1 和 OP2 后，将操作通过服务器发送给对端，服务器根据收到的 OP，可以确定一个唯一的顺序，也就是能够确定一个唯一的最终状态，然后服务器再根据每个客户端的不同情况，对将要转发给客户端的 OP（对于 pper1 是 OP2，对于 peer2 是 OP1）进行相应的 transformation，然后发送之。这样，客户端在接收到修改后的 OP 后，可以生成和服务器一致的状态。\u003C/p>\n\u003Ch4 id=\"crdt\">CRDT\u003C/h4>\n\u003Cp>如果说 OT 是一个中心化的解决方案，那么 CRDT 则是一个非中心化的解决方案。\u003C/p>\n\u003Caside class=\"callout callout-tip\">\u003Cdiv class=\"callout-indicator\">\u003Cdiv class=\"callout-hint\">\u003Csvg viewBox=\"0 0 24 24\" width=\"24\" height=\"24\" fill=\"currentColor\" class=\"callout-hint-tip\">\u003Cpath fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M1.43909 8.85483L1.44039 8.85354L4.96668 5.33815C5.30653 4.99386 5.7685 4.79662 6.2524 4.78972L6.26553 4.78963L12.9014 4.78962L13.8479 3.84308C16.9187 0.772319 20.0546 0.770617 21.4678 0.975145C21.8617 1.02914 22.2271 1.21053 22.5083 1.4917C22.7894 1.77284 22.9708 2.13821 23.0248 2.53199C23.2294 3.94517 23.2278 7.08119 20.1569 10.1521L19.2107 11.0983V17.7338L19.2106 17.7469C19.2037 18.2308 19.0067 18.6933 18.6624 19.0331L15.1456 22.5608C14.9095 22.7966 14.6137 22.964 14.29 23.0449C13.9663 23.1259 13.6267 23.1174 13.3074 23.0204C12.9881 22.9235 12.7011 22.7417 12.4771 22.4944C12.2533 22.2473 12.1006 21.9441 12.0355 21.6171L11.1783 17.3417L6.65869 12.822L4.34847 12.3589L2.38351 11.965C2.05664 11.8998 1.75272 11.747 1.50564 11.5232C1.25835 11.2992 1.07653 11.0122 0.979561 10.6929C0.882595 10.3736 0.874125 10.034 0.955057 9.7103C1.03599 9.38659 1.20328 9.09092 1.43909 8.85483ZM6.8186 10.8724L2.94619 10.096L6.32006 6.73268H10.9583L6.8186 10.8724ZM15.2219 5.21703C17.681 2.75787 20.0783 2.75376 21.1124 2.8876C21.2462 3.92172 21.2421 6.31895 18.783 8.77812L12.0728 15.4883L8.51172 11.9272L15.2219 5.21703ZM13.9042 21.0538L13.1279 17.1811L17.2676 13.0414V17.68L13.9042 21.0538Z\">\u003C/path>\u003Cpath d=\"M9.31827 18.3446C9.45046 17.8529 9.17864 17.3369 8.68945 17.1724C8.56178 17.1294 8.43145 17.1145 8.30512 17.1243C8.10513 17.1398 7.91519 17.2172 7.76181 17.3434C7.62613 17.455 7.51905 17.6048 7.45893 17.7835C6.97634 19.2186 5.77062 19.9878 4.52406 20.4029C4.08525 20.549 3.6605 20.644 3.29471 20.7053C3.35607 20.3395 3.45098 19.9148 3.59711 19.476C4.01221 18.2294 4.78141 17.0237 6.21648 16.5411C6.39528 16.481 6.54504 16.3739 6.65665 16.2382C6.85126 16.0016 6.92988 15.678 6.84417 15.3647C6.83922 15.3466 6.83373 15.3286 6.82767 15.3106C6.74106 15.053 6.55701 14.8557 6.33037 14.7459C6.10949 14.6389 5.84816 14.615 5.59715 14.6994C5.47743 14.7397 5.36103 14.7831 5.24786 14.8294C3.22626 15.6569 2.2347 17.4173 1.75357 18.8621C1.49662 19.6337 1.36993 20.3554 1.30679 20.8818C1.27505 21.1464 1.25893 21.3654 1.25072 21.5213C1.24662 21.5993 1.24448 21.6618 1.24337 21.7066L1.243 21.7226L1.24235 21.7605L1.2422 21.7771L1.24217 21.7827L1.24217 21.7856C1.24217 22.3221 1.67703 22.7579 2.2137 22.7579L2.2155 22.7579L2.22337 22.7578L2.23956 22.7577C2.25293 22.7575 2.27096 22.7572 2.29338 22.7567C2.33821 22.7555 2.40073 22.7534 2.47876 22.7493C2.63466 22.7411 2.85361 22.725 3.11822 22.6932C3.64462 22.6301 4.36636 22.5034 5.13797 22.2464C6.58274 21.7653 8.3431 20.7738 9.17063 18.7522C9.21696 18.639 9.26037 18.5226 9.30064 18.4029C9.30716 18.3835 9.31304 18.364 9.31827 18.3446Z\">\u003C/path>\u003C/svg>\u003C/div>\u003Cdiv class=\"callout-title\">Tip\u003C/div>\u003C/div>\u003Cdiv class=\"callout-content\">\u003Cp>文章、播客：\u003C/p>\u003Cul>\n\u003Cli>来自AlloyTeam的公众号文章\u003Ca href=\"https://mp.weixin.qq.com/s/cHqXWL54TKSQjL33JSGQ_w\">Yjs——一个基于CRDT的数据协同框架\u003C/a>\u003C/li>\n\u003Cli>来自Zed代码编辑器团队的博客：\u003Ca href=\"https://zed.dev/blog/crdts\">How CRDTs make multiplayer text editing part of Zed’s DNA\u003C/a>\u003C/li>\n\u003Cli>一个专门介绍CRDT的网站：\u003Ca href=\"https://crdt.tech/\">crdt.tech\u003C/a>\u003C/li>\n\u003C/ul>\u003Cp>相关Repos：\u003C/p>\u003Cul>\n\u003Cli>\u003Ca href=\"https://github.com/automerge/automerge\">GitHub - automerge/automerge: A JSON-like data structure (a CRDT) that can be modified concurrently by different users, and merged again automatically.\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://github.com/y-crdt/y-crdt\">GitHub - y-crdt/y-crdt: Rust port of Yjs\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://github.com/yjs/yjs\">GitHub - yjs/yjs: Shared data types for building collaborative software\u003C/a>\u003C/li>\n\u003C/ul>\u003C/div>\u003C/aside>\n\u003Ch3 id=\"继续放飞想象力\">继续放飞想象力\u003C/h3>\n\u003Cp>我们还以 Notion 为例。一个 Notion 用户可以有多个 workspace。如果数据全部放在本地，以 CRDT 的形式保存成文件，那么一个 workspace 在本地可以存储在一个目录下。根目录下可以存放这个 workspace 下所有用户的基本信息，用一个 automerge 下的 table（姑且简称 amt），存为 user.amt。这个文件里的用户信息，当前用户只能修改自己那一行；workspace 的 owner / admin 可以增删改。用户信息之外，我们还需要一个 permission.amt，存储每个用户在不同上下文下的角色。这样，我们可以使用 oso[7]，通过 RABC 来处理授权。user/permission 相当于 workspace 的 metadata，其它的 metadata（比如配置）我们放下不表。\u003C/p>\n\u003Cp>workspace 承载的是用户的数据。对于目录树，我们可以用一个 workspace.amt 来保存目录树的 CRDT 数据。目录树下有子目录或文件，子目录下有更深的目录或者文件。和文件系统的目录树类似，这里的文件我们放一个引用，然后文件本身有单独的 amt，如 doc4.amt。整个 workspace 的结构如下：\u003C/p>\n\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/fw6/assets/main/toy_docs/20230814142643.png\" alt=\"image.png\">\u003C/p>\n\u003Cp>当用户在 UI 上对某个文档做了一个改动后，这个改动的 \u003Ccode>change\u003C/code> 会从前端界面发送到应用的后端（非服务器的后端）。在应用的后端，automerge backend 对改动进行处理后，会生成一个 patch，提交回 frontend 去 \u003Ccode>apply\u003C/code>。同时，这个改动通过网络（可以是服务器中转，也可以是 p2p 网络）传播出去。比如我们可以使用 libp2p 下的 gossipsub，在某个 topic 下传播。topic 可以是某一个 workspace，只有在这个 workspace 下的用户才能加入到这个 topic 下。当客户端 B 收到这个 \u003Ccode>syncMessage\u003C/code> 后，它会提交给 automerge backend，生成 patch，提交给 frontend \u003Ccode>apply\u003C/code>。\u003C/p>\n\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/fw6/assets/main/toy_docs/20230814142732.png\" alt=\"image.png\">\u003C/p>\n\u003Cp>如果整个系统中有服务器中转事件，那么服务器可以 tap 出一份 amt 作为备份。一个新加入的客户端可以迅速从服务器拿到整个历史记录，进而参与到 workspace 的协作中。如果整个系统中没有服务器中转事件，使用的是 p2p 网络，那么服务器可以充当 p2p 网络中的一个节点，tap 出 amt 做备份。新加入的客户端节点可以从其任一个邻居那里要完整的数据。\u003C/p>\n\u003Ch3 id=\"取舍trade-off\">取舍（Trade off）\u003C/h3>\n\u003Cp>CRDT的好处：\u003C/p>\n\u003Cul>\n\u003Cli>\n\u003Cul>\n\u003Cli>local first：数据存储到本地，即时的响应速度，允许离线处理。\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>可以不依赖服务器而在客户端提供各种各样的数据访问的方式（filter, aggregate, projection, gorupby 等等），甚至，可以提供 API 让本地数据很容易被 pandas 等工具使用。\u003C/li>\n\u003Cli>即便使用服务器中转，其服务器资源的开销相对要小很多，对于一个大型的项目，节省的资金会很可观。\u003C/li>\n\u003C/ul>\n\u003Cp>缺点：\u003C/p>\n\u003Cul>\n\u003Cli>随着时间本地数据会增长得越来越大，由于存储着数据的全集，这个数量可能会很可观（可以有一些优化，比如用户上传的图片，视频这样的静态资源可以放在 S3，本地只放链接，访问时再获取 presigned url），所以，这种方法很可能\u003Cstrong>不适合在浏览器端使用\u003C/strong>。\u003C/li>\n\u003Cli>整个系统的复杂度比大家熟悉的 web 技术栈要大很多。\u003C/li>\n\u003Cli>技术栈小众，很难找到合适的工程师（当然，这也意味着一旦找到，必然是优秀的工程师）。\u003C/li>\n\u003Cli>市场上缺乏成功的先例（我指专门处理列表和文档这块的 sequence CRDT，其实 CRDT 在很多软件中已经得到了广泛使用，比如 phoenix framework，redis 等）。\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"激荡二十年http-api的变迁\">激荡二十年：HTTP API的变迁\u003C/h2>\n\u003Cp>\u003Ca href=\"https://mp.weixin.qq.com/s/9TAYgS74yVdNmjduRycy4A\">激荡二十年：HTTP API 的变迁 | 程序人生\u003C/a>\u003C/p>\n\u003Cp>这篇文章所介绍的 API 的变迁，特指客户端和服务器之间运行的 HTTP API。一切其他协议的 API（如 TCP），或者服务器之间的 HTTP API（如 gRPC），不在深入讨论之列。\u003C/p>\n\u003Ch3 id=\"2005年之前api-的狂野西部\">2005年之前：API 的狂野西部\u003C/h3>\n\u003Cp>早期的互联网是非常狂野的，没有所谓前端后端之分。PHP 开发者可以把从处理用户的 HTTP 请求，连接 mysql，组装 SQL 进行查询，将查询结果转换成 HTML，一路到 HTML 响应返回给用户的整个业务逻辑放在一个（或者若干个）如意大利面条般的脚本中。\n\u003Cimg src=\"https://raw.githubusercontent.com/fw6/assets/main/toy_docs/20230816172450.png\" alt=\"image.png\">\u003C/p>\n\u003Cp>早期微软把太多的赌注放在了曲高和寡的 WSDL（以及服务发现协议 UDDI）上，其主打做 web 开发的 ASP.Net 一直不温不火，根本无法与红遍天的 PHP 相提并论。在 2005 年之前，可以说，（在 web 世界里），\u003Cstrong>PHP 是宇宙中最好的语言\u003C/strong>。\u003C/p>\n\u003Ch3 id=\"2005-2010从混沌到有序--ruby-on-rails-横空出世\">2005-2010：从混沌到有序 — Ruby on Rails 横空出世\u003C/h3>\n\u003Cp>rails 是一个足以载入史册的框架：它把软件开发中的很多非常有益的概念、模式和思想（包括但不限于 \u003Ccode>ORM\u003C/code>，\u003Ccode>CoC\u003C/code>，\u003Ccode>MVC\u003C/code> 等）糅合在自己体内，构建了一个强大同时非常易用的 web 开发系统。在 rails 下，哪怕你是个 web 开发的小白，在学习了 rails 的开发文档后，也能很快撰写出一套让很多 web 开发老鸟艳羡的系统。在 rails 诸多创新之中，要数 \u003Ccode>ActiveRecord\u003C/code> 最为经验，它以简洁优雅的表述，颠覆了人们传统上对数据库的认知，并且几乎凭借一己之力，把 ORM 捧上了神坛。\u003C/p>\n\u003Cp>随着 rails 一起成长的还有 XMLHttp object （俗称 Ajax）的标准化，以及 JSON 的广泛使用。其中，Google 通过其旗下的 gmail / google maps 大大促进了人们对 Ajax 的认知，而 PHP5 和 rails 3 则将 JSON 在广大开发者中推广开来，使其逐渐取代笨拙低效的 XML。有意思的是，Ajax 最初是 \u003Cem>Asynchronous Javascript And XML\u003C/em>，JSON 普及后，这个 XML 再也没人提及。\u003C/p>\n\u003Cp>由 rails 刮起的 ORM 之风愈演愈烈，它几乎成为了 web 开发者访问数据库的唯一标准。渐渐的，存储过程（stored procedure / function）被雪藏，触发器（trigger）被遗忘，数据库复杂而迷人的权限管理被弃之不顾，取而代之的是用一个几乎具有 root 权限的用户来连接数据库，而权限的管理全部被前移到了应用层。这和 ORM 所倡导的「一套代码处理多种数据库」有莫大的联系。事实上，ORM 带给大家切换数据库的好处，可能仅限于开发环境用 sqlite，生产环境用 postgres 这样的便利。但从管理的角度，ORM 让开发者绕过 DBA（或者干脆不要 DBA）进行快速开发，对于小型项目，可以高效开发，且不需要构建数据库领域的专有技能，毕竟培养一个 web 工程师，两三个月的训练营就可以让一个素人很好掌握开发框架，进行「高效」 CRUD 开发；而培养一个合格的 DBA，需要整个计算机体系知识的沉淀。\u003C/p>\n\u003Ch3 id=\"2010-2015移动互联网--api-飞上枝头变凤凰\">2010-2015：移动互联网 — API 飞上枝头变凤凰\u003C/h3>\n\u003Cp>由于移动应用拥有自己的 UI 层，不像浏览器那样，UI 层是由服务器返回的 HTML 渲染出来，因而移动端和服务器之间有着强烈的对简洁高效且标准化的 API 层的需求。在这种需求的催生下，REST（Representational state transfer）这个当时已不新鲜的概念渐渐从象牙塔走入了工业界。人们发现，与其自己随机指定一套 HTTP API 的规约，不如遵循 HTTP/1.1 规范，让 API 的表述和规范靠拢。这个时期，各个框架要么开始内建对 RESTful API 的支持，要么在框架之上，独立出一套专门为 API 优化的框架，比如 2012 年就比较成熟的 django REST framework：\u003C/p>\n\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/fw6/assets/main/toy_docs/20230816173059.png\" alt=\"image.png\">\u003C/p>\n\u003Cp>这个时期，如雨后春笋般绽放的众多 REST API framework 给开发者带来的巨大好处是，你即便不掌握 HTTP/1.1 协议的细节，也可以做出像样的 API，来处理客户端和服务器间的交互。\u003C/p>\n\u003Cp>然而，并不是所有的 API 框架都足够严谨，足够遵循协议本身。很多 API 框架，在处理复杂的协议流程时，要么会有自相矛盾的处理，要么把这些细节完全交由开发者处理。然而，你如何保证只热衷于进行 CRUD 的开发者能够正确使用 ETag 作为乐观锁（optimistic locking）进行条件更新（conditional update）呢？\u003C/p>\n\u003Cp>在 web 世界不为人知的角落，Erlang 的 webmachine 尽着最大的努力来确保 API 的处理符合 HTTP 协议。得益于 erlang 强大的 pattern matching 的能力，webmachine 在内部构建了一张庞大的决策树，涵盖了 API 处理的每一个细节，连每个错误返回的状态码都精益求精。\n\u003Cimg src=\"https://raw.githubusercontent.com/fw6/assets/main/toy_docs/20230816173300.png\" alt=\"image.png\">\u003C/p>\n\u003Cp>另一个小众语言 clojure 的小众框架 liberator 也把 webmachine 的这一思想学了过去，并发扬光大：\n\u003Cimg src=\"https://raw.githubusercontent.com/fw6/assets/main/toy_docs/20230816173347.png\" alt=\"image.png\">\u003C/p>\n\u003Cp>然而，移动互联网不是小众语言和小众框架的战场。何况，API 毕竟是客户端和服务器共同的约定，在那个年代，服务端的严谨会给客户端带来不小的困惑：相较于 412 Preconditional failed 而言，客户端工程师更钟情于一招鲜吃遍天的 400 Bad request\u003C/p>\n\u003Ch3 id=\"2015-2020类型安全--新的共识\">2015-2020：类型安全 — 新的共识\u003C/h3>\n\u003Cp>2015 年，facebook 首先用开源的内部项目 GraphQL 向业界打出了意图取代 RESTful API 的一记重拳。GraphQL 从输入和输出入手，在 HTTP 协议之上定义了一套查询语言 —— 客户端和服务器之间需要定义好支持的 query / mutation / subscription 的 schema，以及输入和输出数据结构的 type。\u003C/p>\n\u003Cp>GraphQL 提出了一个看待 API 的全新视角：客户端使用者可以根据需要灵活定义他们想查询的数据，而不需要看服务端老爷们的脸色。在固执的 RESTful API 的原教旨主义者眼里，API 应该严格对应资源，因而一个 app 页面如果包含三种不同的资源，那么它就要访问三个不同的 API 来获得结果。对客户端来说，这额外多了两个浪费用户宝贵等待时间的 roud trip，为什么不能一个查询就获得我想要的数据，且仅包含我想要的数据呢？\u003C/p>\n\u003Cp>这个想法很有创意，但它忽视了灵活性带来的可能并不值得的复杂性。GraphQL 的理想情况一直没有很好地达成，因为服务端不可能为一个多层随意嵌套的查询去准备数据。同时 GraphQL 还有其他很多设计上考虑不周的问题，其中最让人诟病的是，对 HTTP 协议的无视，也就导致整个 HTTP 生态和 GraphQL 工作地很别扭，还有查询时 n+1 的问题（data loader 只是个特定场景的解决办法）。\u003C/p>\n\u003Cp>大部分支持 GraphQL 或者 OpenAPI 的框架遵从程序员的本性，让你可以专注于写代码，顺带生成相应的 schema。这是典型的 code first 的思维。\u003C/p>\n\u003Cp>而 schema first 的代表要数 gRPC —— 你撰写 protobuf 定义，相应的编译器会替你生成代码。\u003C/p>\n\u003Cp>这两种方案的背后，实际上是框架思维和编译器思维的较量。\u003C/p>\n\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/fw6/assets/main/toy_docs/20230816173910.png\" alt=\"image.png\">\u003C/p>\n\u003Ch3 id=\"2020-至今低代码时代--api-何去何从\">2020-至今：低代码时代 — API 何去何从？\u003C/h3>\n\u003Ch4 id=\"postgrest\">postgREST\u003C/h4>\n\u003Cp>以数据库 schema 为单一数据来源，由内及外地生成 API schema，甚至 API 本身。\u003C/p>\n\u003Cp>使用 postgREST，开发者只需正常定义数据库中的表，视图，函数，触发器等，并为它们的使用权限赋予相应的角色即可。postgREST 可以根据数据库的 infoschema，掌握详细的 metadata，并用这些 metadata 来验证 API 的输入，也就是 Request，如果验证通过，会根据 Request 生成相应的 SQL 查询，然后把结果序列化成客户端需要的结构，以 Response 返回。举个例子，对于这样一个 API 请求：\u003Ccode>GET /people?age=gte.18&#x26;student=is.true\u003C/code> ，postgREST 会验证数据库中包含 people 表或者视图，并且其含有 age / student 这两个字段，前者是整型，后者是布尔型。如果一切符合，并且用户具备 people 表或者视图的 SELECT 权限，那么它就会生成 \u003Ccode>select * from people where age >= 18 and student = true\u003C/code> 这样一条查询，返回相应的 JSON（默认客户端 \u003Ccode>accept: application/json\u003C/code>）。\u003C/p>\n\u003Cp>postgREST 还跟 postgres 的 RLS（Row Level Security）深度绑定，来解决用户个人信息安全访问和更新的需求。比如用户只能修改自己的帖子，但可以读别人的帖子这样的业务需求，如果没有 RLS，很难从数据库级别直接安全地实现。\u003C/p>\n\u003Ch4 id=\"hasura\">Hasura\u003C/h4>\n\u003Cp>Hasura 试图回答一个问题：有没有可能把 GraphQL 的 query 一对一转换成 SQL 语句？\u003C/p>\n\u003Cp>我们知道 GraphQL 查询会被编译成 Graph AST，而 SQL 查询会被编译成 SQL AST，所以上述那个问题就变为：Graph AST 可以被安全高效地转换成 SQL AST 么？\u003C/p>\n\u003Ch2 id=\"思考问题和方法\">思考，问题和方法\u003C/h2>\n\u003Cblockquote>\n\u003Cp>人的成长是有诱因的，但不外乎得到他人指点，和自己开悟两种情况。\u003C/p>\n\u003C/blockquote>\n\u003Cp>孔子说三十而立，立的是什么？是立德、立功、立言这三不朽么？还是小家子些的，立身，立家，立业？每个在奔四路上的人都会有自己的体味和解读。但不容置疑的是，三十岁往上，要渐渐形成自己的思想和方法论\u003C/p>\n\u003Cp>而在 Joe 的眼里，erlang 其实没有什么神秘的，仅仅六个函数就能涵盖它的全部：spawn，send，receive，register，whereis，self。\u003C/p>\n\u003Cp>仔细想想，它简单地可怕，就像物理学的大一统理论一样，试图从纷繁复杂中跳脱出来，回归本源。更可怕的是，这六个函数不仅仅涵盖了 erlang，似乎也可以解释软件领域里的很多系统 —— 它们无所不在，在系统里面的意义就像原力之于星战。\u003C/p>\n\u003Cul>\n\u003Cli>spawn：创建一个资源。对于 erlang，这资源是 process；对某个 service，是 service 本身。\u003C/li>\n\u003Cli>send / receive：给资源发指令和接受指令。对于 erlang，这指令是 message，封装成 erlang term，走的是 IPC/RPC；而对某个 http service，指令是 request，封装成 json / msgpack / protobuf，走的是 http / http2。\u003C/li>\n\u003Cli>register / whereis：资源怎么注册，怎么发现。对于 erlang，这是 process 在 name register 的注册和发现；对于某个 service，可以是 Consul / DNS。\u003C/li>\n\u003Cli>self：返回自己的 identity。在 erlang 里，这是 process 找寻自我的方式；在 micro service 的场景下，每个 service 隐含着有自己的 identity。\u003C/li>\n\u003C/ul>\n\u003Cp>我喜爱 Joe，和我喜欢 Rich Hickey 一样，他们在传播知识的同时，传播他们自己对事物独特的理解和思考。\u003C/p>\n\u003Ch2 id=\"谈谈边界\">谈谈边界\u003C/h2>\n\u003Cp>我们做系统，做设计，很多时候其实就是在明确边界。函数和函数要明确边界，模块和模块要明确边界，服务和服务要明确边界，应用和应用要明确边界。明确边界能让我们的代码逻辑严谨，条理清晰。边界之内，对于外部世界，是个黑盒，一切物质的非物质的交换都只能在边界上通过已知的接口（interface）完成；同时来自外部世界的 impure data 在这里被校验（validate），过滤（filter），变换（transform）成为符合内部世界运行的 pure data。\u003C/p>\n\u003Cp>函数的边界是其 signature，一个函数的 signature 由其名字，输入参数及其类型，返回值及其类型共同构成。外部访问者无需了解函数的实现，通过调用函数来执行其代码。函数类似于生物体中的细胞。\u003C/p>\n\u003Cp>随着软件日益复杂，若干函数被组织成类，或者模块，来完成某个功能，从此，作用域的概念开始深入人心。有些函数承担对外的接口，他们是 public 的，有些完成内部功能，他们是 private 的。类或者模块的边界由文件名，类名（模块名）和公有方法组成。类或者模块类似于生物体中的组织。\u003C/p>\n\u003Cp>进一步地，若干类/模块聚合起来，提供某个服务，就形成了组件（component）。组件的表现形式往往是一个目录（或者子目录），它有自己的抽象接口（start / stop / process_message / … ）。组件的边界由组件所在的目录，抽象接口和 public class / module 组成。组件类似于生物体的器官。\u003C/p>\n\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/fw6/assets/main/toy_docs/20230821161404.png\" alt=\"image.png\">\n生物体和软件很相通的一点是它们也拒绝 single point of failure。上图是人类的肾脏器官，经典的 active-active cluster 设置。那些卖肾买 iPhone 4 或者 iPhone 6P 的同学至今还活蹦乱跳的一个原因是，即便一个肾没了，另一个也会负担起所有的流量，保证体液循环畅通无阻（当然，最大承载的流量打了折扣）。\u003C/p>\n\u003Cp>就像乐高积木一样，进一步，我们可以把若干组件聚合起来，实现某个目的，这就构成了应用（application）或者子系统（sub-system）。应用的表现形式是一个由若干目录组成的项目。它的边界由它的名字，使用的资源（比如端口）以及应用的入口（比如 main 函数）组成。应用类似于生物体中的系统，比如下图的循环系统：\n\u003Cimg src=\"https://raw.githubusercontent.com/fw6/assets/main/toy_docs/20230821161501.png\" alt=\"image.png\">\u003C/p>\n\u003Cp>再往上，若干个应用组成了一个解决方案（solution），为某个业务目的保驾护航。解决方案就像一个完整的生物体，它的边界大到一份复杂的商业蓝图，小到 iOS 上的一个工具软件。类比于一个完整的生物体，当我们做一个解决方案时，我们要界定它的子系统，哪些应该是：\u003C/p>\n\u003Cul>\n\u003Cli>dummy system - 就像我们的呼吸系统一样，风雨无阻，就连睡觉也会自动工作。我能想到的例子有，日志系统，监控系统，错误报告系统等。\u003C/li>\n\u003Cli>intelligent system - 就像我们的免疫系统一样，根据外部的变化而应对之。这样的 system 一般在 behavior based reaction system 中，如 firewall，dynamic user classification 中使用。\u003C/li>\n\u003Cli>C&#x26;C system - command and control，就像我们的大脑一样，发号施令，控制整个机体的行为。前几年 热络的 SDN 中的 S 就是这个东东。\u003C/li>\n\u003C/ul>\n\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/fw6/assets/main/toy_docs/20230821161643.png\" alt=\"image.png\">\u003C/p>\n\u003Ch2 id=\"concurrency\">Concurrency\u003C/h2>\n\u003Cp>Concurrency VS. Parallelism:\u003C/p>\n\u003Cul>\n\u003Cli>Concurrency同时处理很多事情；Parallelism同时做很多事情；\u003C/li>\n\u003Cli>Concurrency关于结构；Parallelism关于执行；\u003C/li>\n\u003Cli>以并发方式构建解决方案，可免费获得并行性。\u003C/li>\n\u003C/ul>\n\u003Cp>常见并发模型：\nlock based concurrency，locks/semaphore/mutex。\n产生的问题：\u003C/p>\n\u003Cul>\n\u003Cli>需要太多锁\u003C/li>\n\u003Cli>容易产生错误的锁\u003C/li>\n\u003Cli>需要保证锁的顺序\u003C/li>\n\u003Cli>错误恢复\u003C/li>\n\u003Cli>能以组合\u003C/li>\n\u003C/ul>\n\u003Cp>CSP。顺序执行；通过channels同步通信；交替复用通道\u003C/p>\n\u003Cblockquote>\n\u003Cp>Do not communicate by sharing memory; instead, share memory by communicating.\n— Effective Go\u003C/p>\n\u003C/blockquote>\n\u003Cp>Actor Model。称为进程的轻量级对象；没有共享数据；消息保存在mailbox中并按序处理。与CSP相比：\u003C/p>\n\u003Cul>\n\u003Cli>没有匿名的processes\u003C/li>\n\u003Cli>点对点通信\u003C/li>\n\u003Cli>消息传递是异步的\u003C/li>\n\u003Cli>传递大数据时性能较差\u003C/li>\n\u003C/ul>\n\u003Cp>STM：Future（Promise/Observable…）\u003C/p>\n\u003Cblockquote>\n\u003Cp>Future: An object that hold data which is not resolved immediately.\u003C/p>\n\u003C/blockquote>\n\u003Cp>\u003Ca href=\"https://github.com/tc39/proposal-observable\">GitHub - tc39/proposal-observable: Observables for ECMAScript\u003C/a>\u003C/p>\n\u003Caside class=\"callout callout-tip\">\u003Cdiv class=\"callout-indicator\">\u003Cdiv class=\"callout-hint\">\u003Csvg viewBox=\"0 0 24 24\" width=\"24\" height=\"24\" fill=\"currentColor\" class=\"callout-hint-tip\">\u003Cpath fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M1.43909 8.85483L1.44039 8.85354L4.96668 5.33815C5.30653 4.99386 5.7685 4.79662 6.2524 4.78972L6.26553 4.78963L12.9014 4.78962L13.8479 3.84308C16.9187 0.772319 20.0546 0.770617 21.4678 0.975145C21.8617 1.02914 22.2271 1.21053 22.5083 1.4917C22.7894 1.77284 22.9708 2.13821 23.0248 2.53199C23.2294 3.94517 23.2278 7.08119 20.1569 10.1521L19.2107 11.0983V17.7338L19.2106 17.7469C19.2037 18.2308 19.0067 18.6933 18.6624 19.0331L15.1456 22.5608C14.9095 22.7966 14.6137 22.964 14.29 23.0449C13.9663 23.1259 13.6267 23.1174 13.3074 23.0204C12.9881 22.9235 12.7011 22.7417 12.4771 22.4944C12.2533 22.2473 12.1006 21.9441 12.0355 21.6171L11.1783 17.3417L6.65869 12.822L4.34847 12.3589L2.38351 11.965C2.05664 11.8998 1.75272 11.747 1.50564 11.5232C1.25835 11.2992 1.07653 11.0122 0.979561 10.6929C0.882595 10.3736 0.874125 10.034 0.955057 9.7103C1.03599 9.38659 1.20328 9.09092 1.43909 8.85483ZM6.8186 10.8724L2.94619 10.096L6.32006 6.73268H10.9583L6.8186 10.8724ZM15.2219 5.21703C17.681 2.75787 20.0783 2.75376 21.1124 2.8876C21.2462 3.92172 21.2421 6.31895 18.783 8.77812L12.0728 15.4883L8.51172 11.9272L15.2219 5.21703ZM13.9042 21.0538L13.1279 17.1811L17.2676 13.0414V17.68L13.9042 21.0538Z\">\u003C/path>\u003Cpath d=\"M9.31827 18.3446C9.45046 17.8529 9.17864 17.3369 8.68945 17.1724C8.56178 17.1294 8.43145 17.1145 8.30512 17.1243C8.10513 17.1398 7.91519 17.2172 7.76181 17.3434C7.62613 17.455 7.51905 17.6048 7.45893 17.7835C6.97634 19.2186 5.77062 19.9878 4.52406 20.4029C4.08525 20.549 3.6605 20.644 3.29471 20.7053C3.35607 20.3395 3.45098 19.9148 3.59711 19.476C4.01221 18.2294 4.78141 17.0237 6.21648 16.5411C6.39528 16.481 6.54504 16.3739 6.65665 16.2382C6.85126 16.0016 6.92988 15.678 6.84417 15.3647C6.83922 15.3466 6.83373 15.3286 6.82767 15.3106C6.74106 15.053 6.55701 14.8557 6.33037 14.7459C6.10949 14.6389 5.84816 14.615 5.59715 14.6994C5.47743 14.7397 5.36103 14.7831 5.24786 14.8294C3.22626 15.6569 2.2347 17.4173 1.75357 18.8621C1.49662 19.6337 1.36993 20.3554 1.30679 20.8818C1.27505 21.1464 1.25893 21.3654 1.25072 21.5213C1.24662 21.5993 1.24448 21.6618 1.24337 21.7066L1.243 21.7226L1.24235 21.7605L1.2422 21.7771L1.24217 21.7827L1.24217 21.7856C1.24217 22.3221 1.67703 22.7579 2.2137 22.7579L2.2155 22.7579L2.22337 22.7578L2.23956 22.7577C2.25293 22.7575 2.27096 22.7572 2.29338 22.7567C2.33821 22.7555 2.40073 22.7534 2.47876 22.7493C2.63466 22.7411 2.85361 22.725 3.11822 22.6932C3.64462 22.6301 4.36636 22.5034 5.13797 22.2464C6.58274 21.7653 8.3431 20.7738 9.17063 18.7522C9.21696 18.639 9.26037 18.5226 9.30064 18.4029C9.30716 18.3835 9.31304 18.364 9.31827 18.3446Z\">\u003C/path>\u003C/svg>\u003C/div>\u003Cdiv class=\"callout-title\">Tip\u003C/div>\u003C/div>\u003Cdiv class=\"callout-content\">\u003Cp>飞猪论的进一步讨论:\u003C/p>\u003Cblockquote>\n\u003Cp>第一层是什么样的风口是风口？第二层是你赌对了风口，风口来了，鸡犬升天后为何你升的最快？第三层则是风停了，你为何不掉下来，你的核心业务和核心壁垒到底是什么？好风凭借力，送我上青云的境遇人人心中都有，但为何又落在你头上。\u003C/p>\n\u003C/blockquote>\u003C/div>\u003C/aside>\n\u003Ch2 id=\"技术债人的因素\">技术债：人的因素\u003C/h2>\n\u003Cp>在维基百科中，技术债是这么定义的：\u003C/p>\n\u003Cblockquote>\n\u003Cp>Technical debt is a concept in software development that reflects the implied cost of additional rework caused by choosing an easy (limited) solution now instead of using a better approach that would take longer.\u003C/p>\n\u003C/blockquote>\n\u003Cp>所以我们可以把技术债看做是一种捷径 —— 一种带来短期利益（交付期更短）但需要未来花费更多时间弥补的技术捷径。\u003C/p>\n\u003Cp>技术债分成几个部分：1) 架构和设计上的技术债 2) 代码实现层引入的技术债 3) 软件测试的技术债 4) 文档技术债。\u003C/p>\n\u003Cp>开发者是否对已有系统有足够的了解，往往决定了这个功能的质量。\u003C/p>\n\u003Cp>正因为人的因素在软件开发的各个环节中如此重要，为了减少不必要的技术债的产生，最好的方法是不断招募足够优秀的人才，进行合适的培训，并且给予他们最大的上下文来处理要处理的问题；同时，不断优化和自动化开发流程，使得每一次新的 commit，引入的熵尽可能少。\u003C/p>",{"headings":835,"localImagePaths":919,"remoteImagePaths":920,"frontmatter":921,"imagePaths":926},[836,837,840,843,846,849,852,855,858,861,864,867,870,873,876,879,881,884,887,890,893,896,899,902,905,908,911,913,916],{"depth":31,"slug":324,"text":325},{"depth":31,"slug":838,"text":839},"两万字长文聊聊程序人生","两万字长文：聊聊程序人生",{"depth":37,"slug":841,"text":842},"我想独立完成一个产品技术上该怎么提升","我想独立完成一个产品，技术上该怎么提升？",{"depth":37,"slug":844,"text":845},"怎么找到好玩的项目","怎么找到好玩的项目？",{"depth":37,"slug":847,"text":848},"看过的或者学过的技术如何在需要的时候找回来","看过的或者学过的技术，如何在需要的时候找回来？",{"depth":37,"slug":850,"text":851},"如何定义搬砖如何形成反搬砖的文化","如何定义搬砖？如何形成反搬砖的文化？",{"depth":37,"slug":853,"text":854},"如何处理有限的资源和产品质量之间的冲突","如何处理有限的资源和产品质量之间的冲突？",{"depth":37,"slug":856,"text":857},"团队做大人才密度是肯定下降的不能要求人人都有主人翁的心能不能用精细的流程来避免搬砖","团队做大，人才密度是肯定下降的，不能要求人人都有主人翁的心，能不能用精细的流程来避免搬砖？",{"depth":31,"slug":859,"text":860},"客户端软件的轮回更好还是更糟糕","客户端软件的轮回：更好还是更糟糕？",{"depth":31,"slug":862,"text":863},"想象力工程方法以及取舍","想象力，工程方法以及取舍",{"depth":37,"slug":865,"text":866},"如何保证-single-source-of-truth以下简称-sst","如何保证 single source of truth（以下简称 SST）?",{"depth":37,"slug":868,"text":869},"通过迭加这些事件得到最终一致的状态","通过迭加这些事件，得到最终一致的状态?",{"depth":37,"slug":871,"text":872},"如何解决冲突","如何解决冲突？",{"depth":347,"slug":874,"text":875},"ot","OT",{"depth":347,"slug":877,"text":878},"crdt","CRDT",{"depth":37,"slug":880,"text":880},"继续放飞想象力",{"depth":37,"slug":882,"text":883},"取舍trade-off","取舍（Trade off）",{"depth":31,"slug":885,"text":886},"激荡二十年http-api的变迁","激荡二十年：HTTP API的变迁",{"depth":37,"slug":888,"text":889},"2005年之前api-的狂野西部","2005年之前：API 的狂野西部",{"depth":37,"slug":891,"text":892},"2005-2010从混沌到有序--ruby-on-rails-横空出世","2005-2010：从混沌到有序 — Ruby on Rails 横空出世",{"depth":37,"slug":894,"text":895},"2010-2015移动互联网--api-飞上枝头变凤凰","2010-2015：移动互联网 — API 飞上枝头变凤凰",{"depth":37,"slug":897,"text":898},"2015-2020类型安全--新的共识","2015-2020：类型安全 — 新的共识",{"depth":37,"slug":900,"text":901},"2020-至今低代码时代--api-何去何从","2020-至今：低代码时代 — API 何去何从？",{"depth":347,"slug":903,"text":904},"postgrest","postgREST",{"depth":347,"slug":906,"text":907},"hasura","Hasura",{"depth":31,"slug":909,"text":910},"思考问题和方法","思考，问题和方法",{"depth":31,"slug":912,"text":912},"谈谈边界",{"depth":31,"slug":914,"text":915},"concurrency","Concurrency",{"depth":31,"slug":917,"text":918},"技术债人的因素","技术债：人的因素",[],[],{"title":825,"description":15,"pubDate":922,"heroImage":827,"date created":922,"date modified":923,"tags":924,"minutesRead":925},"2023-08-14 13:26","2023-08-14",[133,242],"58 min read",[],"200-Learning/210-Programing/《程序人生》.md","200-learning/210-programing/计算机科学速成课",{"id":928,"data":930,"body":935,"filePath":936,"digest":937,"rendered":938,"legacyId":958},{"title":931,"description":15,"draft":16,"pubDate":932,"heroImage":933,"tags":934},"《计算机科学速成课》",["Date","2023-09-12T06:52:00.000Z"],"https://images.unsplash.com/photo-1451187580459-43490279c0fa?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1200&q=80",[20,242],"## 寄存器 & 内存\n\n\nAND-OR锁存器，本质上是回向电流，将输出连回输入：\n1. 使用“OR”门持久化“1”\n2. 使用“AND”门持久化“0”\n3. 结合前面两步持久化“0”和“1”\n![image.png](https://raw.githubusercontent.com/fw6/assets/main/toy_docs/20230912150120.png)\n\n它锁定了1个值：放入数据的动作称为“写入”，拿出数据的动作称为“读取”\n\n用两条线“设置”和“复位”进行“输入”，有点难以理解。可使用门锁优化：一条输入线写入0、1；允许写入线进行写入锁定；\n\n![image.png](https://raw.githubusercontent.com/fw6/assets/main/toy_docs/20230912150433.png)\n\n将门锁放到盒子里，一个盒子能存1bit\n![image.png](https://raw.githubusercontent.com/fw6/assets/main/toy_docs/20230912150806.png)\n\n放八个锁存器就能存入8bit数据。将这样的一组锁存器叫做“寄存器”。寄存器能存一个数字，这个数字多少位，称为位宽。\n\n写入寄存器之前，要先启用里面所有寄存器。\n\n64位寄存器要64根数据线，64根连到输出端，如果存256位就要513条线！使用矩阵，如存256位，使用16\\*16网格的寄存器，有16行16列，要启用某个寄存器，就打开相应的行线和列线。\n![image.png](https://raw.githubusercontent.com/fw6/assets/main/toy_docs/20230912151727.png)\n\n\n对于256位的存储，只要35根线：\n- 1条数据线\n- 1条允许写入线\n- 1条允许读取线\n- 16行、16列的线用于选择寄存器\n\n需要使用地址记录寄存器交叉点位置，如12行8列，转为二进制就是\"11001000\"，为了将该地址转为行列，就需要用到多路复用器（multiplexer）\n![image.png](https://raw.githubusercontent.com/fw6/assets/main/toy_docs/20230912152325.png)\n为了存8位数字，同时给8个256位内存一样的地址，每个地址存1位，那就能存256个字节：\n![image.png](https://raw.githubusercontent.com/fw6/assets/main/toy_docs/20230912152532.png)\n\n将其看成一个整体的可寻址内存，有256个地址，每个地址能读或写一个8位值。\n\n:::note\n内存的一个重要特性：可以随时访问任何位置。因此叫“随机存取存储器”（Random access memory），简称“RAM”\n:::\n\n通过以上步骤，使用锁存器做了一块SRAM（静态随机存取存储器），还有其他类型的RAM，如DRAM、闪存和NVRAM，本质上都是矩阵层层嵌套，来存储大量信息。\n \n## 中央处理单元（CPU）\n\n程序由一个个操作组成，这些操作叫指令（instruction，它们指示计算机要做什么）。\n\n给CPU支持的所有指令，分配一个ID：\n![image.png](https://raw.githubusercontent.com/fw6/assets/main/toy_docs/20230912154808.png)\n\nCPU组成：\n- 4个寄存器\n- 指令地址寄存器：记录程序运行到哪了\n- 指令寄存器\n\nCPU “取指令-> 编码 -> 执行”的速度叫“时钟速度”（Clock Speed），单位是赫兹（HERTZ）\n\n## 指令和程序","src/content/blog/200-Learning/210-Programing/《计算机科学速成课》.md","4e159b7b1412a23d",{"html":939,"metadata":940},"\u003Ch2 id=\"寄存器--内存\">寄存器 &#x26; 内存\u003C/h2>\n\u003Cp>AND-OR锁存器，本质上是回向电流，将输出连回输入：\u003C/p>\n\u003Col>\n\u003Cli>使用“OR”门持久化“1”\u003C/li>\n\u003Cli>使用“AND”门持久化“0”\u003C/li>\n\u003Cli>结合前面两步持久化“0”和“1”\n\u003Cimg src=\"https://raw.githubusercontent.com/fw6/assets/main/toy_docs/20230912150120.png\" alt=\"image.png\">\u003C/li>\n\u003C/ol>\n\u003Cp>它锁定了1个值：放入数据的动作称为“写入”，拿出数据的动作称为“读取”\u003C/p>\n\u003Cp>用两条线“设置”和“复位”进行“输入”，有点难以理解。可使用门锁优化：一条输入线写入0、1；允许写入线进行写入锁定；\u003C/p>\n\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/fw6/assets/main/toy_docs/20230912150433.png\" alt=\"image.png\">\u003C/p>\n\u003Cp>将门锁放到盒子里，一个盒子能存1bit\n\u003Cimg src=\"https://raw.githubusercontent.com/fw6/assets/main/toy_docs/20230912150806.png\" alt=\"image.png\">\u003C/p>\n\u003Cp>放八个锁存器就能存入8bit数据。将这样的一组锁存器叫做“寄存器”。寄存器能存一个数字，这个数字多少位，称为位宽。\u003C/p>\n\u003Cp>写入寄存器之前，要先启用里面所有寄存器。\u003C/p>\n\u003Cp>64位寄存器要64根数据线，64根连到输出端，如果存256位就要513条线！使用矩阵，如存256位，使用16*16网格的寄存器，有16行16列，要启用某个寄存器，就打开相应的行线和列线。\n\u003Cimg src=\"https://raw.githubusercontent.com/fw6/assets/main/toy_docs/20230912151727.png\" alt=\"image.png\">\u003C/p>\n\u003Cp>对于256位的存储，只要35根线：\u003C/p>\n\u003Cul>\n\u003Cli>1条数据线\u003C/li>\n\u003Cli>1条允许写入线\u003C/li>\n\u003Cli>1条允许读取线\u003C/li>\n\u003Cli>16行、16列的线用于选择寄存器\u003C/li>\n\u003C/ul>\n\u003Cp>需要使用地址记录寄存器交叉点位置，如12行8列，转为二进制就是”11001000”，为了将该地址转为行列，就需要用到多路复用器（multiplexer）\n\u003Cimg src=\"https://raw.githubusercontent.com/fw6/assets/main/toy_docs/20230912152325.png\" alt=\"image.png\">\n为了存8位数字，同时给8个256位内存一样的地址，每个地址存1位，那就能存256个字节：\n\u003Cimg src=\"https://raw.githubusercontent.com/fw6/assets/main/toy_docs/20230912152532.png\" alt=\"image.png\">\u003C/p>\n\u003Cp>将其看成一个整体的可寻址内存，有256个地址，每个地址能读或写一个8位值。\u003C/p>\n\u003Caside class=\"callout callout-note\">\u003Cdiv class=\"callout-indicator\">\u003Cdiv class=\"callout-hint\">\u003Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" aria-hidden=\"true\">\u003Cpath d=\"M12 8h.01M12 12v4\">\u003C/path>\u003Ccircle cx=\"12\" cy=\"12\" r=\"10\">\u003C/circle>\u003C/svg>\u003C/div>\u003Cdiv class=\"callout-title\">Note\u003C/div>\u003C/div>\u003Cdiv class=\"callout-content\">\u003Cp>内存的一个重要特性：可以随时访问任何位置。因此叫“随机存取存储器”（Random access memory），简称“RAM”\u003C/p>\u003C/div>\u003C/aside>\n\u003Cp>通过以上步骤，使用锁存器做了一块SRAM（静态随机存取存储器），还有其他类型的RAM，如DRAM、闪存和NVRAM，本质上都是矩阵层层嵌套，来存储大量信息。\u003C/p>\n\u003Ch2 id=\"中央处理单元cpu\">中央处理单元（CPU）\u003C/h2>\n\u003Cp>程序由一个个操作组成，这些操作叫指令（instruction，它们指示计算机要做什么）。\u003C/p>\n\u003Cp>给CPU支持的所有指令，分配一个ID：\n\u003Cimg src=\"https://raw.githubusercontent.com/fw6/assets/main/toy_docs/20230912154808.png\" alt=\"image.png\">\u003C/p>\n\u003Cp>CPU组成：\u003C/p>\n\u003Cul>\n\u003Cli>4个寄存器\u003C/li>\n\u003Cli>指令地址寄存器：记录程序运行到哪了\u003C/li>\n\u003Cli>指令寄存器\u003C/li>\n\u003C/ul>\n\u003Cp>CPU “取指令-> 编码 -> 执行”的速度叫“时钟速度”（Clock Speed），单位是赫兹（HERTZ）\u003C/p>\n\u003Ch2 id=\"指令和程序\">指令和程序\u003C/h2>",{"headings":941,"localImagePaths":950,"remoteImagePaths":951,"frontmatter":952,"imagePaths":957},[942,945,948],{"depth":31,"slug":943,"text":944},"寄存器--内存","寄存器 & 内存",{"depth":31,"slug":946,"text":947},"中央处理单元cpu","中央处理单元（CPU）",{"depth":31,"slug":949,"text":949},"指令和程序",[],[],{"title":931,"description":15,"pubDate":953,"heroImage":933,"date created":953,"date modified":954,"draft":16,"tags":955,"minutesRead":956},"2023-09-12 14:52",["Date","2023-09-12T00:00:00.000Z"],[20,242],"4 min read",[],"200-Learning/210-Programing/《计算机科学速成课》.md","200-learning/210-programing/一些有意思的web-api",{"id":959,"data":961,"body":968,"filePath":969,"digest":970,"rendered":971,"legacyId":995},{"title":962,"description":15,"pubDate":963,"heroImage":964,"tags":965},"有意思的Web API",["Date","2023-06-27T08:23:00.000Z"],"https://images.unsplash.com/photo-1621839673705-6617adf9e890?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=640&q=80",[133,966,967,182,242],"HTML","WebAPI","> The function of wisdom is to discriminate between good and evil.\n> — \u003Ccite>Cicero\u003C/cite>\n\n## TOC\n\n\n## IME\n\n- [IME | W3C](https://w3c.github.io/uievents/#ime)\n- [text composition system | W3C](https://w3c.github.io/uievents/#text-composition-system)\n- [Issue #180 · w3c/uievents · GitHub](https://github.com/w3c/uievents/issues/180)\n- [Input method editor | MDN](https://developer.mozilla.org/en-US/docs/Glossary/Input_method_editor)\n- [Understanding Composition Browser Events | Square Corner Blog](https://developer.squareup.com/blog/understanding-composition-browser-events/)\n\n输入法编辑器是一种操作系统程序，用于将一种语言或字符集转换为另一种语言或字符集。例如输入*nihao*，键盘上没这种字符，但如果启用IME，开始打字时会出现下滑线表明IME处于活跃状态，在此过程中可以选择哪组字符与要输入的含义相匹配。按下Enter键将确认选择，将所选字符放到输入中，IME关闭。通过IME进行字符转换可输入来自任意国家/地区的母语。\n\n## Edit Context\n\n- [EditContext API](https://w3c.github.io/edit-context/)\n![image.png](https://raw.githubusercontent.com/fw6/assets/main/toy_docs/20230626145625.png)\n\n![image.png](https://raw.githubusercontent.com/fw6/assets/main/toy_docs/20230626145600.png)\n\n\n## Background Fetch API\n\n该API提供了一种新的方式在浏览器下载资源，如电影、音视频、软件。\n\n当网友端要求客户下载大文件时，这通常需要用户保持与页面连接才能完成下载，如果失去连接、关闭选项卡、离开下载页面都会导致下载停止🤚。\n\n[Background Synchronization API](https://developer.mozilla.org/en-US/docs/Web/API/Background_Synchronization_API) 使Web应用能延迟任务，一旦用户网络稳定即可在`Service Worker`中运行。但是它不能用于需要长时间运行的任务，例如下载大文件，后台同步要求Service保持活动状态直到完成，并为了节省电池寿命（节能模式）防止在后台产生不必要的任务，浏览器将在某个时刻终止该任务。\n\n新的实验性技术`Background Fetch API`解决了该问题，它为Web开发人员提供了一种告诉浏览器在后台发送请求的方法。例如当用户点击下载按钮时下载视频时，浏览器以一种可见的方式执行`fetch`，并向用户显示进度和取消下载的方法，下载完成后，浏览器会打开`Service Worker`，此时应用程序可根据需要响应执行某些操作。\n如果用户在离线状态下启动进程，`Background Fetch`也会启动，一旦网络连接，它就会开始，如果用户再次离线，会暂停知道用户再次上线。\n\n### Example\n\n```js\n// client.js\n\nfunction startBgFetch() {\n    if (!('BackgroundFetchManager' in self)) {\n        fallbackFetch(item);\n        return;\n    }\n    const reg = await navigator.serviceWorker.ready;\n    const bgFetch = await reg.backgroundFetch.fetch(\n        id, \n        [item.src], \n        {\n            title: item.title,\n            icons: [\n                { \n                    sizes: '300x300', \n                    src: item.image, \n                    type: 'image/jpeg' \n                }\n            ],\n            downloadTotal: item.size\n        }\n    );\n    monitorBgFetch(bgFetch);\n}\n\nasync function monitorBgFetch(bgFetch) {\n    function doUpdate() {\n        const update = {};\n        if (bgFetch.result === '') {\n            update.state = 'fetching';\n            update.progress = bgFetch.downloaded / bgFetch.downloadTotal;\n        } else if (bgFetch.result === 'success') {\n            update.state = 'fetching';\n            update.progress = 1;\n        } else if (bgFetch.failureReason === 'aborted') { // Failure\n            update.state = 'not-stored';\n        } else { // other failure\n            update.state = 'failed';\n        }\n    \n        updateItem(bgFetch.id, update);\n    };\n      \n      doUpdate();\n    \n      bgFetch.addEventListener('progress', doUpdate);\n      const channel = new BroadcastChannel(bgFetch.id);\n      \n    channel.onmessage = (event) => {\n        if (!event.data.stored) return;\n        bgFetch.removeEventListener('progress', doUpdate);\n        channel.close();\n        updateItem(bgFetch.id, { state: 'stored' });\n    };\n}\n\n// sw.js\n\naddEventListener('fetch', (event) => {\n    event.respondWith(async function() {\n        const cachedResponse = await caches.match(event.request);\n        return cachedResponse || fetch(event.request);\n    }());\n});\n\naddEventListener('backgroundfetchsuccess', event => {\n    const bgFetch = event.registration;\n    event.waitUntil(async function () {\n    new BroadcastChannel(bgFetch.id).postMessage({ stored: true });\n    }());\n});\n\naddEventListener('backgroundfetchfail', event => {\n    console.log('Background fetch failed', event);\n});\n\naddEventListener('backgroundfetchclick', event => {\n    clients.openWindow('/');\n});\n```","src/content/blog/200-Learning/210-Programing/一些有意思的Web API.md","9abfae6e2aeb155d",{"html":972,"metadata":973},"\u003Cblockquote>\n\u003Cp>The function of wisdom is to discriminate between good and evil.\n— \u003Ccite>Cicero\u003C/cite>\u003C/p>\n\u003C/blockquote>\n\u003Ch2 id=\"toc\">TOC\u003C/h2>\n\u003Cul>\n\u003Cli>\u003Ca href=\"#ime\">IME\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#edit-context\">Edit Context\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#background-fetch-api\">Background Fetch API\u003C/a>\n\u003Cul>\n\u003Cli>\u003Ca href=\"#example\">Example\u003C/a>\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"ime\">IME\u003C/h2>\n\u003Cul>\n\u003Cli>\u003Ca href=\"https://w3c.github.io/uievents/#ime\">IME | W3C\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://w3c.github.io/uievents/#text-composition-system\">text composition system | W3C\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://github.com/w3c/uievents/issues/180\">Issue #180 · w3c/uievents · GitHub\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://developer.mozilla.org/en-US/docs/Glossary/Input_method_editor\">Input method editor | MDN\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://developer.squareup.com/blog/understanding-composition-browser-events/\">Understanding Composition Browser Events | Square Corner Blog\u003C/a>\u003C/li>\n\u003C/ul>\n\u003Cp>输入法编辑器是一种操作系统程序，用于将一种语言或字符集转换为另一种语言或字符集。例如输入\u003Cem>nihao\u003C/em>，键盘上没这种字符，但如果启用IME，开始打字时会出现下滑线表明IME处于活跃状态，在此过程中可以选择哪组字符与要输入的含义相匹配。按下Enter键将确认选择，将所选字符放到输入中，IME关闭。通过IME进行字符转换可输入来自任意国家/地区的母语。\u003C/p>\n\u003Ch2 id=\"edit-context\">Edit Context\u003C/h2>\n\u003Cul>\n\u003Cli>\u003Ca href=\"https://w3c.github.io/edit-context/\">EditContext API\u003C/a>\n\u003Cimg src=\"https://raw.githubusercontent.com/fw6/assets/main/toy_docs/20230626145625.png\" alt=\"image.png\">\u003C/li>\n\u003C/ul>\n\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/fw6/assets/main/toy_docs/20230626145600.png\" alt=\"image.png\">\u003C/p>\n\u003Ch2 id=\"background-fetch-api\">Background Fetch API\u003C/h2>\n\u003Cp>该API提供了一种新的方式在浏览器下载资源，如电影、音视频、软件。\u003C/p>\n\u003Cp>当网友端要求客户下载大文件时，这通常需要用户保持与页面连接才能完成下载，如果失去连接、关闭选项卡、离开下载页面都会导致下载停止\u003Cspan role=\"img\" aria-label=\"raised back of hand\">🤚\u003C/span>。\u003C/p>\n\u003Cp>\u003Ca href=\"https://developer.mozilla.org/en-US/docs/Web/API/Background_Synchronization_API\">Background Synchronization API\u003C/a> 使Web应用能延迟任务，一旦用户网络稳定即可在\u003Ccode>Service Worker\u003C/code>中运行。但是它不能用于需要长时间运行的任务，例如下载大文件，后台同步要求Service保持活动状态直到完成，并为了节省电池寿命（节能模式）防止在后台产生不必要的任务，浏览器将在某个时刻终止该任务。\u003C/p>\n\u003Cp>新的实验性技术\u003Ccode>Background Fetch API\u003C/code>解决了该问题，它为Web开发人员提供了一种告诉浏览器在后台发送请求的方法。例如当用户点击下载按钮时下载视频时，浏览器以一种可见的方式执行\u003Ccode>fetch\u003C/code>，并向用户显示进度和取消下载的方法，下载完成后，浏览器会打开\u003Ccode>Service Worker\u003C/code>，此时应用程序可根据需要响应执行某些操作。\n如果用户在离线状态下启动进程，\u003Ccode>Background Fetch\u003C/code>也会启动，一旦网络连接，它就会开始，如果用户再次离线，会暂停知道用户再次上线。\u003C/p>\n\u003Ch3 id=\"example\">Example\u003C/h3>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"js\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">// client.js\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">function\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> startBgFetch\u003C/span>\u003Cspan style=\"color:#ADBAC7\">() {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">    if\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (\u003C/span>\u003Cspan style=\"color:#F47067\">!\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#96D0FF\">'BackgroundFetchManager'\u003C/span>\u003Cspan style=\"color:#F47067\"> in\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> self)) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">        fallbackFetch\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(item);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">        return\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    }\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">    const\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> reg\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#F47067\"> await\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> navigator.serviceWorker.ready;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">    const\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> bgFetch\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#F47067\"> await\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> reg.backgroundFetch.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">fetch\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">        id, \u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">        [item.src], \u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">        {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">            title: item.title,\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">            icons: [\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">                { \u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">                    sizes: \u003C/span>\u003Cspan style=\"color:#96D0FF\">'300x300'\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, \u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">                    src: item.image, \u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">                    type: \u003C/span>\u003Cspan style=\"color:#96D0FF\">'image/jpeg'\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> \u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">                }\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">            ],\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">            downloadTotal: item.size\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">        }\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    );\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">    monitorBgFetch\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(bgFetch);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">}\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">async\u003C/span>\u003Cspan style=\"color:#F47067\"> function\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> monitorBgFetch\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#F69D50\">bgFetch\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">    function\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> doUpdate\u003C/span>\u003Cspan style=\"color:#ADBAC7\">() {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">        const\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> update\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> {};\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">        if\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (bgFetch.result \u003C/span>\u003Cspan style=\"color:#F47067\">===\u003C/span>\u003Cspan style=\"color:#96D0FF\"> ''\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">            update.state \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#96D0FF\"> 'fetching'\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">            update.progress \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> bgFetch.downloaded \u003C/span>\u003Cspan style=\"color:#F47067\">/\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> bgFetch.downloadTotal;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">        } \u003C/span>\u003Cspan style=\"color:#F47067\">else\u003C/span>\u003Cspan style=\"color:#F47067\"> if\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (bgFetch.result \u003C/span>\u003Cspan style=\"color:#F47067\">===\u003C/span>\u003Cspan style=\"color:#96D0FF\"> 'success'\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">            update.state \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#96D0FF\"> 'fetching'\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">            update.progress \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> 1\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">        } \u003C/span>\u003Cspan style=\"color:#F47067\">else\u003C/span>\u003Cspan style=\"color:#F47067\"> if\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (bgFetch.failureReason \u003C/span>\u003Cspan style=\"color:#F47067\">===\u003C/span>\u003Cspan style=\"color:#96D0FF\"> 'aborted'\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) { \u003C/span>\u003Cspan style=\"color:#768390\">// Failure\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">            update.state \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#96D0FF\"> 'not-stored'\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">        } \u003C/span>\u003Cspan style=\"color:#F47067\">else\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> { \u003C/span>\u003Cspan style=\"color:#768390\">// other failure\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">            update.state \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#96D0FF\"> 'failed'\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">        }\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    \u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">        updateItem\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(bgFetch.id, update);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    };\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">      \u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">      doUpdate\u003C/span>\u003Cspan style=\"color:#ADBAC7\">();\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    \u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">      bgFetch.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">addEventListener\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#96D0FF\">'progress'\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, doUpdate);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">      const\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> channel\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#F47067\"> new\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> BroadcastChannel\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(bgFetch.id);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">      \u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    channel.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">onmessage\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (\u003C/span>\u003Cspan style=\"color:#F69D50\">event\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) \u003C/span>\u003Cspan style=\"color:#F47067\">=>\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">        if\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (\u003C/span>\u003Cspan style=\"color:#F47067\">!\u003C/span>\u003Cspan style=\"color:#ADBAC7\">event.data.stored) \u003C/span>\u003Cspan style=\"color:#F47067\">return\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">        bgFetch.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">removeEventListener\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#96D0FF\">'progress'\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, doUpdate);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">        channel.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">close\u003C/span>\u003Cspan style=\"color:#ADBAC7\">();\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">        updateItem\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(bgFetch.id, { state: \u003C/span>\u003Cspan style=\"color:#96D0FF\">'stored'\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> });\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    };\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">}\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">// sw.js\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">addEventListener\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#96D0FF\">'fetch'\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, (\u003C/span>\u003Cspan style=\"color:#F69D50\">event\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) \u003C/span>\u003Cspan style=\"color:#F47067\">=>\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    event.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">respondWith\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#F47067\">async\u003C/span>\u003Cspan style=\"color:#F47067\"> function\u003C/span>\u003Cspan style=\"color:#ADBAC7\">() {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">        const\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> cachedResponse\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#F47067\"> await\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> caches.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">match\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(event.request);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">        return\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> cachedResponse \u003C/span>\u003Cspan style=\"color:#F47067\">||\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> fetch\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(event.request);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    }());\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">});\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">addEventListener\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#96D0FF\">'backgroundfetchsuccess'\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, \u003C/span>\u003Cspan style=\"color:#F69D50\">event\u003C/span>\u003Cspan style=\"color:#F47067\"> =>\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">    const\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> bgFetch\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> event.registration;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    event.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">waitUntil\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#F47067\">async\u003C/span>\u003Cspan style=\"color:#F47067\"> function\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> () {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">    new\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> BroadcastChannel\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(bgFetch.id).\u003C/span>\u003Cspan style=\"color:#DCBDFB\">postMessage\u003C/span>\u003Cspan style=\"color:#ADBAC7\">({ stored: \u003C/span>\u003Cspan style=\"color:#6CB6FF\">true\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> });\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    }());\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">});\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">addEventListener\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#96D0FF\">'backgroundfetchfail'\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, \u003C/span>\u003Cspan style=\"color:#F69D50\">event\u003C/span>\u003Cspan style=\"color:#F47067\"> =>\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    console.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">log\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#96D0FF\">'Background fetch failed'\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, event);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">});\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">addEventListener\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#96D0FF\">'backgroundfetchclick'\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, \u003C/span>\u003Cspan style=\"color:#F69D50\">event\u003C/span>\u003Cspan style=\"color:#F47067\"> =>\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    clients.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">openWindow\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#96D0FF\">'/'\u003C/span>\u003Cspan style=\"color:#ADBAC7\">);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">});\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>",{"headings":974,"localImagePaths":988,"remoteImagePaths":989,"frontmatter":990,"imagePaths":994},[975,976,979,982,985],{"depth":31,"slug":324,"text":325},{"depth":31,"slug":977,"text":978},"ime","IME",{"depth":31,"slug":980,"text":981},"edit-context","Edit Context",{"depth":31,"slug":983,"text":984},"background-fetch-api","Background Fetch API",{"depth":37,"slug":986,"text":987},"example","Example",[],[],{"title":962,"description":15,"pubDate":76,"heroImage":964,"date created":991,"date modified":992,"tags":993,"minutesRead":956},["Date","2023-06-27T00:00:00.000Z"],["Date","2023-06-27T00:00:00.000Z"],[133,966,967,182,242],[],"200-Learning/210-Programing/一些有意思的Web API.md","200-learning/210-programing/一些通用的编程知识",{"id":996,"data":998,"body":1003,"filePath":1004,"digest":1005,"rendered":1006,"legacyId":1023},{"title":999,"description":15,"pubDate":1000,"heroImage":1001,"tags":1002},"一些通用的编程知识",["Date","2023-06-27T08:23:00.000Z"],"https://images.unsplash.com/photo-1521185496955-15097b20c5fe?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=640&q=80",[133,242],"#Programming\n\n> So much technology, so little talent.\n> — \u003Ccite>Vernor Vinge\u003C/cite>\n\n## TOC\n\n## Bitmask 位掩码\n\n[JavaScript - How is svelte making a component dirty - Stack Overflow](https://stackoverflow.com/questions/59541070/how-is-svelte-making-a-component-dirty)\n\nsvelte使用$bitmask$技术保存脏检查结果：\n```js\ncomponent.$$.dirty[(i / 31) | 0] |= (1 \u003C\u003C (i % 31));\n```\n- **(i / 31) | 0  计算位掩码的索引**\n- **(1 \u003C\u003C (i % 31)) 提供位掩码该位的值**\n- **|= 将该位默认位1**\n- **-1** **用于表示该组件非脏节点**\n\n## Diff DOM\n\n[Virtual DOM: Back in Block | Million.js](https://million.dev/blog/virtual-dom)\n\n>1. 静态分析阶段，将树的动态部分提取到 mappings 中;\n\n>2. 通过脏检查比较数据来确定发生了哪些变化。状态变化则通过mappings更新DOM.\n\n具体步骤\n\n- 不使用React渲染jsx，而是使用million.js，用holes 表示动态变化的部分并传递到虚拟DOM，holes作为动态内容的占位符\n- 一旦通过脏检查确定状态变化的内容，即可通过mappings找到各自的节点并直接更新DOM\nBlock Virtual DOM适合的使用场景：\n- 静态内容较多。此时可跳过大量静态部分\n- 适用于稳定、变化不大的UI树，","src/content/blog/200-Learning/210-Programing/一些通用的编程知识.md","069e7156d11dda32",{"html":1007,"metadata":1008},"\u003Cp>#Programming\u003C/p>\n\u003Cblockquote>\n\u003Cp>So much technology, so little talent.\n— \u003Ccite>Vernor Vinge\u003C/cite>\u003C/p>\n\u003C/blockquote>\n\u003Ch2 id=\"toc\">TOC\u003C/h2>\n\u003Cul>\n\u003Cli>\u003Ca href=\"#bitmask-%E4%BD%8D%E6%8E%A9%E7%A0%81\">Bitmask 位掩码\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#diff-dom\">Diff DOM\u003C/a>\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"bitmask-位掩码\">Bitmask 位掩码\u003C/h2>\n\u003Cp>\u003Ca href=\"https://stackoverflow.com/questions/59541070/how-is-svelte-making-a-component-dirty\">JavaScript - How is svelte making a component dirty - Stack Overflow\u003C/a>\u003C/p>\n\u003Cp>svelte使用$bitmask$技术保存脏检查结果：\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"js\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">component.$$.dirty[(i \u003C/span>\u003Cspan style=\"color:#F47067\">/\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> 31\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) \u003C/span>\u003Cspan style=\"color:#F47067\">|\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> 0\u003C/span>\u003Cspan style=\"color:#ADBAC7\">] \u003C/span>\u003Cspan style=\"color:#F47067\">|=\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (\u003C/span>\u003Cspan style=\"color:#6CB6FF\">1\u003C/span>\u003Cspan style=\"color:#F47067\"> &#x3C;&#x3C;\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (i \u003C/span>\u003Cspan style=\"color:#F47067\">%\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> 31\u003C/span>\u003Cspan style=\"color:#ADBAC7\">));\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Cul>\n\u003Cli>\u003Cstrong>(i / 31) | 0  计算位掩码的索引\u003C/strong>\u003C/li>\n\u003Cli>\u003Cstrong>(1 &#x3C;&#x3C; (i % 31)) 提供位掩码该位的值\u003C/strong>\u003C/li>\n\u003Cli>\u003Cstrong>|= 将该位默认位1\u003C/strong>\u003C/li>\n\u003Cli>\u003Cstrong>-1\u003C/strong> \u003Cstrong>用于表示该组件非脏节点\u003C/strong>\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"diff-dom\">Diff DOM\u003C/h2>\n\u003Cp>\u003Ca href=\"https://million.dev/blog/virtual-dom\">Virtual DOM: Back in Block | Million.js\u003C/a>\u003C/p>\n\u003Cblockquote>\n\u003Col>\n\u003Cli>静态分析阶段，将树的动态部分提取到 mappings 中;\u003C/li>\n\u003C/ol>\n\u003C/blockquote>\n\u003Cblockquote>\n\u003Col start=\"2\">\n\u003Cli>通过脏检查比较数据来确定发生了哪些变化。状态变化则通过mappings更新DOM.\u003C/li>\n\u003C/ol>\n\u003C/blockquote>\n\u003Cp>具体步骤\u003C/p>\n\u003Cul>\n\u003Cli>不使用React渲染jsx，而是使用million.js，用holes 表示动态变化的部分并传递到虚拟DOM，holes作为动态内容的占位符\u003C/li>\n\u003Cli>一旦通过脏检查确定状态变化的内容，即可通过mappings找到各自的节点并直接更新DOM\nBlock Virtual DOM适合的使用场景：\u003C/li>\n\u003Cli>静态内容较多。此时可跳过大量静态部分\u003C/li>\n\u003Cli>适用于稳定、变化不大的UI树，\u003C/li>\n\u003C/ul>",{"headings":1009,"localImagePaths":1017,"remoteImagePaths":1018,"frontmatter":1019,"imagePaths":1022},[1010,1011,1014],{"depth":31,"slug":324,"text":325},{"depth":31,"slug":1012,"text":1013},"bitmask-位掩码","Bitmask 位掩码",{"depth":31,"slug":1015,"text":1016},"diff-dom","Diff DOM",[],[],{"title":999,"description":15,"pubDate":76,"heroImage":1001,"date created":1020,"date modified":78,"tags":1021,"minutesRead":404},"2023-06-26 09:46",[133,242],[],"200-Learning/210-Programing/一些通用的编程知识.md","200-learning/210-programing/你不知道的js",{"id":1024,"data":1026,"body":1032,"filePath":1033,"digest":1034,"rendered":1035,"legacyId":1095},{"title":1027,"description":15,"pubDate":1028,"heroImage":1029,"tags":1030},"你不知道的JS",["Date","2023-06-27T08:23:00.000Z"],"https://images.unsplash.com/photo-1550063873-ab792950096b?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=640&q=80",[20,1031,242],"JS","#Programming #FE\n\n> Go to your bosom: Knock there and ask your heart what it doth know.  \n> — \u003Ccite>William Shakespeare\u003C/cite>\n\n## TOC\n\n## 在什么情况下 `a === a - 1`\n\n1. 正负`Infinity`。\n\n```js\nconst a = Infinity;\nconsole.log(a === a - 1); // true\n\nconst b = -Infinity;\nconsole.log(b === b - 1);  // true\n```\n\n2. 超过`Number.MAX_SAFE_INTEGER`或`Number.MIN_SAFE_INTEGER`的值。\n\n```js\nconst a  = Number.MAX_SAFE_INTEGER + 4\nconsole.log(a === a - 1); // true\n```\n\n扩展：在什么情况下`a == a - 1`\n\n```js\nconst x = 1\n// 将对象转为基本类型值（拆箱转换）\nconst a = { x, valueOf: () => a.x }\n// 每次触发getter都会将x-1\nObject.defineProperty(a, 'x', { get() { return --x } })\n```\n\n```js\n// 每次获取a的时候，让a+1\n{\n\tlet count = 0;\n\tObject.defineProperty(globalThis, 'a', {\n\t  get() {\n\t    return ++count;\n\t  }\n\t});\n}\n```\n\n## 如何判断对象某个属性可写？\n\n1. 属性是`accessor property`，并且只有一个`getter`，这个属性不可写\n\n```js\nconst obj = {\n\tget a() {\n\t\treturn 'a'\n\t}\n}\nconsole.log(obj.a) // a\nobj.a = 'b'\nconsole.log(obj.a) // a\n```\n\n2. 这个属性的`Descriptor`设置了`writable`为`false`，这个属性不可写\n\n```js\nconst obj = {};\n\nObject.defineProperty(obj, 'a', {\n  value: 'a',\n  writable: false,\n});\n\nconsole.log(obj.a); // a\nobj.a = 'b';\nconsole.log(obj.a); // a\n```\n\n3. 目标对象被`Object.freeze`，实际上也是将对象上所有属性的`writable`设置为`false`\n\n```js\nconst obj = {a: 'a'};\nObject.freeze(obj);\n\nconsole.log(obj.a); // a\nobj.a = 'b';\nconsole.log(obj.a); // a\n```\n\n```js\nfunction isOwnPropertyWritable(obj, prop) {\n  // 判断 null 和 undefined\n  if(obj == null) return false;\n\n  // 判断其他原始类型\n  const type = typeof obj;\n  if(type !== 'object' && type !== 'function') return false;\n\n  // 判断是否被冻结\n  if(Object.isFrozen(obj)) return false;\n\n  // 判断sealed的新增属性\n  if(!(prop in obj) && Object.isSealed(obj)) return false;\n\n  // 判断属性描述符\n  const des = Object.getOwnPropertyDescriptor(obj, prop);\n  return des == null || des.writable || !!des.set;\n}\n\nfunction isPropertyWritable(obj, prop) {\n  while(obj) {\n\tif(!isOwnPropertyWritable(obj, prop)) return false;\n\tobj = Object.getPrototypeOf(obj);\n  }\n\n  return true;\n}\n```\n\n## `+0`与`-0`的区别\n\n`JavaScript`的数值`Numbe`使用64位浮点数表示，首位是符号位，然后是52位的整数位和11位的小数位。如果符号位是1，其他各位都是0，那么这个数值会被表示为“`-0`”。所以JavaScript的“0”值有两个，`+0`和`-0`\n\n使用二进制构造出`-0`：\n\n```js\n// 首先创建一个8位的ArrayBuffer\nconst buffer = new ArrayBuffer(8);\n// 创建DataView对象操作buffer\nconst dataView = new DataView(buffer);\n\n// 将第1个字节设置为0x80，即最高位为1\ndataView.setUint8(0, 0x80);\n\n// 将buffer内容当做Float64类型返回\nconsole.log(dataView.getFloat64(0)); // -0\n```\n\n使用一般运算得出`-0`：\n\n```js\n// 使用-Infinity作为分母\nconsole.log(1 / -Infinity); // -0\nconsole.log(-1 / Infinity); // -0\n// 负数除法超过最小可表示数\nconsole.log(-Number.MIN_VALUE / 2); // -0\nconsole.log(-1e-1000); // -0\n```\n\n一般情况下`-0`等于`0`：\n\n```js\nconsole.log(-0 === 0) // true\n```\n\n如何区分`-0`和`0`?\n\n```js\nconsole.log(Object.is(0, -0)) // false\n// 作为分母判断是否为-Infinity\nconsole.log(1/-0 === -Infinity) // true\n```\n\n其他补充：\n\n1. 所有位运算都会把`-0`转为`0`。因为位运算首先会先转**int32**，而**int32**是没有`-0`的。另外**BigInt**也是没有`-0`的，所有`Object.is(-0n, 0n)`返回`true`\n2. `JSON.parse(\"-0\")`返回`-0`，然而`JSON.stringify(-0)`返回“`0`”，所以是不对称的\n\n## 如何优雅的获取数值的整数部分和小数部分？\n\n### 获取整数部分\n\n1. Math.trunc\n2. parseInt。缺点：函数名字符串转整数，结果虽正确但不合适；如果第一个参数不是字符串，会先转为字符串，有性能浪费；`parseInt(0.0000001) === 1`\n3. 位或“`|`”操作。缺点：位操作的处理中会将操作数转为`int32`，所以它不能处理超过32位的数值，而JavaScript的有效整数范围是53位\n4. 原数减去小数部分\n\n```js\nconst num = 3.75;\n\n// 1\nconsole.log(parseInt(num)); // 3\n// 2\nconsole.log(Math.trunc(num)); // 3\n// 3\nconsole.log(num | 0); // 3\nconsole.log(~~num); // 3\nconsole.log(num >> 0); // 3\n// 4\nconsole.log(num - num % 1) // 3\n```\n\n### 获取小数部分\n\n1. 原数值减去整数部分\n2. 对`1`取模。缺点：可能精度丢失\n\n```js\n// 1\nfunction fract(num) {\n  return num - Math.trunc(num);\n}\nconsole.log(fract(3.75)); // 0.75\n// 2\nconsole.log(3.75 % 1); // 0.75\n```\n\n## 关于tc39提案[Explicit Resource Management](https://github.com/tc39/proposal-explicit-resource-management)\n\n该提案已进入stage3，主要用于解决各类资源（内存、I/O等）的生命周期管理常见模式，包括资源的分配和显式释放能力。如：\n\n```js\nfunction * g() {\n  const handle = acquireFileHandle(); // critical resource\n  try {\n    ...\n  }\n  finally {\n    handle.release(); // cleanup\n  }\n}\n\nconst obj = g();\ntry {\n  const r = obj.next();\n  ...\n}\nfinally {\n  obj.return(); // calls finally blocks in `g`\n}\n```\n\n生成器函数在离开某个作用域需要调用`return`方法释放，以确保清理掉该迭代器示例。\n\n该提案提供了通用的解决方案：\n\n```js\n{\n  await using obj = g(); // block-scoped declaration\n  const r = await obj.next();\n} // calls finally blocks in `g`\n```\n\n使用`using`声明语法可在离开作用域前，执行资源退出的相关处理`Symbol.dispose()`被执行（多个则按照相反的顺序执行），如果资源没有可调用的`Symbol.dispose`成员，则在跟踪资源时立即抛出`TypeError`\n\n一些例子：  \n**WHATWG Streams API**\n\n```js\n{\n  using reader = stream.getReader();\n  const { value, done } = reader.read();\n} // 'reader' is disposed\n```\n\n**NodeJS FileHandle**\n\n```js\n{\n  using f1 = await fs.promises.open(s1, constants.O_RDONLY),\n        f2 = await fs.promises.open(s2, constants.O_WRONLY);\n  const buffer = Buffer.alloc(4092);\n  const { bytesRead } = await f1.read(buffer);\n  await f2.write(buffer, 0, bytesRead);\n} // 'f2' is disposed, then 'f1' is disposed\n```\n\n内置的Disposables\n\n1. `IteratorPrototype`\n2. `AsyncIteratorPrototype`\n\n如果一个对象符合如下接口，则可称为**disposable**或**async disposable**\n\n```ts\ninterface Disposable {\n  /**\n   * Disposes of resources within this object.\n   */\n  [Symbol.dispose](): void;\n}\n\ninterface AsyncDisposable {\n  /**\n   * Disposes of resources within this object.\n   */\n  [Symbol.asyncDispose](): Promise\u003Cvoid>;\n}\n```\n\n## 关于`Symbol.toPrimitive`\n\n**`Symbol.toPrimitive`** 是内置的 symbol 属性，其指定了一种接受首选类型并返回对象原始值的表示的方法。它被所有的[强类型转换制](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Data_structures#%E5%BC%BA%E5%88%B6%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2)算法优先调用。\n\n```js\nconst object1 = {\n  [Symbol.toPrimitive](hint) {\n    if (hint === 'number') {\n      return 42;\n    }\n    return null;\n  }\n};\n\nconsole.log(+object1); // 42\n```\n\n在 `Symbol.toPrimitive` 属性（用作函数值）的帮助下，对象可以转换为一个原始值。该函数被调用时，会被传递一个字符串参数 `hint`，表示要转换到的原始值的预期类型。`hint` 参数的取值是 `\"number\"`、`\"string\"` 和 `\"default\"` 中的任意一个。\n\n`\"number\"` hint 用于[强制数字类型转换](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Data_structures#%E5%BC%BA%E5%88%B6%E6%95%B0%E5%AD%97%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2)算法。`\"string\"` hint 用于[强制字符串类型转换](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String#%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%BC%BA%E5%88%B6%E8%BD%AC%E6%8D%A2)算法。`\"default\"` hint 用于[强制原始值转换](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Data_structures#%E5%BC%BA%E5%88%B6%E5%8E%9F%E5%A7%8B%E5%80%BC%E8%BD%AC%E6%8D%A2)算法。`hint` 仅是作为首选项的偏弱的信号提示，实现时，可以自由忽略它（就像 [`Symbol.prototype[@@toPrimitive]()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol/@@toPrimitive) 一样）。该语言不会在 `hint` 和结果类型之间强制校正，尽管 `[@@toPrimitive]()` 必须返回一个原始值，否则将抛出 [`TypeError`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypeError)。\n\n没有 `@@toPrimitive` 属性的对象通过以不同的顺序调用 `valueOf()` 和 `toString()` 方法将其转换为原始值，这在**强制类型转换**部分进行了更详细的解释。`@@toPrimitive` 允许完全控制原始转换过程。例如，[`Date.prototype[@@toPrimitive]`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date/@@toPrimitive) 将 `\"default\"` 视为 `\"string\"` 并且调用 `toString()` 而不是 `valueOf()`。[`Symbol.prototype[@@toPrimitive]`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol/@@toPrimitive) 忽略 hint，并总是返回一个 symbol，这意味着即使在字符串上下文中，也不会调用 [`Symbol.prototype.toString()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toString)，并且 `Symbol` 对象必须始终通过 `String()` 显式转换为字符串。\n\n## 强制类型转换\n\n强制类型转换用于得到一个期望的原始值。如果值已经时原始值，则不会进行任何转换。对象将按照以下顺序调用它的如下方法：\n\n1. **\\[\\[@@toPrimitive\\]\\]**\n2. valueOf\n3. toString  \n通过如上方法转为原始值。\n\n**\\[\\[@@toPrimitive\\]\\]** 方法如果存在，则必须返回原始值，返回对象则导致`TypeError`。对于`valueOf`和`toString`，如果其中一个返回对象，则忽略其返回值，从而使用另一个的返回值；如果两者都不存在，或两者都没返回原始值，则抛出`TypeError`。\n\n```js\nconsole.log({} + []); // \"[object Object]\"\n```\n\n`{}` 和 `[]` 都没有 `[@@toPrimitive]()` 方法。`{}` 和 `[]` 都从 [`Object.prototype.valueOf`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf) 继承 `valueOf()`，其返回对象自身。因为返回值是一个对象，因此它被忽略。因此，调用 `toString()` 方法。[`{}.toString()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/toString) 返回 `\"[object Object]\"`，而 [`[].toString()`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/toString) 返回 `\"\"`，因此这个结果为：`\"[object Object]\"`。\n\n## JavaScript的并发模型与事件循环\n\n`JavaScript` 有一个基于**事件循环**的并发模型，事件循环负责执行代码、收集和处理事件以及执行队列中的子任务。\n\n如下图展示了现代`JavaScript`引擎在运行时的可视化描述  \n![image.png](https://raw.githubusercontent.com/fw6/assets/main/toy_docs/20230717162354.png)\n\n栈：函数调用形成了一个由若干帧组成的栈，帧中包含了函数的参数和局部变量（执行上下文）。当函数执行完毕所属栈被弹出⏏️  \n堆：对象被分配在堆（一大块非结构化的内存区域）中。  \n队列：一个`JavaScript`运行时包含了一个待处理的消息队列。每个消息都关联着一个用以处理这个消息的回调函数。\n\n事件循环的常常以如下方式实现：\n\n```js\nwhile (queue.waitForMessage()) {\n  queue.processNextMessage();\n}\n```\n\n可以看到整个事件循环就是反复“等待-执行”。\n\nEventLoop的定义 -> [WHATWG/task-queue](https://html.spec.whatwg.org/multipage/webappapis.html#task-queue)\n\n事件循环有一个或多个任务队列，任务队列是一组任务。\n\n>实际上任务队列是集合而非队列，因为事件循环处理模型是从所选队列中获取第一个可执行的任务，而不是使第一个任务出队。\n\n>微任务队列不是任务队列！\n\n每个事件循环都有一个微任务队列。微任务是指通过微任务算法队列创建的任务的通俗说法。  \n每个事件循环都有一个执行微任务检查的布尔值，用于防治执行微任务检查点的重复执行。\n\n当拿到一段`JavaScript`代码时，浏览器首先要做的是传递给`JavaScript`引擎，并要求它执行。执行`JavaScript`代码并非一次性，当宿主环境（浏览器、`Node`、`Deno`、小程序容器）遇到一些事时，会继续传递一段代码让`JavaScript`引擎执行。此外，我们还会提供API给`JavaScrip`t引擎，比如`setTimeout`（由宿主环境实现！）这种，它会允许JavaScript在特定时机执行。\n\n在ES3和更早版本，`JavaScript`本身没有异步能力，这就意味着传递给`JavaScript`引擎一段代码，引擎直接顺序执行了，这个任务也就是宿主发起的任务。\n\n在ES5之后，`JavaScript`引入了`Promise`，这样无序浏览器安排，`JavaScript`引擎本身就能发起任务了。\n\n`JSC`引擎对任务的定义：宿主发起的称为宏观任务，JavaScript引擎发起的称为微观任务。  \n`JavaScript`引擎等待宿主环境分配宏观任务，在操作系统中，通常等待的行为就是一个事件循环，所以在Node术语中，会把这部分称为事件循环。\n\n宏观任务队列就相当于事件循环。\n\n在宏观任务中，`JavaScript`还会产生异步代码，`JavaScrip`t必须保证这些异步代码在一个宏观任务中执行完成，因此每个宏观任务中又包含了一个微观任务队列。\n\n有了宏观任务与微观任务机制，就可以实现`JavaScript`引擎级和宿主级的任务了。例如：`Promise`永远在队列尾部添加微观任务，`setTimeout`、``requestIdleCallback``等宿主API则会添加宏任务。\n\n```js\nvar r = new Promise(function(resolve, reject){\n\tconsole.log(\"a\");\n\tresolve()\n});\nsetTimeout(()=>console.log(\"d\"), 0)\nr.then(() => console.log(\"c\"));\nconsole.log(\"b\")\n```\n\n执行这段代码，可看到执行顺序为`a`->`b`->`c`->`d`。因为`Promise`产生的时微任务，在第一次宏任务执行`a`、`b`，`Promise`创建的微任务被执行，即打印了`c`，然后定时器执行触发内部新的宏任务，打印`d`。\n\n微任务始终先于宏任务！\n\n```js\n// 下面这段代码进入执行栈时延时就已经开始了\nsetTimeout(()=>console.log(\"d\"), 0)\n\nvar r = new Promise(function(resolve, reject){\n\tresolve()\n});\n\nr.then(() => {\n\tvar begin = Date.now();\n\twhile(Date.now() - begin \u003C 1000);\n\tconsole.log(\"c1\")\n\tnew Promise(function(resolve, reject){\n\t\tresolve()\n\t}).then(() => console.log(\"c2\"))\n});\n```\n\n上方代码中在微任务中阻塞执行1s后创建了新的微任务，最终结果依旧是：`c1`->`c2`->`d`\n\n## 执行上下文、闭包、作用域链、this值\n\n`JavaScript`标准把一段代码（包括函数），执行所需的所有信息定义为：“执行上下文”。\n\n执行上下文在ES5中包含了如下部分：\n\n- `lexical environment`。词法环境，当获取变量时使用\n- `variable environment`。变量环境，当声明变量时使用\n- `this value`。`this`值\n\n在ES2018中，执行上下文又变成了如下内容：\n\n- `lexical environment`。词法环境，当获取变量和`this`值时使用\n- `variable environment`。变量环境，当申明变量时使用\n- `code evaluation state`。用于恢复代码执行位置\n- `Function`。执行的任务是函数时使用，表示正在被执行的函数\n- `ScriptOrModule`。执行的任务是脚本或模块时使用，表示正在被执行的代码\n- `Realm`。使用的基础库和内置对象实例\n- `Generator`。仅生成器上下文有此属性，表示当前生成器。\n\n### this关键字的行为\n\n:::note\n`this`是运行时，作用域是定义时\n:::\n\n`this`是执行上下文中很重要的一个组成部分。同一个函数调用方式不同，得到的`this`值也不同，如下所示：\n\n```js\nfunction showThis(){\n    console.log(this);\n}\n\nvar o = {\n    showThis: showThis\n}\n\nshowThis(); // global\no.showThis(); // o\n```\n\n在上方示例中定义了函数`showThis`，把它赋值给一个对象o的属性，分别使用两个引用来调用同一个函数，结果得到了不同的`this`值。\n\n普通函数的this值由”调用它所使用的引用“决定，我们获取函数的表达式，它实际上返回的并非函数本身，而是一个`Reference`类型。\n\n`Reference`类型包含两部分：对象和属性值。`o.showThis`产生的`Reference`类型，即由对象o和属性“showThis”构成。\n\n当做一些运算时，`Reference`类型会被解引用，即获取真正的值来参与运算，而类似函数调用、delete操作等，都需要使用到`Reference`类型中的对象。  \n在上方例子中，`Reference`类型中的对象被当作`this`值，传入了执行函数的上下文中。\n\n一言以蔽之：调用函数时，决定了函数运行时刻的`this`值。  \n实际上从运行时的角度来看，`this`跟面向对象毫无关联，它是与函数调用时使用的表达式相关。\n\n再来看“方法”，它的表现又不一样：\n\n```js\nclass C {\n    showThis() {\n        console.log(this);\n    }\n}\nvar o = new C();\nvar showThis = o.showThis;\n\nshowThis(); // undefined\no.showThis(); // o\n```\n\n当使用`showThis`这个引用去调用方法时，得到了`undefined`\n\n### `this`关键字的机制\n\n函数能够引用定义时的变量，如上文⬆️，函数也能记住定义时的this，因此函数内部必定有一个机制来保存这些信息。\n\n在JavaScript标准中，为函数规定了用来保存定义时上下文信息的私有属性`[[Environment]]`。\n\n当一个函数被执行时，会创建一个新的执行环境记录，记录的外层词法环境（otuer lexical environment）会被设置成函数的`[[Environment]]`，这个动作就是切换上下文。\n\n```js\nvar a = 1;\nfoo();\n\n// 在别处定义了foo：\n\nvar b = 2;\nfunction foo(){\n    console.log(b); // 2\n    console.log(a); // error\n}\n```\n\n这里的foo能访问定义时的b却不能访问执行时的a，这就是执行上下文的切换机制。\n\nJavaScript用一个栈来管理执行上下文，每个栈中的每一项又包含一个链表。如下所示：  \n![image.png](https://raw.githubusercontent.com/fw6/assets/main/toy_docs/20230718155325.png)  \n当函数调用时，会入栈一个新的执行上下文，函数调用时执行上下文出栈。\n\n而this是个更复杂的机制，JavaScript标准定义了`[[thisMode]]`私有属性。  \n`[[thisMode]]`包含3个取值：\n\n- lexical：表示从上下文中找到this，这对应了箭头函数\n- global。表示this为undefined时，取全局对象，对应了普通函数\n- strict。当严格模式时使用，this严格按照调用时传入的值，可能为null或undefined\n\n方法的行为和普通函数有差异，恰恰是因为class设计成了默认按照strict模式执行。\n\n函数创建新的执行上下文中的词法环境记录时，会根据`[[thisMode]]`来标记新记录的`[[ThisBindingStatus]]`私有属性。  \n代码执行到this时，会逐层检查当前词法环境记录中的`[[ThisBindingStatus]]`，当找到有this的环境记录时获取this的值。\n\n## var、let、const\n\n### var\n\n*`var` 声明了作用于函数执行的作用域*。所以在同一个函数内，`for`、`if`语句块内的`var`申明在外部也能获取。\n\n为解决该问题诞生了一个技巧——立即执行函数表达式（`IIFE`），通过创建一个函数并立即执行来构造一个新的作用域以此来控制var的范围。\n\n```js\nvoid (function() {\n\tvar a\n\t// ...\n})()\n```\n\n### `let`\n\n`let`语句声明一个块级作用域的局部变量。\n\nlet是ES6之后引入的新的变量声明模式，为实现`let`，`JavaScrip`t在运行时引入了块级作用域。也就是说在let之前，`if`、`for`语句皆不产生作用域。\n\n`var`和`let`的一个重要区别，let声明的变量不会在作用域中被提升，它是在编译时才初始化。  \n`let`和`const`一样，不会在全局声明中创建`window`对象的属性。  \n与`let`不同的是，`let`只是开始声明而非完整表达式，如下所示：\n\n```js\nif (true) let a = 1 // SyntaxError: Lexical declaration cannot appear in a single-statement context\n```\n\n`let`不允许重复声明（在同一个函数或块作用域），否则会抛出`SyntaxError`\n\n### `const`\n\n常量是块级范围的，非常类似用 [let](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/let) 语句定义的变量。但常量的值是无法（通过重新赋值）改变的，也不能被重新声明。\n\n**`const` 声明**创建一个值的只读引用。但这并不意味着它所持有的值是不可变的，只是变量标识符不能重新分配。例如，在引用内容是对象的情况下，这意味着可以改变对象的内容（例如，其参数）。\n\n一个常量不能和它所在作用域内的其他变量或函数拥有相同的名称。  \n常量要求一个初始值\n\n### 暂时性死区\n\n从一个代码块的开始直到代码执行到声明变量的行之前，`let` 或 `const` 声明的变量都处于“暂时性死区”（Temporal dead zone，TDZ）中。\n\n当变量处于暂时性死区之中时，其尚未被初始化，尝试访问变量将抛出 [`ReferenceError`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError)。当代码执行到声明变量所在的行时，变量被初始化为一个值。如果声明中未指定初始值，则变量将被初始化为 `undefined`。\n\n与 [`var`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/var) 声明的变量不同，如果在声明前访问了变量，变量将会返回 `undefined`。以下代码演示了在使用 `let` 和 `var` 声明变量的行之前访问变量的不同结果。\n\n```js\n{ // TDZ starts at beginning of scope\n  console.log(bar); // undefined\n  console.log(foo); // ReferenceError\n  var bar = 1;\n  let foo = 2; // End of TDZ (for foo)\n}\n\n```\n\n使用术语“temporal”是因为区域取决于执行顺序（时间），而不是编写代码的顺序（位置）。例如，下面的代码会生效，是因为即使使用 `let` 变量的函数出现在变量声明之前，但函数的执行是在暂时性死区的外面。\n\n```js\n{\n  // TDZ starts at beginning of scope\n  const func = () => console.log(letVar); // OK\n\n  // Within the TDZ letVar access throws `ReferenceError`\n\n  let letVar = 3; // End of TDZ (for letVar)\n  func(); // Called outside TDZ!\n}\n```\n\n以下代码会造成暂时性死区：\n\n```js\nfunction test() {\n  var foo = 33;\n  if(foo) {\n    let foo = (foo + 55); // ReferenceError\n  }\n}\ntest();\n```\n\n由于外部变量 `foo` 有值，因此会执行 `if` 语句块，但是由于词法作用域，该值在块内不可用：`if` 块内的标识符 `foo` 是 `let foo`。表达式 `(foo + 55)` 会抛出 `ReferenceError` 异常，是因为 `let foo` 还没完成初始化，它仍然在暂时性死区里。\n\n### 变量提升\n\n变量提升（Hoisting）被认为是，Javascript 中执行上下文（特别是创建和执行阶段）工作方式的一种认识。\n从概念的字面意义上说，“变量提升”意味着变量和函数的声明会在物理层面移动到代码的最前面，但这么说并不准确。实际上变量和函数声明在代码里的位置是不会动的，而是在编译阶段被放入内存中。\n\nJavaScript 在执行任何代码段之前，将函数声明放入内存中的优点之一是，你可以在声明一个函数之前使用该函数。\n\n\t函数和变量相比，会被优先提升。这意味着函数会被提升到更靠前的位置。\n\n即使我们在定义函数之前调用它，函数仍然可以工作。这是因为在 JavaScript 中**执行上下文**的工作方式造成的。\n变量提升也适用于其他数据类型和变量。变量可以在声明之前进行初始化和使用。但是如果没有初始化，就不能使用它们。\n\nJavaScript 只会提升声明，不会提升其初始化。如果一个变量先被使用再被声明和赋值的话，使用时的值是 undefined。\n\n```js\nconsole.log(num); // Returns undefined\nvar num;\nnum = 6;\n```\n\n如果你先赋值、再使用、最后声明该变量，使用时能获取到所赋的值\n\n```js\nnum = 6;\nconsole.log(num); // returns 6\nvar num;\n```","src/content/blog/200-Learning/210-Programing/你不知道的JS.md","2ee84b47805cb88c",{"html":1036,"metadata":1037},"\u003Cp>#Programming #FE\u003C/p>\n\u003Cblockquote>\n\u003Cp>Go to your bosom: Knock there and ask your heart what it doth know.\u003Cbr>\n— \u003Ccite>William Shakespeare\u003C/cite>\u003C/p>\n\u003C/blockquote>\n\u003Ch2 id=\"toc\">TOC\u003C/h2>\n\u003Cul>\n\u003Cli>\u003Ca href=\"#%E5%9C%A8%E4%BB%80%E4%B9%88%E6%83%85%E5%86%B5%E4%B8%8B-a--a---1\">在什么情况下 \u003Ccode>a === a - 1\u003C/code>\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#%E5%A6%82%E4%BD%95%E5%88%A4%E6%96%AD%E5%AF%B9%E8%B1%A1%E6%9F%90%E4%B8%AA%E5%B1%9E%E6%80%A7%E5%8F%AF%E5%86%99\">如何判断对象某个属性可写？\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#0%E4%B8%8E-0%E7%9A%84%E5%8C%BA%E5%88%AB\">\u003Ccode>+0\u003C/code>与\u003Ccode>-0\u003C/code>的区别\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#%E5%A6%82%E4%BD%95%E4%BC%98%E9%9B%85%E7%9A%84%E8%8E%B7%E5%8F%96%E6%95%B0%E5%80%BC%E7%9A%84%E6%95%B4%E6%95%B0%E9%83%A8%E5%88%86%E5%92%8C%E5%B0%8F%E6%95%B0%E9%83%A8%E5%88%86\">如何优雅的获取数值的整数部分和小数部分？\u003C/a>\n\u003Cul>\n\u003Cli>\u003Ca href=\"#%E8%8E%B7%E5%8F%96%E6%95%B4%E6%95%B0%E9%83%A8%E5%88%86\">获取整数部分\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#%E8%8E%B7%E5%8F%96%E5%B0%8F%E6%95%B0%E9%83%A8%E5%88%86\">获取小数部分\u003C/a>\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\u003Ca href=\"#%E5%85%B3%E4%BA%8Etc39%E6%8F%90%E6%A1%88explicit-resource-management\">关于tc39提案Explicit Resource Management\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#%E5%85%B3%E4%BA%8Esymboltoprimitive\">关于\u003Ccode>Symbol.toPrimitive\u003C/code>\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#%E5%BC%BA%E5%88%B6%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2\">强制类型转换\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#javascript%E7%9A%84%E5%B9%B6%E5%8F%91%E6%A8%A1%E5%9E%8B%E4%B8%8E%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF\">JavaScript的并发模型与事件循环\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87%E9%97%AD%E5%8C%85%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%93%BEthis%E5%80%BC\">执行上下文、闭包、作用域链、this值\u003C/a>\n\u003Cul>\n\u003Cli>\u003Ca href=\"#this%E5%85%B3%E9%94%AE%E5%AD%97%E7%9A%84%E8%A1%8C%E4%B8%BA\">this关键字的行为\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#this%E5%85%B3%E9%94%AE%E5%AD%97%E7%9A%84%E6%9C%BA%E5%88%B6\">\u003Ccode>this\u003C/code>关键字的机制\u003C/a>\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\u003Ca href=\"#varletconst\">var、let、const\u003C/a>\n\u003Cul>\n\u003Cli>\u003Ca href=\"#var\">var\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#let\">\u003Ccode>let\u003C/code>\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#const\">\u003Ccode>const\u003C/code>\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#%E6%9A%82%E6%97%B6%E6%80%A7%E6%AD%BB%E5%8C%BA\">暂时性死区\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#%E5%8F%98%E9%87%8F%E6%8F%90%E5%8D%87\">变量提升\u003C/a>\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"在什么情况下-a--a---1\">在什么情况下 \u003Ccode>a === a - 1\u003C/code>\u003C/h2>\n\u003Col>\n\u003Cli>正负\u003Ccode>Infinity\u003C/code>。\u003C/li>\n\u003C/ol>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"js\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">const\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> a\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> Infinity\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">console.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">log\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(a \u003C/span>\u003Cspan style=\"color:#F47067\">===\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> a \u003C/span>\u003Cspan style=\"color:#F47067\">-\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> 1\u003C/span>\u003Cspan style=\"color:#ADBAC7\">); \u003C/span>\u003Cspan style=\"color:#768390\">// true\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">const\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> b\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#F47067\"> -\u003C/span>\u003Cspan style=\"color:#6CB6FF\">Infinity\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">console.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">log\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(b \u003C/span>\u003Cspan style=\"color:#F47067\">===\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> b \u003C/span>\u003Cspan style=\"color:#F47067\">-\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> 1\u003C/span>\u003Cspan style=\"color:#ADBAC7\">);  \u003C/span>\u003Cspan style=\"color:#768390\">// true\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Col start=\"2\">\n\u003Cli>超过\u003Ccode>Number.MAX_SAFE_INTEGER\u003C/code>或\u003Ccode>Number.MIN_SAFE_INTEGER\u003C/code>的值。\u003C/li>\n\u003C/ol>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"js\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">const\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> a\u003C/span>\u003Cspan style=\"color:#F47067\">  =\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> Number.MAX_SAFE_INTEGER \u003C/span>\u003Cspan style=\"color:#F47067\">+\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> 4\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">console.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">log\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(a \u003C/span>\u003Cspan style=\"color:#F47067\">===\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> a \u003C/span>\u003Cspan style=\"color:#F47067\">-\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> 1\u003C/span>\u003Cspan style=\"color:#ADBAC7\">); \u003C/span>\u003Cspan style=\"color:#768390\">// true\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Cp>扩展：在什么情况下\u003Ccode>a == a - 1\u003C/code>\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"js\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">const\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> x\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> 1\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">// 将对象转为基本类型值（拆箱转换）\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">const\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> a\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> { x, \u003C/span>\u003Cspan style=\"color:#DCBDFB\">valueOf\u003C/span>\u003Cspan style=\"color:#ADBAC7\">: () \u003C/span>\u003Cspan style=\"color:#F47067\">=>\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> a.x }\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">// 每次触发getter都会将x-1\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">Object.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">defineProperty\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(a, \u003C/span>\u003Cspan style=\"color:#96D0FF\">'x'\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, { \u003C/span>\u003Cspan style=\"color:#DCBDFB\">get\u003C/span>\u003Cspan style=\"color:#ADBAC7\">() { \u003C/span>\u003Cspan style=\"color:#F47067\">return\u003C/span>\u003Cspan style=\"color:#F47067\"> --\u003C/span>\u003Cspan style=\"color:#ADBAC7\">x } })\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"js\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">// 每次获取a的时候，让a+1\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">{\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">\tlet\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> count \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> 0\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">\tObject.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">defineProperty\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(globalThis, \u003C/span>\u003Cspan style=\"color:#96D0FF\">'a'\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">\t  get\u003C/span>\u003Cspan style=\"color:#ADBAC7\">() {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">\t    return\u003C/span>\u003Cspan style=\"color:#F47067\"> ++\u003C/span>\u003Cspan style=\"color:#ADBAC7\">count;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">\t  }\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">\t});\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Ch2 id=\"如何判断对象某个属性可写\">如何判断对象某个属性可写？\u003C/h2>\n\u003Col>\n\u003Cli>属性是\u003Ccode>accessor property\u003C/code>，并且只有一个\u003Ccode>getter\u003C/code>，这个属性不可写\u003C/li>\n\u003C/ol>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"js\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">const\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> obj\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">\tget\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> a\u003C/span>\u003Cspan style=\"color:#ADBAC7\">() {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">\t\treturn\u003C/span>\u003Cspan style=\"color:#96D0FF\"> 'a'\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">\t}\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">}\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">console.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">log\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(obj.a) \u003C/span>\u003Cspan style=\"color:#768390\">// a\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">obj.a \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#96D0FF\"> 'b'\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">console.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">log\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(obj.a) \u003C/span>\u003Cspan style=\"color:#768390\">// a\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Col start=\"2\">\n\u003Cli>这个属性的\u003Ccode>Descriptor\u003C/code>设置了\u003Ccode>writable\u003C/code>为\u003Ccode>false\u003C/code>，这个属性不可写\u003C/li>\n\u003C/ol>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"js\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">const\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> obj\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> {};\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">Object.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">defineProperty\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(obj, \u003C/span>\u003Cspan style=\"color:#96D0FF\">'a'\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">  value: \u003C/span>\u003Cspan style=\"color:#96D0FF\">'a'\u003C/span>\u003Cspan style=\"color:#ADBAC7\">,\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">  writable: \u003C/span>\u003Cspan style=\"color:#6CB6FF\">false\u003C/span>\u003Cspan style=\"color:#ADBAC7\">,\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">});\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">console.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">log\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(obj.a); \u003C/span>\u003Cspan style=\"color:#768390\">// a\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">obj.a \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#96D0FF\"> 'b'\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">console.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">log\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(obj.a); \u003C/span>\u003Cspan style=\"color:#768390\">// a\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Col start=\"3\">\n\u003Cli>目标对象被\u003Ccode>Object.freeze\u003C/code>，实际上也是将对象上所有属性的\u003Ccode>writable\u003C/code>设置为\u003Ccode>false\u003C/code>\u003C/li>\n\u003C/ol>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"js\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">const\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> obj\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> {a: \u003C/span>\u003Cspan style=\"color:#96D0FF\">'a'\u003C/span>\u003Cspan style=\"color:#ADBAC7\">};\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">Object.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">freeze\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(obj);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">console.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">log\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(obj.a); \u003C/span>\u003Cspan style=\"color:#768390\">// a\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">obj.a \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#96D0FF\"> 'b'\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">console.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">log\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(obj.a); \u003C/span>\u003Cspan style=\"color:#768390\">// a\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"js\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">function\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> isOwnPropertyWritable\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#F69D50\">obj\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, \u003C/span>\u003Cspan style=\"color:#F69D50\">prop\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">  // 判断 null 和 undefined\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">  if\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(obj \u003C/span>\u003Cspan style=\"color:#F47067\">==\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> null\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) \u003C/span>\u003Cspan style=\"color:#F47067\">return\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> false\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">  // 判断其他原始类型\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">  const\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> type\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#F47067\"> typeof\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> obj;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">  if\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(type \u003C/span>\u003Cspan style=\"color:#F47067\">!==\u003C/span>\u003Cspan style=\"color:#96D0FF\"> 'object'\u003C/span>\u003Cspan style=\"color:#F47067\"> &#x26;&#x26;\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> type \u003C/span>\u003Cspan style=\"color:#F47067\">!==\u003C/span>\u003Cspan style=\"color:#96D0FF\"> 'function'\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) \u003C/span>\u003Cspan style=\"color:#F47067\">return\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> false\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">  // 判断是否被冻结\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">  if\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(Object.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">isFrozen\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(obj)) \u003C/span>\u003Cspan style=\"color:#F47067\">return\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> false\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">  // 判断sealed的新增属性\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">  if\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#F47067\">!\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(prop \u003C/span>\u003Cspan style=\"color:#F47067\">in\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> obj) \u003C/span>\u003Cspan style=\"color:#F47067\">&#x26;&#x26;\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> Object.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">isSealed\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(obj)) \u003C/span>\u003Cspan style=\"color:#F47067\">return\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> false\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">  // 判断属性描述符\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">  const\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> des\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> Object.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">getOwnPropertyDescriptor\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(obj, prop);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">  return\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> des \u003C/span>\u003Cspan style=\"color:#F47067\">==\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> null\u003C/span>\u003Cspan style=\"color:#F47067\"> ||\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> des.writable \u003C/span>\u003Cspan style=\"color:#F47067\">||\u003C/span>\u003Cspan style=\"color:#F47067\"> !!\u003C/span>\u003Cspan style=\"color:#ADBAC7\">des.set;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">}\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">function\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> isPropertyWritable\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#F69D50\">obj\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, \u003C/span>\u003Cspan style=\"color:#F69D50\">prop\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">  while\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(obj) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">\tif\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#F47067\">!\u003C/span>\u003Cspan style=\"color:#DCBDFB\">isOwnPropertyWritable\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(obj, prop)) \u003C/span>\u003Cspan style=\"color:#F47067\">return\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> false\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">\tobj \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> Object.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">getPrototypeOf\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(obj);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">  }\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">  return\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> true\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Ch2 id=\"0与-0的区别\">\u003Ccode>+0\u003C/code>与\u003Ccode>-0\u003C/code>的区别\u003C/h2>\n\u003Cp>\u003Ccode>JavaScript\u003C/code>的数值\u003Ccode>Numbe\u003C/code>使用64位浮点数表示，首位是符号位，然后是52位的整数位和11位的小数位。如果符号位是1，其他各位都是0，那么这个数值会被表示为“\u003Ccode>-0\u003C/code>”。所以JavaScript的“0”值有两个，\u003Ccode>+0\u003C/code>和\u003Ccode>-0\u003C/code>\u003C/p>\n\u003Cp>使用二进制构造出\u003Ccode>-0\u003C/code>：\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"js\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">// 首先创建一个8位的ArrayBuffer\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">const\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> buffer\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#F47067\"> new\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> ArrayBuffer\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#6CB6FF\">8\u003C/span>\u003Cspan style=\"color:#ADBAC7\">);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">// 创建DataView对象操作buffer\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">const\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> dataView\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#F47067\"> new\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> DataView\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(buffer);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">// 将第1个字节设置为0x80，即最高位为1\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">dataView.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">setUint8\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#6CB6FF\">0\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, \u003C/span>\u003Cspan style=\"color:#6CB6FF\">0x80\u003C/span>\u003Cspan style=\"color:#ADBAC7\">);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">// 将buffer内容当做Float64类型返回\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">console.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">log\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(dataView.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">getFloat64\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#6CB6FF\">0\u003C/span>\u003Cspan style=\"color:#ADBAC7\">)); \u003C/span>\u003Cspan style=\"color:#768390\">// -0\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Cp>使用一般运算得出\u003Ccode>-0\u003C/code>：\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"js\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">// 使用-Infinity作为分母\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">console.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">log\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#6CB6FF\">1\u003C/span>\u003Cspan style=\"color:#F47067\"> /\u003C/span>\u003Cspan style=\"color:#F47067\"> -\u003C/span>\u003Cspan style=\"color:#6CB6FF\">Infinity\u003C/span>\u003Cspan style=\"color:#ADBAC7\">); \u003C/span>\u003Cspan style=\"color:#768390\">// -0\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">console.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">log\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#F47067\">-\u003C/span>\u003Cspan style=\"color:#6CB6FF\">1\u003C/span>\u003Cspan style=\"color:#F47067\"> /\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> Infinity\u003C/span>\u003Cspan style=\"color:#ADBAC7\">); \u003C/span>\u003Cspan style=\"color:#768390\">// -0\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">// 负数除法超过最小可表示数\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">console.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">log\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#F47067\">-\u003C/span>\u003Cspan style=\"color:#ADBAC7\">Number.MIN_VALUE \u003C/span>\u003Cspan style=\"color:#F47067\">/\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> 2\u003C/span>\u003Cspan style=\"color:#ADBAC7\">); \u003C/span>\u003Cspan style=\"color:#768390\">// -0\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">console.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">log\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#F47067\">-\u003C/span>\u003Cspan style=\"color:#6CB6FF\">1e-1000\u003C/span>\u003Cspan style=\"color:#ADBAC7\">); \u003C/span>\u003Cspan style=\"color:#768390\">// -0\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Cp>一般情况下\u003Ccode>-0\u003C/code>等于\u003Ccode>0\u003C/code>：\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"js\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">console.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">log\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#F47067\">-\u003C/span>\u003Cspan style=\"color:#6CB6FF\">0\u003C/span>\u003Cspan style=\"color:#F47067\"> ===\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> 0\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) \u003C/span>\u003Cspan style=\"color:#768390\">// true\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Cp>如何区分\u003Ccode>-0\u003C/code>和\u003Ccode>0\u003C/code>?\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"js\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">console.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">log\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(Object.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">is\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#6CB6FF\">0\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, \u003C/span>\u003Cspan style=\"color:#F47067\">-\u003C/span>\u003Cspan style=\"color:#6CB6FF\">0\u003C/span>\u003Cspan style=\"color:#ADBAC7\">)) \u003C/span>\u003Cspan style=\"color:#768390\">// false\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">// 作为分母判断是否为-Infinity\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">console.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">log\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#6CB6FF\">1\u003C/span>\u003Cspan style=\"color:#F47067\">/-\u003C/span>\u003Cspan style=\"color:#6CB6FF\">0\u003C/span>\u003Cspan style=\"color:#F47067\"> ===\u003C/span>\u003Cspan style=\"color:#F47067\"> -\u003C/span>\u003Cspan style=\"color:#6CB6FF\">Infinity\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) \u003C/span>\u003Cspan style=\"color:#768390\">// true\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Cp>其他补充：\u003C/p>\n\u003Col>\n\u003Cli>所有位运算都会把\u003Ccode>-0\u003C/code>转为\u003Ccode>0\u003C/code>。因为位运算首先会先转\u003Cstrong>int32\u003C/strong>，而\u003Cstrong>int32\u003C/strong>是没有\u003Ccode>-0\u003C/code>的。另外\u003Cstrong>BigInt\u003C/strong>也是没有\u003Ccode>-0\u003C/code>的，所有\u003Ccode>Object.is(-0n, 0n)\u003C/code>返回\u003Ccode>true\u003C/code>\u003C/li>\n\u003Cli>\u003Ccode>JSON.parse(\"-0\")\u003C/code>返回\u003Ccode>-0\u003C/code>，然而\u003Ccode>JSON.stringify(-0)\u003C/code>返回“\u003Ccode>0\u003C/code>”，所以是不对称的\u003C/li>\n\u003C/ol>\n\u003Ch2 id=\"如何优雅的获取数值的整数部分和小数部分\">如何优雅的获取数值的整数部分和小数部分？\u003C/h2>\n\u003Ch3 id=\"获取整数部分\">获取整数部分\u003C/h3>\n\u003Col>\n\u003Cli>Math.trunc\u003C/li>\n\u003Cli>parseInt。缺点：函数名字符串转整数，结果虽正确但不合适；如果第一个参数不是字符串，会先转为字符串，有性能浪费；\u003Ccode>parseInt(0.0000001) === 1\u003C/code>\u003C/li>\n\u003Cli>位或“\u003Ccode>|\u003C/code>”操作。缺点：位操作的处理中会将操作数转为\u003Ccode>int32\u003C/code>，所以它不能处理超过32位的数值，而JavaScript的有效整数范围是53位\u003C/li>\n\u003Cli>原数减去小数部分\u003C/li>\n\u003C/ol>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"js\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">const\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> num\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> 3.75\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">// 1\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">console.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">log\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#DCBDFB\">parseInt\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(num)); \u003C/span>\u003Cspan style=\"color:#768390\">// 3\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">// 2\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">console.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">log\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(Math.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">trunc\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(num)); \u003C/span>\u003Cspan style=\"color:#768390\">// 3\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">// 3\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">console.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">log\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(num \u003C/span>\u003Cspan style=\"color:#F47067\">|\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> 0\u003C/span>\u003Cspan style=\"color:#ADBAC7\">); \u003C/span>\u003Cspan style=\"color:#768390\">// 3\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">console.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">log\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#F47067\">~~\u003C/span>\u003Cspan style=\"color:#ADBAC7\">num); \u003C/span>\u003Cspan style=\"color:#768390\">// 3\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">console.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">log\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(num \u003C/span>\u003Cspan style=\"color:#F47067\">>>\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> 0\u003C/span>\u003Cspan style=\"color:#ADBAC7\">); \u003C/span>\u003Cspan style=\"color:#768390\">// 3\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">// 4\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">console.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">log\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(num \u003C/span>\u003Cspan style=\"color:#F47067\">-\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> num \u003C/span>\u003Cspan style=\"color:#F47067\">%\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> 1\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) \u003C/span>\u003Cspan style=\"color:#768390\">// 3\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Ch3 id=\"获取小数部分\">获取小数部分\u003C/h3>\n\u003Col>\n\u003Cli>原数值减去整数部分\u003C/li>\n\u003Cli>对\u003Ccode>1\u003C/code>取模。缺点：可能精度丢失\u003C/li>\n\u003C/ol>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"js\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">// 1\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">function\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> fract\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#F69D50\">num\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">  return\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> num \u003C/span>\u003Cspan style=\"color:#F47067\">-\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> Math.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">trunc\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(num);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">}\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">console.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">log\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#DCBDFB\">fract\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#6CB6FF\">3.75\u003C/span>\u003Cspan style=\"color:#ADBAC7\">)); \u003C/span>\u003Cspan style=\"color:#768390\">// 0.75\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">// 2\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">console.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">log\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#6CB6FF\">3.75\u003C/span>\u003Cspan style=\"color:#F47067\"> %\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> 1\u003C/span>\u003Cspan style=\"color:#ADBAC7\">); \u003C/span>\u003Cspan style=\"color:#768390\">// 0.75\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Ch2 id=\"关于tc39提案explicit-resource-management\">关于tc39提案\u003Ca href=\"https://github.com/tc39/proposal-explicit-resource-management\">Explicit Resource Management\u003C/a>\u003C/h2>\n\u003Cp>该提案已进入stage3，主要用于解决各类资源（内存、I/O等）的生命周期管理常见模式，包括资源的分配和显式释放能力。如：\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"js\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">function\u003C/span>\u003Cspan style=\"color:#F47067\"> *\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> g\u003C/span>\u003Cspan style=\"color:#ADBAC7\">() {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">  const\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> handle\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> acquireFileHandle\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(); \u003C/span>\u003Cspan style=\"color:#768390\">// critical resource\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">  try\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">    ...\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">  }\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">  finally\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    handle.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">release\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(); \u003C/span>\u003Cspan style=\"color:#768390\">// cleanup\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">  }\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">}\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">const\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> obj\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> g\u003C/span>\u003Cspan style=\"color:#ADBAC7\">();\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">try\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">  const\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> r\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> obj.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">next\u003C/span>\u003Cspan style=\"color:#ADBAC7\">();\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">  ...\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">}\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">finally\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">  obj.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">return\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(); \u003C/span>\u003Cspan style=\"color:#768390\">// calls finally blocks in `g`\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Cp>生成器函数在离开某个作用域需要调用\u003Ccode>return\u003C/code>方法释放，以确保清理掉该迭代器示例。\u003C/p>\n\u003Cp>该提案提供了通用的解决方案：\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"js\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">{\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">  await using\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> obj\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> g\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(); \u003C/span>\u003Cspan style=\"color:#768390\">// block-scoped declaration\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">  const\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> r\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#F47067\"> await\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> obj.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">next\u003C/span>\u003Cspan style=\"color:#ADBAC7\">();\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">} \u003C/span>\u003Cspan style=\"color:#768390\">// calls finally blocks in `g`\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Cp>使用\u003Ccode>using\u003C/code>声明语法可在离开作用域前，执行资源退出的相关处理\u003Ccode>Symbol.dispose()\u003C/code>被执行（多个则按照相反的顺序执行），如果资源没有可调用的\u003Ccode>Symbol.dispose\u003C/code>成员，则在跟踪资源时立即抛出\u003Ccode>TypeError\u003C/code>\u003C/p>\n\u003Cp>一些例子：\u003Cbr>\n\u003Cstrong>WHATWG Streams API\u003C/strong>\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"js\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">{\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">  using\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> reader\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> stream.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">getReader\u003C/span>\u003Cspan style=\"color:#ADBAC7\">();\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">  const\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> { \u003C/span>\u003Cspan style=\"color:#6CB6FF\">value\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, \u003C/span>\u003Cspan style=\"color:#6CB6FF\">done\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> } \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> reader.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">read\u003C/span>\u003Cspan style=\"color:#ADBAC7\">();\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">} \u003C/span>\u003Cspan style=\"color:#768390\">// 'reader' is disposed\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Cp>\u003Cstrong>NodeJS FileHandle\u003C/strong>\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"js\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">{\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">  using\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> f1\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#F47067\"> await\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> fs.promises.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">open\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(s1, constants.\u003C/span>\u003Cspan style=\"color:#6CB6FF\">O_RDONLY\u003C/span>\u003Cspan style=\"color:#ADBAC7\">),\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#6CB6FF\">        f2\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#F47067\"> await\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> fs.promises.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">open\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(s2, constants.\u003C/span>\u003Cspan style=\"color:#6CB6FF\">O_WRONLY\u003C/span>\u003Cspan style=\"color:#ADBAC7\">);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">  const\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> buffer\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> Buffer.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">alloc\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#6CB6FF\">4092\u003C/span>\u003Cspan style=\"color:#ADBAC7\">);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">  const\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> { \u003C/span>\u003Cspan style=\"color:#6CB6FF\">bytesRead\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> } \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#F47067\"> await\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> f1.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">read\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(buffer);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">  await\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> f2.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">write\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(buffer, \u003C/span>\u003Cspan style=\"color:#6CB6FF\">0\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, bytesRead);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">} \u003C/span>\u003Cspan style=\"color:#768390\">// 'f2' is disposed, then 'f1' is disposed\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Cp>内置的Disposables\u003C/p>\n\u003Col>\n\u003Cli>\u003Ccode>IteratorPrototype\u003C/code>\u003C/li>\n\u003Cli>\u003Ccode>AsyncIteratorPrototype\u003C/code>\u003C/li>\n\u003C/ol>\n\u003Cp>如果一个对象符合如下接口，则可称为\u003Cstrong>disposable\u003C/strong>或\u003Cstrong>async disposable\u003C/strong>\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"ts\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"ts\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">interface\u003C/span>\u003Cspan style=\"color:#F69D50\"> Disposable\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">  /**\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">   * Disposes of resources within this object.\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">   */\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">  [Symbol.dispose]()\u003C/span>\u003Cspan style=\"color:#F47067\">:\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> void\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">}\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">interface\u003C/span>\u003Cspan style=\"color:#F69D50\"> AsyncDisposable\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">  /**\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">   * Disposes of resources within this object.\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">   */\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">  [Symbol.asyncDispose]()\u003C/span>\u003Cspan style=\"color:#F47067\">:\u003C/span>\u003Cspan style=\"color:#F69D50\"> Promise\u003C/span>\u003Cspan style=\"color:#ADBAC7\">&#x3C;\u003C/span>\u003Cspan style=\"color:#6CB6FF\">void\u003C/span>\u003Cspan style=\"color:#ADBAC7\">>;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Ch2 id=\"关于symboltoprimitive\">关于\u003Ccode>Symbol.toPrimitive\u003C/code>\u003C/h2>\n\u003Cp>\u003Cstrong>\u003Ccode>Symbol.toPrimitive\u003C/code>\u003C/strong> 是内置的 symbol 属性，其指定了一种接受首选类型并返回对象原始值的表示的方法。它被所有的\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Data_structures#%E5%BC%BA%E5%88%B6%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2\">强类型转换制\u003C/a>算法优先调用。\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"js\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">const\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> object1\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">  [Symbol.toPrimitive](\u003C/span>\u003Cspan style=\"color:#F69D50\">hint\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">    if\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (hint \u003C/span>\u003Cspan style=\"color:#F47067\">===\u003C/span>\u003Cspan style=\"color:#96D0FF\"> 'number'\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">      return\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> 42\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    }\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">    return\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> null\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">  }\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">};\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">console.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">log\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#F47067\">+\u003C/span>\u003Cspan style=\"color:#ADBAC7\">object1); \u003C/span>\u003Cspan style=\"color:#768390\">// 42\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Cp>在 \u003Ccode>Symbol.toPrimitive\u003C/code> 属性（用作函数值）的帮助下，对象可以转换为一个原始值。该函数被调用时，会被传递一个字符串参数 \u003Ccode>hint\u003C/code>，表示要转换到的原始值的预期类型。\u003Ccode>hint\u003C/code> 参数的取值是 \u003Ccode>\"number\"\u003C/code>、\u003Ccode>\"string\"\u003C/code> 和 \u003Ccode>\"default\"\u003C/code> 中的任意一个。\u003C/p>\n\u003Cp>\u003Ccode>\"number\"\u003C/code> hint 用于\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Data_structures#%E5%BC%BA%E5%88%B6%E6%95%B0%E5%AD%97%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2\">强制数字类型转换\u003C/a>算法。\u003Ccode>\"string\"\u003C/code> hint 用于\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String#%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%BC%BA%E5%88%B6%E8%BD%AC%E6%8D%A2\">强制字符串类型转换\u003C/a>算法。\u003Ccode>\"default\"\u003C/code> hint 用于\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Data_structures#%E5%BC%BA%E5%88%B6%E5%8E%9F%E5%A7%8B%E5%80%BC%E8%BD%AC%E6%8D%A2\">强制原始值转换\u003C/a>算法。\u003Ccode>hint\u003C/code> 仅是作为首选项的偏弱的信号提示，实现时，可以自由忽略它（就像 \u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol/@@toPrimitive\">\u003Ccode>Symbol.prototype[@@toPrimitive]()\u003C/code>\u003C/a> 一样）。该语言不会在 \u003Ccode>hint\u003C/code> 和结果类型之间强制校正，尽管 \u003Ccode>[@@toPrimitive]()\u003C/code> 必须返回一个原始值，否则将抛出 \u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypeError\">\u003Ccode>TypeError\u003C/code>\u003C/a>。\u003C/p>\n\u003Cp>没有 \u003Ccode>@@toPrimitive\u003C/code> 属性的对象通过以不同的顺序调用 \u003Ccode>valueOf()\u003C/code> 和 \u003Ccode>toString()\u003C/code> 方法将其转换为原始值，这在\u003Cstrong>强制类型转换\u003C/strong>部分进行了更详细的解释。\u003Ccode>@@toPrimitive\u003C/code> 允许完全控制原始转换过程。例如，\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date/@@toPrimitive\">\u003Ccode>Date.prototype[@@toPrimitive]\u003C/code>\u003C/a> 将 \u003Ccode>\"default\"\u003C/code> 视为 \u003Ccode>\"string\"\u003C/code> 并且调用 \u003Ccode>toString()\u003C/code> 而不是 \u003Ccode>valueOf()\u003C/code>。\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol/@@toPrimitive\">\u003Ccode>Symbol.prototype[@@toPrimitive]\u003C/code>\u003C/a> 忽略 hint，并总是返回一个 symbol，这意味着即使在字符串上下文中，也不会调用 \u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toString\">\u003Ccode>Symbol.prototype.toString()\u003C/code>\u003C/a>，并且 \u003Ccode>Symbol\u003C/code> 对象必须始终通过 \u003Ccode>String()\u003C/code> 显式转换为字符串。\u003C/p>\n\u003Ch2 id=\"强制类型转换\">强制类型转换\u003C/h2>\n\u003Cp>强制类型转换用于得到一个期望的原始值。如果值已经时原始值，则不会进行任何转换。对象将按照以下顺序调用它的如下方法：\u003C/p>\n\u003Col>\n\u003Cli>\u003Cstrong>[[@@toPrimitive]]\u003C/strong>\u003C/li>\n\u003Cli>valueOf\u003C/li>\n\u003Cli>toString\u003Cbr>\n通过如上方法转为原始值。\u003C/li>\n\u003C/ol>\n\u003Cp>\u003Cstrong>[[@@toPrimitive]]\u003C/strong> 方法如果存在，则必须返回原始值，返回对象则导致\u003Ccode>TypeError\u003C/code>。对于\u003Ccode>valueOf\u003C/code>和\u003Ccode>toString\u003C/code>，如果其中一个返回对象，则忽略其返回值，从而使用另一个的返回值；如果两者都不存在，或两者都没返回原始值，则抛出\u003Ccode>TypeError\u003C/code>。\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"js\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">console.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">log\u003C/span>\u003Cspan style=\"color:#ADBAC7\">({} \u003C/span>\u003Cspan style=\"color:#F47067\">+\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> []); \u003C/span>\u003Cspan style=\"color:#768390\">// \"[object Object]\"\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Cp>\u003Ccode>{}\u003C/code> 和 \u003Ccode>[]\u003C/code> 都没有 \u003Ccode>[@@toPrimitive]()\u003C/code> 方法。\u003Ccode>{}\u003C/code> 和 \u003Ccode>[]\u003C/code> 都从 \u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf\">\u003Ccode>Object.prototype.valueOf\u003C/code>\u003C/a> 继承 \u003Ccode>valueOf()\u003C/code>，其返回对象自身。因为返回值是一个对象，因此它被忽略。因此，调用 \u003Ccode>toString()\u003C/code> 方法。\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\">\u003Ccode>{}.toString()\u003C/code>\u003C/a> 返回 \u003Ccode>\"[object Object]\"\u003C/code>，而 \u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/toString\">\u003Ccode>[].toString()\u003C/code>\u003C/a> 返回 \u003Ccode>\"\"\u003C/code>，因此这个结果为：\u003Ccode>\"[object Object]\"\u003C/code>。\u003C/p>\n\u003Ch2 id=\"javascript的并发模型与事件循环\">JavaScript的并发模型与事件循环\u003C/h2>\n\u003Cp>\u003Ccode>JavaScript\u003C/code> 有一个基于\u003Cstrong>事件循环\u003C/strong>的并发模型，事件循环负责执行代码、收集和处理事件以及执行队列中的子任务。\u003C/p>\n\u003Cp>如下图展示了现代\u003Ccode>JavaScript\u003C/code>引擎在运行时的可视化描述\u003Cbr>\n\u003Cimg src=\"https://raw.githubusercontent.com/fw6/assets/main/toy_docs/20230717162354.png\" alt=\"image.png\">\u003C/p>\n\u003Cp>栈：函数调用形成了一个由若干帧组成的栈，帧中包含了函数的参数和局部变量（执行上下文）。当函数执行完毕所属栈被弹出\u003Cspan role=\"img\" aria-label=\"eject button\">⏏️\u003C/span>\u003Cbr>\n堆：对象被分配在堆（一大块非结构化的内存区域）中。\u003Cbr>\n队列：一个\u003Ccode>JavaScript\u003C/code>运行时包含了一个待处理的消息队列。每个消息都关联着一个用以处理这个消息的回调函数。\u003C/p>\n\u003Cp>事件循环的常常以如下方式实现：\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"js\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">while\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (queue.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">waitForMessage\u003C/span>\u003Cspan style=\"color:#ADBAC7\">()) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">  queue.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">processNextMessage\u003C/span>\u003Cspan style=\"color:#ADBAC7\">();\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Cp>可以看到整个事件循环就是反复“等待-执行”。\u003C/p>\n\u003Cp>EventLoop的定义 -> \u003Ca href=\"https://html.spec.whatwg.org/multipage/webappapis.html#task-queue\">WHATWG/task-queue\u003C/a>\u003C/p>\n\u003Cp>事件循环有一个或多个任务队列，任务队列是一组任务。\u003C/p>\n\u003Cblockquote>\n\u003Cp>实际上任务队列是集合而非队列，因为事件循环处理模型是从所选队列中获取第一个可执行的任务，而不是使第一个任务出队。\u003C/p>\n\u003C/blockquote>\n\u003Cblockquote>\n\u003Cp>微任务队列不是任务队列！\u003C/p>\n\u003C/blockquote>\n\u003Cp>每个事件循环都有一个微任务队列。微任务是指通过微任务算法队列创建的任务的通俗说法。\u003Cbr>\n每个事件循环都有一个执行微任务检查的布尔值，用于防治执行微任务检查点的重复执行。\u003C/p>\n\u003Cp>当拿到一段\u003Ccode>JavaScript\u003C/code>代码时，浏览器首先要做的是传递给\u003Ccode>JavaScript\u003C/code>引擎，并要求它执行。执行\u003Ccode>JavaScript\u003C/code>代码并非一次性，当宿主环境（浏览器、\u003Ccode>Node\u003C/code>、\u003Ccode>Deno\u003C/code>、小程序容器）遇到一些事时，会继续传递一段代码让\u003Ccode>JavaScript\u003C/code>引擎执行。此外，我们还会提供API给\u003Ccode>JavaScrip\u003C/code>t引擎，比如\u003Ccode>setTimeout\u003C/code>（由宿主环境实现！）这种，它会允许JavaScript在特定时机执行。\u003C/p>\n\u003Cp>在ES3和更早版本，\u003Ccode>JavaScript\u003C/code>本身没有异步能力，这就意味着传递给\u003Ccode>JavaScript\u003C/code>引擎一段代码，引擎直接顺序执行了，这个任务也就是宿主发起的任务。\u003C/p>\n\u003Cp>在ES5之后，\u003Ccode>JavaScript\u003C/code>引入了\u003Ccode>Promise\u003C/code>，这样无序浏览器安排，\u003Ccode>JavaScript\u003C/code>引擎本身就能发起任务了。\u003C/p>\n\u003Cp>\u003Ccode>JSC\u003C/code>引擎对任务的定义：宿主发起的称为宏观任务，JavaScript引擎发起的称为微观任务。\u003Cbr>\n\u003Ccode>JavaScript\u003C/code>引擎等待宿主环境分配宏观任务，在操作系统中，通常等待的行为就是一个事件循环，所以在Node术语中，会把这部分称为事件循环。\u003C/p>\n\u003Cp>宏观任务队列就相当于事件循环。\u003C/p>\n\u003Cp>在宏观任务中，\u003Ccode>JavaScript\u003C/code>还会产生异步代码，\u003Ccode>JavaScrip\u003C/code>t必须保证这些异步代码在一个宏观任务中执行完成，因此每个宏观任务中又包含了一个微观任务队列。\u003C/p>\n\u003Cp>有了宏观任务与微观任务机制，就可以实现\u003Ccode>JavaScript\u003C/code>引擎级和宿主级的任务了。例如：\u003Ccode>Promise\u003C/code>永远在队列尾部添加微观任务，\u003Ccode>setTimeout\u003C/code>、\u003Ccode>requestIdleCallback\u003C/code>等宿主API则会添加宏任务。\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"js\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">var\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> r \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#F47067\"> new\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> Promise\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#F47067\">function\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#F69D50\">resolve\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, \u003C/span>\u003Cspan style=\"color:#F69D50\">reject\u003C/span>\u003Cspan style=\"color:#ADBAC7\">){\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">\tconsole.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">log\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#96D0FF\">\"a\"\u003C/span>\u003Cspan style=\"color:#ADBAC7\">);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">\tresolve\u003C/span>\u003Cspan style=\"color:#ADBAC7\">()\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">});\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">setTimeout\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(()\u003C/span>\u003Cspan style=\"color:#F47067\">=>\u003C/span>\u003Cspan style=\"color:#ADBAC7\">console.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">log\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#96D0FF\">\"d\"\u003C/span>\u003Cspan style=\"color:#ADBAC7\">), \u003C/span>\u003Cspan style=\"color:#6CB6FF\">0\u003C/span>\u003Cspan style=\"color:#ADBAC7\">)\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">r.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">then\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(() \u003C/span>\u003Cspan style=\"color:#F47067\">=>\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> console.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">log\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#96D0FF\">\"c\"\u003C/span>\u003Cspan style=\"color:#ADBAC7\">));\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">console.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">log\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#96D0FF\">\"b\"\u003C/span>\u003Cspan style=\"color:#ADBAC7\">)\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Cp>执行这段代码，可看到执行顺序为\u003Ccode>a\u003C/code>->\u003Ccode>b\u003C/code>->\u003Ccode>c\u003C/code>->\u003Ccode>d\u003C/code>。因为\u003Ccode>Promise\u003C/code>产生的时微任务，在第一次宏任务执行\u003Ccode>a\u003C/code>、\u003Ccode>b\u003C/code>，\u003Ccode>Promise\u003C/code>创建的微任务被执行，即打印了\u003Ccode>c\u003C/code>，然后定时器执行触发内部新的宏任务，打印\u003Ccode>d\u003C/code>。\u003C/p>\n\u003Cp>微任务始终先于宏任务！\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"js\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">// 下面这段代码进入执行栈时延时就已经开始了\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">setTimeout\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(()\u003C/span>\u003Cspan style=\"color:#F47067\">=>\u003C/span>\u003Cspan style=\"color:#ADBAC7\">console.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">log\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#96D0FF\">\"d\"\u003C/span>\u003Cspan style=\"color:#ADBAC7\">), \u003C/span>\u003Cspan style=\"color:#6CB6FF\">0\u003C/span>\u003Cspan style=\"color:#ADBAC7\">)\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">var\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> r \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#F47067\"> new\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> Promise\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#F47067\">function\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#F69D50\">resolve\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, \u003C/span>\u003Cspan style=\"color:#F69D50\">reject\u003C/span>\u003Cspan style=\"color:#ADBAC7\">){\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">\tresolve\u003C/span>\u003Cspan style=\"color:#ADBAC7\">()\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">});\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">r.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">then\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(() \u003C/span>\u003Cspan style=\"color:#F47067\">=>\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">\tvar\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> begin \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> Date.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">now\u003C/span>\u003Cspan style=\"color:#ADBAC7\">();\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">\twhile\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(Date.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">now\u003C/span>\u003Cspan style=\"color:#ADBAC7\">() \u003C/span>\u003Cspan style=\"color:#F47067\">-\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> begin \u003C/span>\u003Cspan style=\"color:#F47067\">&#x3C;\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> 1000\u003C/span>\u003Cspan style=\"color:#ADBAC7\">);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">\tconsole.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">log\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#96D0FF\">\"c1\"\u003C/span>\u003Cspan style=\"color:#ADBAC7\">)\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">\tnew\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> Promise\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#F47067\">function\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#F69D50\">resolve\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, \u003C/span>\u003Cspan style=\"color:#F69D50\">reject\u003C/span>\u003Cspan style=\"color:#ADBAC7\">){\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">\t\tresolve\u003C/span>\u003Cspan style=\"color:#ADBAC7\">()\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">\t}).\u003C/span>\u003Cspan style=\"color:#DCBDFB\">then\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(() \u003C/span>\u003Cspan style=\"color:#F47067\">=>\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> console.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">log\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#96D0FF\">\"c2\"\u003C/span>\u003Cspan style=\"color:#ADBAC7\">))\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">});\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Cp>上方代码中在微任务中阻塞执行1s后创建了新的微任务，最终结果依旧是：\u003Ccode>c1\u003C/code>->\u003Ccode>c2\u003C/code>->\u003Ccode>d\u003C/code>\u003C/p>\n\u003Ch2 id=\"执行上下文闭包作用域链this值\">执行上下文、闭包、作用域链、this值\u003C/h2>\n\u003Cp>\u003Ccode>JavaScript\u003C/code>标准把一段代码（包括函数），执行所需的所有信息定义为：“执行上下文”。\u003C/p>\n\u003Cp>执行上下文在ES5中包含了如下部分：\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ccode>lexical environment\u003C/code>。词法环境，当获取变量时使用\u003C/li>\n\u003Cli>\u003Ccode>variable environment\u003C/code>。变量环境，当声明变量时使用\u003C/li>\n\u003Cli>\u003Ccode>this value\u003C/code>。\u003Ccode>this\u003C/code>值\u003C/li>\n\u003C/ul>\n\u003Cp>在ES2018中，执行上下文又变成了如下内容：\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ccode>lexical environment\u003C/code>。词法环境，当获取变量和\u003Ccode>this\u003C/code>值时使用\u003C/li>\n\u003Cli>\u003Ccode>variable environment\u003C/code>。变量环境，当申明变量时使用\u003C/li>\n\u003Cli>\u003Ccode>code evaluation state\u003C/code>。用于恢复代码执行位置\u003C/li>\n\u003Cli>\u003Ccode>Function\u003C/code>。执行的任务是函数时使用，表示正在被执行的函数\u003C/li>\n\u003Cli>\u003Ccode>ScriptOrModule\u003C/code>。执行的任务是脚本或模块时使用，表示正在被执行的代码\u003C/li>\n\u003Cli>\u003Ccode>Realm\u003C/code>。使用的基础库和内置对象实例\u003C/li>\n\u003Cli>\u003Ccode>Generator\u003C/code>。仅生成器上下文有此属性，表示当前生成器。\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"this关键字的行为\">this关键字的行为\u003C/h3>\n\u003Caside class=\"callout callout-note\">\u003Cdiv class=\"callout-indicator\">\u003Cdiv class=\"callout-hint\">\u003Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" aria-hidden=\"true\">\u003Cpath d=\"M12 8h.01M12 12v4\">\u003C/path>\u003Ccircle cx=\"12\" cy=\"12\" r=\"10\">\u003C/circle>\u003C/svg>\u003C/div>\u003Cdiv class=\"callout-title\">Note\u003C/div>\u003C/div>\u003Cdiv class=\"callout-content\">\u003Cp>\u003Ccode>this\u003C/code>是运行时，作用域是定义时\u003C/p>\u003C/div>\u003C/aside>\n\u003Cp>\u003Ccode>this\u003C/code>是执行上下文中很重要的一个组成部分。同一个函数调用方式不同，得到的\u003Ccode>this\u003C/code>值也不同，如下所示：\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"js\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">function\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> showThis\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(){\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    console.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">log\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#6CB6FF\">this\u003C/span>\u003Cspan style=\"color:#ADBAC7\">);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">}\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">var\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> o \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    showThis: showThis\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">}\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">showThis\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(); \u003C/span>\u003Cspan style=\"color:#768390\">// global\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">o.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">showThis\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(); \u003C/span>\u003Cspan style=\"color:#768390\">// o\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Cp>在上方示例中定义了函数\u003Ccode>showThis\u003C/code>，把它赋值给一个对象o的属性，分别使用两个引用来调用同一个函数，结果得到了不同的\u003Ccode>this\u003C/code>值。\u003C/p>\n\u003Cp>普通函数的this值由”调用它所使用的引用“决定，我们获取函数的表达式，它实际上返回的并非函数本身，而是一个\u003Ccode>Reference\u003C/code>类型。\u003C/p>\n\u003Cp>\u003Ccode>Reference\u003C/code>类型包含两部分：对象和属性值。\u003Ccode>o.showThis\u003C/code>产生的\u003Ccode>Reference\u003C/code>类型，即由对象o和属性“showThis”构成。\u003C/p>\n\u003Cp>当做一些运算时，\u003Ccode>Reference\u003C/code>类型会被解引用，即获取真正的值来参与运算，而类似函数调用、delete操作等，都需要使用到\u003Ccode>Reference\u003C/code>类型中的对象。\u003Cbr>\n在上方例子中，\u003Ccode>Reference\u003C/code>类型中的对象被当作\u003Ccode>this\u003C/code>值，传入了执行函数的上下文中。\u003C/p>\n\u003Cp>一言以蔽之：调用函数时，决定了函数运行时刻的\u003Ccode>this\u003C/code>值。\u003Cbr>\n实际上从运行时的角度来看，\u003Ccode>this\u003C/code>跟面向对象毫无关联，它是与函数调用时使用的表达式相关。\u003C/p>\n\u003Cp>再来看“方法”，它的表现又不一样：\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"js\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">class\u003C/span>\u003Cspan style=\"color:#F69D50\"> C\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">    showThis\u003C/span>\u003Cspan style=\"color:#ADBAC7\">() {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">        console.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">log\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#6CB6FF\">this\u003C/span>\u003Cspan style=\"color:#ADBAC7\">);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    }\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">}\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">var\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> o \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#F47067\"> new\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> C\u003C/span>\u003Cspan style=\"color:#ADBAC7\">();\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">var\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> showThis \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> o.showThis;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">showThis\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(); \u003C/span>\u003Cspan style=\"color:#768390\">// undefined\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">o.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">showThis\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(); \u003C/span>\u003Cspan style=\"color:#768390\">// o\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Cp>当使用\u003Ccode>showThis\u003C/code>这个引用去调用方法时，得到了\u003Ccode>undefined\u003C/code>\u003C/p>\n\u003Ch3 id=\"this关键字的机制\">\u003Ccode>this\u003C/code>关键字的机制\u003C/h3>\n\u003Cp>函数能够引用定义时的变量，如上文\u003Cspan role=\"img\" aria-label=\"up arrow\">⬆️\u003C/span>，函数也能记住定义时的this，因此函数内部必定有一个机制来保存这些信息。\u003C/p>\n\u003Cp>在JavaScript标准中，为函数规定了用来保存定义时上下文信息的私有属性\u003Ccode>[[Environment]]\u003C/code>。\u003C/p>\n\u003Cp>当一个函数被执行时，会创建一个新的执行环境记录，记录的外层词法环境（otuer lexical environment）会被设置成函数的\u003Ccode>[[Environment]]\u003C/code>，这个动作就是切换上下文。\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"js\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">var\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> a \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> 1\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">foo\u003C/span>\u003Cspan style=\"color:#ADBAC7\">();\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">// 在别处定义了foo：\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">var\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> b \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> 2\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">function\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> foo\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(){\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    console.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">log\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(b); \u003C/span>\u003Cspan style=\"color:#768390\">// 2\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    console.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">log\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(a); \u003C/span>\u003Cspan style=\"color:#768390\">// error\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Cp>这里的foo能访问定义时的b却不能访问执行时的a，这就是执行上下文的切换机制。\u003C/p>\n\u003Cp>JavaScript用一个栈来管理执行上下文，每个栈中的每一项又包含一个链表。如下所示：\u003Cbr>\n\u003Cimg src=\"https://raw.githubusercontent.com/fw6/assets/main/toy_docs/20230718155325.png\" alt=\"image.png\">\u003Cbr>\n当函数调用时，会入栈一个新的执行上下文，函数调用时执行上下文出栈。\u003C/p>\n\u003Cp>而this是个更复杂的机制，JavaScript标准定义了\u003Ccode>[[thisMode]]\u003C/code>私有属性。\u003Cbr>\n\u003Ccode>[[thisMode]]\u003C/code>包含3个取值：\u003C/p>\n\u003Cul>\n\u003Cli>lexical：表示从上下文中找到this，这对应了箭头函数\u003C/li>\n\u003Cli>global。表示this为undefined时，取全局对象，对应了普通函数\u003C/li>\n\u003Cli>strict。当严格模式时使用，this严格按照调用时传入的值，可能为null或undefined\u003C/li>\n\u003C/ul>\n\u003Cp>方法的行为和普通函数有差异，恰恰是因为class设计成了默认按照strict模式执行。\u003C/p>\n\u003Cp>函数创建新的执行上下文中的词法环境记录时，会根据\u003Ccode>[[thisMode]]\u003C/code>来标记新记录的\u003Ccode>[[ThisBindingStatus]]\u003C/code>私有属性。\u003Cbr>\n代码执行到this时，会逐层检查当前词法环境记录中的\u003Ccode>[[ThisBindingStatus]]\u003C/code>，当找到有this的环境记录时获取this的值。\u003C/p>\n\u003Ch2 id=\"varletconst\">var、let、const\u003C/h2>\n\u003Ch3 id=\"var\">var\u003C/h3>\n\u003Cp>\u003Cem>\u003Ccode>var\u003C/code> 声明了作用于函数执行的作用域\u003C/em>。所以在同一个函数内，\u003Ccode>for\u003C/code>、\u003Ccode>if\u003C/code>语句块内的\u003Ccode>var\u003C/code>申明在外部也能获取。\u003C/p>\n\u003Cp>为解决该问题诞生了一个技巧——立即执行函数表达式（\u003Ccode>IIFE\u003C/code>），通过创建一个函数并立即执行来构造一个新的作用域以此来控制var的范围。\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"js\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">void\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (\u003C/span>\u003Cspan style=\"color:#F47067\">function\u003C/span>\u003Cspan style=\"color:#ADBAC7\">() {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">\tvar\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> a\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">\t// ...\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">})()\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Ch3 id=\"let\">\u003Ccode>let\u003C/code>\u003C/h3>\n\u003Cp>\u003Ccode>let\u003C/code>语句声明一个块级作用域的局部变量。\u003C/p>\n\u003Cp>let是ES6之后引入的新的变量声明模式，为实现\u003Ccode>let\u003C/code>，\u003Ccode>JavaScrip\u003C/code>t在运行时引入了块级作用域。也就是说在let之前，\u003Ccode>if\u003C/code>、\u003Ccode>for\u003C/code>语句皆不产生作用域。\u003C/p>\n\u003Cp>\u003Ccode>var\u003C/code>和\u003Ccode>let\u003C/code>的一个重要区别，let声明的变量不会在作用域中被提升，它是在编译时才初始化。\u003Cbr>\n\u003Ccode>let\u003C/code>和\u003Ccode>const\u003C/code>一样，不会在全局声明中创建\u003Ccode>window\u003C/code>对象的属性。\u003Cbr>\n与\u003Ccode>let\u003C/code>不同的是，\u003Ccode>let\u003C/code>只是开始声明而非完整表达式，如下所示：\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"js\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">if\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (\u003C/span>\u003Cspan style=\"color:#6CB6FF\">true\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) \u003C/span>\u003Cspan style=\"color:#F47067\">let\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> a \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> 1\u003C/span>\u003Cspan style=\"color:#768390\"> // SyntaxError: Lexical declaration cannot appear in a single-statement context\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Cp>\u003Ccode>let\u003C/code>不允许重复声明（在同一个函数或块作用域），否则会抛出\u003Ccode>SyntaxError\u003C/code>\u003C/p>\n\u003Ch3 id=\"const\">\u003Ccode>const\u003C/code>\u003C/h3>\n\u003Cp>常量是块级范围的，非常类似用 \u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/let\">let\u003C/a> 语句定义的变量。但常量的值是无法（通过重新赋值）改变的，也不能被重新声明。\u003C/p>\n\u003Cp>\u003Cstrong>\u003Ccode>const\u003C/code> 声明\u003C/strong>创建一个值的只读引用。但这并不意味着它所持有的值是不可变的，只是变量标识符不能重新分配。例如，在引用内容是对象的情况下，这意味着可以改变对象的内容（例如，其参数）。\u003C/p>\n\u003Cp>一个常量不能和它所在作用域内的其他变量或函数拥有相同的名称。\u003Cbr>\n常量要求一个初始值\u003C/p>\n\u003Ch3 id=\"暂时性死区\">暂时性死区\u003C/h3>\n\u003Cp>从一个代码块的开始直到代码执行到声明变量的行之前，\u003Ccode>let\u003C/code> 或 \u003Ccode>const\u003C/code> 声明的变量都处于“暂时性死区”（Temporal dead zone，TDZ）中。\u003C/p>\n\u003Cp>当变量处于暂时性死区之中时，其尚未被初始化，尝试访问变量将抛出 \u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError\">\u003Ccode>ReferenceError\u003C/code>\u003C/a>。当代码执行到声明变量所在的行时，变量被初始化为一个值。如果声明中未指定初始值，则变量将被初始化为 \u003Ccode>undefined\u003C/code>。\u003C/p>\n\u003Cp>与 \u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/var\">\u003Ccode>var\u003C/code>\u003C/a> 声明的变量不同，如果在声明前访问了变量，变量将会返回 \u003Ccode>undefined\u003C/code>。以下代码演示了在使用 \u003Ccode>let\u003C/code> 和 \u003Ccode>var\u003C/code> 声明变量的行之前访问变量的不同结果。\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"js\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">{ \u003C/span>\u003Cspan style=\"color:#768390\">// TDZ starts at beginning of scope\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">  console.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">log\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(bar); \u003C/span>\u003Cspan style=\"color:#768390\">// undefined\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">  console.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">log\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(foo); \u003C/span>\u003Cspan style=\"color:#768390\">// ReferenceError\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">  var\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> bar \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> 1\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">  let\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> foo \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> 2\u003C/span>\u003Cspan style=\"color:#ADBAC7\">; \u003C/span>\u003Cspan style=\"color:#768390\">// End of TDZ (for foo)\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">}\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Cp>使用术语“temporal”是因为区域取决于执行顺序（时间），而不是编写代码的顺序（位置）。例如，下面的代码会生效，是因为即使使用 \u003Ccode>let\u003C/code> 变量的函数出现在变量声明之前，但函数的执行是在暂时性死区的外面。\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"js\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">{\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">  // TDZ starts at beginning of scope\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">  const\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> func\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> () \u003C/span>\u003Cspan style=\"color:#F47067\">=>\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> console.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">log\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(letVar); \u003C/span>\u003Cspan style=\"color:#768390\">// OK\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">  // Within the TDZ letVar access throws `ReferenceError`\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">  let\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> letVar \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> 3\u003C/span>\u003Cspan style=\"color:#ADBAC7\">; \u003C/span>\u003Cspan style=\"color:#768390\">// End of TDZ (for letVar)\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">  func\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(); \u003C/span>\u003Cspan style=\"color:#768390\">// Called outside TDZ!\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Cp>以下代码会造成暂时性死区：\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"js\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">function\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> test\u003C/span>\u003Cspan style=\"color:#ADBAC7\">() {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">  var\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> foo \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> 33\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">  if\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(foo) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">    let\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> foo \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (foo \u003C/span>\u003Cspan style=\"color:#F47067\">+\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> 55\u003C/span>\u003Cspan style=\"color:#ADBAC7\">); \u003C/span>\u003Cspan style=\"color:#768390\">// ReferenceError\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">  }\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">}\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">test\u003C/span>\u003Cspan style=\"color:#ADBAC7\">();\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Cp>由于外部变量 \u003Ccode>foo\u003C/code> 有值，因此会执行 \u003Ccode>if\u003C/code> 语句块，但是由于词法作用域，该值在块内不可用：\u003Ccode>if\u003C/code> 块内的标识符 \u003Ccode>foo\u003C/code> 是 \u003Ccode>let foo\u003C/code>。表达式 \u003Ccode>(foo + 55)\u003C/code> 会抛出 \u003Ccode>ReferenceError\u003C/code> 异常，是因为 \u003Ccode>let foo\u003C/code> 还没完成初始化，它仍然在暂时性死区里。\u003C/p>\n\u003Ch3 id=\"变量提升\">变量提升\u003C/h3>\n\u003Cp>变量提升（Hoisting）被认为是，Javascript 中执行上下文（特别是创建和执行阶段）工作方式的一种认识。\n从概念的字面意义上说，“变量提升”意味着变量和函数的声明会在物理层面移动到代码的最前面，但这么说并不准确。实际上变量和函数声明在代码里的位置是不会动的，而是在编译阶段被放入内存中。\u003C/p>\n\u003Cp>JavaScript 在执行任何代码段之前，将函数声明放入内存中的优点之一是，你可以在声明一个函数之前使用该函数。\u003C/p>\n\u003Cpre>\u003Ccode>函数和变量相比，会被优先提升。这意味着函数会被提升到更靠前的位置。\n\u003C/code>\u003C/pre>\n\u003Cp>即使我们在定义函数之前调用它，函数仍然可以工作。这是因为在 JavaScript 中\u003Cstrong>执行上下文\u003C/strong>的工作方式造成的。\n变量提升也适用于其他数据类型和变量。变量可以在声明之前进行初始化和使用。但是如果没有初始化，就不能使用它们。\u003C/p>\n\u003Cp>JavaScript 只会提升声明，不会提升其初始化。如果一个变量先被使用再被声明和赋值的话，使用时的值是 undefined。\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"js\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">console.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">log\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(num); \u003C/span>\u003Cspan style=\"color:#768390\">// Returns undefined\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">var\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> num;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">num \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> 6\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Cp>如果你先赋值、再使用、最后声明该变量，使用时能获取到所赋的值\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"js\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">num \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> 6\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">console.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">log\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(num); \u003C/span>\u003Cspan style=\"color:#768390\">// returns 6\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">var\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> num;\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>",{"headings":1038,"localImagePaths":1087,"remoteImagePaths":1088,"frontmatter":1089,"imagePaths":1094},[1039,1040,1043,1046,1049,1052,1054,1056,1059,1062,1064,1067,1070,1072,1074,1077,1079,1081,1083,1085],{"depth":31,"slug":324,"text":325},{"depth":31,"slug":1041,"text":1042},"在什么情况下-a--a---1","在什么情况下 a === a - 1",{"depth":31,"slug":1044,"text":1045},"如何判断对象某个属性可写","如何判断对象某个属性可写？",{"depth":31,"slug":1047,"text":1048},"0与-0的区别","+0与-0的区别",{"depth":31,"slug":1050,"text":1051},"如何优雅的获取数值的整数部分和小数部分","如何优雅的获取数值的整数部分和小数部分？",{"depth":37,"slug":1053,"text":1053},"获取整数部分",{"depth":37,"slug":1055,"text":1055},"获取小数部分",{"depth":31,"slug":1057,"text":1058},"关于tc39提案explicit-resource-management","关于tc39提案Explicit Resource Management",{"depth":31,"slug":1060,"text":1061},"关于symboltoprimitive","关于Symbol.toPrimitive",{"depth":31,"slug":1063,"text":1063},"强制类型转换",{"depth":31,"slug":1065,"text":1066},"javascript的并发模型与事件循环","JavaScript的并发模型与事件循环",{"depth":31,"slug":1068,"text":1069},"执行上下文闭包作用域链this值","执行上下文、闭包、作用域链、this值",{"depth":37,"slug":1071,"text":1071},"this关键字的行为",{"depth":37,"slug":1073,"text":1073},"this关键字的机制",{"depth":31,"slug":1075,"text":1076},"varletconst","var、let、const",{"depth":37,"slug":1078,"text":1078},"var",{"depth":37,"slug":1080,"text":1080},"let",{"depth":37,"slug":1082,"text":1082},"const",{"depth":37,"slug":1084,"text":1084},"暂时性死区",{"depth":37,"slug":1086,"text":1086},"变量提升",[],[],{"title":1027,"description":15,"pubDate":76,"heroImage":1029,"date created":1090,"date modified":1091,"tags":1092,"minutesRead":1093},["Date","2023-07-09T00:00:00.000Z"],["Date","2023-07-18T00:00:00.000Z"],[20,1031,242],"27 min read",[],"200-Learning/210-Programing/你不知道的JS.md","200-learning/210-programing/关于web-performance",{"id":1096,"data":1098,"body":1105,"filePath":1106,"digest":1107,"rendered":1108,"legacyId":1146},{"title":1099,"description":1100,"pubDate":1101,"heroImage":1102,"tags":1103},"关于Web Performance","This artical will show you some core web vitals",["Date","2023-07-19T04:12:00.000Z"],"https://web-dev.imgix.net/image/ZDZVuXt6QqfXtxkpXcPGfnygYjd2/m80oUd2zASInyKJJ7QNc.png?auto=format&w=1600",[20,242,1104],"FE",">昔日所云我，而今却是伊。不知今日我，又属后来谁？  —《菜根谭》\n\n[Core Web Vitals](https://web.dev/learn-core-web-vitals/)\n\n:::info\n等待资源加载时间和大部分情况下的浏览器单线程执行是影响 Web 性能的两大主要原因。\n:::\n\nWeb 性能是客观的衡量标准，是用户对加载时间和运行时的直观体验。Web 性能指页面加载到可交互和可响应所消耗的时间，以及页面在交互时的流畅度——滚动是否顺滑？按钮能否点击？弹窗能否快速打开，动画是否平滑？Web 性能既包括客观的度量如加载时间，每秒帧数和到页面可交互的时间；也包括用户的对页面内容加载时间的主观感觉。\n\n页面响应时间越长，越多的用户就会放弃该网站。重要的是，通过使体验尽可能早地变得可用和交互，同时异步地加载长尾体验部分，来最大程度地减少加载和响应时间，并添加其他功能以降低延迟。\n\n有很多工具，API 和最佳实践帮助我们测量和改进网页性能。本章对此有所讲解。\n\n## 健康网站的关键指标（Web Vitas）\n\nWeb 指标是 Google 开创的一项新计划，旨在为网络质量信号提供统一指导，这些信号对于提供出色的网络用户体验至关重要。\n\n网站所有者要想了解他们提供给用户的体验质量，并非需要成为性能专家。 Web 指标计划旨在简化场景，帮助网站专注于最重要的指标，即**核心 Web 指标** 。\n\n> [!info]\n>核心性能指标：核心 Web 指标是适用于所有网页的 Web 指标子集，每位网站所有者都应该测量这些指标，并且这些指标还将显示在所有 Google 工具中。每项核心 Web 指标代表用户体验的一个不同方面，能够进行[实际](https://web.dev/user-centric-performance-metrics/#how-metrics-are-measured)测量，并且反映出[以用户为中心](https://web.dev/user-centric-performance-metrics/#how-metrics-are-measured)的关键结果的真实体验。\n\n核心Web指标的构成会随着时间的推移而发展。当前针对2020年的指标构成侧重于用户体验的三个方面——加载性能、交互性、和视觉稳定性——并包括一下指标（及各指标的阀值）：\n\n![https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/ZZU8Z7TMKXmzZT2mCjJU.svg](https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/ZZU8Z7TMKXmzZT2mCjJU.svg)\n\n![https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/iHYrrXKe4QRcb2uu8eV8.svg](https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/iHYrrXKe4QRcb2uu8eV8.svg)\n\n![https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/dgpDFckbHwwOKdIGDa3N.svg](https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/dgpDFckbHwwOKdIGDa3N.svg)\n\n- **[Largest Contentful Paint (LCP)](https://web.dev/lcp/)** ：最大内容绘制，测量_加载_性能。为了提供良好的用户体验，LCP 应在页面首次开始加载后的**2.5 秒**内发生。\n- **[First Input Delay (FID)](https://web.dev/fid/)** ：首次输入延迟，测量_交互性_。为了提供良好的用户体验，页面的 FID 应为**100 毫秒**或更短。\n- **[Cumulative Layout Shift (CLS)](https://web.dev/cls/)** ：累积布局偏移，测量_视觉稳定性_。为了提供良好的用户体验，页面的 CLS 应保持在 **0.1.** 或更少。\n\n对于上述每项指标，一个良好的测量阈值为75%，且该阈值同时适用于移动和桌面设备。如果一个页面满足上述全部三项建议的75%，那么评估核心Web指标合规性的工具应评判该页面通过。\n\n### 测量工具\n\n1. **Chrome UX Report:** [Chrome 用户体验报告](https://developer.chrome.com/docs/crux/)为每项核心 Web 指标收集匿名的真实用户测量数据。这些数据既能使网站所有者快速进行性能评估，而无需在页面上进行手动检测分析\n2. 通过使用[web-vitals](https://github.com/GoogleChrome/web-vitals)库，测量每项指标就像调用单个函数一样简单\n\n    ```jsx\n\nimport {getCLS, getFID, getLCP} from 'web-vitals';\n\nfunction sendToAnalytics(metric) {\n  const body = JSON.stringify(metric);\n  // Use `navigator.sendBeacon()` if available, falling back to `fetch()`.\n  (navigator.sendBeacon && navigator.sendBeacon('/analytics', body)) ||\n      fetch('/analytics', {body, method: 'POST', keepalive: true});\n}\n\ngetCLS(sendToAnalytics);\ngetFID(sendToAnalytics);\ngetLCP(sendToAnalytics);\n    ```\n3. 可以使用[Web 指标 Chrome 扩展程序](https://github.com/GoogleChrome/web-vitals-extension)来报告每项核心 Web 指标，且无需编写任何代码。该扩展程序使用[web-vitals](https://github.com/GoogleChrome/web-vitals)库来测量每一项指标，并在用户浏览网页时呈现给用户。\n4. Chrome开发者工具、Lighthouse\n\n### 提高分数的建议\n\n[优化LCP](https://www.notion.so/LCP-1a764bffa6e54c9a99d7a6a4a2a71be0?pvs=21)\n\n- 优化FID\n- 优化CLS\n\n### 其他Web指标\n\n其他 Web 指标通常用作核心 Web 指标的代理或补充指标，有助于获取范围更广的体验或帮助诊断特定的问题。\n\n例如，[Time to First Byte 首字节时间 (TTFB)](https://web.dev/ttfb/)和[First Contentful Paint 首次内容绘制 (FCP)](https://web.dev/fcp/)指标都是_加载_体验的重要方面，并且在诊断 LCP 问题方面（分别为[服务器响应时间](https://web.dev/overloaded-server/)过长或[阻塞渲染资源](https://web.dev/render-blocking-resources/)）都十分有用。\n\n同样，[总阻塞时间 (TBT)](https://web.dev/tbt/)和[Time to Interactive 可交互时间 (TTI)](https://web.dev/tti/)等指标是实验室指标，对于捕获和诊断会对 FID 产生影响的潜在_交互性_问题至关重要。然而，这些指标不是核心 Web 指标的一部分，因为它们无法进行实际测量，也不反映以[用户为中心](https://web.dev/user-centric-performance-metrics/#how-metrics-are-measured)的结果。\n\n## 关键性能指南\n\n### CSS & JS 动画性能\n\n对众多应用程序而言，动画对提供友好的用户体验有着关键的作用，我们有很多方式生成 web 动画，比如 CSS `transition`/`animation` 或者 JavaScript 动画 (使用 `Window.requestAnimationFrame`).\n\n### DNS 预获取\n\n**`DNS-prefetch`** (**DNS 预获取**) 是尝试在请求资源之前解析域名。这可能是后面要加载的文件，也可能是用户尝试打开的链接目标。\n\n### 懒加载\n\n**延迟加载 (懒加载)** 是一种将资源标识为非阻塞（非关键）资源并仅在需要时加载它们的策略。 这是一种缩短[关键渲染路径](https://developer.mozilla.org/zh-CN/docs/Web/Performance/Critical_rendering_path)长度的方法，可以缩短页面加载时间。\n\n\u003Caside> 🌀 关键渲染路径：是浏览器将 HTML，CSS 和 JavaScript 转换为屏幕上的像素所经历的步骤序列。优化关键渲染路径可提高渲染性能。关键渲染路径包含了 [文档对象模型](https://developer.mozilla.org/zh-CN/docs/Web/API/Document_Object_Model) (DOM)，[CSS 对象模型](https://developer.mozilla.org/zh-CN/docs/Web/API/CSS_Object_Model) (CSSOM)，渲染树和布局。\n\n\u003C/aside>\n\n### 性能监控\n\n**合成监控**和**真实用户监控** (RUM) 是两种监视和提供 Web 性能见解的方法。\n\n### 优化启动性能\n\n一个在软件应用开发中经常被忽视的方面—即便在那些专注于性能优化的软件中—就是启动时的表现。你的应用需要花费多长时间启动？当应用加载时是否会卡住用户的设备或浏览器？这会让用户担心你的应用崩溃了，或者哪儿出错了。花时间确保你的应用能够更好地启动总是一个好主意。\n\n## Performance 使用指南\n\n1. 打开新的隐私窗口\n    隐私窗口运行在一个纯净的浏览器环境，不会加载多余的浏览器扩展。\n2. 在隐私窗口打开如下地址：用于测试Profile的demo，包含了一系列运动的小球\n    [Janky Animation](https://googlechrome.github.io/devtools-samples/jank/)\n3. 通过`Command+Option+I` 组合键（Mac）或`Control+Shift+I`(Windows)打开开发者工具\n\n在`性能` 面板，可点击设置图标，选择`CPU` 速度","src/content/blog/200-Learning/210-Programing/关于Web Performance.md","da01c3e5d5abec0b",{"html":1109,"metadata":1110},"\u003Cblockquote>\n\u003Cp>昔日所云我，而今却是伊。不知今日我，又属后来谁？  —《菜根谭》\u003C/p>\n\u003C/blockquote>\n\u003Cp>\u003Ca href=\"https://web.dev/learn-core-web-vitals/\">Core Web Vitals\u003C/a>\u003C/p>\n\u003Caside class=\"callout callout-assert\">\u003Cdiv class=\"callout-indicator\">\u003Cdiv class=\"callout-hint\">\u003Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" aria-hidden=\"true\">\u003Ccircle cx=\"19\" cy=\"5\" r=\"3\">\u003C/circle>\u003Cpath d=\"M20 11.929V15c0 1.656-1.344 3-3 3h-3l-6 4v-4H5c-1.656 0-3-1.344-3-3V7c0-1.656 1.344-3 3-3h7.071\">\u003C/path>\u003C/svg>\u003C/div>\u003Cdiv class=\"callout-title\">Info\u003C/div>\u003C/div>\u003Cdiv class=\"callout-content\">\u003Cp>等待资源加载时间和大部分情况下的浏览器单线程执行是影响 Web 性能的两大主要原因。\u003C/p>\u003C/div>\u003C/aside>\n\u003Cp>Web 性能是客观的衡量标准，是用户对加载时间和运行时的直观体验。Web 性能指页面加载到可交互和可响应所消耗的时间，以及页面在交互时的流畅度——滚动是否顺滑？按钮能否点击？弹窗能否快速打开，动画是否平滑？Web 性能既包括客观的度量如加载时间，每秒帧数和到页面可交互的时间；也包括用户的对页面内容加载时间的主观感觉。\u003C/p>\n\u003Cp>页面响应时间越长，越多的用户就会放弃该网站。重要的是，通过使体验尽可能早地变得可用和交互，同时异步地加载长尾体验部分，来最大程度地减少加载和响应时间，并添加其他功能以降低延迟。\u003C/p>\n\u003Cp>有很多工具，API 和最佳实践帮助我们测量和改进网页性能。本章对此有所讲解。\u003C/p>\n\u003Ch2 id=\"健康网站的关键指标web-vitas\">健康网站的关键指标（Web Vitas）\u003C/h2>\n\u003Cp>Web 指标是 Google 开创的一项新计划，旨在为网络质量信号提供统一指导，这些信号对于提供出色的网络用户体验至关重要。\u003C/p>\n\u003Cp>网站所有者要想了解他们提供给用户的体验质量，并非需要成为性能专家。 Web 指标计划旨在简化场景，帮助网站专注于最重要的指标，即\u003Cstrong>核心 Web 指标\u003C/strong> 。\u003C/p>\n\u003Cblockquote class=\"callout-info\" data-callout=\"info\" data-expandable=\"false\" data-expanded=\"false\">\n\n                \u003Cdiv class=\"callout-title\">\n                  \u003Cdiv class=\"callout-title-icon\">\u003Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\u003Ccircle cx=\"12\" cy=\"12\" r=\"10\">\u003C/circle>\u003Cline x1=\"12\" y1=\"16\" x2=\"12\" y2=\"12\">\u003C/line>\u003Cline x1=\"12\" y1=\"8\" x2=\"12.01\" y2=\"8\">\u003C/line>\u003C/svg>\u003C/div>\n                  \n                \u003C/div>\n                \u003Cdiv class=\"callout-content\">核心性能指标：核心 Web 指标是适用于所有网页的 Web 指标子集，每位网站所有者都应该测量这些指标，并且这些指标还将显示在所有 Google 工具中。每项核心 Web 指标代表用户体验的一个不同方面，能够进行实际测量，并且反映出以用户为中心的关键结果的真实体验。\u003C/div>\n              \n\u003C/blockquote>\n\u003Cp>核心Web指标的构成会随着时间的推移而发展。当前针对2020年的指标构成侧重于用户体验的三个方面——加载性能、交互性、和视觉稳定性——并包括一下指标（及各指标的阀值）：\u003C/p>\n\u003Cp>\u003Cimg src=\"https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/ZZU8Z7TMKXmzZT2mCjJU.svg\" alt=\"https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/ZZU8Z7TMKXmzZT2mCjJU.svg\">\u003C/p>\n\u003Cp>\u003Cimg src=\"https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/iHYrrXKe4QRcb2uu8eV8.svg\" alt=\"https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/iHYrrXKe4QRcb2uu8eV8.svg\">\u003C/p>\n\u003Cp>\u003Cimg src=\"https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/dgpDFckbHwwOKdIGDa3N.svg\" alt=\"https://web-dev.imgix.net/image/tcFciHGuF3MxnTr1y5ue01OGLBn2/dgpDFckbHwwOKdIGDa3N.svg\">\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>\u003Ca href=\"https://web.dev/lcp/\">Largest Contentful Paint (LCP)\u003C/a>\u003C/strong> ：最大内容绘制，测量_加载_性能。为了提供良好的用户体验，LCP 应在页面首次开始加载后的\u003Cstrong>2.5 秒\u003C/strong>内发生。\u003C/li>\n\u003Cli>\u003Cstrong>\u003Ca href=\"https://web.dev/fid/\">First Input Delay (FID)\u003C/a>\u003C/strong> ：首次输入延迟，测量_交互性_。为了提供良好的用户体验，页面的 FID 应为\u003Cstrong>100 毫秒\u003C/strong>或更短。\u003C/li>\n\u003Cli>\u003Cstrong>\u003Ca href=\"https://web.dev/cls/\">Cumulative Layout Shift (CLS)\u003C/a>\u003C/strong> ：累积布局偏移，测量_视觉稳定性_。为了提供良好的用户体验，页面的 CLS 应保持在 \u003Cstrong>0.1.\u003C/strong> 或更少。\u003C/li>\n\u003C/ul>\n\u003Cp>对于上述每项指标，一个良好的测量阈值为75%，且该阈值同时适用于移动和桌面设备。如果一个页面满足上述全部三项建议的75%，那么评估核心Web指标合规性的工具应评判该页面通过。\u003C/p>\n\u003Ch3 id=\"测量工具\">测量工具\u003C/h3>\n\u003Col>\n\u003Cli>\n\u003Cp>\u003Cstrong>Chrome UX Report:\u003C/strong> \u003Ca href=\"https://developer.chrome.com/docs/crux/\">Chrome 用户体验报告\u003C/a>为每项核心 Web 指标收集匿名的真实用户测量数据。这些数据既能使网站所有者快速进行性能评估，而无需在页面上进行手动检测分析\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>通过使用\u003Ca href=\"https://github.com/GoogleChrome/web-vitals\">web-vitals\u003C/a>库，测量每项指标就像调用单个函数一样简单\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"jsx\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"jsx\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\"> \u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003C/li>\n\u003C/ol>\n\u003Cp>import {getCLS, getFID, getLCP} from ‘web-vitals’;\u003C/p>\n\u003Cp>function sendToAnalytics(metric) {\nconst body = JSON.stringify(metric);\n// Use \u003Ccode>navigator.sendBeacon()\u003C/code> if available, falling back to \u003Ccode>fetch()\u003C/code>.\n(navigator.sendBeacon &#x26;&#x26; navigator.sendBeacon(‘/analytics’, body)) ||\nfetch(‘/analytics’, {body, method: ‘POST’, keepalive: true});\n}\u003C/p>\n\u003Cp>getCLS(sendToAnalytics);\ngetFID(sendToAnalytics);\ngetLCP(sendToAnalytics);\n```\n3. 可以使用\u003Ca href=\"https://github.com/GoogleChrome/web-vitals-extension\">Web 指标 Chrome 扩展程序\u003C/a>来报告每项核心 Web 指标，且无需编写任何代码。该扩展程序使用\u003Ca href=\"https://github.com/GoogleChrome/web-vitals\">web-vitals\u003C/a>库来测量每一项指标，并在用户浏览网页时呈现给用户。\n4. Chrome开发者工具、Lighthouse\u003C/p>\n\u003Ch3 id=\"提高分数的建议\">提高分数的建议\u003C/h3>\n\u003Cp>\u003Ca href=\"https://www.notion.so/LCP-1a764bffa6e54c9a99d7a6a4a2a71be0?pvs=21\">优化LCP\u003C/a>\u003C/p>\n\u003Cul>\n\u003Cli>优化FID\u003C/li>\n\u003Cli>优化CLS\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"其他web指标\">其他Web指标\u003C/h3>\n\u003Cp>其他 Web 指标通常用作核心 Web 指标的代理或补充指标，有助于获取范围更广的体验或帮助诊断特定的问题。\u003C/p>\n\u003Cp>例如，\u003Ca href=\"https://web.dev/ttfb/\">Time to First Byte 首字节时间 (TTFB)\u003C/a>和\u003Ca href=\"https://web.dev/fcp/\">First Contentful Paint 首次内容绘制 (FCP)\u003C/a>指标都是_加载_体验的重要方面，并且在诊断 LCP 问题方面（分别为\u003Ca href=\"https://web.dev/overloaded-server/\">服务器响应时间\u003C/a>过长或\u003Ca href=\"https://web.dev/render-blocking-resources/\">阻塞渲染资源\u003C/a>）都十分有用。\u003C/p>\n\u003Cp>同样，\u003Ca href=\"https://web.dev/tbt/\">总阻塞时间 (TBT)\u003C/a>和\u003Ca href=\"https://web.dev/tti/\">Time to Interactive 可交互时间 (TTI)\u003C/a>等指标是实验室指标，对于捕获和诊断会对 FID 产生影响的潜在_交互性_问题至关重要。然而，这些指标不是核心 Web 指标的一部分，因为它们无法进行实际测量，也不反映以\u003Ca href=\"https://web.dev/user-centric-performance-metrics/#how-metrics-are-measured\">用户为中心\u003C/a>的结果。\u003C/p>\n\u003Ch2 id=\"关键性能指南\">关键性能指南\u003C/h2>\n\u003Ch3 id=\"css--js-动画性能\">CSS &#x26; JS 动画性能\u003C/h3>\n\u003Cp>对众多应用程序而言，动画对提供友好的用户体验有着关键的作用，我们有很多方式生成 web 动画，比如 CSS \u003Ccode>transition\u003C/code>/\u003Ccode>animation\u003C/code> 或者 JavaScript 动画 (使用 \u003Ccode>Window.requestAnimationFrame\u003C/code>).\u003C/p>\n\u003Ch3 id=\"dns-预获取\">DNS 预获取\u003C/h3>\n\u003Cp>\u003Cstrong>\u003Ccode>DNS-prefetch\u003C/code>\u003C/strong> (\u003Cstrong>DNS 预获取\u003C/strong>) 是尝试在请求资源之前解析域名。这可能是后面要加载的文件，也可能是用户尝试打开的链接目标。\u003C/p>\n\u003Ch3 id=\"懒加载\">懒加载\u003C/h3>\n\u003Cp>\u003Cstrong>延迟加载 (懒加载)\u003C/strong> 是一种将资源标识为非阻塞（非关键）资源并仅在需要时加载它们的策略。 这是一种缩短\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/Performance/Critical_rendering_path\">关键渲染路径\u003C/a>长度的方法，可以缩短页面加载时间。\u003C/p>\n\u003Caside> 🌀 关键渲染路径：是浏览器将 HTML，CSS 和 JavaScript 转换为屏幕上的像素所经历的步骤序列。优化关键渲染路径可提高渲染性能。关键渲染路径包含了 [文档对象模型](https://developer.mozilla.org/zh-CN/docs/Web/API/Document_Object_Model) (DOM)，[CSS 对象模型](https://developer.mozilla.org/zh-CN/docs/Web/API/CSS_Object_Model) (CSSOM)，渲染树和布局。\n\u003C/aside>\n\u003Ch3 id=\"性能监控\">性能监控\u003C/h3>\n\u003Cp>\u003Cstrong>合成监控\u003C/strong>和\u003Cstrong>真实用户监控\u003C/strong> (RUM) 是两种监视和提供 Web 性能见解的方法。\u003C/p>\n\u003Ch3 id=\"优化启动性能\">优化启动性能\u003C/h3>\n\u003Cp>一个在软件应用开发中经常被忽视的方面—即便在那些专注于性能优化的软件中—就是启动时的表现。你的应用需要花费多长时间启动？当应用加载时是否会卡住用户的设备或浏览器？这会让用户担心你的应用崩溃了，或者哪儿出错了。花时间确保你的应用能够更好地启动总是一个好主意。\u003C/p>\n\u003Ch2 id=\"performance-使用指南\">Performance 使用指南\u003C/h2>\n\u003Col>\n\u003Cli>打开新的隐私窗口\n隐私窗口运行在一个纯净的浏览器环境，不会加载多余的浏览器扩展。\u003C/li>\n\u003Cli>在隐私窗口打开如下地址：用于测试Profile的demo，包含了一系列运动的小球\n\u003Ca href=\"https://googlechrome.github.io/devtools-samples/jank/\">Janky Animation\u003C/a>\u003C/li>\n\u003Cli>通过\u003Ccode>Command+Option+I\u003C/code> 组合键（Mac）或\u003Ccode>Control+Shift+I\u003C/code>(Windows)打开开发者工具\u003C/li>\n\u003C/ol>\n\u003Cp>在\u003Ccode>性能\u003C/code> 面板，可点击设置图标，选择\u003Ccode>CPU\u003C/code> 速度\u003C/p>",{"headings":1111,"localImagePaths":1139,"remoteImagePaths":1140,"frontmatter":1141,"imagePaths":1145},[1112,1115,1117,1119,1122,1124,1127,1130,1132,1134,1136],{"depth":31,"slug":1113,"text":1114},"健康网站的关键指标web-vitas","健康网站的关键指标（Web Vitas）",{"depth":37,"slug":1116,"text":1116},"测量工具",{"depth":37,"slug":1118,"text":1118},"提高分数的建议",{"depth":37,"slug":1120,"text":1121},"其他web指标","其他Web指标",{"depth":31,"slug":1123,"text":1123},"关键性能指南",{"depth":37,"slug":1125,"text":1126},"css--js-动画性能","CSS & JS 动画性能",{"depth":37,"slug":1128,"text":1129},"dns-预获取","DNS 预获取",{"depth":37,"slug":1131,"text":1131},"懒加载",{"depth":37,"slug":1133,"text":1133},"性能监控",{"depth":37,"slug":1135,"text":1135},"优化启动性能",{"depth":31,"slug":1137,"text":1138},"performance-使用指南","Performance 使用指南",[],[],{"title":1099,"description":1100,"pubDate":501,"heroImage":1102,"date created":1142,"date modified":1143,"tags":1144,"minutesRead":376},["Date","2023-07-19T00:00:00.000Z"],["Date","2023-07-19T00:00:00.000Z"],[20,242,1104],[],"200-Learning/210-Programing/关于Web Performance.md","200-learning/210-programing/富文本编辑器相关资源",{"id":1147,"data":1149,"body":1154,"filePath":1155,"digest":1156,"rendered":1157,"legacyId":1178},{"title":1150,"description":15,"pubDate":1151,"heroImage":1152,"tags":1153},"富文本编辑器相关资源",["Date","2023-06-29T06:38:00.000Z"],"https://images.unsplash.com/photo-1659083428436-c55805a424db?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=640&q=80",[133,242],"> There is nothing permanent except change.\n> — \u003Ccite>Heraclitus\u003C/cite>\n\n## [[ProseMirror]]\n\n### Tracking changes\n\n- discuss\n\t- [Live tracking / Track changes - Yjs Community](https://discuss.yjs.dev/t/live-tracking-track-changes/293/5)\n\t- [How to compare 2 versions of the same document - discuss.ProseMirror](https://discuss.prosemirror.net/t/how-to-compare-2-versions-of-the-same-document/1836/2)\n- libraries\n\t- [prosemirror-live-suggestions / prosemirror-live-suggestions · GitLab](https://gitlab.com/prosemirror-live-suggestions/prosemirror-live-suggestions)\n\t- [GitHub - automerge/automerge: A JSON-like data structure (a CRDT) that can be modified concurrently by different users, and merged again automatically.](https://github.com/automerge/automerge)\n\t- [GitHub - y-crdt/y-crdt: Rust port of Yjs](https://github.com/y-crdt/y-crdt)\n- essay/talks\n\t- [About CRDTs • Conflict-free Replicated Data Types](https://crdt.tech/)\n\t- [Peritext: A CRDT for Rich-Text Collaboration](https://www.inkandswitch.com/peritext/)\n\t- [Local-first software: You own your data, in spite of the cloud](https://www.inkandswitch.com/local-first/)\n\t- [Upwelling: Combining real-time collaboration with version control for writers.](https://www.inkandswitch.com/upwelling/)\n\n### References\n\n- [remirror/remirror: ProseMirror toolkit for React 🎉 (github.com)](https://github.com/remirror/remirror)\n- [curvenote/editor: An interactive scientific editor built with ProseMirror, React and Redux - by Curvenote. (github.com)](https://github.com/curvenote/editor)\n- [streetwriters/notesnook: A fully open source & end-to-end encrypted note taking alternative to Evernote. (github.com)](https://github.com/streetwriters/notesnook)\n- [herrdu/prosemirror: 个人使用的 prosemirror 合集版本 (github.com)](https://github.com/herrdu/prosemirror)\n- [nhn/tui.editor: 🍞📝 Markdown WYSIWYG Editor. GFM Standard + Chart & UML Extensible. (github.com)](https://github.com/nhn/tui.editor)\n- [sereneinserenade (Jeet Mandaliya) (github.com)](https://github.com/sereneinserenade)\n- [sereneinserenade/notitap: Notitap - Notion like editor built on top of tiptap. (github.com)](https://github.com/sereneinserenade/notitap)\n- [TypeCellOS/BlockNote: A \"Notion-style\" block-based extensible text editor built on top of Prosemirror and Tiptap. (github.com)](https://github.com/TypeCellOS/BlockNote)\n- [IncredibleDevHQ/Incredible: Incredible drastically simplifies creation of developer video content. It offers a unified workflow to storyboard, record, collaborate and produce the video. (github.com)](https://github.com/IncredibleDevHQ/Incredible)\n- [michelson/Dante: Just another Medium wysiwyg editor clone (github.com)](https://github.com/michelson/Dante)\n- [uptonking/nostalgia-studio-full: wip projects about documentation and knowledge base (github.com)](https://github.com/uptonking/nostalgia-studio-full)\n- [ahixon/atlassian-frontend-mirror (github.com)](https://github.com/ahixon/atlassian-frontend-mirror)\n- [ronkok/Hurmet: Rich text editor on the web, featuring live calculations. (github.com)](https://github.com/ronkok/Hurmet)\n- [quarto-dev/quarto: Quarto open-source scientific and technical publishing system (github.com)](https://github.com/quarto-dev/quarto)\n- [nib-edit/nib: Wysiwyg / Text editor components built using React and Prosemirror (github.com)](https://github.com/nib-edit/nib)\n- [bangle-io/bangle.dev: Collection of higher level rich text editing tools. It powers the local only note taking app https://bangle.io (github.com)](https://github.com/bangle-io/bangle.dev)\n- [PierBover/prosemirror-cookbook: A series of examples for understanding ProseMirror (github.com)](https://github.com/PierBover/prosemirror-cookbook)\n- [sereneinserenade/placenoter: Chrome extension to turn browser's default new tab into note-taking machine. (github.com)](https://github.com/sereneinserenade/placenoter)\n- [dotCMS/core: Headless/Hybrid Content Management System for Enterprises (github.com)](https://github.com/dotCMS/core)\n- [NewBuilding/start-editor: A rich editor make in ProseMirror (github.com)](https://github.com/NewBuilding/start-editor)\n- [Milkdown/milkdown: 🍼 Plugin driven WYSIWYG markdown editor framework. (github.com)](https://github.com/Milkdown/milkdown)\n- [https://github.com/bytedance/syllepsis](https://github.com/bytedance/syllepsis)\n- [GitHub - fiduswriter/fiduswriter: Fidus Writer is an online collaborative editor for academics.](https://github.com/fiduswriter/fiduswriter)\n- [Commits · master · wax / wax-prosemirror · GitLab](https://gitlab.coko.foundation/wax/wax-prosemirror/-/commits/master?ref_type=heads)","src/content/blog/200-Learning/210-Programing/富文本编辑器相关资源.md","0f345f3462d4fa88",{"html":1158,"metadata":1159},"\u003Cblockquote>\n\u003Cp>There is nothing permanent except change.\n— \u003Ccite>Heraclitus\u003C/cite>\u003C/p>\n\u003C/blockquote>\n\u003Ch2 id=\"prosemirror\">[[ProseMirror]]\u003C/h2>\n\u003Ch3 id=\"tracking-changes\">Tracking changes\u003C/h3>\n\u003Cul>\n\u003Cli>discuss\n\u003Cul>\n\u003Cli>\u003Ca href=\"https://discuss.yjs.dev/t/live-tracking-track-changes/293/5\">Live tracking / Track changes - Yjs Community\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://discuss.prosemirror.net/t/how-to-compare-2-versions-of-the-same-document/1836/2\">How to compare 2 versions of the same document - discuss.ProseMirror\u003C/a>\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>libraries\n\u003Cul>\n\u003Cli>\u003Ca href=\"https://gitlab.com/prosemirror-live-suggestions/prosemirror-live-suggestions\">prosemirror-live-suggestions / prosemirror-live-suggestions · GitLab\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://github.com/automerge/automerge\">GitHub - automerge/automerge: A JSON-like data structure (a CRDT) that can be modified concurrently by different users, and merged again automatically.\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://github.com/y-crdt/y-crdt\">GitHub - y-crdt/y-crdt: Rust port of Yjs\u003C/a>\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>essay/talks\n\u003Cul>\n\u003Cli>\u003Ca href=\"https://crdt.tech/\">About CRDTs • Conflict-free Replicated Data Types\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://www.inkandswitch.com/peritext/\">Peritext: A CRDT for Rich-Text Collaboration\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://www.inkandswitch.com/local-first/\">Local-first software: You own your data, in spite of the cloud\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://www.inkandswitch.com/upwelling/\">Upwelling: Combining real-time collaboration with version control for writers.\u003C/a>\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"references\">References\u003C/h3>\n\u003Cul>\n\u003Cli>\u003Ca href=\"https://github.com/remirror/remirror\">remirror/remirror: ProseMirror toolkit for React \u003Cspan role=\"img\" aria-label=\"party popper\">🎉\u003C/span> (github.com)\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://github.com/curvenote/editor\">curvenote/editor: An interactive scientific editor built with ProseMirror, React and Redux - by Curvenote. (github.com)\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://github.com/streetwriters/notesnook\">streetwriters/notesnook: A fully open source &#x26; end-to-end encrypted note taking alternative to Evernote. (github.com)\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://github.com/herrdu/prosemirror\">herrdu/prosemirror: 个人使用的 prosemirror 合集版本 (github.com)\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://github.com/nhn/tui.editor\">nhn/tui.editor: \u003Cspan role=\"img\" aria-label=\"bread\">🍞\u003C/span>\u003Cspan role=\"img\" aria-label=\"memo\">📝\u003C/span> Markdown WYSIWYG Editor. GFM Standard + Chart &#x26; UML Extensible. (github.com)\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://github.com/sereneinserenade\">sereneinserenade (Jeet Mandaliya) (github.com)\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://github.com/sereneinserenade/notitap\">sereneinserenade/notitap: Notitap - Notion like editor built on top of tiptap. (github.com)\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://github.com/TypeCellOS/BlockNote\">TypeCellOS/BlockNote: A “Notion-style” block-based extensible text editor built on top of Prosemirror and Tiptap. (github.com)\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://github.com/IncredibleDevHQ/Incredible\">IncredibleDevHQ/Incredible: Incredible drastically simplifies creation of developer video content. It offers a unified workflow to storyboard, record, collaborate and produce the video. (github.com)\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://github.com/michelson/Dante\">michelson/Dante: Just another Medium wysiwyg editor clone (github.com)\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://github.com/uptonking/nostalgia-studio-full\">uptonking/nostalgia-studio-full: wip projects about documentation and knowledge base (github.com)\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://github.com/ahixon/atlassian-frontend-mirror\">ahixon/atlassian-frontend-mirror (github.com)\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://github.com/ronkok/Hurmet\">ronkok/Hurmet: Rich text editor on the web, featuring live calculations. (github.com)\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://github.com/quarto-dev/quarto\">quarto-dev/quarto: Quarto open-source scientific and technical publishing system (github.com)\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://github.com/nib-edit/nib\">nib-edit/nib: Wysiwyg / Text editor components built using React and Prosemirror (github.com)\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://github.com/bangle-io/bangle.dev\">bangle-io/bangle.dev: Collection of higher level rich text editing tools. It powers the local only note taking app https://bangle.io (github.com)\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://github.com/PierBover/prosemirror-cookbook\">PierBover/prosemirror-cookbook: A series of examples for understanding ProseMirror (github.com)\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://github.com/sereneinserenade/placenoter\">sereneinserenade/placenoter: Chrome extension to turn browser’s default new tab into note-taking machine. (github.com)\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://github.com/dotCMS/core\">dotCMS/core: Headless/Hybrid Content Management System for Enterprises (github.com)\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://github.com/NewBuilding/start-editor\">NewBuilding/start-editor: A rich editor make in ProseMirror (github.com)\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://github.com/Milkdown/milkdown\">Milkdown/milkdown: \u003Cspan role=\"img\" aria-label=\"baby bottle\">🍼\u003C/span> Plugin driven WYSIWYG markdown editor framework. (github.com)\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://github.com/bytedance/syllepsis\">https://github.com/bytedance/syllepsis\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://github.com/fiduswriter/fiduswriter\">GitHub - fiduswriter/fiduswriter: Fidus Writer is an online collaborative editor for academics.\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://gitlab.coko.foundation/wax/wax-prosemirror/-/commits/master?ref_type=heads\">Commits · master · wax / wax-prosemirror · GitLab\u003C/a>\u003C/li>\n\u003C/ul>",{"headings":1160,"localImagePaths":1170,"remoteImagePaths":1171,"frontmatter":1172,"imagePaths":1177},[1161,1164,1167],{"depth":31,"slug":1162,"text":1163},"prosemirror","[[ProseMirror]]",{"depth":37,"slug":1165,"text":1166},"tracking-changes","Tracking changes",{"depth":37,"slug":1168,"text":1169},"references","References",[],[],{"title":1150,"description":15,"pubDate":1173,"heroImage":1152,"date created":1174,"date modified":1175,"tags":1176,"minutesRead":404},"2023-06-29 14:38",["Date","2023-06-29T00:00:00.000Z"],["Date","2023-06-29T00:00:00.000Z"],[133,242],[],"200-Learning/210-Programing/富文本编辑器相关资源.md","200-learning/210-programing/浏览器中的模块预加载",{"id":1179,"data":1181,"body":1186,"filePath":1187,"digest":1188,"rendered":1189,"legacyId":1201},{"title":1182,"description":15,"pubDate":1183,"heroImage":1184,"tags":1185},"浏览器中的模块预加载",["Date","2023-08-12T15:04:00.000Z"],"https://images.unsplash.com/photo-1577563682708-4f022ec774fb?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1200&q=80",[20,1104,182],"- [Preloading modules - Chrome Developers](https://developer.chrome.com/blog/modulepreload/)\n- [rel=modulepreload - HTML: HyperText Markup Language | MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/rel/modulepreload)\n- [rel=preload - HTML: HyperText Markup Language | MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/rel/preload#scripting_and_preloads)\n- [JavaScript 模块 - JavaScript | MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Modules#%E4%BD%BF%E7%94%A8%E5%AF%BC%E5%85%A5%E6%98%A0%E5%B0%84%E5%AF%BC%E5%85%A5%E6%A8%A1%E5%9D%97)\n\n模块脚本默认以defer方式加载，这在大多数时候都不会造成问题。但模块的依赖项可能带来加载问题，因为浏览器需要等待模块加载才能找到其依赖项。解决该问题的一种方法是预加载依赖项。\n\n浏览器提供了提前声明请求资源的方式：`\u003Clink rel=\"preload\">`，这对于字体、媒体文件等资源非常有效。[`\u003Clink rel=\"preload\">`](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/rel/preload) 及其等效的 HTTP 标头提供了一种简单的声明性方式，让浏览器立即了解当前导航所需的关键文件，对资源进行高优先级下载，当该资源被实际需要时已被获取或部分获取。\n\n如下例子来自MDN。\n某网站文件目录如下：\n```\nindex.html\nmain.js\nmodules/\n    canvas.js\n    square.js\n```\n其中main.js加载了canvas和square模块：\n```html\n\u003C!doctype html>\n\u003Chtml lang=\"en-US\">\n  \u003Chead>\n    \u003Cmeta charset=\"utf-8\" />\n    \u003Ctitle>Basic JavaScript module example\u003C/title>\n    \u003Cstyle>\n    \u003Cscript type=\"module\" src=\"main.js\">\u003C/script>\n  \u003C/head>\n  \u003Cbody>\u003C/body>\n\u003C/html>\n```\n当文档解析完成后，开始加载、执行`main.js`，执行过程中发现依赖项`canvas.js`和`square.js`需要获取它们。\n\n如果改造为如下形式，当解析HTML到`modulepreload`，会异步并行预加载对应模块，当执行main.js时该文件已被parsed且他的依赖项是已知的。\n```html\n\u003C!doctype html>\n\u003Chtml lang=\"en-US\">\n  \u003Chead>\n    \u003Cmeta charset=\"utf-8\" />\n    \u003Ctitle>Basic JavaScript module example\u003C/title>\n    \u003Clink rel=\"modulepreload\" href=\"main.js\" />\n    \u003Clink rel=\"modulepreload\" href=\"modules/canvas.js\" />\n    \u003Clink rel=\"modulepreload\" href=\"modules/square.js\" />\n    \u003Cscript type=\"module\" src=\"main.js\">\u003C/script>\n  \u003C/head>\n  \u003Cbody>\u003C/body>\n\u003C/html>\n```\n\n\n浏览器兼容性列表：\n![image.png](https://raw.githubusercontent.com/fw6/assets/main/toy_docs/20230813130633.png)","src/content/blog/200-Learning/210-Programing/浏览器中的模块预加载.md","e57889a54f0578ed",{"html":1190,"metadata":1191},"\u003Cul>\n\u003Cli>\u003Ca href=\"https://developer.chrome.com/blog/modulepreload/\">Preloading modules - Chrome Developers\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/rel/modulepreload\">rel=modulepreload - HTML: HyperText Markup Language | MDN\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/rel/preload#scripting_and_preloads\">rel=preload - HTML: HyperText Markup Language | MDN\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Modules#%E4%BD%BF%E7%94%A8%E5%AF%BC%E5%85%A5%E6%98%A0%E5%B0%84%E5%AF%BC%E5%85%A5%E6%A8%A1%E5%9D%97\">JavaScript 模块 - JavaScript | MDN\u003C/a>\u003C/li>\n\u003C/ul>\n\u003Cp>模块脚本默认以defer方式加载，这在大多数时候都不会造成问题。但模块的依赖项可能带来加载问题，因为浏览器需要等待模块加载才能找到其依赖项。解决该问题的一种方法是预加载依赖项。\u003C/p>\n\u003Cp>浏览器提供了提前声明请求资源的方式：\u003Ccode>&#x3C;link rel=\"preload\">\u003C/code>，这对于字体、媒体文件等资源非常有效。\u003Ca href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/rel/preload\">\u003Ccode>&#x3C;link rel=\"preload\">\u003C/code>\u003C/a> 及其等效的 HTTP 标头提供了一种简单的声明性方式，让浏览器立即了解当前导航所需的关键文件，对资源进行高优先级下载，当该资源被实际需要时已被获取或部分获取。\u003C/p>\n\u003Cp>如下例子来自MDN。\n某网站文件目录如下：\u003C/p>\n\u003Cpre>\u003Ccode>index.html\nmain.js\nmodules/\n    canvas.js\n    square.js\n\u003C/code>\u003C/pre>\n\u003Cp>其中main.js加载了canvas和square模块：\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"html\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"html\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">&#x3C;!\u003C/span>\u003Cspan style=\"color:#8DDB8C\">doctype\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> html\u003C/span>\u003Cspan style=\"color:#ADBAC7\">>\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">&#x3C;\u003C/span>\u003Cspan style=\"color:#8DDB8C\">html\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> lang\u003C/span>\u003Cspan style=\"color:#ADBAC7\">=\u003C/span>\u003Cspan style=\"color:#96D0FF\">\"en-US\"\u003C/span>\u003Cspan style=\"color:#ADBAC7\">>\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">  &#x3C;\u003C/span>\u003Cspan style=\"color:#8DDB8C\">head\u003C/span>\u003Cspan style=\"color:#ADBAC7\">>\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    &#x3C;\u003C/span>\u003Cspan style=\"color:#8DDB8C\">meta\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> charset\u003C/span>\u003Cspan style=\"color:#ADBAC7\">=\u003C/span>\u003Cspan style=\"color:#96D0FF\">\"utf-8\"\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> />\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    &#x3C;\u003C/span>\u003Cspan style=\"color:#8DDB8C\">title\u003C/span>\u003Cspan style=\"color:#ADBAC7\">>Basic JavaScript module example&#x3C;/\u003C/span>\u003Cspan style=\"color:#8DDB8C\">title\u003C/span>\u003Cspan style=\"color:#ADBAC7\">>\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    &#x3C;\u003C/span>\u003Cspan style=\"color:#8DDB8C\">style\u003C/span>\u003Cspan style=\"color:#ADBAC7\">>\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    &#x3C;\u003C/span>\u003Cspan style=\"color:#8DDB8C\">script\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> type=\"module\" src=\"\u003C/span>\u003Cspan style=\"color:#8DDB8C\">main\u003C/span>\u003Cspan style=\"color:#ADBAC7\">.js\"\u003C/span>\u003Cspan style=\"color:#F47067\">>\u003C/span>\u003Cspan style=\"color:#ADBAC7\">&#x3C;/\u003C/span>\u003Cspan style=\"color:#8DDB8C\">script\u003C/span>\u003Cspan style=\"color:#F47067\">>\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">  &#x3C;/\u003C/span>\u003Cspan style=\"color:#8DDB8C\">head\u003C/span>\u003Cspan style=\"color:#F47067\">>\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">  &#x3C;\u003C/span>\u003Cspan style=\"color:#8DDB8C\">body\u003C/span>\u003Cspan style=\"color:#F47067\">>\u003C/span>\u003Cspan style=\"color:#ADBAC7\">&#x3C;/\u003C/span>\u003Cspan style=\"color:#8DDB8C\">body\u003C/span>\u003Cspan style=\"color:#F47067\">>\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">&#x3C;/\u003C/span>\u003Cspan style=\"color:#8DDB8C\">html\u003C/span>\u003Cspan style=\"color:#F47067\">>\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Cp>当文档解析完成后，开始加载、执行\u003Ccode>main.js\u003C/code>，执行过程中发现依赖项\u003Ccode>canvas.js\u003C/code>和\u003Ccode>square.js\u003C/code>需要获取它们。\u003C/p>\n\u003Cp>如果改造为如下形式，当解析HTML到\u003Ccode>modulepreload\u003C/code>，会异步并行预加载对应模块，当执行main.js时该文件已被parsed且他的依赖项是已知的。\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"html\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"html\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">&#x3C;!\u003C/span>\u003Cspan style=\"color:#8DDB8C\">doctype\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> html\u003C/span>\u003Cspan style=\"color:#ADBAC7\">>\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">&#x3C;\u003C/span>\u003Cspan style=\"color:#8DDB8C\">html\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> lang\u003C/span>\u003Cspan style=\"color:#ADBAC7\">=\u003C/span>\u003Cspan style=\"color:#96D0FF\">\"en-US\"\u003C/span>\u003Cspan style=\"color:#ADBAC7\">>\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">  &#x3C;\u003C/span>\u003Cspan style=\"color:#8DDB8C\">head\u003C/span>\u003Cspan style=\"color:#ADBAC7\">>\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    &#x3C;\u003C/span>\u003Cspan style=\"color:#8DDB8C\">meta\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> charset\u003C/span>\u003Cspan style=\"color:#ADBAC7\">=\u003C/span>\u003Cspan style=\"color:#96D0FF\">\"utf-8\"\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> />\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    &#x3C;\u003C/span>\u003Cspan style=\"color:#8DDB8C\">title\u003C/span>\u003Cspan style=\"color:#ADBAC7\">>Basic JavaScript module example&#x3C;/\u003C/span>\u003Cspan style=\"color:#8DDB8C\">title\u003C/span>\u003Cspan style=\"color:#ADBAC7\">>\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    &#x3C;\u003C/span>\u003Cspan style=\"color:#8DDB8C\">link\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> rel\u003C/span>\u003Cspan style=\"color:#ADBAC7\">=\u003C/span>\u003Cspan style=\"color:#96D0FF\">\"modulepreload\"\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> href\u003C/span>\u003Cspan style=\"color:#ADBAC7\">=\u003C/span>\u003Cspan style=\"color:#96D0FF\">\"main.js\"\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> />\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    &#x3C;\u003C/span>\u003Cspan style=\"color:#8DDB8C\">link\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> rel\u003C/span>\u003Cspan style=\"color:#ADBAC7\">=\u003C/span>\u003Cspan style=\"color:#96D0FF\">\"modulepreload\"\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> href\u003C/span>\u003Cspan style=\"color:#ADBAC7\">=\u003C/span>\u003Cspan style=\"color:#96D0FF\">\"modules/canvas.js\"\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> />\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    &#x3C;\u003C/span>\u003Cspan style=\"color:#8DDB8C\">link\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> rel\u003C/span>\u003Cspan style=\"color:#ADBAC7\">=\u003C/span>\u003Cspan style=\"color:#96D0FF\">\"modulepreload\"\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> href\u003C/span>\u003Cspan style=\"color:#ADBAC7\">=\u003C/span>\u003Cspan style=\"color:#96D0FF\">\"modules/square.js\"\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> />\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    &#x3C;\u003C/span>\u003Cspan style=\"color:#8DDB8C\">script\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> type\u003C/span>\u003Cspan style=\"color:#ADBAC7\">=\u003C/span>\u003Cspan style=\"color:#96D0FF\">\"module\"\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> src\u003C/span>\u003Cspan style=\"color:#ADBAC7\">=\u003C/span>\u003Cspan style=\"color:#96D0FF\">\"main.js\"\u003C/span>\u003Cspan style=\"color:#ADBAC7\">>&#x3C;/\u003C/span>\u003Cspan style=\"color:#8DDB8C\">script\u003C/span>\u003Cspan style=\"color:#ADBAC7\">>\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">  &#x3C;/\u003C/span>\u003Cspan style=\"color:#8DDB8C\">head\u003C/span>\u003Cspan style=\"color:#ADBAC7\">>\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">  &#x3C;\u003C/span>\u003Cspan style=\"color:#8DDB8C\">body\u003C/span>\u003Cspan style=\"color:#ADBAC7\">>&#x3C;/\u003C/span>\u003Cspan style=\"color:#8DDB8C\">body\u003C/span>\u003Cspan style=\"color:#ADBAC7\">>\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">&#x3C;/\u003C/span>\u003Cspan style=\"color:#8DDB8C\">html\u003C/span>\u003Cspan style=\"color:#ADBAC7\">>\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Cp>浏览器兼容性列表：\n\u003Cimg src=\"https://raw.githubusercontent.com/fw6/assets/main/toy_docs/20230813130633.png\" alt=\"image.png\">\u003C/p>",{"headings":1192,"localImagePaths":1193,"remoteImagePaths":1194,"frontmatter":1195,"imagePaths":1200},[],[],[],{"title":1182,"description":15,"pubDate":1196,"heroImage":1184,"date created":1197,"date modified":1198,"tags":1199,"minutesRead":404},"2023-08-12 23:04","2023-08-12 23:03","2023-08-12",[20,1104,182],[],"200-Learning/210-Programing/浏览器中的模块预加载.md","200-learning/210-programing/浏览器中的预加载扫描器",{"id":1202,"data":1204,"body":1209,"filePath":1210,"digest":1211,"rendered":1212,"legacyId":1237},{"title":1205,"description":15,"pubDate":1206,"heroImage":1207,"tags":1208},"浏览器中的预加载扫描器",["Date","2023-08-13T08:44:00.000Z"],"https://images.unsplash.com/photo-1583947581879-41e4c88394c3?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1200&q=80",[20,1104],"> There never was a good knife made of bad steel.\n> — \u003Ccite>Benjamin Franklin\u003C/cite>\n\n- [Preload critical assets to improve loading speed](https://web.dev/preload-critical-assets/)\n- [Don't fight the browser preload scanner](https://web.dev/preload-scanner/)\n- [渲染页面：浏览器的工作原理 - Web 性能 | MDN](https://developer.mozilla.org/zh-CN/docs/Web/Performance/How_browsers_work#%E9%A2%84%E5%8A%A0%E8%BD%BD%E6%89%AB%E6%8F%8F%E5%99%A8)\n- [How the Browser Pre-loader Makes Pages Load Faster](https://andydavies.me/blog/2013/10/22/how-the-browser-pre-loader-makes-pages-load-faster/)\n\n浏览器自身也会做很多优化手段来提高性能，预加载扫描器就是其中之一。\n\n## 什么是预加载扫描器？\n\n每个浏览器都有个主要的HTML解析器，用于将标记原始标记并将其转化为对象模型。但是当解析器遇到阻塞资源时会暂停，例如加载了`\u003Clink>`元素的样式表，或者加载了没有`async`或`defer`属性的`\u003Cscript>`\n\n![image.png](https://raw.githubusercontent.com/fw6/assets/main/toy_docs/20230813165728.png)\n\n会暂停原因如下：\n- `\u003Clink>`元素的样式表：防止出现无样式内容（FOUC：flash of unstyled cntent），即在应用样式之前短暂看到无样式页面\n- 没有`async`或`defer`属性的`\u003Cscript>`：当HTML解析器还没完成时，无法确定任何给定的脚本会修改DOM（一般做法是把script放到文档末尾）\n\n阻塞任何一个关键渲染路径都是不可取的，这会延迟其他重要资源的发现而阻碍进程。浏览器通过称为预加载扫描器的辅助HTML解析器来尽力缓解这些问题。\n\n![image.png](https://raw.githubusercontent.com/fw6/assets/main/toy_docs/20230813170300.png)\n该图描述了预加载扫描器如何与主 HTML 解析器并行工作以推测性地加载资源。在这里，主 HTML 解析器在开始处理 `\u003Cbody>` 元素中的图像标记之前加载和处理 CSS 时被阻止，但预加载扫描器可以在原始标记中继续向前查找，以找到该图像资源并开始在主 HTML 解析器解除阻塞之前加载它。\n\n## 可能破坏预加载扫描器的行为\n\n### 动态注入脚本\n\n不要在脚本中使用DOM注入脚本，如下所示：\n```html\n\u003Cscript>\n// 默认注入的脚本是async\nconst scriptEl = document.createElement('script');  \nscriptEl.src = '/yall.min.js';  \ndocument.head.appendChild(scriptEl);  \n\u003C/script>\n```\n根据需要使用`\u003Cscript>`以及`defer`和`async`属性\n\n### 首屏JavaScript懒加载\n\n不要在首屏使用基于JavaScript的懒加载：\n```html\n\u003Cimg data-src=\"/sand-wasp.jpg\" alt=\"Sand Wasp\" width=\"384\" height=\"255\">\n```\n使用`data-`前缀是使用JavaScript实现懒加载的常见形式。\n例如上方代码所示，通过JavaScript检查视口并在可见时将`data-src`替换为`src`属性\n\n由于预加载扫描器读取src、srcset等属性，设置为data-src会导致图像引用无法被发现。\n\n### CSS背景图像\n\n预加载扫描器也无法扫描到CSS背景图像。\n:::warning\n预加载扫描器会扫描标记，但不会扫描其他资源类型。\n:::\n与HTML一样，浏览器将CSS处理为自己的对象模型，称为CSSOM。如果在构建CSSOM过程中发现外部资源，则在发现时请求这些资源，而不是由预加载扫描器请求。\n此情况可使用`rel-preload`提前获取该图像：\n```html\n\u003C!-- Make sure this is in the \u003Chead> below any  \nstylesheets, so as not to block them from loading -->  \n\u003Clink rel=\"preload\" as=\"image\" href=\"lcp-image.jpg\">\n```\n\n\n### 过多的内联资源\n\n内联资源可能比下载资源更快，因为不会发起单独的请求。它就在文档中，并且会立即加载。然而它也有明显缺点：\n- 内联资源无法被单独缓存\n- 无法在多个文档中共享\n- 内联太多，会延迟预加载扫描器发现后面的资源（先下载内联资源，如CSS中的字体）","src/content/blog/200-Learning/210-Programing/浏览器中的预加载扫描器.md","48b687b4758c8836",{"html":1213,"metadata":1214},"\u003Cblockquote>\n\u003Cp>There never was a good knife made of bad steel.\n— \u003Ccite>Benjamin Franklin\u003C/cite>\u003C/p>\n\u003C/blockquote>\n\u003Cul>\n\u003Cli>\u003Ca href=\"https://web.dev/preload-critical-assets/\">Preload critical assets to improve loading speed\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://web.dev/preload-scanner/\">Don’t fight the browser preload scanner\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/Performance/How_browsers_work#%E9%A2%84%E5%8A%A0%E8%BD%BD%E6%89%AB%E6%8F%8F%E5%99%A8\">渲染页面：浏览器的工作原理 - Web 性能 | MDN\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://andydavies.me/blog/2013/10/22/how-the-browser-pre-loader-makes-pages-load-faster/\">How the Browser Pre-loader Makes Pages Load Faster\u003C/a>\u003C/li>\n\u003C/ul>\n\u003Cp>浏览器自身也会做很多优化手段来提高性能，预加载扫描器就是其中之一。\u003C/p>\n\u003Ch2 id=\"什么是预加载扫描器\">什么是预加载扫描器？\u003C/h2>\n\u003Cp>每个浏览器都有个主要的HTML解析器，用于将标记原始标记并将其转化为对象模型。但是当解析器遇到阻塞资源时会暂停，例如加载了\u003Ccode>&#x3C;link>\u003C/code>元素的样式表，或者加载了没有\u003Ccode>async\u003C/code>或\u003Ccode>defer\u003C/code>属性的\u003Ccode>&#x3C;script>\u003C/code>\u003C/p>\n\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/fw6/assets/main/toy_docs/20230813165728.png\" alt=\"image.png\">\u003C/p>\n\u003Cp>会暂停原因如下：\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ccode>&#x3C;link>\u003C/code>元素的样式表：防止出现无样式内容（FOUC：flash of unstyled cntent），即在应用样式之前短暂看到无样式页面\u003C/li>\n\u003Cli>没有\u003Ccode>async\u003C/code>或\u003Ccode>defer\u003C/code>属性的\u003Ccode>&#x3C;script>\u003C/code>：当HTML解析器还没完成时，无法确定任何给定的脚本会修改DOM（一般做法是把script放到文档末尾）\u003C/li>\n\u003C/ul>\n\u003Cp>阻塞任何一个关键渲染路径都是不可取的，这会延迟其他重要资源的发现而阻碍进程。浏览器通过称为预加载扫描器的辅助HTML解析器来尽力缓解这些问题。\u003C/p>\n\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/fw6/assets/main/toy_docs/20230813170300.png\" alt=\"image.png\">\n该图描述了预加载扫描器如何与主 HTML 解析器并行工作以推测性地加载资源。在这里，主 HTML 解析器在开始处理 \u003Ccode>&#x3C;body>\u003C/code> 元素中的图像标记之前加载和处理 CSS 时被阻止，但预加载扫描器可以在原始标记中继续向前查找，以找到该图像资源并开始在主 HTML 解析器解除阻塞之前加载它。\u003C/p>\n\u003Ch2 id=\"可能破坏预加载扫描器的行为\">可能破坏预加载扫描器的行为\u003C/h2>\n\u003Ch3 id=\"动态注入脚本\">动态注入脚本\u003C/h3>\n\u003Cp>不要在脚本中使用DOM注入脚本，如下所示：\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"html\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"html\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">&#x3C;\u003C/span>\u003Cspan style=\"color:#8DDB8C\">script\u003C/span>\u003Cspan style=\"color:#ADBAC7\">>\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">// 默认注入的脚本是async\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">const\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> scriptEl\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> document.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">createElement\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#96D0FF\">'script'\u003C/span>\u003Cspan style=\"color:#ADBAC7\">);  \u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">scriptEl.src \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#96D0FF\"> '/yall.min.js'\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;  \u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">document.head.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">appendChild\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(scriptEl);  \u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">&#x3C;/\u003C/span>\u003Cspan style=\"color:#8DDB8C\">script\u003C/span>\u003Cspan style=\"color:#ADBAC7\">>\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Cp>根据需要使用\u003Ccode>&#x3C;script>\u003C/code>以及\u003Ccode>defer\u003C/code>和\u003Ccode>async\u003C/code>属性\u003C/p>\n\u003Ch3 id=\"首屏javascript懒加载\">首屏JavaScript懒加载\u003C/h3>\n\u003Cp>不要在首屏使用基于JavaScript的懒加载：\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"html\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"html\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">&#x3C;\u003C/span>\u003Cspan style=\"color:#8DDB8C\">img\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> data-src\u003C/span>\u003Cspan style=\"color:#ADBAC7\">=\u003C/span>\u003Cspan style=\"color:#96D0FF\">\"/sand-wasp.jpg\"\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> alt\u003C/span>\u003Cspan style=\"color:#ADBAC7\">=\u003C/span>\u003Cspan style=\"color:#96D0FF\">\"Sand Wasp\"\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> width\u003C/span>\u003Cspan style=\"color:#ADBAC7\">=\u003C/span>\u003Cspan style=\"color:#96D0FF\">\"384\"\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> height\u003C/span>\u003Cspan style=\"color:#ADBAC7\">=\u003C/span>\u003Cspan style=\"color:#96D0FF\">\"255\"\u003C/span>\u003Cspan style=\"color:#ADBAC7\">>\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Cp>使用\u003Ccode>data-\u003C/code>前缀是使用JavaScript实现懒加载的常见形式。\n例如上方代码所示，通过JavaScript检查视口并在可见时将\u003Ccode>data-src\u003C/code>替换为\u003Ccode>src\u003C/code>属性\u003C/p>\n\u003Cp>由于预加载扫描器读取src、srcset等属性，设置为data-src会导致图像引用无法被发现。\u003C/p>\n\u003Ch3 id=\"css背景图像\">CSS背景图像\u003C/h3>\n\u003Cp>预加载扫描器也无法扫描到CSS背景图像。\u003C/p>\n\u003Caside class=\"callout callout-warn\">\u003Cdiv class=\"callout-indicator\">\u003Cdiv class=\"callout-hint\">\u003Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" aria-hidden=\"true\">\u003Cpath d=\"M12 9v4m0 4h.01M8.681 4.082C9.351 2.797 10.621 2 12 2s2.649.797 3.319 2.082l6.203 11.904a4.28 4.28 0 0 1-.046 4.019C20.793 21.241 19.549 22 18.203 22H5.797c-1.346 0-2.59-.759-3.273-1.995a4.28 4.28 0 0 1-.046-4.019L8.681 4.082Z\">\u003C/path>\u003C/svg>\u003C/div>\u003Cdiv class=\"callout-title\">Warning\u003C/div>\u003C/div>\u003Cdiv class=\"callout-content\">\u003Cp>预加载扫描器会扫描标记，但不会扫描其他资源类型。\u003C/p>\u003C/div>\u003C/aside>\n\u003Cp>与HTML一样，浏览器将CSS处理为自己的对象模型，称为CSSOM。如果在构建CSSOM过程中发现外部资源，则在发现时请求这些资源，而不是由预加载扫描器请求。\n此情况可使用\u003Ccode>rel-preload\u003C/code>提前获取该图像：\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"html\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"html\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">&#x3C;!-- Make sure this is in the &#x3C;head> below any  \u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">stylesheets, so as not to block them from loading -->\u003C/span>\u003Cspan style=\"color:#ADBAC7\">  \u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">&#x3C;\u003C/span>\u003Cspan style=\"color:#8DDB8C\">link\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> rel\u003C/span>\u003Cspan style=\"color:#ADBAC7\">=\u003C/span>\u003Cspan style=\"color:#96D0FF\">\"preload\"\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> as\u003C/span>\u003Cspan style=\"color:#ADBAC7\">=\u003C/span>\u003Cspan style=\"color:#96D0FF\">\"image\"\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> href\u003C/span>\u003Cspan style=\"color:#ADBAC7\">=\u003C/span>\u003Cspan style=\"color:#96D0FF\">\"lcp-image.jpg\"\u003C/span>\u003Cspan style=\"color:#ADBAC7\">>\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Ch3 id=\"过多的内联资源\">过多的内联资源\u003C/h3>\n\u003Cp>内联资源可能比下载资源更快，因为不会发起单独的请求。它就在文档中，并且会立即加载。然而它也有明显缺点：\u003C/p>\n\u003Cul>\n\u003Cli>内联资源无法被单独缓存\u003C/li>\n\u003Cli>无法在多个文档中共享\u003C/li>\n\u003Cli>内联太多，会延迟预加载扫描器发现后面的资源（先下载内联资源，如CSS中的字体）\u003C/li>\n\u003C/ul>",{"headings":1215,"localImagePaths":1231,"remoteImagePaths":1232,"frontmatter":1233,"imagePaths":1236},[1216,1219,1221,1223,1226,1229],{"depth":31,"slug":1217,"text":1218},"什么是预加载扫描器","什么是预加载扫描器？",{"depth":31,"slug":1220,"text":1220},"可能破坏预加载扫描器的行为",{"depth":37,"slug":1222,"text":1222},"动态注入脚本",{"depth":37,"slug":1224,"text":1225},"首屏javascript懒加载","首屏JavaScript懒加载",{"depth":37,"slug":1227,"text":1228},"css背景图像","CSS背景图像",{"depth":37,"slug":1230,"text":1230},"过多的内联资源",[],[],{"title":1205,"description":15,"pubDate":1234,"heroImage":1207,"date created":1234,"date modified":208,"tags":1235,"minutesRead":210},"2023-08-13 16:44",[20,1104],[],"200-Learning/210-Programing/浏览器中的预加载扫描器.md","200-learning/210-programing/reactive-web-framework",{"id":1238,"data":1240,"body":1245,"filePath":1246,"digest":1247,"rendered":1248,"legacyId":1285},{"title":1241,"description":15,"pubDate":1242,"heroImage":1243,"tags":1244},"Reactive Web Framework",["Date","2023-08-01T02:39:00.000Z"],"https://raw.githubusercontent.com/fw6/assets/main/toy_docs/20230801105044.png",[20,315,1104,242],"Web端的反应式（`Reactive`）泛指应用状态改变，进而自动触发UI更新。对广大使用反应式框架的开发者而言，只需管理应用状态，而无需关心如何将状态映射到UI层以及何时触发UI更新。\n\n![image.png](https://raw.githubusercontent.com/fw6/assets/main/toy_docs/20230801153915.png)\n各个框架实现反应性的方式各不相同，这也对代码的性能和懒加载产生影响。本文将深入探讨反应性相关的内容。\n\n\n\n## 何为`Reactivity`\n\n现代web框架的核心是反应性。反应性是在应用状态发生更改时更新视图的能力。\n\n下面是使用纯JavaScript写的计数器实例应用：\n```js\nconst root = document.getElementById('app');\nroot.innerHTML = `\n  \u003Cbutton>-\u003C/button>\n  \u003Cspan>0\u003C/span>\n  \u003Cbutton>+\u003C/button>\n`;\n\nconst [decrementBtn, incrementBtn] = root.querySelectorAll('button');\nconst span = root.querySelector('span');\nlet count = 0;\ndecrementBtn.addEventListener('click', () => {\n    count--;\n    span.innerText = count;\n});\nincrementBtn.addEventListener('click', () => {\n    count++;\n    span.innerText = count;\n});\n```\n\n在Vue中，等价于：\n```vue\n\u003Cdiv>\n    \u003Cbutton @click=\"counter -= 1\">-\u003C/button>\n    \u003Cspan>{{ counter }}\u003C/span>\n    \u003Cbutton @click=\"counter += 1\">+\u003C/button>\n\u003C/div>\n\n\u003Cscript>\nexport default {\n    data() {\n        return {\n            counter: 0,\n        };\n    },\n};\n\u003C/script>\n```\n\n在React中，等价于：\n```jsx\nfunction App() {\n    const [counter, setCounter] = React.useState(0);\n    return (\n        \u003C>\n            \u003Cbutton onClick={() => setCounter(counter => counter - 1)}>-\u003C/button>\n            \u003Cspan>{counter}\u003C/span>\n            \u003Cbutton onClick={() => setCounter(counter => counter + 1)}>+\u003C/button>\n        \u003C/>\n    );\n}\n```\n\n:::tldr\n使用Web框架时，您的代码更多关注的是如何根据业务需求更新应用程序状态，并使用模板语法或JSX描述视图外观。框架将连接视图与应用状态，并在状态发生变化时在合适的时机更新视图\n:::\n\n与直接使用Web API操作DOM并更新状态相比，使用框架将帮助开发者忽略视图与应用状态同步的问题，也会减少视图与应用程序之间难以预料的错误🙅。\n\n所以接下来的主题：Web框架如何实现反应性的呢？\n\n为实现反应性，框架需清楚如下两个问题：\n1. 应用程序状态何时被改变？区分何时需要执行更新视图的任务\n2. 应用程序状态发生了什么变化？用于判断视图更新的范围\n\n## WHEN\n\n`WHEN`通知框架应用程序状态已更改，以便框架知道它需要开始更新视图\n\n不同框架使用不同策略来检测应用程序状态何时发生变化，但本质上它通常归结为调用框架的`schedule_update`。`schedule_update`通常为框架的去抖`update`函数，因为应用程序状态的变化会导致派生的状态变化，或者框架使用者会连续更改应用程序状态的不同部分。如果框架在每次状态更改时更新视图，则可能会过于频繁的更新视图导致效率低下，或者视图不一致。\n\n例如下面的Ract示例：\n```jsx {6-7}\nfunction Todos () {\n    const [todos, setTodos] = useState([]);\n    const [totalTodos, setTotalTodos] = useState(0);\n\n    const onAddTodo = todo => {\n        setTodos(todos => [...todos, todo]);\n        setTotalTodos(totalTodos => totalTodos + 1);\n    };\n    // ...\n}\n```\n\n如果框架同步更新`todos`和`totalTodos`，则可能在一瞬间导致视图上的不一致（尽管看上去不太可能发生）\n:::warning\n不应该以此种方式设置`totalTodos`，而应该从`todos.length`中派生！\n [\"Don't Sync State. Derive it!\" by Kent C. Dodds.](https://kentcdodds.com/blog/dont-sync-state-derive-it)\n:::\n\n那么该如何知道应用程序何时发生了变化呢？\n\n### Mutation Tracking\n\n正如其名，我们可以追踪状态突变。突变只能作用于对象，因为你无法改变`primitive`类型数据。\n\nJavaScript的基本数据类型如数字、字符串、布尔值等按值传递到函数中，因此如果将基础值`reassignment`则无从观察到该变化:\n```js\nlet data = 1;\nrender(data);\n// changes to the data will not be propagated into the render function\ndata = 2;\n\nfunction render (data) {\n    // data is a value\n    // however it is changed in the outside world\n    // got nothing to do with me\n    setInterval(() => {\n        console.log(data); // will always console out `1`\n    }, 1000);\n}\n```\n\n另一方面，对象是引用传递。因此可以在内部观察到同一对象的任何更改：\n```js\nlet data = { foo: 1 };\nrender(data);\n// mutate data some time later\nsetTimeout(() => {\n    data.foo = 2;\n}, 1000);\n\nfunction render (data) {\n    // data is referenced to the same object\n    // changes to data.foo can be observed here\n    setInterval(() => {\n        console.log(data.foo); // initially `1`, after mutation, its `2`\n    }, 1000);\n}\n```\n\n这也是为什么大多数框架的应用状态通过`this`访问——`this`是一个对象，框架可以观察/跟踪`this.appState`的更改。\n\n现在来看看突变追踪是如何实现的。\n\n在JavaScript对象中有两种常见的对象类型：普通对象和数组。\n随之ES6 `Proxy`的引入，突变跟踪变得更加简单，现在，先让我们不使用`Proxy`来实现以下\n\n#### Prior Proxy\n要在没有`Proxy`的情况下追踪变化，可以为对象的所有属性自定义`getter`和`setter`。每当框架用户更改属性值时，都会调用自定义`setter`，就会知道哪些内容发生了变化：\n```js\nfunction getTrackableObject (obj) {\n    if (obj[Symbol.for('isTracked')]) return obj;\n    const tracked = Array.isArray(obj) ? [] : {};\n    for (const key in obj) {\n        Object.defineProperty(tracked, key, {\n            configurable: true,\n            enumerable: true,\n            get () {\n                return obj[key];\n            },\n            set (value) {\n                if (typeof value === 'object') {\n                    value = getTrackableObject(value);\n                }\n                obj[key] = value;\n                console.log(`'${key}' has changed.`);\n            },\n        });\n    }\n    // marked as 'tracked'\n    Object.defineProperty(tracked, Symbol.for('isTracked'), {\n        configurable: false,\n        enumerable: false,\n        value: true,\n    });\n    return tracked;\n}\n\n// track app state\nconst appState = getTrackableObject({ foo: 1 });\nappState.foo = 3; // log `'foo' has changed.`\n```\nInspired by [Vue.js 2.0's observer](https://github.com/vuejs/vue/blob/22790b250cd5239a8379b4ec8cc3a9b570dac4bc/src/core/observer/index.js#L110)\n\n但上面的代码只能在对象上已有的属性上定义getter和setter，可能会错过通过在对象上增删属性的更改。\n\n如果没有更好的JavaScript API就无法解决该问题，一种解决方案时提供辅助函数，例如在Vue中使用`Vue.set(obj, 'newKey', value)`来替代`obj.newKey = value`\n\n跟踪数组的`mutation`同样有问题，除了可以通过赋值改变数组项之外，还可以通过一些`mutating methods`例如：splice、reverse、sort、push、pop、unshift、shift。\n\n要追踪这些方法导致的变化，需要`patch`以下：\n```js\nconst TrackableArrayProto = Object.create(Array.prototype);\nfor (const method of [\n    'push',\n    'pop',\n    'splice',\n    'unshift',\n    'shift',\n    'sort',\n    'reverse',\n]) {\n    const original = Array.prototype[method];\n    TrackableArrayProto[method] = function () {\n        const result = original.apply(this, arguments);\n        console.log(`'${method}' was called`);\n        if (method === 'push' || method === 'unshift' || method === 'splice') {\n            // TODO track newly added item too!\n        }\n        return result;\n    };\n}\nfunction getTrackableArray (arr) {\n    const trackedArray = getTrackableObject(arr);\n    // set the prototype to the patched prototype\n    trackedArray.__proto__ = TrackableArrayProto;\n    return trackedArray;\n}\n\n// track app state\nconst appState = getTrackableArray([1, 2, 3]);\nappState.push(4); // log `'push' was called.`\nappState[0] = 'foo'; // log `'0' has changed.\n```\nInspired by [Vue.js 2.0's observer/array](https://github.com/vuejs/vue/blob/22790b250cd5239a8379b4ec8cc3a9b570dac4bc/src/core/observer/array.js)\n\n总结下，在没有Proxy的情况下跟踪数组和对象的突变，需要为所有属性自定义`getter/setter`，以便能够捕获何时修改了属性。此外，还要修补数组中会导致原数组产生突变的方法。\n\n然而，还是有无法覆盖的操作，如新增或删除属性。\n\n#### With Proxy\n\nProxy允许我们定义目标对象上基本操作的自定义行为，如下：\n```js\nfunction getTrackableObject (obj) {\n    for (const key in obj) {\n        if (typeof obj[key] === 'object') {\n            obj[key] = getTrackableObject(obj[key]);\n        }\n    }\n    return new Proxy(obj, {\n        set: function (target, key, value) {\n            console.log(`'${key}' has changed`);\n            if (typeof value === 'object') {\n                value = getTrackableObject(value);\n            }\n            return (target[key] = value);\n        },\n        deleteProperty: function (target, key) {\n            console.log(`'${key}' was deleted`);\n            return delete target[key];\n        },\n    });\n}\n\nconst appState = getTrackableObject({ foo: 1, bar: [2, 3] });\nappState.foo = 3; // log `'foo' has changed.`\nappState.bar.push(4); // log `'2' has changed.`, `'length' has changed`\nappState.bar[0] = 'foo'; // log `'0' has changed.\n```\n\n#### 如何使用`Mutation Tracking`？\n\n通过上一步我们已经初步拿到了何时应用状态被变更，那么我们可以在组件初始化期间设置`tracking`:\n- 跟踪组件属性变更\n- 跟踪组件实例变更\n- 或介于二者之间的东西\n\n```js\n// track a property of the component\nclass Component {\n    constructor(initialState) {\n        this.state = getTrackableObject(initialState);\n    }\n}\nclass UserComponent extends Component {\n    constructor() {\n        super({ foo: 1 });\n    }\n    someHandler () {\n        this.state.foo = 2; // Log `'foo' has changed`\n        this.other.foo = 2; // Does not track this\n    }\n}\n\n// track the component instance itself\nclass Component {\n    constructor() {\n        return getTrackableObject(this);\n    }\n}\n\nclass UserComponent extends Component {\n    constructor() {\n        super();\n    }\n    someHandler () {\n        this.foo = 1; // Log `'foo' has changed`\n    }\n}\n```\n\n一旦能跟踪到状态的变更，接下来要做的就是调用`schedule_update`。\n\n\n### 不追踪突变的方式\n\n受限于实现突变追踪的复杂性，与`Proxy`的兼容性，并非所有框架都使用该方案。\n某些框架不会在更新应用程序状态时要求调用`schedule_update`，而是强制使用其提供的API来更改应用程序状态：\n```js\n// instead of\nthis.appState.one = '1';\nscheduleUpdate();\n\n// you have to use the frameworks API\nthis.setAppState({ one: '1' });\n```\n\n这位框架作者提供了更简单的设计和处理更少的边缘情况：\n```js\nclass Component {\n    setAppState (appState) {\n        this.appState = appState;\n        scheduleUpdate();\n    }\n}\n```\nInspired by [React's setState](https://github.com/facebook/react/blob/0cf22a56a18790ef34c71bef14f64695c0498619/packages/react/src/ReactBaseClasses.js#L57)\n\n然而这很容易对新人产生困惑😖：\n```js\nclass MyComponent extends Component {\n    someHandler () {\n        // 如果依照直接直接使用该方式更新state，将不触发视图更新\n        this.appState.one = '1';\n    }\n}\n```\n更新数组也看上去略显笨拙：\n```js\nclass MyComponent extends Component {\n    someHandler () {\n        // this will not schedule update\n        this.appState.list.push('one');\n        // you need to call setAppState after the .push()\n        this.setAppState({ list: this.appState.list });\n\n        // or instead, for a one-liner\n        this.setAppState({ list: [...this.appState.list, 'one'] });\n    }\n}\n```\n\n另一种两全其美的方案是在您认为可能产生更改的地方插入`schedule_update`，如：\n- 事件处理程序`event handler`\n- `Timeout`（如：`setTimeout`、`setInterval`）\n- `API handling`，`promise handling`\n- ...\n\n因此框架用户不应强制用户使用`setAppState`，而应使用自定义timeout、api handlers等：\n```js\n// framework core code\nfunction timeout (fn, delay) {\n    setTimeout(() => {\n        fn();\n        scheduleUpdate();\n    }, delay);\n}\n\n// user code\nimport { $timeout } from 'my-custom-framework';\n\nclass UserComponent extends Component {\n    someHandler () {\n        // will schedule update after the callback fires.\n        $timeout(() => {\n            this.appState.one = '1';\n        }, 1000);\n\n        setTimeout(() => {\n            // this will not schedule update\n            this.appState.two = '2';\n        }, 1000);\n    }\n}\n```\nInspired by [AngularJS's $timeout](https://github.com/angular/angular.js/blob/master/src/ng/timeout.js#L42)\n\n现在框架用户可以按照自己想要的方式自由更改应用程序状态，只要在自定义处理函数内即可。因为在自定义处理程序之后，框架会调用`schedule_update`\n\n同样，这种方式又产生了新的心智负担😖，。（Try search [\"AngularJS $timeout vs window.setTimeout\"](https://www.google.com/search?q=angularjs%20$timeout%20vs%20window.setTimeout)）\n\n\n查看上方迄今为止我们探索的策略，您可能注意到这些共同的难题：\n- 允许框架使用者以任何他想要的方式更改应用程序状态\n- 在没有太多复杂运行时的情况下实现反应式\n\n如果困境在复杂的运行时与开发者表现力之间，那能否将复杂性从运行时转移到编译时来获得两全其美的效果呢？\n\n### Static analysis\n\n如果我们有个框架编译器，能将如下代码：\n```js\nclass UserComponent {\n    someHandler() {\n        this.appState.one = '1';\n    }\n}\n```\n编译为：\n```js {4}\nclass UserComponent {\n    someHandler() {\n        this.appState.one = '1';\n        scheduleUpdate();\n    }\n}\n```\n\n那么就两全其美了😎。\n\n假设如下场景代码🎬：\n```js\nclass UserComponent {\n    someHandler () {\n        this.appState.one = '1'; // \u003C-- ✅changes to application state\n        this.foo = 'bar'; // \u003C-- ⛔️ not changing application state\n\n        const foo = this.appState;\n        foo.one = '1'; // 🤷‍♂️do we know that this is changing application state?\n\n        doSomethingMutable(this.appState);\n        function doSomethingMutable (foo) {\n            foo.one = '1'; // 🤷‍♂️do we know that this is changing application state?\n        }\n\n        this.appState.obj = {\n            data: 1,\n            increment () {\n                this.data = this.data + 1; // 🤷‍♂️do we know that this is changing application state?\n            },\n        };\n        this.appState.obj.increment();\n\n        this.appState.data.push('1'); // 🤷‍♂️is push mutable?\n        this.appState.list = {\n            push (item) {\n                console.log('nothing change');\n            },\n        };\n        this.appState.list.push('1'); // 🤷‍♂️is this push mutable?\n    }\n}\n```\n\n通过分析可知：\n- 跟踪应用程序状态的直接更改容易，但间接更改较难，例如：`foo.one` `doSomethingMutable(this.appState)` `this.appState.obj.increment()`\n- 通过赋值语句跟踪较容易，但跟踪会导致`reassignment`的方法很难，例如：`this.appState.list.push('1')`\n\nsvelte是通过静态分析实现反应式的其中一个框架，它在语法层面仅允许赋值运算符（=，`+=`, ...）和一元表达式（`++` `--`）触发反应式更新\n\n## 总结\n\n我们可以使用不同的策略来了解应用程序何时发生变化：\n- 突变追踪\n- 框架提供更新状态的方式，并直接调用`schedule_update`\n- 静态分析🧐\n\n了解应用状态何时发生变化，让框架知道何时更新视图（`WHEN`）。然而为了优化更新，框架也需要知道应用程序状态发生了哪些变化（`WHAT`）。\n\n\n## References\n\n- [Unveiling the Magic: Exploring Reactivity Across Various Frameworks](https://www.builder.io/blog/reactivity-across-frameworks)\n- [About this Book - Reactive Web Applications: With Play, Akka, and Reactive Streams](https://livebook.manning.com/book/reactive-web-applications)\n- [Reactivity in Web Frameworks (Part 1) | Tan Li Hau](https://lihautan.com/reactivity-in-web-frameworks-the-when/)","src/content/blog/200-Learning/210-Programing/Reactive Web Framework.md","3b467b38adced818",{"html":1249,"metadata":1250},"\u003Cp>Web端的反应式（\u003Ccode>Reactive\u003C/code>）泛指应用状态改变，进而自动触发UI更新。对广大使用反应式框架的开发者而言，只需管理应用状态，而无需关心如何将状态映射到UI层以及何时触发UI更新。\u003C/p>\n\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/fw6/assets/main/toy_docs/20230801153915.png\" alt=\"image.png\">\n各个框架实现反应性的方式各不相同，这也对代码的性能和懒加载产生影响。本文将深入探讨反应性相关的内容。\u003C/p>\n\u003Ch2 id=\"何为reactivity\">何为\u003Ccode>Reactivity\u003C/code>\u003C/h2>\n\u003Cp>现代web框架的核心是反应性。反应性是在应用状态发生更改时更新视图的能力。\u003C/p>\n\u003Cp>下面是使用纯JavaScript写的计数器实例应用：\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"js\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">const\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> root\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> document.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">getElementById\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#96D0FF\">'app'\u003C/span>\u003Cspan style=\"color:#ADBAC7\">);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">root.innerHTML \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#96D0FF\"> `\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#96D0FF\">  &#x3C;button>-&#x3C;/button>\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#96D0FF\">  &#x3C;span>0&#x3C;/span>\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#96D0FF\">  &#x3C;button>+&#x3C;/button>\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#96D0FF\">`\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">const\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> [\u003C/span>\u003Cspan style=\"color:#6CB6FF\">decrementBtn\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, \u003C/span>\u003Cspan style=\"color:#6CB6FF\">incrementBtn\u003C/span>\u003Cspan style=\"color:#ADBAC7\">] \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> root.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">querySelectorAll\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#96D0FF\">'button'\u003C/span>\u003Cspan style=\"color:#ADBAC7\">);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">const\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> span\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> root.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">querySelector\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#96D0FF\">'span'\u003C/span>\u003Cspan style=\"color:#ADBAC7\">);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">let\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> count \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> 0\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">decrementBtn.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">addEventListener\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#96D0FF\">'click'\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, () \u003C/span>\u003Cspan style=\"color:#F47067\">=>\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    count\u003C/span>\u003Cspan style=\"color:#F47067\">--\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    span.innerText \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> count;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">});\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">incrementBtn.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">addEventListener\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#96D0FF\">'click'\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, () \u003C/span>\u003Cspan style=\"color:#F47067\">=>\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    count\u003C/span>\u003Cspan style=\"color:#F47067\">++\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    span.innerText \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> count;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">});\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Cp>在Vue中，等价于：\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"vue\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"vue\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">&#x3C;\u003C/span>\u003Cspan style=\"color:#8DDB8C\">div\u003C/span>\u003Cspan style=\"color:#ADBAC7\">>\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    &#x3C;button @click=\"counter -= 1\">-&#x3C;/button>\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    &#x3C;span>{{ counter }}&#x3C;/span>\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    &#x3C;button @click=\"counter += 1\">+&#x3C;/button>\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">&#x3C;/\u003C/span>\u003Cspan style=\"color:#8DDB8C\">div\u003C/span>\u003Cspan style=\"color:#ADBAC7\">>\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">&#x3C;\u003C/span>\u003Cspan style=\"color:#8DDB8C\">script\u003C/span>\u003Cspan style=\"color:#ADBAC7\">>\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">export\u003C/span>\u003Cspan style=\"color:#F47067\"> default\u003C/span>\u003Cspan style=\"color:#F69D50\"> {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">    data\u003C/span>\u003Cspan style=\"color:#F69D50\">() \u003C/span>\u003Cspan style=\"color:#ADBAC7\">{\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">        return\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">            counter: \u003C/span>\u003Cspan style=\"color:#6CB6FF\">0\u003C/span>\u003Cspan style=\"color:#ADBAC7\">,\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">        };\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    }\u003C/span>\u003Cspan style=\"color:#F69D50\">,\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F69D50\">}\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">&#x3C;/\u003C/span>\u003Cspan style=\"color:#8DDB8C\">script\u003C/span>\u003Cspan style=\"color:#ADBAC7\">>\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Cp>在React中，等价于：\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"jsx\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"jsx\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">function\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> App\u003C/span>\u003Cspan style=\"color:#ADBAC7\">() {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">    const\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> [\u003C/span>\u003Cspan style=\"color:#6CB6FF\">counter\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, \u003C/span>\u003Cspan style=\"color:#6CB6FF\">setCounter\u003C/span>\u003Cspan style=\"color:#ADBAC7\">] \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> React.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">useState\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#6CB6FF\">0\u003C/span>\u003Cspan style=\"color:#ADBAC7\">);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">    return\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">        &#x3C;>\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">            &#x3C;\u003C/span>\u003Cspan style=\"color:#8DDB8C\">button\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> onClick\u003C/span>\u003Cspan style=\"color:#F47067\">={\u003C/span>\u003Cspan style=\"color:#ADBAC7\">() \u003C/span>\u003Cspan style=\"color:#F47067\">=>\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> setCounter\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#F69D50\">counter\u003C/span>\u003Cspan style=\"color:#F47067\"> =>\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> counter \u003C/span>\u003Cspan style=\"color:#F47067\">-\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> 1\u003C/span>\u003Cspan style=\"color:#ADBAC7\">)\u003C/span>\u003Cspan style=\"color:#F47067\">}\u003C/span>\u003Cspan style=\"color:#ADBAC7\">>-&#x3C;/\u003C/span>\u003Cspan style=\"color:#8DDB8C\">button\u003C/span>\u003Cspan style=\"color:#ADBAC7\">>\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">            &#x3C;\u003C/span>\u003Cspan style=\"color:#8DDB8C\">span\u003C/span>\u003Cspan style=\"color:#ADBAC7\">>\u003C/span>\u003Cspan style=\"color:#F47067\">{\u003C/span>\u003Cspan style=\"color:#ADBAC7\">counter\u003C/span>\u003Cspan style=\"color:#F47067\">}\u003C/span>\u003Cspan style=\"color:#ADBAC7\">&#x3C;/\u003C/span>\u003Cspan style=\"color:#8DDB8C\">span\u003C/span>\u003Cspan style=\"color:#ADBAC7\">>\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">            &#x3C;\u003C/span>\u003Cspan style=\"color:#8DDB8C\">button\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> onClick\u003C/span>\u003Cspan style=\"color:#F47067\">={\u003C/span>\u003Cspan style=\"color:#ADBAC7\">() \u003C/span>\u003Cspan style=\"color:#F47067\">=>\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> setCounter\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#F69D50\">counter\u003C/span>\u003Cspan style=\"color:#F47067\"> =>\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> counter \u003C/span>\u003Cspan style=\"color:#F47067\">+\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> 1\u003C/span>\u003Cspan style=\"color:#ADBAC7\">)\u003C/span>\u003Cspan style=\"color:#F47067\">}\u003C/span>\u003Cspan style=\"color:#ADBAC7\">>+&#x3C;/\u003C/span>\u003Cspan style=\"color:#8DDB8C\">button\u003C/span>\u003Cspan style=\"color:#ADBAC7\">>\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">        &#x3C;/>\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    );\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Caside class=\"callout callout-abstract\">\u003Cdiv class=\"callout-indicator\">\u003Cdiv class=\"callout-hint\">\u003Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"callout-hint-abstract\">\u003Crect x=\"8\" y=\"2\" width=\"8\" height=\"4\" rx=\"1\" ry=\"1\">\u003C/rect>\u003Cpath d=\"M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2\">\u003C/path>\u003Cpath d=\"M12 11h4\">\u003C/path>\u003Cpath d=\"M12 16h4\">\u003C/path>\u003Cpath d=\"M8 11h.01\">\u003C/path>\u003Cpath d=\"M8 16h.01\">\u003C/path>\u003C/svg>\u003C/div>\u003Cdiv class=\"callout-title\">Abstract\u003C/div>\u003C/div>\u003Cdiv class=\"callout-content\">\u003Cp>使用Web框架时，您的代码更多关注的是如何根据业务需求更新应用程序状态，并使用模板语法或JSX描述视图外观。框架将连接视图与应用状态，并在状态发生变化时在合适的时机更新视图\u003C/p>\u003C/div>\u003C/aside>\n\u003Cp>与直接使用Web API操作DOM并更新状态相比，使用框架将帮助开发者忽略视图与应用状态同步的问题，也会减少视图与应用程序之间难以预料的错误\u003Cspan role=\"img\" aria-label=\"person gesturing NO\">🙅\u003C/span>。\u003C/p>\n\u003Cp>所以接下来的主题：Web框架如何实现反应性的呢？\u003C/p>\n\u003Cp>为实现反应性，框架需清楚如下两个问题：\u003C/p>\n\u003Col>\n\u003Cli>应用程序状态何时被改变？区分何时需要执行更新视图的任务\u003C/li>\n\u003Cli>应用程序状态发生了什么变化？用于判断视图更新的范围\u003C/li>\n\u003C/ol>\n\u003Ch2 id=\"when\">WHEN\u003C/h2>\n\u003Cp>\u003Ccode>WHEN\u003C/code>通知框架应用程序状态已更改，以便框架知道它需要开始更新视图\u003C/p>\n\u003Cp>不同框架使用不同策略来检测应用程序状态何时发生变化，但本质上它通常归结为调用框架的\u003Ccode>schedule_update\u003C/code>。\u003Ccode>schedule_update\u003C/code>通常为框架的去抖\u003Ccode>update\u003C/code>函数，因为应用程序状态的变化会导致派生的状态变化，或者框架使用者会连续更改应用程序状态的不同部分。如果框架在每次状态更改时更新视图，则可能会过于频繁的更新视图导致效率低下，或者视图不一致。\u003C/p>\n\u003Cp>例如下面的Ract示例：\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"jsx\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"jsx\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">function\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> Todos\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> () {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">    const\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> [\u003C/span>\u003Cspan style=\"color:#6CB6FF\">todos\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, \u003C/span>\u003Cspan style=\"color:#6CB6FF\">setTodos\u003C/span>\u003Cspan style=\"color:#ADBAC7\">] \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> useState\u003C/span>\u003Cspan style=\"color:#ADBAC7\">([]);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">    const\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> [\u003C/span>\u003Cspan style=\"color:#6CB6FF\">totalTodos\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, \u003C/span>\u003Cspan style=\"color:#6CB6FF\">setTotalTodos\u003C/span>\u003Cspan style=\"color:#ADBAC7\">] \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> useState\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#6CB6FF\">0\u003C/span>\u003Cspan style=\"color:#ADBAC7\">);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">    const\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> onAddTodo\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#F69D50\"> todo\u003C/span>\u003Cspan style=\"color:#F47067\"> =>\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\" data-highlighted-line=\"\">\u003Cspan style=\"color:#DCBDFB\">        setTodos\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#F69D50\">todos\u003C/span>\u003Cspan style=\"color:#F47067\"> =>\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> [\u003C/span>\u003Cspan style=\"color:#F47067\">...\u003C/span>\u003Cspan style=\"color:#ADBAC7\">todos, todo]);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\" data-highlighted-line=\"\">\u003Cspan style=\"color:#DCBDFB\">        setTotalTodos\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#F69D50\">totalTodos\u003C/span>\u003Cspan style=\"color:#F47067\"> =>\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> totalTodos \u003C/span>\u003Cspan style=\"color:#F47067\">+\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> 1\u003C/span>\u003Cspan style=\"color:#ADBAC7\">);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    };\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">    // ...\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Cp>如果框架同步更新\u003Ccode>todos\u003C/code>和\u003Ccode>totalTodos\u003C/code>，则可能在一瞬间导致视图上的不一致（尽管看上去不太可能发生）\u003C/p>\n\u003Caside class=\"callout callout-warn\">\u003Cdiv class=\"callout-indicator\">\u003Cdiv class=\"callout-hint\">\u003Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" aria-hidden=\"true\">\u003Cpath d=\"M12 9v4m0 4h.01M8.681 4.082C9.351 2.797 10.621 2 12 2s2.649.797 3.319 2.082l6.203 11.904a4.28 4.28 0 0 1-.046 4.019C20.793 21.241 19.549 22 18.203 22H5.797c-1.346 0-2.59-.759-3.273-1.995a4.28 4.28 0 0 1-.046-4.019L8.681 4.082Z\">\u003C/path>\u003C/svg>\u003C/div>\u003Cdiv class=\"callout-title\">Warning\u003C/div>\u003C/div>\u003Cdiv class=\"callout-content\">\u003Cp>不应该以此种方式设置\u003Ccode>totalTodos\u003C/code>，而应该从\u003Ccode>todos.length\u003C/code>中派生！\n \u003Ca href=\"https://kentcdodds.com/blog/dont-sync-state-derive-it\">“Don’t Sync State. Derive it!” by Kent C. Dodds.\u003C/a>\u003C/p>\u003C/div>\u003C/aside>\n\u003Cp>那么该如何知道应用程序何时发生了变化呢？\u003C/p>\n\u003Ch3 id=\"mutation-tracking\">Mutation Tracking\u003C/h3>\n\u003Cp>正如其名，我们可以追踪状态突变。突变只能作用于对象，因为你无法改变\u003Ccode>primitive\u003C/code>类型数据。\u003C/p>\n\u003Cp>JavaScript的基本数据类型如数字、字符串、布尔值等按值传递到函数中，因此如果将基础值\u003Ccode>reassignment\u003C/code>则无从观察到该变化:\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"js\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">let\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> data \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> 1\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">render\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(data);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">// changes to the data will not be propagated into the render function\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">data \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> 2\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">function\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> render\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (\u003C/span>\u003Cspan style=\"color:#F69D50\">data\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">    // data is a value\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">    // however it is changed in the outside world\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">    // got nothing to do with me\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">    setInterval\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(() \u003C/span>\u003Cspan style=\"color:#F47067\">=>\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">        console.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">log\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(data); \u003C/span>\u003Cspan style=\"color:#768390\">// will always console out `1`\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    }, \u003C/span>\u003Cspan style=\"color:#6CB6FF\">1000\u003C/span>\u003Cspan style=\"color:#ADBAC7\">);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Cp>另一方面，对象是引用传递。因此可以在内部观察到同一对象的任何更改：\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"js\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">let\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> data \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> { foo: \u003C/span>\u003Cspan style=\"color:#6CB6FF\">1\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> };\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">render\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(data);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">// mutate data some time later\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">setTimeout\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(() \u003C/span>\u003Cspan style=\"color:#F47067\">=>\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    data.foo \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> 2\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">}, \u003C/span>\u003Cspan style=\"color:#6CB6FF\">1000\u003C/span>\u003Cspan style=\"color:#ADBAC7\">);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">function\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> render\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (\u003C/span>\u003Cspan style=\"color:#F69D50\">data\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">    // data is referenced to the same object\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">    // changes to data.foo can be observed here\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">    setInterval\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(() \u003C/span>\u003Cspan style=\"color:#F47067\">=>\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">        console.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">log\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(data.foo); \u003C/span>\u003Cspan style=\"color:#768390\">// initially `1`, after mutation, its `2`\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    }, \u003C/span>\u003Cspan style=\"color:#6CB6FF\">1000\u003C/span>\u003Cspan style=\"color:#ADBAC7\">);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Cp>这也是为什么大多数框架的应用状态通过\u003Ccode>this\u003C/code>访问——\u003Ccode>this\u003C/code>是一个对象，框架可以观察/跟踪\u003Ccode>this.appState\u003C/code>的更改。\u003C/p>\n\u003Cp>现在来看看突变追踪是如何实现的。\u003C/p>\n\u003Cp>在JavaScript对象中有两种常见的对象类型：普通对象和数组。\n随之ES6 \u003Ccode>Proxy\u003C/code>的引入，突变跟踪变得更加简单，现在，先让我们不使用\u003Ccode>Proxy\u003C/code>来实现以下\u003C/p>\n\u003Ch4 id=\"prior-proxy\">Prior Proxy\u003C/h4>\n\u003Cp>要在没有\u003Ccode>Proxy\u003C/code>的情况下追踪变化，可以为对象的所有属性自定义\u003Ccode>getter\u003C/code>和\u003Ccode>setter\u003C/code>。每当框架用户更改属性值时，都会调用自定义\u003Ccode>setter\u003C/code>，就会知道哪些内容发生了变化：\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"js\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">function\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> getTrackableObject\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (\u003C/span>\u003Cspan style=\"color:#F69D50\">obj\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">    if\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (obj[Symbol.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">for\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#96D0FF\">'isTracked'\u003C/span>\u003Cspan style=\"color:#ADBAC7\">)]) \u003C/span>\u003Cspan style=\"color:#F47067\">return\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> obj;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">    const\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> tracked\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> Array.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">isArray\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(obj) \u003C/span>\u003Cspan style=\"color:#F47067\">?\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> [] \u003C/span>\u003Cspan style=\"color:#F47067\">:\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> {};\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">    for\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (\u003C/span>\u003Cspan style=\"color:#F47067\">const\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> key\u003C/span>\u003Cspan style=\"color:#F47067\"> in\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> obj) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">        Object.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">defineProperty\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(tracked, key, {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">            configurable: \u003C/span>\u003Cspan style=\"color:#6CB6FF\">true\u003C/span>\u003Cspan style=\"color:#ADBAC7\">,\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">            enumerable: \u003C/span>\u003Cspan style=\"color:#6CB6FF\">true\u003C/span>\u003Cspan style=\"color:#ADBAC7\">,\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">            get\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> () {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">                return\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> obj[key];\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">            },\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">            set\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (\u003C/span>\u003Cspan style=\"color:#F69D50\">value\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">                if\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (\u003C/span>\u003Cspan style=\"color:#F47067\">typeof\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> value \u003C/span>\u003Cspan style=\"color:#F47067\">===\u003C/span>\u003Cspan style=\"color:#96D0FF\"> 'object'\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">                    value \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> getTrackableObject\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(value);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">                }\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">                obj[key] \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> value;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">                console.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">log\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#96D0FF\">`'${\u003C/span>\u003Cspan style=\"color:#ADBAC7\">key\u003C/span>\u003Cspan style=\"color:#96D0FF\">}' has changed.`\u003C/span>\u003Cspan style=\"color:#ADBAC7\">);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">            },\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">        });\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    }\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">    // marked as 'tracked'\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    Object.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">defineProperty\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(tracked, Symbol.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">for\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#96D0FF\">'isTracked'\u003C/span>\u003Cspan style=\"color:#ADBAC7\">), {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">        configurable: \u003C/span>\u003Cspan style=\"color:#6CB6FF\">false\u003C/span>\u003Cspan style=\"color:#ADBAC7\">,\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">        enumerable: \u003C/span>\u003Cspan style=\"color:#6CB6FF\">false\u003C/span>\u003Cspan style=\"color:#ADBAC7\">,\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">        value: \u003C/span>\u003Cspan style=\"color:#6CB6FF\">true\u003C/span>\u003Cspan style=\"color:#ADBAC7\">,\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    });\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">    return\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> tracked;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">}\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">// track app state\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">const\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> appState\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> getTrackableObject\u003C/span>\u003Cspan style=\"color:#ADBAC7\">({ foo: \u003C/span>\u003Cspan style=\"color:#6CB6FF\">1\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> });\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">appState.foo \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> 3\u003C/span>\u003Cspan style=\"color:#ADBAC7\">; \u003C/span>\u003Cspan style=\"color:#768390\">// log `'foo' has changed.`\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Cp>Inspired by \u003Ca href=\"https://github.com/vuejs/vue/blob/22790b250cd5239a8379b4ec8cc3a9b570dac4bc/src/core/observer/index.js#L110\">Vue.js 2.0’s observer\u003C/a>\u003C/p>\n\u003Cp>但上面的代码只能在对象上已有的属性上定义getter和setter，可能会错过通过在对象上增删属性的更改。\u003C/p>\n\u003Cp>如果没有更好的JavaScript API就无法解决该问题，一种解决方案时提供辅助函数，例如在Vue中使用\u003Ccode>Vue.set(obj, 'newKey', value)\u003C/code>来替代\u003Ccode>obj.newKey = value\u003C/code>\u003C/p>\n\u003Cp>跟踪数组的\u003Ccode>mutation\u003C/code>同样有问题，除了可以通过赋值改变数组项之外，还可以通过一些\u003Ccode>mutating methods\u003C/code>例如：splice、reverse、sort、push、pop、unshift、shift。\u003C/p>\n\u003Cp>要追踪这些方法导致的变化，需要\u003Ccode>patch\u003C/code>以下：\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"js\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">const\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> TrackableArrayProto\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> Object.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">create\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#6CB6FF\">Array\u003C/span>\u003Cspan style=\"color:#ADBAC7\">.\u003C/span>\u003Cspan style=\"color:#6CB6FF\">prototype\u003C/span>\u003Cspan style=\"color:#ADBAC7\">);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">for\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (\u003C/span>\u003Cspan style=\"color:#F47067\">const\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> method\u003C/span>\u003Cspan style=\"color:#F47067\"> of\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> [\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#96D0FF\">    'push'\u003C/span>\u003Cspan style=\"color:#ADBAC7\">,\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#96D0FF\">    'pop'\u003C/span>\u003Cspan style=\"color:#ADBAC7\">,\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#96D0FF\">    'splice'\u003C/span>\u003Cspan style=\"color:#ADBAC7\">,\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#96D0FF\">    'unshift'\u003C/span>\u003Cspan style=\"color:#ADBAC7\">,\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#96D0FF\">    'shift'\u003C/span>\u003Cspan style=\"color:#ADBAC7\">,\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#96D0FF\">    'sort'\u003C/span>\u003Cspan style=\"color:#ADBAC7\">,\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#96D0FF\">    'reverse'\u003C/span>\u003Cspan style=\"color:#ADBAC7\">,\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">]) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">    const\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> original\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> Array\u003C/span>\u003Cspan style=\"color:#ADBAC7\">.\u003C/span>\u003Cspan style=\"color:#6CB6FF\">prototype\u003C/span>\u003Cspan style=\"color:#ADBAC7\">[method];\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    TrackableArrayProto[method] \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#F47067\"> function\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> () {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">        const\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> result\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> original.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">apply\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#6CB6FF\">this\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, \u003C/span>\u003Cspan style=\"color:#6CB6FF\">arguments\u003C/span>\u003Cspan style=\"color:#ADBAC7\">);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">        console.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">log\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#96D0FF\">`'${\u003C/span>\u003Cspan style=\"color:#ADBAC7\">method\u003C/span>\u003Cspan style=\"color:#96D0FF\">}' was called`\u003C/span>\u003Cspan style=\"color:#ADBAC7\">);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">        if\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (method \u003C/span>\u003Cspan style=\"color:#F47067\">===\u003C/span>\u003Cspan style=\"color:#96D0FF\"> 'push'\u003C/span>\u003Cspan style=\"color:#F47067\"> ||\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> method \u003C/span>\u003Cspan style=\"color:#F47067\">===\u003C/span>\u003Cspan style=\"color:#96D0FF\"> 'unshift'\u003C/span>\u003Cspan style=\"color:#F47067\"> ||\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> method \u003C/span>\u003Cspan style=\"color:#F47067\">===\u003C/span>\u003Cspan style=\"color:#96D0FF\"> 'splice'\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">            // TODO track newly added item too!\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">        }\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">        return\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> result;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    };\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">}\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">function\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> getTrackableArray\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (\u003C/span>\u003Cspan style=\"color:#F69D50\">arr\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">    const\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> trackedArray\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> getTrackableObject\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(arr);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">    // set the prototype to the patched prototype\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    trackedArray.\u003C/span>\u003Cspan style=\"color:#6CB6FF\">__proto__\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> TrackableArrayProto;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">    return\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> trackedArray;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">}\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">// track app state\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">const\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> appState\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> getTrackableArray\u003C/span>\u003Cspan style=\"color:#ADBAC7\">([\u003C/span>\u003Cspan style=\"color:#6CB6FF\">1\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, \u003C/span>\u003Cspan style=\"color:#6CB6FF\">2\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, \u003C/span>\u003Cspan style=\"color:#6CB6FF\">3\u003C/span>\u003Cspan style=\"color:#ADBAC7\">]);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">appState.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">push\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#6CB6FF\">4\u003C/span>\u003Cspan style=\"color:#ADBAC7\">); \u003C/span>\u003Cspan style=\"color:#768390\">// log `'push' was called.`\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">appState[\u003C/span>\u003Cspan style=\"color:#6CB6FF\">0\u003C/span>\u003Cspan style=\"color:#ADBAC7\">] \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#96D0FF\"> 'foo'\u003C/span>\u003Cspan style=\"color:#ADBAC7\">; \u003C/span>\u003Cspan style=\"color:#768390\">// log `'0' has changed.\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Cp>Inspired by \u003Ca href=\"https://github.com/vuejs/vue/blob/22790b250cd5239a8379b4ec8cc3a9b570dac4bc/src/core/observer/array.js\">Vue.js 2.0’s observer/array\u003C/a>\u003C/p>\n\u003Cp>总结下，在没有Proxy的情况下跟踪数组和对象的突变，需要为所有属性自定义\u003Ccode>getter/setter\u003C/code>，以便能够捕获何时修改了属性。此外，还要修补数组中会导致原数组产生突变的方法。\u003C/p>\n\u003Cp>然而，还是有无法覆盖的操作，如新增或删除属性。\u003C/p>\n\u003Ch4 id=\"with-proxy\">With Proxy\u003C/h4>\n\u003Cp>Proxy允许我们定义目标对象上基本操作的自定义行为，如下：\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"js\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">function\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> getTrackableObject\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (\u003C/span>\u003Cspan style=\"color:#F69D50\">obj\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">    for\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (\u003C/span>\u003Cspan style=\"color:#F47067\">const\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> key\u003C/span>\u003Cspan style=\"color:#F47067\"> in\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> obj) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">        if\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (\u003C/span>\u003Cspan style=\"color:#F47067\">typeof\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> obj[key] \u003C/span>\u003Cspan style=\"color:#F47067\">===\u003C/span>\u003Cspan style=\"color:#96D0FF\"> 'object'\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">            obj[key] \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> getTrackableObject\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(obj[key]);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">        }\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    }\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">    return\u003C/span>\u003Cspan style=\"color:#F47067\"> new\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> Proxy\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(obj, {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">        set\u003C/span>\u003Cspan style=\"color:#ADBAC7\">: \u003C/span>\u003Cspan style=\"color:#F47067\">function\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (\u003C/span>\u003Cspan style=\"color:#F69D50\">target\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, \u003C/span>\u003Cspan style=\"color:#F69D50\">key\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, \u003C/span>\u003Cspan style=\"color:#F69D50\">value\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">            console.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">log\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#96D0FF\">`'${\u003C/span>\u003Cspan style=\"color:#ADBAC7\">key\u003C/span>\u003Cspan style=\"color:#96D0FF\">}' has changed`\u003C/span>\u003Cspan style=\"color:#ADBAC7\">);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">            if\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (\u003C/span>\u003Cspan style=\"color:#F47067\">typeof\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> value \u003C/span>\u003Cspan style=\"color:#F47067\">===\u003C/span>\u003Cspan style=\"color:#96D0FF\"> 'object'\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">                value \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> getTrackableObject\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(value);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">            }\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">            return\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (target[key] \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> value);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">        },\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">        deleteProperty\u003C/span>\u003Cspan style=\"color:#ADBAC7\">: \u003C/span>\u003Cspan style=\"color:#F47067\">function\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (\u003C/span>\u003Cspan style=\"color:#F69D50\">target\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, \u003C/span>\u003Cspan style=\"color:#F69D50\">key\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">            console.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">log\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#96D0FF\">`'${\u003C/span>\u003Cspan style=\"color:#ADBAC7\">key\u003C/span>\u003Cspan style=\"color:#96D0FF\">}' was deleted`\u003C/span>\u003Cspan style=\"color:#ADBAC7\">);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">            return\u003C/span>\u003Cspan style=\"color:#F47067\"> delete\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> target[key];\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">        },\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    });\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">}\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">const\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> appState\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> getTrackableObject\u003C/span>\u003Cspan style=\"color:#ADBAC7\">({ foo: \u003C/span>\u003Cspan style=\"color:#6CB6FF\">1\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, bar: [\u003C/span>\u003Cspan style=\"color:#6CB6FF\">2\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, \u003C/span>\u003Cspan style=\"color:#6CB6FF\">3\u003C/span>\u003Cspan style=\"color:#ADBAC7\">] });\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">appState.foo \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> 3\u003C/span>\u003Cspan style=\"color:#ADBAC7\">; \u003C/span>\u003Cspan style=\"color:#768390\">// log `'foo' has changed.`\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">appState.bar.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">push\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#6CB6FF\">4\u003C/span>\u003Cspan style=\"color:#ADBAC7\">); \u003C/span>\u003Cspan style=\"color:#768390\">// log `'2' has changed.`, `'length' has changed`\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">appState.bar[\u003C/span>\u003Cspan style=\"color:#6CB6FF\">0\u003C/span>\u003Cspan style=\"color:#ADBAC7\">] \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#96D0FF\"> 'foo'\u003C/span>\u003Cspan style=\"color:#ADBAC7\">; \u003C/span>\u003Cspan style=\"color:#768390\">// log `'0' has changed.\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Ch4 id=\"如何使用mutation-tracking\">如何使用\u003Ccode>Mutation Tracking\u003C/code>？\u003C/h4>\n\u003Cp>通过上一步我们已经初步拿到了何时应用状态被变更，那么我们可以在组件初始化期间设置\u003Ccode>tracking\u003C/code>:\u003C/p>\n\u003Cul>\n\u003Cli>跟踪组件属性变更\u003C/li>\n\u003Cli>跟踪组件实例变更\u003C/li>\n\u003Cli>或介于二者之间的东西\u003C/li>\n\u003C/ul>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"js\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">// track a property of the component\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">class\u003C/span>\u003Cspan style=\"color:#F69D50\"> Component\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">    constructor\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#F69D50\">initialState\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#6CB6FF\">        this\u003C/span>\u003Cspan style=\"color:#ADBAC7\">.state \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> getTrackableObject\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(initialState);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    }\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">}\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">class\u003C/span>\u003Cspan style=\"color:#F69D50\"> UserComponent\u003C/span>\u003Cspan style=\"color:#F47067\"> extends\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> Component\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">    constructor\u003C/span>\u003Cspan style=\"color:#ADBAC7\">() {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#6CB6FF\">        super\u003C/span>\u003Cspan style=\"color:#ADBAC7\">({ foo: \u003C/span>\u003Cspan style=\"color:#6CB6FF\">1\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> });\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    }\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">    someHandler\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> () {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#6CB6FF\">        this\u003C/span>\u003Cspan style=\"color:#ADBAC7\">.state.foo \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> 2\u003C/span>\u003Cspan style=\"color:#ADBAC7\">; \u003C/span>\u003Cspan style=\"color:#768390\">// Log `'foo' has changed`\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#6CB6FF\">        this\u003C/span>\u003Cspan style=\"color:#ADBAC7\">.other.foo \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> 2\u003C/span>\u003Cspan style=\"color:#ADBAC7\">; \u003C/span>\u003Cspan style=\"color:#768390\">// Does not track this\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    }\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">}\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">// track the component instance itself\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">class\u003C/span>\u003Cspan style=\"color:#F69D50\"> Component\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">    constructor\u003C/span>\u003Cspan style=\"color:#ADBAC7\">() {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">        return\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> getTrackableObject\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#6CB6FF\">this\u003C/span>\u003Cspan style=\"color:#ADBAC7\">);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    }\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">}\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">class\u003C/span>\u003Cspan style=\"color:#F69D50\"> UserComponent\u003C/span>\u003Cspan style=\"color:#F47067\"> extends\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> Component\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">    constructor\u003C/span>\u003Cspan style=\"color:#ADBAC7\">() {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#6CB6FF\">        super\u003C/span>\u003Cspan style=\"color:#ADBAC7\">();\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    }\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">    someHandler\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> () {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#6CB6FF\">        this\u003C/span>\u003Cspan style=\"color:#ADBAC7\">.foo \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> 1\u003C/span>\u003Cspan style=\"color:#ADBAC7\">; \u003C/span>\u003Cspan style=\"color:#768390\">// Log `'foo' has changed`\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    }\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Cp>一旦能跟踪到状态的变更，接下来要做的就是调用\u003Ccode>schedule_update\u003C/code>。\u003C/p>\n\u003Ch3 id=\"不追踪突变的方式\">不追踪突变的方式\u003C/h3>\n\u003Cp>受限于实现突变追踪的复杂性，与\u003Ccode>Proxy\u003C/code>的兼容性，并非所有框架都使用该方案。\n某些框架不会在更新应用程序状态时要求调用\u003Ccode>schedule_update\u003C/code>，而是强制使用其提供的API来更改应用程序状态：\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"js\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">// instead of\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#6CB6FF\">this\u003C/span>\u003Cspan style=\"color:#ADBAC7\">.appState.one \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#96D0FF\"> '1'\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">scheduleUpdate\u003C/span>\u003Cspan style=\"color:#ADBAC7\">();\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">// you have to use the frameworks API\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#6CB6FF\">this\u003C/span>\u003Cspan style=\"color:#ADBAC7\">.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">setAppState\u003C/span>\u003Cspan style=\"color:#ADBAC7\">({ one: \u003C/span>\u003Cspan style=\"color:#96D0FF\">'1'\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> });\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Cp>这位框架作者提供了更简单的设计和处理更少的边缘情况：\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"js\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">class\u003C/span>\u003Cspan style=\"color:#F69D50\"> Component\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">    setAppState\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (\u003C/span>\u003Cspan style=\"color:#F69D50\">appState\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#6CB6FF\">        this\u003C/span>\u003Cspan style=\"color:#ADBAC7\">.appState \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> appState;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">        scheduleUpdate\u003C/span>\u003Cspan style=\"color:#ADBAC7\">();\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    }\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Cp>Inspired by \u003Ca href=\"https://github.com/facebook/react/blob/0cf22a56a18790ef34c71bef14f64695c0498619/packages/react/src/ReactBaseClasses.js#L57\">React’s setState\u003C/a>\u003C/p>\n\u003Cp>然而这很容易对新人产生困惑\u003Cspan role=\"img\" aria-label=\"confounded face\">😖\u003C/span>：\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"js\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">class\u003C/span>\u003Cspan style=\"color:#F69D50\"> MyComponent\u003C/span>\u003Cspan style=\"color:#F47067\"> extends\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> Component\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">    someHandler\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> () {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">        // 如果依照直接直接使用该方式更新state，将不触发视图更新\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#6CB6FF\">        this\u003C/span>\u003Cspan style=\"color:#ADBAC7\">.appState.one \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#96D0FF\"> '1'\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    }\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Cp>更新数组也看上去略显笨拙：\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"js\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">class\u003C/span>\u003Cspan style=\"color:#F69D50\"> MyComponent\u003C/span>\u003Cspan style=\"color:#F47067\"> extends\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> Component\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">    someHandler\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> () {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">        // this will not schedule update\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#6CB6FF\">        this\u003C/span>\u003Cspan style=\"color:#ADBAC7\">.appState.list.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">push\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#96D0FF\">'one'\u003C/span>\u003Cspan style=\"color:#ADBAC7\">);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">        // you need to call setAppState after the .push()\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#6CB6FF\">        this\u003C/span>\u003Cspan style=\"color:#ADBAC7\">.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">setAppState\u003C/span>\u003Cspan style=\"color:#ADBAC7\">({ list: \u003C/span>\u003Cspan style=\"color:#6CB6FF\">this\u003C/span>\u003Cspan style=\"color:#ADBAC7\">.appState.list });\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">        // or instead, for a one-liner\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#6CB6FF\">        this\u003C/span>\u003Cspan style=\"color:#ADBAC7\">.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">setAppState\u003C/span>\u003Cspan style=\"color:#ADBAC7\">({ list: [\u003C/span>\u003Cspan style=\"color:#F47067\">...\u003C/span>\u003Cspan style=\"color:#6CB6FF\">this\u003C/span>\u003Cspan style=\"color:#ADBAC7\">.appState.list, \u003C/span>\u003Cspan style=\"color:#96D0FF\">'one'\u003C/span>\u003Cspan style=\"color:#ADBAC7\">] });\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    }\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Cp>另一种两全其美的方案是在您认为可能产生更改的地方插入\u003Ccode>schedule_update\u003C/code>，如：\u003C/p>\n\u003Cul>\n\u003Cli>事件处理程序\u003Ccode>event handler\u003C/code>\u003C/li>\n\u003Cli>\u003Ccode>Timeout\u003C/code>（如：\u003Ccode>setTimeout\u003C/code>、\u003Ccode>setInterval\u003C/code>）\u003C/li>\n\u003Cli>\u003Ccode>API handling\u003C/code>，\u003Ccode>promise handling\u003C/code>\u003C/li>\n\u003Cli>…\u003C/li>\n\u003C/ul>\n\u003Cp>因此框架用户不应强制用户使用\u003Ccode>setAppState\u003C/code>，而应使用自定义timeout、api handlers等：\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"js\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">// framework core code\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">function\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> timeout\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (\u003C/span>\u003Cspan style=\"color:#F69D50\">fn\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, \u003C/span>\u003Cspan style=\"color:#F69D50\">delay\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">    setTimeout\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(() \u003C/span>\u003Cspan style=\"color:#F47067\">=>\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">        fn\u003C/span>\u003Cspan style=\"color:#ADBAC7\">();\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">        scheduleUpdate\u003C/span>\u003Cspan style=\"color:#ADBAC7\">();\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    }, delay);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">}\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">// user code\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">import\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> { $timeout } \u003C/span>\u003Cspan style=\"color:#F47067\">from\u003C/span>\u003Cspan style=\"color:#96D0FF\"> 'my-custom-framework'\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">class\u003C/span>\u003Cspan style=\"color:#F69D50\"> UserComponent\u003C/span>\u003Cspan style=\"color:#F47067\"> extends\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> Component\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">    someHandler\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> () {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">        // will schedule update after the callback fires.\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">        $timeout\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(() \u003C/span>\u003Cspan style=\"color:#F47067\">=>\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#6CB6FF\">            this\u003C/span>\u003Cspan style=\"color:#ADBAC7\">.appState.one \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#96D0FF\"> '1'\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">        }, \u003C/span>\u003Cspan style=\"color:#6CB6FF\">1000\u003C/span>\u003Cspan style=\"color:#ADBAC7\">);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">        setTimeout\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(() \u003C/span>\u003Cspan style=\"color:#F47067\">=>\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">            // this will not schedule update\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#6CB6FF\">            this\u003C/span>\u003Cspan style=\"color:#ADBAC7\">.appState.two \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#96D0FF\"> '2'\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">        }, \u003C/span>\u003Cspan style=\"color:#6CB6FF\">1000\u003C/span>\u003Cspan style=\"color:#ADBAC7\">);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    }\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Cp>Inspired by \u003Ca href=\"https://github.com/angular/angular.js/blob/master/src/ng/timeout.js#L42\">AngularJS’s $timeout\u003C/a>\u003C/p>\n\u003Cp>现在框架用户可以按照自己想要的方式自由更改应用程序状态，只要在自定义处理函数内即可。因为在自定义处理程序之后，框架会调用\u003Ccode>schedule_update\u003C/code>\u003C/p>\n\u003Cp>同样，这种方式又产生了新的心智负担\u003Cspan role=\"img\" aria-label=\"confounded face\">😖\u003C/span>，。（Try search \u003Ca href=\"https://www.google.com/search?q=angularjs%20$timeout%20vs%20window.setTimeout\">“AngularJS $timeout vs window.setTimeout”\u003C/a>）\u003C/p>\n\u003Cp>查看上方迄今为止我们探索的策略，您可能注意到这些共同的难题：\u003C/p>\n\u003Cul>\n\u003Cli>允许框架使用者以任何他想要的方式更改应用程序状态\u003C/li>\n\u003Cli>在没有太多复杂运行时的情况下实现反应式\u003C/li>\n\u003C/ul>\n\u003Cp>如果困境在复杂的运行时与开发者表现力之间，那能否将复杂性从运行时转移到编译时来获得两全其美的效果呢？\u003C/p>\n\u003Ch3 id=\"static-analysis\">Static analysis\u003C/h3>\n\u003Cp>如果我们有个框架编译器，能将如下代码：\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"js\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">class\u003C/span>\u003Cspan style=\"color:#F69D50\"> UserComponent\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">    someHandler\u003C/span>\u003Cspan style=\"color:#ADBAC7\">() {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#6CB6FF\">        this\u003C/span>\u003Cspan style=\"color:#ADBAC7\">.appState.one \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#96D0FF\"> '1'\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    }\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Cp>编译为：\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"js\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">class\u003C/span>\u003Cspan style=\"color:#F69D50\"> UserComponent\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">    someHandler\u003C/span>\u003Cspan style=\"color:#ADBAC7\">() {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#6CB6FF\">        this\u003C/span>\u003Cspan style=\"color:#ADBAC7\">.appState.one \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#96D0FF\"> '1'\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\" data-highlighted-line=\"\">\u003Cspan style=\"color:#DCBDFB\">        scheduleUpdate\u003C/span>\u003Cspan style=\"color:#ADBAC7\">();\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    }\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Cp>那么就两全其美了\u003Cspan role=\"img\" aria-label=\"smiling face with sunglasses\">😎\u003C/span>。\u003C/p>\n\u003Cp>假设如下场景代码\u003Cspan role=\"img\" aria-label=\"clapper board\">🎬\u003C/span>：\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"js\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">class\u003C/span>\u003Cspan style=\"color:#F69D50\"> UserComponent\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">    someHandler\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> () {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#6CB6FF\">        this\u003C/span>\u003Cspan style=\"color:#ADBAC7\">.appState.one \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#96D0FF\"> '1'\u003C/span>\u003Cspan style=\"color:#ADBAC7\">; \u003C/span>\u003Cspan style=\"color:#768390\">// &#x3C;-- ✅changes to application state\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#6CB6FF\">        this\u003C/span>\u003Cspan style=\"color:#ADBAC7\">.foo \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#96D0FF\"> 'bar'\u003C/span>\u003Cspan style=\"color:#ADBAC7\">; \u003C/span>\u003Cspan style=\"color:#768390\">// &#x3C;-- ⛔️ not changing application state\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">        const\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> foo\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> this\u003C/span>\u003Cspan style=\"color:#ADBAC7\">.appState;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">        foo.one \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#96D0FF\"> '1'\u003C/span>\u003Cspan style=\"color:#ADBAC7\">; \u003C/span>\u003Cspan style=\"color:#768390\">// 🤷‍♂️do we know that this is changing application state?\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">        doSomethingMutable\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#6CB6FF\">this\u003C/span>\u003Cspan style=\"color:#ADBAC7\">.appState);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">        function\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> doSomethingMutable\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (\u003C/span>\u003Cspan style=\"color:#F69D50\">foo\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">            foo.one \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#96D0FF\"> '1'\u003C/span>\u003Cspan style=\"color:#ADBAC7\">; \u003C/span>\u003Cspan style=\"color:#768390\">// 🤷‍♂️do we know that this is changing application state?\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">        }\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#6CB6FF\">        this\u003C/span>\u003Cspan style=\"color:#ADBAC7\">.appState.obj \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">            data: \u003C/span>\u003Cspan style=\"color:#6CB6FF\">1\u003C/span>\u003Cspan style=\"color:#ADBAC7\">,\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">            increment\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> () {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#6CB6FF\">                this\u003C/span>\u003Cspan style=\"color:#ADBAC7\">.data \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> this\u003C/span>\u003Cspan style=\"color:#ADBAC7\">.data \u003C/span>\u003Cspan style=\"color:#F47067\">+\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> 1\u003C/span>\u003Cspan style=\"color:#ADBAC7\">; \u003C/span>\u003Cspan style=\"color:#768390\">// 🤷‍♂️do we know that this is changing application state?\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">            },\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">        };\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#6CB6FF\">        this\u003C/span>\u003Cspan style=\"color:#ADBAC7\">.appState.obj.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">increment\u003C/span>\u003Cspan style=\"color:#ADBAC7\">();\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#6CB6FF\">        this\u003C/span>\u003Cspan style=\"color:#ADBAC7\">.appState.data.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">push\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#96D0FF\">'1'\u003C/span>\u003Cspan style=\"color:#ADBAC7\">); \u003C/span>\u003Cspan style=\"color:#768390\">// 🤷‍♂️is push mutable?\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#6CB6FF\">        this\u003C/span>\u003Cspan style=\"color:#ADBAC7\">.appState.list \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">            push\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (\u003C/span>\u003Cspan style=\"color:#F69D50\">item\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">                console.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">log\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#96D0FF\">'nothing change'\u003C/span>\u003Cspan style=\"color:#ADBAC7\">);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">            },\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">        };\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#6CB6FF\">        this\u003C/span>\u003Cspan style=\"color:#ADBAC7\">.appState.list.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">push\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#96D0FF\">'1'\u003C/span>\u003Cspan style=\"color:#ADBAC7\">); \u003C/span>\u003Cspan style=\"color:#768390\">// 🤷‍♂️is this push mutable?\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    }\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Cp>通过分析可知：\u003C/p>\n\u003Cul>\n\u003Cli>跟踪应用程序状态的直接更改容易，但间接更改较难，例如：\u003Ccode>foo.one\u003C/code> \u003Ccode>doSomethingMutable(this.appState)\u003C/code> \u003Ccode>this.appState.obj.increment()\u003C/code>\u003C/li>\n\u003Cli>通过赋值语句跟踪较容易，但跟踪会导致\u003Ccode>reassignment\u003C/code>的方法很难，例如：\u003Ccode>this.appState.list.push('1')\u003C/code>\u003C/li>\n\u003C/ul>\n\u003Cp>svelte是通过静态分析实现反应式的其中一个框架，它在语法层面仅允许赋值运算符（=，\u003Ccode>+=\u003C/code>, …）和一元表达式（\u003Ccode>++\u003C/code> \u003Ccode>--\u003C/code>）触发反应式更新\u003C/p>\n\u003Ch2 id=\"总结\">总结\u003C/h2>\n\u003Cp>我们可以使用不同的策略来了解应用程序何时发生变化：\u003C/p>\n\u003Cul>\n\u003Cli>突变追踪\u003C/li>\n\u003Cli>框架提供更新状态的方式，并直接调用\u003Ccode>schedule_update\u003C/code>\u003C/li>\n\u003Cli>静态分析\u003Cspan role=\"img\" aria-label=\"face with monocle\">🧐\u003C/span>\u003C/li>\n\u003C/ul>\n\u003Cp>了解应用状态何时发生变化，让框架知道何时更新视图（\u003Ccode>WHEN\u003C/code>）。然而为了优化更新，框架也需要知道应用程序状态发生了哪些变化（\u003Ccode>WHAT\u003C/code>）。\u003C/p>\n\u003Ch2 id=\"references\">References\u003C/h2>\n\u003Cul>\n\u003Cli>\u003Ca href=\"https://www.builder.io/blog/reactivity-across-frameworks\">Unveiling the Magic: Exploring Reactivity Across Various Frameworks\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://livebook.manning.com/book/reactive-web-applications\">About this Book - Reactive Web Applications: With Play, Akka, and Reactive Streams\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://lihautan.com/reactivity-in-web-frameworks-the-when/\">Reactivity in Web Frameworks (Part 1) | Tan Li Hau\u003C/a>\u003C/li>\n\u003C/ul>",{"headings":1251,"localImagePaths":1277,"remoteImagePaths":1278,"frontmatter":1279,"imagePaths":1284},[1252,1255,1258,1261,1264,1267,1270,1272,1275,1276],{"depth":31,"slug":1253,"text":1254},"何为reactivity","何为Reactivity",{"depth":31,"slug":1256,"text":1257},"when","WHEN",{"depth":37,"slug":1259,"text":1260},"mutation-tracking","Mutation Tracking",{"depth":347,"slug":1262,"text":1263},"prior-proxy","Prior Proxy",{"depth":347,"slug":1265,"text":1266},"with-proxy","With Proxy",{"depth":347,"slug":1268,"text":1269},"如何使用mutation-tracking","如何使用Mutation Tracking？",{"depth":37,"slug":1271,"text":1271},"不追踪突变的方式",{"depth":37,"slug":1273,"text":1274},"static-analysis","Static analysis",{"depth":31,"slug":702,"text":702},{"depth":31,"slug":1168,"text":1169},[],[],{"title":1241,"description":15,"pubDate":1280,"heroImage":1243,"date created":1280,"date modified":1281,"tags":1282,"minutesRead":1283},"2023-08-01 10:39","2023-08-01",[20,315,1104,242],"15 min read",[],"200-Learning/210-Programing/Reactive Web Framework.md","200-learning/210-programing/深入理解generators",{"id":1286,"data":1288,"body":1293,"filePath":1294,"digest":1295,"rendered":1296,"legacyId":1331},{"title":1289,"description":15,"draft":16,"pubDate":1290,"heroImage":1291,"tags":1292},"深入理解JS-this",["Date","2023-07-12T10:36:00.000Z"],"https://images.unsplash.com/photo-1688764896020-c448693ec24e?crop=entropy&cs=srgb&fm=jpg&ixid=M3wzNjM5Nzd8MHwxfHJhbmRvbXx8fHx8fHx8fDE2ODkxNTgyMTV8&ixlib=rb-4.0.3&q=85",[20],">凭意兴做为随作随止，岂是不退之轮？ 从情识解悟者，有悟则有迷，终非常明之灯。 —《菜根谭》\n\n[【转向 Javascript 系列】深入理解 Generators | AlloyTeam](http://www.alloyteam.com/2016/02/generators-in-depth/)\n[Regenerator an ES2015 generator compiler to ES5](http://facebook.github.io/regenerator/)\n\n> **`Generator`** 对象由[生成器函数](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/function*)返回并且它符合[可迭代协议](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Iteration_protocols#%E5%8F%AF%E8%BF%AD%E4%BB%A3%E5%8D%8F%E8%AE%AE)和[迭代器协议](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Iteration_protocols#%E8%BF%AD%E4%BB%A3%E5%99%A8%E5%8D%8F%E8%AE%AE)。\n\n\n## 生成器函数\n\n```js\nfunction *range(max, step) {\n  var count = 0;\n  step = step || 1;\n\n  for (var i = 0; i \u003C max; i += step) {\n\tcount++;\n\tyield i;\n  }\n\n  return count;\n}\n\nvar gen = range(20, 3), info;\n\nwhile (!(info = gen.next()).done) {\n  console.log(info.value);\n}\n\nconsole.log(\"steps taken: \" + info.value);\n```\n**`function*`** 会定义一个生成器函数，它返回一个`Generator`对象。\n\n定义一个生成器函数，可通过：\n1. `function* 声明`\n2. `function* 表达式`\n3. 构造函数 `GeneratorFunction`\n\n生成器函数能在执行时暂停，后面又能暂停处继续执行。\n\n调用一个生成器函数并不会立即执行，而是返回这个生成器的迭代器（`iterator`）对象。当第一次执行迭代器对象上的`next`方法时，语句会执行到第一个出现`yield`的位置为止，`yield`紧跟迭代器此次返回的值，会使用`yield*`将执行权限交给另一个生成器（当前生成器暂停执行）。`next`方法返回一个对象，包含两个属性：`{ value: any; done: boolean }`。`value`表示本次`yield`返回的值，`done`表示生成器函数是否已执行完毕并返回。\n\n调用`next`方法时可传值，作为上次 `yield`语法的左值变量。\n```js\nfunction *gen(){\n    yield 10;\n    x=yield 'foo';\n    yield x;\n}\n\nvar gen_obj=gen();\nconsole.log(gen_obj.next());// 执行 yield 10，返回 10\nconsole.log(gen_obj.next());// 执行 yield 'foo'，返回 'foo'\nconsole.log(gen_obj.next(100));// 将 100 赋给上一条 yield 'foo' 的左值，即执行 x=100，返回 100\nconsole.log(gen_obj.next());// 执行完毕，value 为 undefined，done 为 true\n```\n\n当在生成器中显示调用`return`时，会导致生成器立即变为完成状态。\n\n`yield`关键字在JS中如何实现呢？\n\n首先，生成器不是线程。支持线程的语言多段语言可以在同一时间运行，这经常会导致资源竞争。生成器则完全不同，JS执行引擎仍然是一个基于时间循环的单线程环境，当生成器运行的时候，它会在叫作`caller`的同一个线程中运行。执行顺序是有序的，永远不会产生并发。不同于系统线程，生成器只在内部使用`yield`时才会挂起。\n\n综上生成器并非由引擎从底层提供的能力，根据[Regenerator](http://facebook.github.io/regenerator/)的实现，可猜测将生成器函数转为普通JS代码，经过转换的代码中需要支持：保存函数上下文信息、实现完善的迭代方法，使得多个`yield`表达式按序执行。\n\n使用`babel/repl`对如下代码进行转译：\n```js\nfunction* example() {\n  yield 1;\n  yield 2;\n  yield 3;\n}\nvar iter=example();\niter.next();\n```\n```js\nvar _marked = /*#__PURE__*/_regeneratorRuntime().mark(example);\nfunction example() {\n  return _regeneratorRuntime().wrap(function example$(_context) {\n    while (1) switch (_context.prev = _context.next) {\n      case 0:\n        _context.next = 2;\n        return 1;\n      case 2:\n        _context.next = 4;\n        return 2;\n      case 4:\n        _context.next = 6;\n        return 3;\n      case 6:\n      case \"end\":\n        return _context.stop();\n    }\n  }, _marked);\n}\nvar iter = example();\niter.next();\n```\n\n`regenrator`将生成器函数转为`switch`语句，在每个case语句使用`_context.next`保存函数当前的上下文状态。\n`switch`之外迭代器函数被`_regeneratorRuntime().mark`包装，返回被`_regeneratorRuntime().wrap`包装的迭代器对象。\n`Regenerator` 通过工具函数将生成器函数包装，为其添加如 `next/return` 等方法。同时也对返回的生成器对象进行包装，使得对 next 等方法的调用，最终进入由 `switch case` 组成的状态机模型中。除此之外，利用闭包技巧，保存生成器函数上下文信息。\n\n\n🎬场景1，简易[State Machine](https://stately.ai/docs/xstate-v5/state-machines-and-statecharts)：\n```js\nfunction* stateMachine(state) {\n    let transition\n    while (true) {\n        if (transition === \"INCREMENT\") {\n            state++\n        }\n        if (transition === \"DECREMENT\") {\n            state--\n        }\n        transition = yield state\n    }\n}\n\nconst iterator = stateMachine(0)\n\nconsole.log(iterator.next())\nconsole.log(iterator.next(\"INCREMENT\"))\nconsole.log(iterator.next(\"INCREMENT\"))\nconsole.log(iterator.next(\"DECREMENT\"))\n```\n\n场景2，生成扑克牌♠️：\n```js\nconst cards = ({\n  suits: [\"♣️\", \"♦️\", \"♥️\", \"♠️\"],\n  court: [\"J\", \"Q\", \"K\", \"A\"],\n  [Symbol.iterator]: function* () {\n    for (let suit of this.suits) {\n      for (let i = 2; i \u003C= 10; i++) yield suit + i;\n      for (let c of this.court) yield suit + c;\n    }\n  }\n})\nconsole.log([...cards])\n```\n```js\nfunction *initializer(count, mapFunc = i => i) {\n  for(let i = 0; i \u003C count; i++) {\n    if(mapFunc.constructor.name === 'GeneratorFunction') {\n      yield* mapFunc(i, count);\n    } else {\n      yield mapFunc(i, count);\n    }\n  }\n}\n\nconst cards = [...initializer(13, function *(i) {\n  const p = i + 1;\n  yield ['♠️', p];\n  yield ['♣️', p];\n  yield ['♥️', p];\n  yield ['♦️', p];\n})];\n\nconsole.log(cards);\n```\n\n## 迭代协议\n\n**迭代协议**并不是新的内置实现或语法，而是_协议_。这些协议可以被任何遵循某些约定的对象来实现。\n迭代协议具体分为两个协议：可迭代协议和迭代器协议。\n\n### 可迭代协议\n\n**可迭代协议**允许 JavaScript 对象定义或定制它们的迭代行为，例如，在一个 [`for..of`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/for...of) 结构中，哪些值可以被遍历到。一些内置类型同时是内置的可迭代对象，并且有默认的迭代行为，比如 [`Array`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array) 或者 [`Map`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Map)，而其他内置类型则不是（比如 [`Object`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object)）。\n\n要成为**可迭代**对象，该对象必须实现 **`@@iterator`** 方法，这意味着对象（或者它原型链上的某个对象）必须有一个键为 `@@iterator` 的属性，可通过常量 [`Symbol.iterator`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol/iterator) 访问该属性：\n\n`[Symbol.iterator]`\n\n一个无参数的函数，其返回值为一个符合迭代器协议的对象。\n\n当一个对象需要被迭代的时候（比如被置入一个 [`for...of`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/for...of) 循环时），首先，会不带参数调用它的 `@@iterator` 方法，然后使用此方法返回的**迭代器**获得要迭代的值。\n\n值得注意的是调用此无参数函数时，它将作为对可迭代对象的方法进行调用。因此，在函数内部，`this` 关键字可用于访问可迭代对象的属性，以决定在迭代过程中提供什么。\n\n此函数可以是普通函数，也可以是生成器函数，以便在调用时返回迭代器对象。在此生成器函数的内部，可以使用 `yield` 提供每个条目。\n\n### 迭代器协议\n\n**迭代器协议**定义了产生一系列值（无论是有限个还是无限个）的标准方式，当值为有限个时，所有的值都被迭代完毕后，则会返回一个默认返回值。\n\n只有实现了一个拥有以下语义（semantic）的 **`next()`** 方法，一个对象才能成为迭代器：\n`next()`：无参数或者接受一个参数的函数，并返回符合 `IteratorResult` 接口的对象（见下文）。如果在使用迭代器内置的语言特征（例如 `for...of`）时，得到一个非对象返回值（例如 `false` 或 `undefined`），将会抛出 [`TypeError`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypeError)（`\"iterator.next() returned a non-object value\"`）。\n\n所有迭代器协议的方法（`next()`、`return()` 和 `throw()`）都应返回实现 `IteratorResult` 接口的对象。它必须有以下属性：\n- `done` 可选\n    如果迭代器能够生成序列中的下一个值，则返回 `false` 布尔值。（这等价于没有指定 `done` 这个属性。）\n    如果迭代器已将序列迭代完毕，则为 `true`。这种情况下，`value` 是可选的，如果它依然存在，即为迭代结束之后的默认返回值。\n- `value` 可选\n    迭代器返回的任何 JavaScript 值。`done` 为 `true` 时可省略。\n实际上，两者都不是严格要求的；如果返回没有任何属性的对象，则实际上等价于 `{ done: false, value: undefined }`。\n如果一个迭代器返回一个 `done: true` 的结果，则对任何 `next()` 的后续调用也返回 `done: true`，尽管这在语言层面不是强制的。\n\n`next` 方法可以接受一个值，该值将提供给方法体。任何内置的语言特征都将不会传递任何值。传递给生成器 `next` 方法的值将成为相应 `yield` 表达式的值。\n\n可选地，迭代器也实现了 **`return(value)`** 和 **`throw(exception)`** 方法，这些方法在调用时告诉迭代器，调用者已经完成迭代，并且可以执行任何必要的清理（例如关闭数据库连接，见[Explicit Resource Management](https://github.com/tc39/proposal-explicit-resource-management)）。\n\n- `return(value)` 可选\n    无参数或者接受一个参数的函数，并返回符合 `IteratorResult` 接口的对象，其 `value` 通常等价于传递的 `value`，并且 `done` 等于 `true`。调用这个方法表明迭代器的调用者不打算调用更多的 `next()`，并且可以进行清理工作。\n- `throw(exception)` 可选\n    无参数或者接受一个参数的函数，并返回符合 `IteratorResult` 接口的对象，通常 `done` 等于 `true`。调用这个方法表明迭代器的调用者监测到错误的状况，并且 `exception` 通常是一个 [`Error`](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Error) 实例。\n\n\n> [!warning]\n>无法通过反射的方法确定（例如，没有实际调用 `next()` 并验证返回的结果）一个特定的对象是否实现了迭代器协议。\n\n几乎所有语法和API都期待可迭代对象而非迭代器，见如下例子：\n```js\nconst aGeneratorObject = (function* () {\n  yield 1;\n  yield 2;\n  yield 3;\n})();\n\nconsole.log(typeof aGeneratorObject.next);\n// \"function\"——它有 next 方法（返回正确的值），所以它是迭代器\n\nconsole.log(typeof aGeneratorObject[Symbol.iterator]);\n// \"function\"——它有 @@iterator 方法（返回正确的迭代器），所以它是可迭代的\n\nconsole.log(aGeneratorObject[Symbol.iterator]() === aGeneratorObject);\n// true——它的 @@iterator 方法返回自身（一个迭代器），所以它是一个可迭代的迭代器\n```\n\n### 异步迭代器和异步可迭代协议\n\n还有一对用于异步迭代的协议，命名为**异步迭代器**和**异步可迭代**协议。它们与可迭代和迭代器协议有着非常类似的接口，只是从调用迭代器方法的每个返回值都包装在一个 promise 中。\n\n当对象实现以下方法时，它会实现异步可迭代协议：\n`[Symbol.asyncIterator]`\n返回对象的无参数函数，并且符合异步迭代器协议。\n\n当对象实现next、return、throw方法（同上方迭代器协议）但返回值类型为`Promise\u003CIteratorResult>`时，它会实现异步迭代器协议。\n\n\n### 语言和迭代协议之间的交互\n\n#### 内置的可迭代对象\n\n`String`、`Array`、`TypedArray`、`Map`、`Set`以及 `Intl.Segments` 都是内置的可迭代对象，因为它们的每个 `prototype` 对象都实现了 `@@iterator` 方法。此外，`arguments`对象和一些 DOM 集合类型，如 `NodeList`也是可迭代的。目前，没有内置的异步可迭代对象.\n\n生成器函数返回生成器对象，它们是可迭代的迭代器。异步生成器函数返回异步生成器对象，它们是异步可迭代的迭代器。\n\n从内置迭代返回的迭代器实际上都继承了一个公共类（目前尚未暴露），该类实现了上述 `[Symbol.iterator]() { return this; }` 方法，使它们都是可迭代的迭代器。\n\n```\nconsole.log([][Symbol.iterator]());\n\nArray Iterator {}\n  [[Prototype]]: Array Iterator     ==> This is the prototype shared by all array iterators\n    next: ƒ next()\n    Symbol(Symbol.toStringTag): \"Array Iterator\"\n    [[Prototype]]: Object           ==> This is the prototype shared by all built-in iterators\n      Symbol(Symbol.iterator): ƒ [Symbol.iterator]()\n      [[Prototype]]: Object         ==> This is Object.prototype\n```\n\n#### 接受可迭代对象的内置 API\n\n有许多 API 接受可迭代对象，一些例子包括：\n- Map()\n- WeakMap()\n- Set()\n- WeakSet()\n- Promise.all()\n- Promise.allSettled()\n- Promise.race()\n- Promise.any()\n- Array.from()\n\n```js\nconst myObj = {};\n\nnew WeakSet(\n  (function* () {\n    yield {};\n    yield myObj;\n    yield {};\n  })()\n).has(myObj); // true\n\nArray.from((function* () {\n    for (let i=0;i\u003C10;i++) {\n        yield i;\n    }\n})()) // [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n```\n\n### 期待迭代对象的语法\n\n一些语句和表达式期望可迭代对象，例如 `for...of` 循环、数组和参数扩展、`yield*`和数组解构：\n```js\nfor (const value of [\"a\", \"b\", \"c\"]) {\n  console.log(value);\n}\n// \"a\"\n// \"b\"\n// \"c\"\n\nconsole.log([...\"abc\"]); // [\"a\", \"b\", \"c\"]\n\nfunction* gen() {\n  yield* [\"a\", \"b\", \"c\"];\n}\n\nconsole.log(gen().next()); // { value: \"a\", done: false }\n\n[a, b, c] = new Set([\"a\", \"b\", \"c\"]);\nconsole.log(a); // \"a\"\n```\n\n当内置语法迭代迭代器，并且最后的结果中 `done` 为 `false`（即迭代器能够生成更多值）但不需要更多值时，如果存在，将调用 `return` 方法。例如，如果在 `for...of` 循环中遇到 `break` 或 `return`，或者数组解构中的标识符只是有限个的，则可能会发生这种情况。\n```js\nconst obj = {\n  [Symbol.iterator]() {\n    let i = 0;\n    return {\n      next() {\n        i++;\n        console.log(\"Returning\", i);\n        if (i === 3) return { done: true, value: i };\n        return { done: false, value: i };\n      },\n      return() {\n        console.log(\"Closing\");\n        return { done: true };\n      },\n    };\n  },\n};\n\nconst [b] = obj;\n// Returning 1\n// Closing\n\nconst [a, b, c] = obj;\n// Returning 1\n// Returning 2\n// Returning 3\n// Already reached the end (the last call returned `done: true`),\n// so `return` is not called\n\nfor (const b of obj) {\n  break;\n}\n// Returning 1\n// Closing\n```\n\n异步生成器函数（但不是同步生成器函数中的 `for await...of` 循环和 `yield*` 是与异步迭代交互的唯一方式。在不是同步迭代的异步迭代对象（即它有 `[@@asyncIterator]()` 但没有 `[@@iterator]()`）上使用 `for...of`、数组展开等将抛出 `TypeError：x is not iterable`。\n\n#### 不符合标准的可迭代对象\n\n如果一个可迭代对象的 `@@iterator` 方法不能返回迭代器对象，那么可以认为它是一个_不符合标准的_（Non-well-formed）可迭代对象。\n\n使用这样的可迭代对象很可能会导致如下的运行时异常，或者不可预料的表现：\n```js\nconst nonWellFormedIterable = {};\nnonWellFormedIterable[Symbol.iterator] = () => 1;\n[...nonWellFormedIterable]; // TypeError: [Symbol.iterator]() returned a non-object value\n```\n\n### 一些例子\n\n使用生成器定义一个可迭代对象\n```js\nfunction* makeSimpleGenerator(array) {\n  let nextIndex = 0;\n  while (nextIndex \u003C array.length) {\n    yield array[nextIndex++];\n  }\n}\n\nconst gen = makeSimpleGenerator([\"yo\", \"ya\"]);\n\nconsole.log(gen.next().value); // 'yo'\nconsole.log(gen.next().value); // 'ya'\nconsole.log(gen.next().done); // true\n\nfunction* idMaker() {\n  let index = 0;\n  while (true) {\n    yield index++;\n  }\n}\n\nconst it = idMaker();\n\nconsole.log(it.next().value); // 0\nconsole.log(it.next().value); // 1\nconsole.log(it.next().value); // 2\n// ...\n```\n\n使用类定义一个可迭代对象\n```js\nclass SimpleClass {\n  #data;\n\n  constructor(data) {\n    this.#data = data;\n  }\n\n  [Symbol.iterator]() {\n    // Use a new index for each iterator. This makes multiple\n    // iterations over the iterable safe for non-trivial cases,\n    // such as use of break or nested looping over the same iterable.\n    let index = 0;\n\n    return {\n      // Note: using an arrow function allows `this` to point to the\n      // one of `[@@iterator]()` instead of `next()`\n      next: () => {\n        if (index \u003C this.#data.length) {\n          return { value: this.#data[index++], done: false };\n        } else {\n          return { done: true };\n        }\n      },\n    };\n  }\n}\n\nconst simple = new SimpleClass([1, 2, 3, 4, 5]);\n\nfor (const val of simple) {\n  console.log(val); // 1 2 3 4 5\n}\n```","src/content/blog/200-Learning/210-Programing/深入理解Generators.md","3e2f49e89ad44374",{"html":1297,"metadata":1298},"\u003Cblockquote>\n\u003Cp>凭意兴做为随作随止，岂是不退之轮？ 从情识解悟者，有悟则有迷，终非常明之灯。 —《菜根谭》\u003C/p>\n\u003C/blockquote>\n\u003Cp>\u003Ca href=\"http://www.alloyteam.com/2016/02/generators-in-depth/\">【转向 Javascript 系列】深入理解 Generators | AlloyTeam\u003C/a>\n\u003Ca href=\"http://facebook.github.io/regenerator/\">Regenerator an ES2015 generator compiler to ES5\u003C/a>\u003C/p>\n\u003Cblockquote>\n\u003Cp>\u003Cstrong>\u003Ccode>Generator\u003C/code>\u003C/strong> 对象由\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/function*\">生成器函数\u003C/a>返回并且它符合\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Iteration_protocols#%E5%8F%AF%E8%BF%AD%E4%BB%A3%E5%8D%8F%E8%AE%AE\">可迭代协议\u003C/a>和\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Iteration_protocols#%E8%BF%AD%E4%BB%A3%E5%99%A8%E5%8D%8F%E8%AE%AE\">迭代器协议\u003C/a>。\u003C/p>\n\u003C/blockquote>\n\u003Ch2 id=\"生成器函数\">生成器函数\u003C/h2>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"js\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">function\u003C/span>\u003Cspan style=\"color:#F47067\"> *\u003C/span>\u003Cspan style=\"color:#DCBDFB\">range\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#F69D50\">max\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, \u003C/span>\u003Cspan style=\"color:#F69D50\">step\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">  var\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> count \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> 0\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">  step \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> step \u003C/span>\u003Cspan style=\"color:#F47067\">||\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> 1\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">  for\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (\u003C/span>\u003Cspan style=\"color:#F47067\">var\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> i \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> 0\u003C/span>\u003Cspan style=\"color:#ADBAC7\">; i \u003C/span>\u003Cspan style=\"color:#F47067\">&#x3C;\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> max; i \u003C/span>\u003Cspan style=\"color:#F47067\">+=\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> step) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">\tcount\u003C/span>\u003Cspan style=\"color:#F47067\">++\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">\tyield\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> i;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">  }\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">  return\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> count;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">}\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">var\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> gen \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> range\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#6CB6FF\">20\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, \u003C/span>\u003Cspan style=\"color:#6CB6FF\">3\u003C/span>\u003Cspan style=\"color:#ADBAC7\">), info;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">while\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (\u003C/span>\u003Cspan style=\"color:#F47067\">!\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(info \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> gen.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">next\u003C/span>\u003Cspan style=\"color:#ADBAC7\">()).done) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">  console.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">log\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(info.value);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">}\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">console.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">log\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#96D0FF\">\"steps taken: \"\u003C/span>\u003Cspan style=\"color:#F47067\"> +\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> info.value);\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Cp>\u003Cstrong>\u003Ccode>function*\u003C/code>\u003C/strong> 会定义一个生成器函数，它返回一个\u003Ccode>Generator\u003C/code>对象。\u003C/p>\n\u003Cp>定义一个生成器函数，可通过：\u003C/p>\n\u003Col>\n\u003Cli>\u003Ccode>function* 声明\u003C/code>\u003C/li>\n\u003Cli>\u003Ccode>function* 表达式\u003C/code>\u003C/li>\n\u003Cli>构造函数 \u003Ccode>GeneratorFunction\u003C/code>\u003C/li>\n\u003C/ol>\n\u003Cp>生成器函数能在执行时暂停，后面又能暂停处继续执行。\u003C/p>\n\u003Cp>调用一个生成器函数并不会立即执行，而是返回这个生成器的迭代器（\u003Ccode>iterator\u003C/code>）对象。当第一次执行迭代器对象上的\u003Ccode>next\u003C/code>方法时，语句会执行到第一个出现\u003Ccode>yield\u003C/code>的位置为止，\u003Ccode>yield\u003C/code>紧跟迭代器此次返回的值，会使用\u003Ccode>yield*\u003C/code>将执行权限交给另一个生成器（当前生成器暂停执行）。\u003Ccode>next\u003C/code>方法返回一个对象，包含两个属性：\u003Ccode>{ value: any; done: boolean }\u003C/code>。\u003Ccode>value\u003C/code>表示本次\u003Ccode>yield\u003C/code>返回的值，\u003Ccode>done\u003C/code>表示生成器函数是否已执行完毕并返回。\u003C/p>\n\u003Cp>调用\u003Ccode>next\u003C/code>方法时可传值，作为上次 \u003Ccode>yield\u003C/code>语法的左值变量。\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"js\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">function\u003C/span>\u003Cspan style=\"color:#F47067\"> *\u003C/span>\u003Cspan style=\"color:#DCBDFB\">gen\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(){\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">    yield\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> 10\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    x\u003C/span>\u003Cspan style=\"color:#F47067\">=yield\u003C/span>\u003Cspan style=\"color:#96D0FF\"> 'foo'\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">    yield\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> x;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">}\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">var\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> gen_obj\u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#DCBDFB\">gen\u003C/span>\u003Cspan style=\"color:#ADBAC7\">();\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">console.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">log\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(gen_obj.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">next\u003C/span>\u003Cspan style=\"color:#ADBAC7\">());\u003C/span>\u003Cspan style=\"color:#768390\">// 执行 yield 10，返回 10\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">console.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">log\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(gen_obj.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">next\u003C/span>\u003Cspan style=\"color:#ADBAC7\">());\u003C/span>\u003Cspan style=\"color:#768390\">// 执行 yield 'foo'，返回 'foo'\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">console.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">log\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(gen_obj.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">next\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#6CB6FF\">100\u003C/span>\u003Cspan style=\"color:#ADBAC7\">));\u003C/span>\u003Cspan style=\"color:#768390\">// 将 100 赋给上一条 yield 'foo' 的左值，即执行 x=100，返回 100\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">console.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">log\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(gen_obj.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">next\u003C/span>\u003Cspan style=\"color:#ADBAC7\">());\u003C/span>\u003Cspan style=\"color:#768390\">// 执行完毕，value 为 undefined，done 为 true\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Cp>当在生成器中显示调用\u003Ccode>return\u003C/code>时，会导致生成器立即变为完成状态。\u003C/p>\n\u003Cp>\u003Ccode>yield\u003C/code>关键字在JS中如何实现呢？\u003C/p>\n\u003Cp>首先，生成器不是线程。支持线程的语言多段语言可以在同一时间运行，这经常会导致资源竞争。生成器则完全不同，JS执行引擎仍然是一个基于时间循环的单线程环境，当生成器运行的时候，它会在叫作\u003Ccode>caller\u003C/code>的同一个线程中运行。执行顺序是有序的，永远不会产生并发。不同于系统线程，生成器只在内部使用\u003Ccode>yield\u003C/code>时才会挂起。\u003C/p>\n\u003Cp>综上生成器并非由引擎从底层提供的能力，根据\u003Ca href=\"http://facebook.github.io/regenerator/\">Regenerator\u003C/a>的实现，可猜测将生成器函数转为普通JS代码，经过转换的代码中需要支持：保存函数上下文信息、实现完善的迭代方法，使得多个\u003Ccode>yield\u003C/code>表达式按序执行。\u003C/p>\n\u003Cp>使用\u003Ccode>babel/repl\u003C/code>对如下代码进行转译：\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"js\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">function*\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> example\u003C/span>\u003Cspan style=\"color:#ADBAC7\">() {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">  yield\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> 1\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">  yield\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> 2\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">  yield\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> 3\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">}\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">var\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> iter\u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#DCBDFB\">example\u003C/span>\u003Cspan style=\"color:#ADBAC7\">();\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">iter.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">next\u003C/span>\u003Cspan style=\"color:#ADBAC7\">();\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"js\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">var\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> _marked \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#768390\"> /*#__PURE__*/\u003C/span>\u003Cspan style=\"color:#DCBDFB\">_regeneratorRuntime\u003C/span>\u003Cspan style=\"color:#ADBAC7\">().\u003C/span>\u003Cspan style=\"color:#DCBDFB\">mark\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(example);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">function\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> example\u003C/span>\u003Cspan style=\"color:#ADBAC7\">() {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">  return\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> _regeneratorRuntime\u003C/span>\u003Cspan style=\"color:#ADBAC7\">().\u003C/span>\u003Cspan style=\"color:#DCBDFB\">wrap\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#F47067\">function\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> example$\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#F69D50\">_context\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">    while\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (\u003C/span>\u003Cspan style=\"color:#6CB6FF\">1\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) \u003C/span>\u003Cspan style=\"color:#F47067\">switch\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (_context.prev \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> _context.next) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">      case\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> 0\u003C/span>\u003Cspan style=\"color:#ADBAC7\">:\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">        _context.next \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> 2\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">        return\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> 1\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">      case\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> 2\u003C/span>\u003Cspan style=\"color:#ADBAC7\">:\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">        _context.next \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> 4\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">        return\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> 2\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">      case\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> 4\u003C/span>\u003Cspan style=\"color:#ADBAC7\">:\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">        _context.next \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> 6\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">        return\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> 3\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">      case\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> 6\u003C/span>\u003Cspan style=\"color:#ADBAC7\">:\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">      case\u003C/span>\u003Cspan style=\"color:#96D0FF\"> \"end\"\u003C/span>\u003Cspan style=\"color:#ADBAC7\">:\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">        return\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> _context.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">stop\u003C/span>\u003Cspan style=\"color:#ADBAC7\">();\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    }\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">  }, _marked);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">}\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">var\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> iter \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> example\u003C/span>\u003Cspan style=\"color:#ADBAC7\">();\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">iter.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">next\u003C/span>\u003Cspan style=\"color:#ADBAC7\">();\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Cp>\u003Ccode>regenrator\u003C/code>将生成器函数转为\u003Ccode>switch\u003C/code>语句，在每个case语句使用\u003Ccode>_context.next\u003C/code>保存函数当前的上下文状态。\n\u003Ccode>switch\u003C/code>之外迭代器函数被\u003Ccode>_regeneratorRuntime().mark\u003C/code>包装，返回被\u003Ccode>_regeneratorRuntime().wrap\u003C/code>包装的迭代器对象。\n\u003Ccode>Regenerator\u003C/code> 通过工具函数将生成器函数包装，为其添加如 \u003Ccode>next/return\u003C/code> 等方法。同时也对返回的生成器对象进行包装，使得对 next 等方法的调用，最终进入由 \u003Ccode>switch case\u003C/code> 组成的状态机模型中。除此之外，利用闭包技巧，保存生成器函数上下文信息。\u003C/p>\n\u003Cp>\u003Cspan role=\"img\" aria-label=\"clapper board\">🎬\u003C/span>场景1，简易\u003Ca href=\"https://stately.ai/docs/xstate-v5/state-machines-and-statecharts\">State Machine\u003C/a>：\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"js\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">function*\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> stateMachine\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#F69D50\">state\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">    let\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> transition\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">    while\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (\u003C/span>\u003Cspan style=\"color:#6CB6FF\">true\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">        if\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (transition \u003C/span>\u003Cspan style=\"color:#F47067\">===\u003C/span>\u003Cspan style=\"color:#96D0FF\"> \"INCREMENT\"\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">            state\u003C/span>\u003Cspan style=\"color:#F47067\">++\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">        }\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">        if\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (transition \u003C/span>\u003Cspan style=\"color:#F47067\">===\u003C/span>\u003Cspan style=\"color:#96D0FF\"> \"DECREMENT\"\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">            state\u003C/span>\u003Cspan style=\"color:#F47067\">--\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">        }\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">        transition \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#F47067\"> yield\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> state\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    }\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">}\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">const\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> iterator\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> stateMachine\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#6CB6FF\">0\u003C/span>\u003Cspan style=\"color:#ADBAC7\">)\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">console.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">log\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(iterator.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">next\u003C/span>\u003Cspan style=\"color:#ADBAC7\">())\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">console.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">log\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(iterator.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">next\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#96D0FF\">\"INCREMENT\"\u003C/span>\u003Cspan style=\"color:#ADBAC7\">))\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">console.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">log\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(iterator.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">next\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#96D0FF\">\"INCREMENT\"\u003C/span>\u003Cspan style=\"color:#ADBAC7\">))\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">console.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">log\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(iterator.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">next\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#96D0FF\">\"DECREMENT\"\u003C/span>\u003Cspan style=\"color:#ADBAC7\">))\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Cp>场景2，生成扑克牌\u003Cspan role=\"img\" aria-label=\"spade suit\">♠️\u003C/span>：\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"js\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">const\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> cards\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> ({\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">  suits: [\u003C/span>\u003Cspan style=\"color:#96D0FF\">\"♣️\"\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, \u003C/span>\u003Cspan style=\"color:#96D0FF\">\"♦️\"\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, \u003C/span>\u003Cspan style=\"color:#96D0FF\">\"♥️\"\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, \u003C/span>\u003Cspan style=\"color:#96D0FF\">\"♠️\"\u003C/span>\u003Cspan style=\"color:#ADBAC7\">],\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">  court: [\u003C/span>\u003Cspan style=\"color:#96D0FF\">\"J\"\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, \u003C/span>\u003Cspan style=\"color:#96D0FF\">\"Q\"\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, \u003C/span>\u003Cspan style=\"color:#96D0FF\">\"K\"\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, \u003C/span>\u003Cspan style=\"color:#96D0FF\">\"A\"\u003C/span>\u003Cspan style=\"color:#ADBAC7\">],\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">  [Symbol.iterator]: \u003C/span>\u003Cspan style=\"color:#F47067\">function*\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> () {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">    for\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (\u003C/span>\u003Cspan style=\"color:#F47067\">let\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> suit \u003C/span>\u003Cspan style=\"color:#F47067\">of\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> this\u003C/span>\u003Cspan style=\"color:#ADBAC7\">.suits) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">      for\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (\u003C/span>\u003Cspan style=\"color:#F47067\">let\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> i \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> 2\u003C/span>\u003Cspan style=\"color:#ADBAC7\">; i \u003C/span>\u003Cspan style=\"color:#F47067\">&#x3C;=\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> 10\u003C/span>\u003Cspan style=\"color:#ADBAC7\">; i\u003C/span>\u003Cspan style=\"color:#F47067\">++\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) \u003C/span>\u003Cspan style=\"color:#F47067\">yield\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> suit \u003C/span>\u003Cspan style=\"color:#F47067\">+\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> i;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">      for\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (\u003C/span>\u003Cspan style=\"color:#F47067\">let\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> c \u003C/span>\u003Cspan style=\"color:#F47067\">of\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> this\u003C/span>\u003Cspan style=\"color:#ADBAC7\">.court) \u003C/span>\u003Cspan style=\"color:#F47067\">yield\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> suit \u003C/span>\u003Cspan style=\"color:#F47067\">+\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> c;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    }\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">  }\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">})\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">console.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">log\u003C/span>\u003Cspan style=\"color:#ADBAC7\">([\u003C/span>\u003Cspan style=\"color:#F47067\">...\u003C/span>\u003Cspan style=\"color:#ADBAC7\">cards])\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"js\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">function\u003C/span>\u003Cspan style=\"color:#F47067\"> *\u003C/span>\u003Cspan style=\"color:#DCBDFB\">initializer\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#F69D50\">count\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, \u003C/span>\u003Cspan style=\"color:#DCBDFB\">mapFunc\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#F69D50\"> i\u003C/span>\u003Cspan style=\"color:#F47067\"> =>\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> i) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">  for\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#F47067\">let\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> i \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> 0\u003C/span>\u003Cspan style=\"color:#ADBAC7\">; i \u003C/span>\u003Cspan style=\"color:#F47067\">&#x3C;\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> count; i\u003C/span>\u003Cspan style=\"color:#F47067\">++\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">    if\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(mapFunc.\u003C/span>\u003Cspan style=\"color:#6CB6FF\">constructor\u003C/span>\u003Cspan style=\"color:#ADBAC7\">.name \u003C/span>\u003Cspan style=\"color:#F47067\">===\u003C/span>\u003Cspan style=\"color:#96D0FF\"> 'GeneratorFunction'\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">      yield*\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> mapFunc\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(i, count);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    } \u003C/span>\u003Cspan style=\"color:#F47067\">else\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">      yield\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> mapFunc\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(i, count);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    }\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">  }\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">}\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">const\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> cards\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> [\u003C/span>\u003Cspan style=\"color:#F47067\">...\u003C/span>\u003Cspan style=\"color:#DCBDFB\">initializer\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#6CB6FF\">13\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, \u003C/span>\u003Cspan style=\"color:#F47067\">function\u003C/span>\u003Cspan style=\"color:#F47067\"> *\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#F69D50\">i\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">  const\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> p\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> i \u003C/span>\u003Cspan style=\"color:#F47067\">+\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> 1\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">  yield\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> [\u003C/span>\u003Cspan style=\"color:#96D0FF\">'♠️'\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, p];\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">  yield\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> [\u003C/span>\u003Cspan style=\"color:#96D0FF\">'♣️'\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, p];\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">  yield\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> [\u003C/span>\u003Cspan style=\"color:#96D0FF\">'♥️'\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, p];\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">  yield\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> [\u003C/span>\u003Cspan style=\"color:#96D0FF\">'♦️'\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, p];\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">})];\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">console.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">log\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(cards);\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Ch2 id=\"迭代协议\">迭代协议\u003C/h2>\n\u003Cp>\u003Cstrong>迭代协议\u003C/strong>并不是新的内置实现或语法，而是_协议_。这些协议可以被任何遵循某些约定的对象来实现。\n迭代协议具体分为两个协议：可迭代协议和迭代器协议。\u003C/p>\n\u003Ch3 id=\"可迭代协议\">可迭代协议\u003C/h3>\n\u003Cp>\u003Cstrong>可迭代协议\u003C/strong>允许 JavaScript 对象定义或定制它们的迭代行为，例如，在一个 \u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/for...of\">\u003Ccode>for..of\u003C/code>\u003C/a> 结构中，哪些值可以被遍历到。一些内置类型同时是内置的可迭代对象，并且有默认的迭代行为，比如 \u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array\">\u003Ccode>Array\u003C/code>\u003C/a> 或者 \u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Map\">\u003Ccode>Map\u003C/code>\u003C/a>，而其他内置类型则不是（比如 \u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object\">\u003Ccode>Object\u003C/code>\u003C/a>）。\u003C/p>\n\u003Cp>要成为\u003Cstrong>可迭代\u003C/strong>对象，该对象必须实现 \u003Cstrong>\u003Ccode>@@iterator\u003C/code>\u003C/strong> 方法，这意味着对象（或者它原型链上的某个对象）必须有一个键为 \u003Ccode>@@iterator\u003C/code> 的属性，可通过常量 \u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol/iterator\">\u003Ccode>Symbol.iterator\u003C/code>\u003C/a> 访问该属性：\u003C/p>\n\u003Cp>\u003Ccode>[Symbol.iterator]\u003C/code>\u003C/p>\n\u003Cp>一个无参数的函数，其返回值为一个符合迭代器协议的对象。\u003C/p>\n\u003Cp>当一个对象需要被迭代的时候（比如被置入一个 \u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/for...of\">\u003Ccode>for...of\u003C/code>\u003C/a> 循环时），首先，会不带参数调用它的 \u003Ccode>@@iterator\u003C/code> 方法，然后使用此方法返回的\u003Cstrong>迭代器\u003C/strong>获得要迭代的值。\u003C/p>\n\u003Cp>值得注意的是调用此无参数函数时，它将作为对可迭代对象的方法进行调用。因此，在函数内部，\u003Ccode>this\u003C/code> 关键字可用于访问可迭代对象的属性，以决定在迭代过程中提供什么。\u003C/p>\n\u003Cp>此函数可以是普通函数，也可以是生成器函数，以便在调用时返回迭代器对象。在此生成器函数的内部，可以使用 \u003Ccode>yield\u003C/code> 提供每个条目。\u003C/p>\n\u003Ch3 id=\"迭代器协议\">迭代器协议\u003C/h3>\n\u003Cp>\u003Cstrong>迭代器协议\u003C/strong>定义了产生一系列值（无论是有限个还是无限个）的标准方式，当值为有限个时，所有的值都被迭代完毕后，则会返回一个默认返回值。\u003C/p>\n\u003Cp>只有实现了一个拥有以下语义（semantic）的 \u003Cstrong>\u003Ccode>next()\u003C/code>\u003C/strong> 方法，一个对象才能成为迭代器：\n\u003Ccode>next()\u003C/code>：无参数或者接受一个参数的函数，并返回符合 \u003Ccode>IteratorResult\u003C/code> 接口的对象（见下文）。如果在使用迭代器内置的语言特征（例如 \u003Ccode>for...of\u003C/code>）时，得到一个非对象返回值（例如 \u003Ccode>false\u003C/code> 或 \u003Ccode>undefined\u003C/code>），将会抛出 \u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypeError\">\u003Ccode>TypeError\u003C/code>\u003C/a>（\u003Ccode>\"iterator.next() returned a non-object value\"\u003C/code>）。\u003C/p>\n\u003Cp>所有迭代器协议的方法（\u003Ccode>next()\u003C/code>、\u003Ccode>return()\u003C/code> 和 \u003Ccode>throw()\u003C/code>）都应返回实现 \u003Ccode>IteratorResult\u003C/code> 接口的对象。它必须有以下属性：\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ccode>done\u003C/code> 可选\n如果迭代器能够生成序列中的下一个值，则返回 \u003Ccode>false\u003C/code> 布尔值。（这等价于没有指定 \u003Ccode>done\u003C/code> 这个属性。）\n如果迭代器已将序列迭代完毕，则为 \u003Ccode>true\u003C/code>。这种情况下，\u003Ccode>value\u003C/code> 是可选的，如果它依然存在，即为迭代结束之后的默认返回值。\u003C/li>\n\u003Cli>\u003Ccode>value\u003C/code> 可选\n迭代器返回的任何 JavaScript 值。\u003Ccode>done\u003C/code> 为 \u003Ccode>true\u003C/code> 时可省略。\n实际上，两者都不是严格要求的；如果返回没有任何属性的对象，则实际上等价于 \u003Ccode>{ done: false, value: undefined }\u003C/code>。\n如果一个迭代器返回一个 \u003Ccode>done: true\u003C/code> 的结果，则对任何 \u003Ccode>next()\u003C/code> 的后续调用也返回 \u003Ccode>done: true\u003C/code>，尽管这在语言层面不是强制的。\u003C/li>\n\u003C/ul>\n\u003Cp>\u003Ccode>next\u003C/code> 方法可以接受一个值，该值将提供给方法体。任何内置的语言特征都将不会传递任何值。传递给生成器 \u003Ccode>next\u003C/code> 方法的值将成为相应 \u003Ccode>yield\u003C/code> 表达式的值。\u003C/p>\n\u003Cp>可选地，迭代器也实现了 \u003Cstrong>\u003Ccode>return(value)\u003C/code>\u003C/strong> 和 \u003Cstrong>\u003Ccode>throw(exception)\u003C/code>\u003C/strong> 方法，这些方法在调用时告诉迭代器，调用者已经完成迭代，并且可以执行任何必要的清理（例如关闭数据库连接，见\u003Ca href=\"https://github.com/tc39/proposal-explicit-resource-management\">Explicit Resource Management\u003C/a>）。\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ccode>return(value)\u003C/code> 可选\n无参数或者接受一个参数的函数，并返回符合 \u003Ccode>IteratorResult\u003C/code> 接口的对象，其 \u003Ccode>value\u003C/code> 通常等价于传递的 \u003Ccode>value\u003C/code>，并且 \u003Ccode>done\u003C/code> 等于 \u003Ccode>true\u003C/code>。调用这个方法表明迭代器的调用者不打算调用更多的 \u003Ccode>next()\u003C/code>，并且可以进行清理工作。\u003C/li>\n\u003Cli>\u003Ccode>throw(exception)\u003C/code> 可选\n无参数或者接受一个参数的函数，并返回符合 \u003Ccode>IteratorResult\u003C/code> 接口的对象，通常 \u003Ccode>done\u003C/code> 等于 \u003Ccode>true\u003C/code>。调用这个方法表明迭代器的调用者监测到错误的状况，并且 \u003Ccode>exception\u003C/code> 通常是一个 \u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Error\">\u003Ccode>Error\u003C/code>\u003C/a> 实例。\u003C/li>\n\u003C/ul>\n\u003Cblockquote class=\"callout-warning\" data-callout=\"warning\" data-expandable=\"false\" data-expanded=\"false\">\n\n                \u003Cdiv class=\"callout-title\">\n                  \u003Cdiv class=\"callout-title-icon\">\u003Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\u003Cpath d=\"m21.73 18-8-14a2 2 0 0 0-3.48 0l-8 14A2 2 0 0 0 4 21h16a2 2 0 0 0 1.73-3Z\">\u003C/path>\u003Cline x1=\"12\" y1=\"9\" x2=\"12\" y2=\"13\">\u003C/line>\u003Cline x1=\"12\" y1=\"17\" x2=\"12.01\" y2=\"17\">\u003C/line>\u003C/svg>\u003C/div>\n                  \n                \u003C/div>\n                \u003Cdiv class=\"callout-content\">无法通过反射的方法确定（例如，没有实际调用 next() 并验证返回的结果）一个特定的对象是否实现了迭代器协议。\u003C/div>\n              \n\u003C/blockquote>\n\u003Cp>几乎所有语法和API都期待可迭代对象而非迭代器，见如下例子：\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"js\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">const\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> aGeneratorObject\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (\u003C/span>\u003Cspan style=\"color:#F47067\">function*\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> () {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">  yield\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> 1\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">  yield\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> 2\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">  yield\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> 3\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">})();\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">console.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">log\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#F47067\">typeof\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> aGeneratorObject.next);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">// \"function\"——它有 next 方法（返回正确的值），所以它是迭代器\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">console.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">log\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#F47067\">typeof\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> aGeneratorObject[Symbol.iterator]);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">// \"function\"——它有 @@iterator 方法（返回正确的迭代器），所以它是可迭代的\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">console.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">log\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(aGeneratorObject[Symbol.iterator]() \u003C/span>\u003Cspan style=\"color:#F47067\">===\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> aGeneratorObject);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">// true——它的 @@iterator 方法返回自身（一个迭代器），所以它是一个可迭代的迭代器\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Ch3 id=\"异步迭代器和异步可迭代协议\">异步迭代器和异步可迭代协议\u003C/h3>\n\u003Cp>还有一对用于异步迭代的协议，命名为\u003Cstrong>异步迭代器\u003C/strong>和\u003Cstrong>异步可迭代\u003C/strong>协议。它们与可迭代和迭代器协议有着非常类似的接口，只是从调用迭代器方法的每个返回值都包装在一个 promise 中。\u003C/p>\n\u003Cp>当对象实现以下方法时，它会实现异步可迭代协议：\n\u003Ccode>[Symbol.asyncIterator]\u003C/code>\n返回对象的无参数函数，并且符合异步迭代器协议。\u003C/p>\n\u003Cp>当对象实现next、return、throw方法（同上方迭代器协议）但返回值类型为\u003Ccode>Promise&#x3C;IteratorResult>\u003C/code>时，它会实现异步迭代器协议。\u003C/p>\n\u003Ch3 id=\"语言和迭代协议之间的交互\">语言和迭代协议之间的交互\u003C/h3>\n\u003Ch4 id=\"内置的可迭代对象\">内置的可迭代对象\u003C/h4>\n\u003Cp>\u003Ccode>String\u003C/code>、\u003Ccode>Array\u003C/code>、\u003Ccode>TypedArray\u003C/code>、\u003Ccode>Map\u003C/code>、\u003Ccode>Set\u003C/code>以及 \u003Ccode>Intl.Segments\u003C/code> 都是内置的可迭代对象，因为它们的每个 \u003Ccode>prototype\u003C/code> 对象都实现了 \u003Ccode>@@iterator\u003C/code> 方法。此外，\u003Ccode>arguments\u003C/code>对象和一些 DOM 集合类型，如 \u003Ccode>NodeList\u003C/code>也是可迭代的。目前，没有内置的异步可迭代对象.\u003C/p>\n\u003Cp>生成器函数返回生成器对象，它们是可迭代的迭代器。异步生成器函数返回异步生成器对象，它们是异步可迭代的迭代器。\u003C/p>\n\u003Cp>从内置迭代返回的迭代器实际上都继承了一个公共类（目前尚未暴露），该类实现了上述 \u003Ccode>[Symbol.iterator]() { return this; }\u003C/code> 方法，使它们都是可迭代的迭代器。\u003C/p>\n\u003Cpre>\u003Ccode>console.log([][Symbol.iterator]());\n\nArray Iterator {}\n  [[Prototype]]: Array Iterator     ==> This is the prototype shared by all array iterators\n    next: ƒ next()\n    Symbol(Symbol.toStringTag): \"Array Iterator\"\n    [[Prototype]]: Object           ==> This is the prototype shared by all built-in iterators\n      Symbol(Symbol.iterator): ƒ [Symbol.iterator]()\n      [[Prototype]]: Object         ==> This is Object.prototype\n\u003C/code>\u003C/pre>\n\u003Ch4 id=\"接受可迭代对象的内置-api\">接受可迭代对象的内置 API\u003C/h4>\n\u003Cp>有许多 API 接受可迭代对象，一些例子包括：\u003C/p>\n\u003Cul>\n\u003Cli>Map()\u003C/li>\n\u003Cli>WeakMap()\u003C/li>\n\u003Cli>Set()\u003C/li>\n\u003Cli>WeakSet()\u003C/li>\n\u003Cli>Promise.all()\u003C/li>\n\u003Cli>Promise.allSettled()\u003C/li>\n\u003Cli>Promise.race()\u003C/li>\n\u003Cli>Promise.any()\u003C/li>\n\u003Cli>Array.from()\u003C/li>\n\u003C/ul>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"js\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">const\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> myObj\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> {};\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">new\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> WeakSet\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">  (\u003C/span>\u003Cspan style=\"color:#F47067\">function*\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> () {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">    yield\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> {};\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">    yield\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> myObj;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">    yield\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> {};\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">  })()\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">).\u003C/span>\u003Cspan style=\"color:#DCBDFB\">has\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(myObj); \u003C/span>\u003Cspan style=\"color:#768390\">// true\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">Array.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">from\u003C/span>\u003Cspan style=\"color:#ADBAC7\">((\u003C/span>\u003Cspan style=\"color:#F47067\">function*\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> () {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">    for\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (\u003C/span>\u003Cspan style=\"color:#F47067\">let\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> i\u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#6CB6FF\">0\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;i\u003C/span>\u003Cspan style=\"color:#F47067\">&#x3C;\u003C/span>\u003Cspan style=\"color:#6CB6FF\">10\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;i\u003C/span>\u003Cspan style=\"color:#F47067\">++\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">        yield\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> i;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    }\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">})()) \u003C/span>\u003Cspan style=\"color:#768390\">// [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Ch3 id=\"期待迭代对象的语法\">期待迭代对象的语法\u003C/h3>\n\u003Cp>一些语句和表达式期望可迭代对象，例如 \u003Ccode>for...of\u003C/code> 循环、数组和参数扩展、\u003Ccode>yield*\u003C/code>和数组解构：\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"js\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">for\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (\u003C/span>\u003Cspan style=\"color:#F47067\">const\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> value\u003C/span>\u003Cspan style=\"color:#F47067\"> of\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> [\u003C/span>\u003Cspan style=\"color:#96D0FF\">\"a\"\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, \u003C/span>\u003Cspan style=\"color:#96D0FF\">\"b\"\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, \u003C/span>\u003Cspan style=\"color:#96D0FF\">\"c\"\u003C/span>\u003Cspan style=\"color:#ADBAC7\">]) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">  console.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">log\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(value);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">}\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">// \"a\"\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">// \"b\"\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">// \"c\"\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">console.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">log\u003C/span>\u003Cspan style=\"color:#ADBAC7\">([\u003C/span>\u003Cspan style=\"color:#F47067\">...\u003C/span>\u003Cspan style=\"color:#96D0FF\">\"abc\"\u003C/span>\u003Cspan style=\"color:#ADBAC7\">]); \u003C/span>\u003Cspan style=\"color:#768390\">// [\"a\", \"b\", \"c\"]\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">function*\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> gen\u003C/span>\u003Cspan style=\"color:#ADBAC7\">() {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">  yield*\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> [\u003C/span>\u003Cspan style=\"color:#96D0FF\">\"a\"\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, \u003C/span>\u003Cspan style=\"color:#96D0FF\">\"b\"\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, \u003C/span>\u003Cspan style=\"color:#96D0FF\">\"c\"\u003C/span>\u003Cspan style=\"color:#ADBAC7\">];\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">}\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">console.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">log\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#DCBDFB\">gen\u003C/span>\u003Cspan style=\"color:#ADBAC7\">().\u003C/span>\u003Cspan style=\"color:#DCBDFB\">next\u003C/span>\u003Cspan style=\"color:#ADBAC7\">()); \u003C/span>\u003Cspan style=\"color:#768390\">// { value: \"a\", done: false }\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">[a, b, c] \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#F47067\"> new\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> Set\u003C/span>\u003Cspan style=\"color:#ADBAC7\">([\u003C/span>\u003Cspan style=\"color:#96D0FF\">\"a\"\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, \u003C/span>\u003Cspan style=\"color:#96D0FF\">\"b\"\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, \u003C/span>\u003Cspan style=\"color:#96D0FF\">\"c\"\u003C/span>\u003Cspan style=\"color:#ADBAC7\">]);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">console.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">log\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(a); \u003C/span>\u003Cspan style=\"color:#768390\">// \"a\"\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Cp>当内置语法迭代迭代器，并且最后的结果中 \u003Ccode>done\u003C/code> 为 \u003Ccode>false\u003C/code>（即迭代器能够生成更多值）但不需要更多值时，如果存在，将调用 \u003Ccode>return\u003C/code> 方法。例如，如果在 \u003Ccode>for...of\u003C/code> 循环中遇到 \u003Ccode>break\u003C/code> 或 \u003Ccode>return\u003C/code>，或者数组解构中的标识符只是有限个的，则可能会发生这种情况。\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"js\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">const\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> obj\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">  [Symbol.iterator]() {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">    let\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> i \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> 0\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">    return\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">      next\u003C/span>\u003Cspan style=\"color:#ADBAC7\">() {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">        i\u003C/span>\u003Cspan style=\"color:#F47067\">++\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">        console.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">log\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#96D0FF\">\"Returning\"\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, i);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">        if\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (i \u003C/span>\u003Cspan style=\"color:#F47067\">===\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> 3\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) \u003C/span>\u003Cspan style=\"color:#F47067\">return\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> { done: \u003C/span>\u003Cspan style=\"color:#6CB6FF\">true\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, value: i };\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">        return\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> { done: \u003C/span>\u003Cspan style=\"color:#6CB6FF\">false\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, value: i };\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">      },\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">      return\u003C/span>\u003Cspan style=\"color:#ADBAC7\">() {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">        console.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">log\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#96D0FF\">\"Closing\"\u003C/span>\u003Cspan style=\"color:#ADBAC7\">);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">        return\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> { done: \u003C/span>\u003Cspan style=\"color:#6CB6FF\">true\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> };\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">      },\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    };\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">  },\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">};\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">const\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> [\u003C/span>\u003Cspan style=\"color:#6CB6FF\">b\u003C/span>\u003Cspan style=\"color:#ADBAC7\">] \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> obj;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">// Returning 1\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">// Closing\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">const\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> [\u003C/span>\u003Cspan style=\"color:#6CB6FF\">a\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, \u003C/span>\u003Cspan style=\"color:#6CB6FF\">b\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, \u003C/span>\u003Cspan style=\"color:#6CB6FF\">c\u003C/span>\u003Cspan style=\"color:#ADBAC7\">] \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> obj;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">// Returning 1\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">// Returning 2\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">// Returning 3\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">// Already reached the end (the last call returned `done: true`),\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">// so `return` is not called\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">for\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (\u003C/span>\u003Cspan style=\"color:#F47067\">const\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> b\u003C/span>\u003Cspan style=\"color:#F47067\"> of\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> obj) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">  break\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">}\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">// Returning 1\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">// Closing\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Cp>异步生成器函数（但不是同步生成器函数中的 \u003Ccode>for await...of\u003C/code> 循环和 \u003Ccode>yield*\u003C/code> 是与异步迭代交互的唯一方式。在不是同步迭代的异步迭代对象（即它有 \u003Ccode>[@@asyncIterator]()\u003C/code> 但没有 \u003Ccode>[@@iterator]()\u003C/code>）上使用 \u003Ccode>for...of\u003C/code>、数组展开等将抛出 \u003Ccode>TypeError：x is not iterable\u003C/code>。\u003C/p>\n\u003Ch4 id=\"不符合标准的可迭代对象\">不符合标准的可迭代对象\u003C/h4>\n\u003Cp>如果一个可迭代对象的 \u003Ccode>@@iterator\u003C/code> 方法不能返回迭代器对象，那么可以认为它是一个_不符合标准的_（Non-well-formed）可迭代对象。\u003C/p>\n\u003Cp>使用这样的可迭代对象很可能会导致如下的运行时异常，或者不可预料的表现：\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"js\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">const\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> nonWellFormedIterable\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> {};\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">nonWellFormedIterable[Symbol.iterator] \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> () \u003C/span>\u003Cspan style=\"color:#F47067\">=>\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> 1\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">[\u003C/span>\u003Cspan style=\"color:#F47067\">...\u003C/span>\u003Cspan style=\"color:#ADBAC7\">nonWellFormedIterable]; \u003C/span>\u003Cspan style=\"color:#768390\">// TypeError: [Symbol.iterator]() returned a non-object value\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Ch3 id=\"一些例子\">一些例子\u003C/h3>\n\u003Cp>使用生成器定义一个可迭代对象\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"js\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">function*\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> makeSimpleGenerator\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#F69D50\">array\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">  let\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> nextIndex \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> 0\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">  while\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (nextIndex \u003C/span>\u003Cspan style=\"color:#F47067\">&#x3C;\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> array.\u003C/span>\u003Cspan style=\"color:#6CB6FF\">length\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">    yield\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> array[nextIndex\u003C/span>\u003Cspan style=\"color:#F47067\">++\u003C/span>\u003Cspan style=\"color:#ADBAC7\">];\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">  }\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">}\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">const\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> gen\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> makeSimpleGenerator\u003C/span>\u003Cspan style=\"color:#ADBAC7\">([\u003C/span>\u003Cspan style=\"color:#96D0FF\">\"yo\"\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, \u003C/span>\u003Cspan style=\"color:#96D0FF\">\"ya\"\u003C/span>\u003Cspan style=\"color:#ADBAC7\">]);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">console.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">log\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(gen.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">next\u003C/span>\u003Cspan style=\"color:#ADBAC7\">().value); \u003C/span>\u003Cspan style=\"color:#768390\">// 'yo'\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">console.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">log\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(gen.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">next\u003C/span>\u003Cspan style=\"color:#ADBAC7\">().value); \u003C/span>\u003Cspan style=\"color:#768390\">// 'ya'\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">console.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">log\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(gen.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">next\u003C/span>\u003Cspan style=\"color:#ADBAC7\">().done); \u003C/span>\u003Cspan style=\"color:#768390\">// true\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">function*\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> idMaker\u003C/span>\u003Cspan style=\"color:#ADBAC7\">() {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">  let\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> index \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> 0\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">  while\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (\u003C/span>\u003Cspan style=\"color:#6CB6FF\">true\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">    yield\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> index\u003C/span>\u003Cspan style=\"color:#F47067\">++\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">  }\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">}\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">const\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> it\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> idMaker\u003C/span>\u003Cspan style=\"color:#ADBAC7\">();\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">console.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">log\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(it.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">next\u003C/span>\u003Cspan style=\"color:#ADBAC7\">().value); \u003C/span>\u003Cspan style=\"color:#768390\">// 0\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">console.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">log\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(it.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">next\u003C/span>\u003Cspan style=\"color:#ADBAC7\">().value); \u003C/span>\u003Cspan style=\"color:#768390\">// 1\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">console.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">log\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(it.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">next\u003C/span>\u003Cspan style=\"color:#ADBAC7\">().value); \u003C/span>\u003Cspan style=\"color:#768390\">// 2\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">// ...\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Cp>使用类定义一个可迭代对象\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"js\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">class\u003C/span>\u003Cspan style=\"color:#F69D50\"> SimpleClass\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F69D50\">  #data\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">  constructor\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#F69D50\">data\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#6CB6FF\">    this\u003C/span>\u003Cspan style=\"color:#ADBAC7\">.#data \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> data;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">  }\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">  [Symbol.iterator]() {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">    // Use a new index for each iterator. This makes multiple\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">    // iterations over the iterable safe for non-trivial cases,\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">    // such as use of break or nested looping over the same iterable.\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">    let\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> index \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> 0\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">    return\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">      // Note: using an arrow function allows `this` to point to the\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">      // one of `[@@iterator]()` instead of `next()`\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">      next\u003C/span>\u003Cspan style=\"color:#ADBAC7\">: () \u003C/span>\u003Cspan style=\"color:#F47067\">=>\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">        if\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (index \u003C/span>\u003Cspan style=\"color:#F47067\">&#x3C;\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> this\u003C/span>\u003Cspan style=\"color:#ADBAC7\">.#data.\u003C/span>\u003Cspan style=\"color:#6CB6FF\">length\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">          return\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> { value: \u003C/span>\u003Cspan style=\"color:#6CB6FF\">this\u003C/span>\u003Cspan style=\"color:#ADBAC7\">.#data[index\u003C/span>\u003Cspan style=\"color:#F47067\">++\u003C/span>\u003Cspan style=\"color:#ADBAC7\">], done: \u003C/span>\u003Cspan style=\"color:#6CB6FF\">false\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> };\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">        } \u003C/span>\u003Cspan style=\"color:#F47067\">else\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">          return\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> { done: \u003C/span>\u003Cspan style=\"color:#6CB6FF\">true\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> };\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">        }\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">      },\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    };\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">  }\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">}\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">const\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> simple\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#F47067\"> new\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> SimpleClass\u003C/span>\u003Cspan style=\"color:#ADBAC7\">([\u003C/span>\u003Cspan style=\"color:#6CB6FF\">1\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, \u003C/span>\u003Cspan style=\"color:#6CB6FF\">2\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, \u003C/span>\u003Cspan style=\"color:#6CB6FF\">3\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, \u003C/span>\u003Cspan style=\"color:#6CB6FF\">4\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, \u003C/span>\u003Cspan style=\"color:#6CB6FF\">5\u003C/span>\u003Cspan style=\"color:#ADBAC7\">]);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">for\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (\u003C/span>\u003Cspan style=\"color:#F47067\">const\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> val\u003C/span>\u003Cspan style=\"color:#F47067\"> of\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> simple) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">  console.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">log\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(val); \u003C/span>\u003Cspan style=\"color:#768390\">// 1 2 3 4 5\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>",{"headings":1299,"localImagePaths":1323,"remoteImagePaths":1324,"frontmatter":1325,"imagePaths":1330},[1300,1302,1304,1306,1308,1310,1312,1314,1317,1319,1321],{"depth":31,"slug":1301,"text":1301},"生成器函数",{"depth":31,"slug":1303,"text":1303},"迭代协议",{"depth":37,"slug":1305,"text":1305},"可迭代协议",{"depth":37,"slug":1307,"text":1307},"迭代器协议",{"depth":37,"slug":1309,"text":1309},"异步迭代器和异步可迭代协议",{"depth":37,"slug":1311,"text":1311},"语言和迭代协议之间的交互",{"depth":347,"slug":1313,"text":1313},"内置的可迭代对象",{"depth":347,"slug":1315,"text":1316},"接受可迭代对象的内置-api","接受可迭代对象的内置 API",{"depth":37,"slug":1318,"text":1318},"期待迭代对象的语法",{"depth":347,"slug":1320,"text":1320},"不符合标准的可迭代对象",{"depth":37,"slug":1322,"text":1322},"一些例子",[],[],{"title":1289,"description":15,"pubDate":1326,"heroImage":1291,"date created":1326,"date modified":1327,"draft":16,"tags":1328,"minutesRead":1329},"2023-07-12 18:36","2023-07-12",[20],"18 min read",[],"200-Learning/210-Programing/深入理解Generators.md","200-learning/210-programing/冒号课堂",{"id":1332,"data":1334,"body":1339,"filePath":1340,"digest":1341,"rendered":1342,"legacyId":1455},{"title":1335,"description":15,"pubDate":1336,"heroImage":1337,"tags":1338},"《冒号课堂》",["Date","2023-07-19T04:12:00.000Z"],"https://images.unsplash.com/photo-1509062522246-3755977927d7?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1200&q=80",[133,242],"> Computers are useless. They can only give you answers.  \n> — \u003Ccite>Pablo Picasso\u003C/cite>\n\n## TOC\n\n## 重要范式\n\n> [!info] 🍭\n\n> 从理论上而言，完全可以有非命令式的机器语言存在，前提是计算机采用了特殊的硬件实现，比如非冯·诺伊曼结构的数据流机 (`dataflow machine`)和归约机(`reduction machine`)。但这类计算机并未流行于市，相应的机器语言自然罕见了:\n\n### 编程范式\n\n#### 命令式编程\n\n> 命令式编程(`imperative programming`)。用命令式编写的 程序由命令序列组成，即一系列祈使句:‘先做这，再做那’，强调‘怎么 做’。更学术点说，命令式编程是电脑——准确地讲，是冯·诺伊曼机 (`von Neumann machine`)——运行机制的抽象，即依序从内存中获取指 令和数据，然后去执行。从范式的角度看，其世界观是:程序是由若 干行动指令组成的有序列表。其方法论是:用变量来存储数据，用语 句来执行指令。\n\n命令式编程是行动导向的，因而算法是显性而结果是隐性的；声明式编程是目标驱动的，因而目标是显性而算法是隐性的\n\n#### 结构化编程\n\n> 结构化编程(`structured programming`或简称SP)，它是在过程 式编程的基础上发展起来的。其本质是一种编程原则，提倡代码应具有 清晰的逻辑结构，以保证程序易于读写、测试、维护和优化。\n\n典型语言：`Pascal`\n\n#### 声明式编程\n\n主要包括函数式编程和逻辑式编程。\n\n> [!info]\n\n> 函数式编程：将计算描述为数学函数的求值 逻辑式编程：通过提供一系列事实和规则来推导和论证结论\n\n函数式语言典型语言：Lisp、Haskll、Scheme\n\n逻辑式语言典型语言：Prolog\n\n使用不同编程范式实现阶乘运算\n\n```c\n\nint factorial(int n) {\n\nint f = 1;\n\nfor (; n > 1; --n) f *= n;\n\n\n\nreturn f;\n\n}\n\n```\n\n```lisp\n\ndefun factorial(n) (\n\nif (= n 0) 1\n\n(* n (factorial(- n 1)))\n\n)\n\n```\n\n```prolog\n\nfactorial(0, 1).\n\nfactorial(N, F) :- M is N-1, factorial(M, Fm), F is N * Fm.\n\n```\n\n不同：C明确给出了阶乘的迭代算法，而Lisp仅描述了阶乘的递归定义，Prolog则陈述了两个关于阶乘的断言\n\n> [!summary]\n\n> 声明式编程让我们重回数学思维； 函数式编程类似代数中的表达式变换和计算； 逻辑式编程则类似数理推理逻辑，其中的变量也如数学中一样，是抽象符号而非内存地址。因此，没有赋值运算，不会产生变量被改写的副作用（side effect），也不存在内存分配和释放的问题。\n\n迭代和递归的区别：\n\n1. 迭代比递归更符合命令式的思维模式，因前者贴近机器语言而后者贴近数学语言\n2. 除了尾递归（`tail recursion`）外，一般递归比迭代开销大\n3. 声明式语言提倡递归而不支持迭代\n1. 就语法而言，它不允许迭代中的循环变量\n2. 就视角而言，迭代着眼于微观过程而递归着眼于宏观过程\n\n![image.png](https://raw.githubusercontent.com/fw6/assets/main/toy_docs/20230719123214.png)\n\n| 范式 | 程序 | 输入 | 输出 | 程序设计 | 程序运行 |\n\n| ------ | -------- | -------- | -------- | -------- | ---------- |\n\n| 命令式 | 自动机 | 初始状态 | 最终状态 | 设计指令 | 命令执行 |\n\n| 函数式 | 数学函数 | 自变量 | 因变量 | 设计函数 | 表达式转换 |\n\n| 逻辑式 | 逻辑证明 | 题设 | 结论 | 设计命题 | 逻辑推理 |\n\n### 对象范式（OOP）\n\n函数是被动的实体，对象是主动的实体\n\n过程式程序的世界是君主制的；OO程序是民主制的\n\n封装使得公民拥有个体身份；继承使得公民拥有家庭身份；多态使得公民拥有社会身份\n\n函数式、命令式、逻辑式互相平行，而OOP与他们正交\n\n与其说OOP更具重用性，倒不如说更具易用性\n\n> [!tip]\n\n> 对一个没有独立思考习惯的人来讲，与其说他认同一个理论，不如说他认同该理论倡导者的权威，而在他仰视权威的同时，也把自己的思想交托给了权威。\n\n### 并发范式（合作与竞争）\n\n并发式编程以进程为导向，以任务为中心将系统模块化\n\n并发式编程以资源共享与竞争为主线\n\n程序设计将围绕进程的划分与调度、进程之间的通信与同步来展开\n\n## 常用范式\n\n### 泛型范式 Generic Programming\n\n泛型编程是算法导向的，即以算法为起点和中心点，逐渐将所涉及的概念内涵模糊化、外延扩大化，将所涉及的运算抽象化、一般化，从而扩展算法的适用范围\n\nSTL有3要素: 算法、容器和和迭代器。算法是一系列可行的步骤；容器是数据的集合，是抽象化的数组；迭代器是算法与容器之间的接口，是抽象化的指针。算法串联数据，数据实化算法。\n\n泛型编程不仅能泛化算法中涉及的概念(数据类型)，还能泛 化行为(函数、方法、运算)。\n\n对指定集合中满足指定条件的元素进行指定处理。\n\n通过模板，泛化了容器———可以是数组、列表、集合、映射、队列、栈、字符串等等；泛化了元素——可以是任何数据类型，泛化了处理方法和限定条件——可以是任何函数。\n\n这里的处理方法和限定条件不限于函数，还可以是函子（`functor`）——自带状态的函数对象；另外，迭代器也被泛化了——可以从前往后移动，，可以来回移动，可以随机移动，可以按任意预定义的规律移动。\n\n泛型编程是算法导向的，以算法为中心，逐渐将其所涉及的概 念内涵模糊化、外延扩大化，并将其所涉及的运算抽象化、一般化，从 而提高算法的可重用性。\n\n### 元编程 Meta Programming\n\n元编程：关于程序的程序，或者说是编写、操纵程序的程序\n\n元程序将程序作为数据来对待，能自我发现、自我赋权和自我升级，有着其他程序所不具备的自觉性、自适应性和智能性，可以说是一种最高级的程序。\n\n```c++\n\n// 元编程\n\ntemplate \u003Cint N>\n\nstruct factorial {\n\nenum { value: N * factorial\u003CN - 1>::value };\n\n};\n\n\n\ntemplate \u003C> // 特化（speicialization）\n\nstruct factorial\u003C0> { // 递归中止\n\nenum { value = 1 };\n\n};\n\n\n\nvoid main() {\n\n// 以下等价于 cout \u003C\u003C 120 \u003C\u003C end1;\n\ncout \u003C\u003C factorial\u003C5>::value \u003C\u003C end1;\n\n}\n\n```\n\n`Lex` `Yacc` `ANTLR`\n\n编译器本身就是元编程的典型范例———把高级语言转化为汇编语言或机器语言的程序，不就是能写程序的程序吗？\n\n> [!info]\n\n> 🖥️ 语言导向式编程（Language-Oriented Programming，简称`LOP`）\n\n产生式编程与静态元编程都能自动生成源代码。产生式编程强调代码的生成，元编程强调生成代码的可执行性。此外，动态元编程并不生成源代码，但能在运行期间修改程序。\n\n### 切面范式（AOP）\n\n从宏观角度看，太阳底下没有新鲜事——AOP无非是SoC原理和DRY原则的一种应用； 从微观角度看，太阳每天都是新的——AOP虽自OOP的土壤中长出，却脱离藩篱自成一体。\n\nOOP 只能沿着继承树的纵向方向重用，AOP就是在管道上钻一些孔，在每个孔中注入新的代码流\n\n> [!quote]\n\n> SoC：Separation of Concerns。即关注点分离\n\n抽象与分解的原则：单一化、正交化。每个模块职责明确专一；模块之间相互独立，即高内聚低耦合（high cohesion & low coupling）。此原则相当普适，是分析复杂事物的一种基本方法，在数学和物理中应用尤为广泛，如质因式分解、正交分解、谱分解等等。\n\n## OOP\n\n>A script is what you give the actors, a program is what you give the audience\n\n>脚本是给演员看的，节目是给观众看的。\n\n> [!quote]\n\n> 理想的架构师应当如文学大师，既有恢弘大气的 构思，又有细腻深刻的笔法;应当如统军大帅，既有运筹帷幄的韬略， 又有冲锋陷阵的武功。那些在语言与低级之间、设计与高级之间毫不犹 豫地划等号的人，多半高不成低不就，既不懂语言，也不懂设计。:\n\nRAII（Resource Acquisition Is Initialization）: 资源获取即初始化，准确称为RRIF（Resource Release Is Finalization，资源释放即终结化） 将资源的取放于某一生命周期绑定，初始化对象时获取资源，终结化时释放资源，用户不再直接管理资源，只需控制相应的对象即可。\n\nDTO（Data Transfer Object或DTO）：数据传输对象，不含业务逻辑，仅作为简单数据容器，实际上也属于具体数据类型\n\n> Programming to an interface, not an Implementation\n\n> 通过接口而非实现来编程\n\n抽象：将一类模型最本质最不易变化的部分提炼出来\n\n封装：将信息隐藏，即是将非本质、容易变化的部分隐藏起来，从而将一个类划分为阴阳两面\n\nOCP（Open/Close Principle）: 开闭原则，对扩展开放，对修改封闭\n\n## 笔记\n\n### 第1课 开班导言\n\n对于一个软件开发者来说，这意味着4个阶段：学会（知其所然）——掌握一些具体编程知识的初级程序员。会学（知所以然）——能快速而深刻地理解技术并举一反三的程序员。会用（人为我用）——能将所学灵活运用到实际编程设计之中的高级程序员。被用（我为人用）——能设计出广为人用的应用程序（application）、库（library）、工具包（toolkit）、框架（framework）等的系统分析师和\n\n架构师。至于被用的更高层次，如发明出主流的设计模式、算法、语言，乃至理论等，则可称得上计算机专家了\n\n如果知识是水，我们要挖掘最先涌动的泉眼；如果知识是火，我们要捕捉起初点燃的火花。如果知识是树，其树大根深，不究立固之本则无以知过去；其枝繁叶茂，不握支撑之干则无以知当下；其蓬勃旺盛，不察生长之点则无以知将来。这里的问题不一定是预设的，结论不一定是终极的，甚至不一定是正确的，但一定是有的放矢、发人深思的。由此决定了这里的学习方式将是开放多元、双向互动的。\n\n#### 1.2 首轮提问——什么语言好？\n\n一个优秀的程序员，除了要迅速掌握知识、善于领悟思想外，还必须具备务实与研究精神、独立与合作精神、批判与自省精神\n\n#### 1.3 语言选择——合适的就是好的\n\n所以好的语言就是适合编程者和解决对象的语言\n\n高级语言好比长兵器，威力强大却难免滞重，长于大型应用，可谓‘一寸长，一寸强’；低级语言好比短兵器，轻便灵活却难免风险，长于底层应用，可谓‘一寸短，一寸险’。\n\n#### 1.4 初识范式——程序王国中的世界观与方法论\n\n评判语言优劣，不能离开使用语言的主体和对象。好的语言就是适合编程者和解决对象的语言\n\n计算机语言按其发展历程分为5代，依次为：机器语言、汇编语言、高级语言、面向问题语言和人工智能语言\n\n编程是为了解决问题，而解决问题可以有多种视角和思路，其中普适且行之有效的模式被归结为范式\n\n由于着眼点和思维方式的不同，相应的范式自然各有侧重和倾向，因此一些范式常用‘oriented’来描\n\n“按梦中情人的标准去找对象，具体目标未定但选择倾向已定，这就是一种导向，而且是对象导向。找到之后再约会，不就面向对象了吗？\n\n每种范式都引导人们带着其特有的倾向和思路去分析和解决问题\n\n#### 1.5 开发技术——实用还是时髦？\n\nObject-Oriented多译作“面向对象”，但不如“对象导向”贴切\n\n如果把一门编程语言比作兵器，它的语法、工具和技巧等是招法，它采用的编程范式则是心法\n\n范式的世界观体现在语言的核心概念之中，范式的方法论体现在语言的表达机制中\n\n库和工具包是为程序员带来自由的，框架是为程序员带来约束的\n\n设计模式是软件的战术思想，架构是软件的战略决策。\n\n软件构筑了一个可重用的设计。与库和工具包不同之处在于前者侧重设计重用而后两者侧重代码重用\n\n库和工具包是为程序员带来自由的，框架是为程序员带来约束的\n\n至于架构，一般指一个软件系统的最高层次的整体结构和规划，一个架构可能包含多个框架，而一个框架可能包含多个设计模式\n\n### 第2课 重要范式\n\n从范式的角度看，其世界观是：程序是由若干行动指令组成的有序列表。其方法论是：用变量来存储数据，用语句来执行指令。\n\n#### 2.2 声明范式——目标决定行动\n\n转化为指定的输出\n\n命令式编程是行动导向（Action-Oriented）的，因而算法是显性而目标是隐性的；声明式编程是目标驱动（Goal-Driven）的，因而目标是显性而算法是隐性的\n\n一则迭代比递归更符合命令式的思维模式，因为前者贴近机器语言而后者贴近数学语言；二则除尾递归（tail recursion）[10]外，一般递归比迭代的开销（overhead）大。相反，声明式语言提倡递归而不支持迭代[11]。就语法而言，它不允许迭代中的循环变量；就视角而言，\n\n迭代着眼微观过程而递归着眼宏观规律\n\n命令式把程序看作一个自动机，输入是初始状态，输出是最终状态，编程就是设计一系列指令，通过自动机执行以完成状态转变；函数式把程序看作一个数学函数，输入是自变量，输出是因变量，编程就是设计一系列函数，通过表达式变换以完成计算；逻辑式把程序看作一个逻辑证明，输入是题设，输出是结论，编程就是设计一系列命题，通过逻辑推理以完成证明\n\n声明式编程专注问题的分析和表达而不是算法实现，不用指明执行顺序，一般没有或极少有副作用，也不存在内存管理问题。这些都大大降低了编程的复杂度，同时也非常适合于并发式计算\n\n#### 2.3 对象范式——民主制社会的编程法则\n\n：自动机机制，通过设计指令完成从初始态到最终态的转变。函数式：数学变换机制，通过设计函数完成从自变量到因变量的计算。逻辑式：逻辑证明机制，通过逻辑推理完成从题设到结论的证明。\n\n函数是被动的实体，对象是主动的实体\n\n封装使得公民拥有个体身份，继承使得公民拥有家庭身份，多态使得公民拥有社会身份。\n\n实软件设计最重要的并不是编程语言，甚至也不是编程范式，而是抽象思维\n\n以数据为中心组织逻辑，将系统视为相互作用的对象集合，并利用继承与多态来增强可维护性、可扩展性和可重用性\n\n#### 2.4 并发范式——合作与竞争\n\n并发式编程以进程为导向、以任务为中心将系统模块化\n\n并发式编程以资源共享与竞争为主线\n\n尾递归是一种特殊的递归，其递归调用出现在函数的最后一步运算（尾部）\n\n### 第3课 常用范式\n\n“Generic Programming，简称GP，其基本思想是：将算法与其作用的数据结构分离，并将后者尽可能泛化，最大限度地实现算法重用\n\nSTL有3要素：算法、容器和和迭代器。算法是一系列可行的步骤；容器是数据的集合，是抽象化的数组；迭代器是算法与容器之间的接口，是抽象化的指针。算法串联数据，数据实化算法\n\n泛型编程不仅能泛化算法中涉及的概念（数据类型），还能泛化行为（函数、方法、运算）\n\n#### 3.2 超级范式——提升语言的级别\n\n元编程（Metaprogramming），简称MP。此处的前缀‘meta-’常译作‘元’，其实就是‘超级’、‘行而上’的意思\n\n有了编译器的存在，汇编语言升级为第3代高级语言；同样借助Yacc、ANTLR之类的元编程工具，第3代语言可以升级为第4代的DSL语言。\n\n语言导向式编程[5]（Language-Oriented Programming，简称LOP）\n\n这种编程范式的思路是：在建立一套DSL体系之后，直接用它们来编写软件，尽量不用通用语言。\n\n如果说OOP的关键在于构造对象的概念，那么LOP的关键在于构造语言的语法\n\n—产生式编程（Generative Programming）[7]的范畴\n\n元编程有诸多应用：许多开发工具、框架引擎之类的基础软件都有自动生成源代码的功能；创造DSL以便更高效地处理专门领域的业务；自动生成重复代码；动态改变程序的语句、函数，类，等等\n\n#### 3.3 切面范式——多角度看问题\n\n如果一个程序是一个管道系统，AOP就是在管道上钻一些孔，在每个孔中注入新的代码流\n\n抽象是前提，分解是方式，模块化是结果。\n\n在调用某些对象的方法、读写某些对象的域、抛出某些异常等前后需要用到统一的业务逻辑，诸如日志输出、代码跟踪、性能监控、异常处理、安全检查、事务管理，等等。为解决此类问题，AOP应运而生\n\nAOP实现的关键是将advice的代码嵌入到主体程序之中，术语称编织（weaving）\n\n编织可分两种：一种是静态编织，通过修改源码或字节码（bytecode）在编译期（compile-time）、后编译期（post-compile）或加载期（load-time）嵌入代码\n\n另一种是动态编织，通过代理（proxy）等技术在运行期（run-time）实现嵌入\n\n如果把一个复杂的系统看作复合色的白光，经过第1个三棱镜——关注分离器，系统被分解为不同的切面，如同不同的单色的彩光。这些切面经过第2个三棱镜——编织器，再度合成为原系统\n\n抽象与分解的原则是单一化和正交化，以保障软件系统符合“高内聚、低耦合”的要求\n\n#### 3.4 事件驱动——有事我叫你，没事别烦我\n\n接入点是附加行为——建议（advice）的执行点，切入点（pointcut）是指定的接入点（join point）集合，这些接入点共享一段插入代码。切入点与建议组成了切面（aspect），是模块化的横切关注点\n\n控制反转、依赖反转和依赖注射）的主题是控制与依赖，目的是解耦，方法是反转，而实现这一切的关键是抽象接口。\n\n回调”强调的是行为方式——低层反调高层，而“抽象接口”强调的是实现方式——正是由于接口具有抽象性，低层才能在调用它时无须虑及高层的具体细节，从而实现控制反转\n\n控制反转导致了事件驱动式编程的被动性\n\n事件驱动式还具有异步性的特征，这是由事件的不可预测性与随机性决定的。\n\n独立是异步的前提，耗时是异步的理由\n\n发行/订阅模式正是观察者模式的别名，一方面可看作简化或退化的事件驱动式，另一方面可看作事件驱动式的核心思想\n\n> [!quote]\n\n> 什么是好莱坞原则？”“Don't call us, we'll call you.\n\n好莱坞经纪公司相当于一个背后运作的软件平台，艺人相当于一个callback，‘留下你的电话’就是注册callback，‘我们会打给你的’就是异步调用callback。\n\n别打电话给我们’意味着经纪公司处于主导地位，艺人们处于受控状态，这便是控制反转（Inversion of Control，简称IoC）。”\n\n“一般library中用到callback只是局部的控制反转，而framework将IoC机制用到全局\n\n程序员牺牲了对应用程序流程的主导权，换来的是更简洁的代码和更高的生产效率\n\n如果将编程譬比命题作文，不用framework的程序是一张可以自由写作的白纸，library是作文素材库；采用framework的程序是一篇成型的作文，作者只须填写空白的词语和段落即可。\n\n“控制反转不仅增强了framework在代码和设计上的重用性，还极大地提高了framework的可扩展性。\n\n依赖反转原则（Dependency-Inversion Principle，简称DIP）更加具体——高层模块不应依赖低层模块，它们都应依赖抽象；抽象不应依赖细节，细节应依赖抽象\n\n依赖注射（Dependency Injection，简称DI）——动态地为一个软件组件提供外部依赖\n\n回调函数的提法较为古老，多出现于过程式编程，抽象接口是更现代、更OO的说法\n\n‘回调’强调的是行为方式——低层反调高层，而‘抽象接口’强调的是实现方式——正是由于接口具有抽象性，低层才能在调用它时无须虑及高层的具体细节，从而实现控制反转。\n\n如何设计事件机制？其中，包括事件定义、事件触发、事件侦查、事件转化、事件合并、事件调度、事件传播、事件处理、事件连带（event cascade）[14]等一系列问题。\n\n“软件的可伸缩性（scalability）一般指从容应对工作量增长的能力，常与性能（performance）等指标一并被考量\n\n控制反转的主要作用是降低模块之间的依赖性，从而降低模块的耦合度和复杂度，提高软件的可重用性、柔韧性和可扩展性，但对可伸缩性并无太大帮助\n\n独立是异步的前提，耗时是异步的理由。至于随机嘛，只是副产品，一个独立且耗时的子过程，通常结束时间也是不可预期的\n\n事件处理器事先在关注的事件源上注册，后者不定期地发表事件对象，经过事件管理器的转化（translate）、合并（coalesce）、排队（enqueue）、分派（dispatch）等集中处理后，事件处理器接收到事件并对其进行相应处理\n\n通过事件机制，事件源与事件处理器之间建立了松耦合的多对多关系：一个事件源可以有多个处理器，一个处理器可以监听多个事件源\n\n事件处理器也能产生事件，实现处理器接口的事件源也能处理事件，它们可以角色换位，于是又演化为peer-to-peer模式\n\n该模式省略了事件管理器部分，由事件源直接调用事件处理器的接口。这样更加简明易用，但威力有所削弱，缺少事件管理、事件连带等机制\n\n事件是程序中令人关注的信息状态上的变化。在基于事件驱动的系统中，事件包括内建事件与用户自定义事件，其中内建事件又分为底层事件和语义事件。此外，事件还有自然事件与合成事件之分\n\n异步过程在主程序中以非堵塞的机制运行，即主程序不必等待该过程的返回就能继续下一步。异步机制能减少随机因素造成的资源浪费，提高系统的性能和可伸缩性\n\n### 第4课 重温范式\n\n编程语言的语法、语义等都是从编程范式的树根衍生而出的枝叶，把握了这种脉络和节奏，代码才会如音乐舞蹈般韵律有致\n\n容忍无知不是放任无知，而是一种学习的技巧，让无知成为求知的动力而不是障碍。容忍无知能使我们既不沮丧气馁，也不急于求成。在学习时不妨略过一些细节或难点，先概览全貌以获取感性认识，然后在逐步积累中升华为理性认识\n\n如果你不了解编程范式，那么眼中的编程语言只是语法、语义、核心库、规范等组成的集合，写出的代码虽能编译、能工作，却会显得生硬、别扭\n\n软件中的范式除了编程范式外，还有架构范式[1]、数据库范式[2]等\n\n函数式还有一个重要特征：无副作用或尽量减少副作用[4]。所谓无副作用，是指一个函数在被调用前后保持程序的状态不变。无副作用的函数不会改变非局部变量的值，不会改变传入的参数，也没有I/O操作。\n\n而函数式程序则是进行表达式变换，一般不会改变变量的值。其实函数式并非完全不改变内存，只不过改变的是栈内存（stack）罢了\n\n首先，没有副作用的函数易于重构、调试和单元测试。其次，代码有效性与函数顺序无关，方便并发处理和优化处理\n\n通常要计算f（g（x））的值，须要计算完g（x）后才能将所得值代入函数f。有了惰性求值机制，g（x）的计算完全由函数f的需求来驱动，避免做无用功。此乃其惰性之所在。\n\n惰性求值不仅能节省有限的时间，还能超越无限的时间——g（x）甚至可以永不退出，从而可能产生无穷的输出结果集供函数f使用\n\n没有副作用的函数是引用透明的（referential transparency），即一个表达式随时可以用它的值来替换[6]，正如数学中的函数一样\n\n#### 4.2 逻辑范式——当算法失去了控制\n\n逻辑式与过程式和函数式的一个不同之处是，它没有明显的输入、输出之分\n\n：算法=逻辑+控制。其中逻辑是算法的核心，控制主要用于改进算法的效率。在逻辑式编程中，程序员只需表达逻辑，而控制交给编程语言的解释器或编译器去管理。\n\n但缺点是运行效率偏低，可掌控性较差，与常规的过程式思维差异较大，更适合基于规则（rule-based）而不是基于状态（state-based）的应用[13]\n\n逻辑式编程不仅适用于人工智能方面的学术领域，同样广泛适用于各种涉及知识管理、决策分析等方面的应用领域\n\n#### 4.3 汇总范式——一张五味俱全的大烙饼\n\n“设计模式一般针对某一特定场景的问题，而编程范式针对的是广泛得多的问题领域，通常有一整套的思想和理论体系，具有全局性、系统性和渗透性，这一点在5大重要范式中显得尤为突出。因此，编程范式更普适更抽象，涉及的深度和广度也是设计模式难以比拟的\n\n设计模式是遵循设计原则的一些具体技巧，以保证代码的可维护性、扩展性和可重用性为目的。它重在设计，对语言一般没有要求[15]。编程范式则不同，对语言往往有专门的要求\n\n语言本来就是围绕其所倡导的核心范式来设计的\n\n#### 4.4 情景范式——餐馆里的编程范式\n\n编程范式的核心价值在于：突破原有编程方式的某些限制，带来新思维和新方法，从而进一步解放程序员的劳动力\n\n可以这么理解（闭包）：所谓包，指函数与其周围的环境变量捆绑打包；所谓闭，指这些变量是封闭的，只能为该函数所专用\n\n正向推理自底向上，利用推理规则从已有的事实数据推出更多的数据，直到达成目标；逆向推理正相反，自顶向下，从目标出发寻找满足结论的事实[21]。相比而言，正向推理适合针对不同输入作出不同反应，而逆向推理适合回答查询。\n\n### 第5课 语言小谈\n\n“软件工程中有个迭代开发法，本班则采用迭代学习法：即在具体知识与抽象理论之间进行折返式学习\n\n#### 5.2 数据类型——规则与变通\n\n所谓迭代学习法，是指在具体知识与抽象理论之间进行增量式的循环学习\n\n要想工作胜任愉快，才能、兴趣、方法和努力缺一不可。一套好的方法可以激发才能、兴趣和努力\n\n数据类型包含两个要素：一个是允许取值的集合，一个是允许参与的运算\n\n数据类型的意义何在？”句号回答：“限定一个变量的数据类型，就意味着限制了该变量的取值范围和所参与的运算，这从一定程度上保证了代码的安全性。”冒号追问：“还有吗？”句号略作思考后说：“用户自定义的数据类型，如C中的结构和Java中的类或接口，赋予数据以逻辑内涵，提高了代码的抽象性\n\n“数据类型既有针对机器的物理意义，又有针对人的逻辑意义。前者用于进行底层的内存分配和数值运算等，后者用于表达高层的逻辑概念\n\n所谓动态类型语言（dynamic typing language），正是指类型检查发生在运行期间（run-time）的语言。”“那静态类型语言（static typing language）自然是类型检查发生在编译期间（compile-time）的语言\n\n类型的动静与强弱完全是正交的两个概念\n\n前者以类型的绑定（binding）时间来划分，后者以类型的约束强度来划分\n\n鸭子类型是动态类型的一种风格，允许非继承性多态，即一个对象的类型可以由其接口集合来确定，不须要通过显式继承。它有利于代码重用，但也可能造成误用和滥用\n\n类型的动静以类型的绑定时间来划分，类型的强弱以类型的约束强度来划分，它们之间没有必然联系。弱类型语言允许类型的隐性转化，被认为是类型不安全的；而强类型语言则一般不允许这种转化，被认为是类型安全的\n\n#### 5.3 动态语言——披着彩衣飞舞的脚本语言\n\n“脚本（script）的提法，是为了区别于一般的程序（program）\n\n：‘A script is what you give the actors, a program is whatyou give the audience’。直译为：脚本是给演员看的，节目是给观众看的\n\n脚本语言以语言的实际用途为标志，动态语言以语言的语法特征为标志\n\n单从用途上看，一个脚本语言如果不再局限于命令行工具和粘合工具，从专用语言发展为通用语言，并能胜任复杂的应用开发，或许更有资格归为动态语言。\n\n再从用法上看，动态语言能在运行中增加或改变数据结构、函数定义、对象行为或指令流程等。如果说动态类型语言的动态体现在类型上，动态语言的动态则体现在结构和功能上\n\n➢脚本语言一般是解释型语言，不须要通过“编写－编译－链接－运行”的循环圈，便利快捷，加之简洁宽松的语法、面向字符的特性，以及较强的文本处理能力，尤其适合作为粘合语言，多用于系统管理和集成。\n\n#### 5.4 语言误区——语言的宗教情结\n\n如果一种语言不能影响你对编程的看法，那么就不值得去了解\n\n破除语言的宗教情结，保持自我批判的勇气和精神\n\n每种语言都有其特到之处和不足之处，与其抱怨争执，不如扬长避短\n\n### 第6课 语言简评\n\n将资源的取放与某一对象的生命周期绑定，初始化对象时获取资源，终结化对象时释放资源。用户代码不再直接管理资源，只须控制相应的对象即可\n\n专门提供了using语句来简化释放资源（IDisposable）的代码\n\n#### 6.3 前台语言——视觉与交互的艺术\n\nJavaScript作为一门动态语言，集过程式、对象式、函数式、事件驱动式、元编程等于一身","src/content/blog/200-Learning/210-Programing/《冒号课堂》.md","f4b661aa13395b31",{"html":1343,"metadata":1344},"\u003Cblockquote>\n\u003Cp>Computers are useless. They can only give you answers.\u003Cbr>\n— \u003Ccite>Pablo Picasso\u003C/cite>\u003C/p>\n\u003C/blockquote>\n\u003Ch2 id=\"toc\">TOC\u003C/h2>\n\u003Cul>\n\u003Cli>\u003Ca href=\"#%E9%87%8D%E8%A6%81%E8%8C%83%E5%BC%8F\">重要范式\u003C/a>\n\u003Cul>\n\u003Cli>\u003Ca href=\"#%E7%BC%96%E7%A8%8B%E8%8C%83%E5%BC%8F\">编程范式\u003C/a>\n\u003Cul>\n\u003Cli>\u003Ca href=\"#%E5%91%BD%E4%BB%A4%E5%BC%8F%E7%BC%96%E7%A8%8B\">命令式编程\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#%E7%BB%93%E6%9E%84%E5%8C%96%E7%BC%96%E7%A8%8B\">结构化编程\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#%E5%A3%B0%E6%98%8E%E5%BC%8F%E7%BC%96%E7%A8%8B\">声明式编程\u003C/a>\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\u003Ca href=\"#%E5%AF%B9%E8%B1%A1%E8%8C%83%E5%BC%8Foop\">对象范式（OOP）\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#%E5%B9%B6%E5%8F%91%E8%8C%83%E5%BC%8F%E5%90%88%E4%BD%9C%E4%B8%8E%E7%AB%9E%E4%BA%89\">并发范式（合作与竞争）\u003C/a>\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\u003Ca href=\"#%E5%B8%B8%E7%94%A8%E8%8C%83%E5%BC%8F\">常用范式\u003C/a>\n\u003Cul>\n\u003Cli>\u003Ca href=\"#%E6%B3%9B%E5%9E%8B%E8%8C%83%E5%BC%8F-generic-programming\">泛型范式 Generic Programming\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#%E5%85%83%E7%BC%96%E7%A8%8B-meta-programming\">元编程 Meta Programming\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#%E5%88%87%E9%9D%A2%E8%8C%83%E5%BC%8Faop\">切面范式（AOP）\u003C/a>\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\u003Ca href=\"#oop\">OOP\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#%E7%AC%94%E8%AE%B0\">笔记\u003C/a>\n\u003Cul>\n\u003Cli>\u003Ca href=\"#%E7%AC%AC1%E8%AF%BE-%E5%BC%80%E7%8F%AD%E5%AF%BC%E8%A8%80\">第1课 开班导言\u003C/a>\n\u003Cul>\n\u003Cli>\u003Ca href=\"#12-%E9%A6%96%E8%BD%AE%E6%8F%90%E9%97%AE%E4%BB%80%E4%B9%88%E8%AF%AD%E8%A8%80%E5%A5%BD\">1.2 首轮提问——什么语言好？\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#13-%E8%AF%AD%E8%A8%80%E9%80%89%E6%8B%A9%E5%90%88%E9%80%82%E7%9A%84%E5%B0%B1%E6%98%AF%E5%A5%BD%E7%9A%84\">1.3 语言选择——合适的就是好的\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#14-%E5%88%9D%E8%AF%86%E8%8C%83%E5%BC%8F%E7%A8%8B%E5%BA%8F%E7%8E%8B%E5%9B%BD%E4%B8%AD%E7%9A%84%E4%B8%96%E7%95%8C%E8%A7%82%E4%B8%8E%E6%96%B9%E6%B3%95%E8%AE%BA\">1.4 初识范式——程序王国中的世界观与方法论\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#15-%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF%E5%AE%9E%E7%94%A8%E8%BF%98%E6%98%AF%E6%97%B6%E9%AB%A6\">1.5 开发技术——实用还是时髦？\u003C/a>\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\u003Ca href=\"#%E7%AC%AC2%E8%AF%BE-%E9%87%8D%E8%A6%81%E8%8C%83%E5%BC%8F\">第2课 重要范式\u003C/a>\n\u003Cul>\n\u003Cli>\u003Ca href=\"#22-%E5%A3%B0%E6%98%8E%E8%8C%83%E5%BC%8F%E7%9B%AE%E6%A0%87%E5%86%B3%E5%AE%9A%E8%A1%8C%E5%8A%A8\">2.2 声明范式——目标决定行动\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#23-%E5%AF%B9%E8%B1%A1%E8%8C%83%E5%BC%8F%E6%B0%91%E4%B8%BB%E5%88%B6%E7%A4%BE%E4%BC%9A%E7%9A%84%E7%BC%96%E7%A8%8B%E6%B3%95%E5%88%99\">2.3 对象范式——民主制社会的编程法则\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#24-%E5%B9%B6%E5%8F%91%E8%8C%83%E5%BC%8F%E5%90%88%E4%BD%9C%E4%B8%8E%E7%AB%9E%E4%BA%89\">2.4 并发范式——合作与竞争\u003C/a>\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\u003Ca href=\"#%E7%AC%AC3%E8%AF%BE-%E5%B8%B8%E7%94%A8%E8%8C%83%E5%BC%8F\">第3课 常用范式\u003C/a>\n\u003Cul>\n\u003Cli>\u003Ca href=\"#32-%E8%B6%85%E7%BA%A7%E8%8C%83%E5%BC%8F%E6%8F%90%E5%8D%87%E8%AF%AD%E8%A8%80%E7%9A%84%E7%BA%A7%E5%88%AB\">3.2 超级范式——提升语言的级别\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#33-%E5%88%87%E9%9D%A2%E8%8C%83%E5%BC%8F%E5%A4%9A%E8%A7%92%E5%BA%A6%E7%9C%8B%E9%97%AE%E9%A2%98\">3.3 切面范式——多角度看问题\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#34-%E4%BA%8B%E4%BB%B6%E9%A9%B1%E5%8A%A8%E6%9C%89%E4%BA%8B%E6%88%91%E5%8F%AB%E4%BD%A0%E6%B2%A1%E4%BA%8B%E5%88%AB%E7%83%A6%E6%88%91\">3.4 事件驱动——有事我叫你，没事别烦我\u003C/a>\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\u003Ca href=\"#%E7%AC%AC4%E8%AF%BE-%E9%87%8D%E6%B8%A9%E8%8C%83%E5%BC%8F\">第4课 重温范式\u003C/a>\n\u003Cul>\n\u003Cli>\u003Ca href=\"#42-%E9%80%BB%E8%BE%91%E8%8C%83%E5%BC%8F%E5%BD%93%E7%AE%97%E6%B3%95%E5%A4%B1%E5%8E%BB%E4%BA%86%E6%8E%A7%E5%88%B6\">4.2 逻辑范式——当算法失去了控制\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#43-%E6%B1%87%E6%80%BB%E8%8C%83%E5%BC%8F%E4%B8%80%E5%BC%A0%E4%BA%94%E5%91%B3%E4%BF%B1%E5%85%A8%E7%9A%84%E5%A4%A7%E7%83%99%E9%A5%BC\">4.3 汇总范式——一张五味俱全的大烙饼\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#44-%E6%83%85%E6%99%AF%E8%8C%83%E5%BC%8F%E9%A4%90%E9%A6%86%E9%87%8C%E7%9A%84%E7%BC%96%E7%A8%8B%E8%8C%83%E5%BC%8F\">4.4 情景范式——餐馆里的编程范式\u003C/a>\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\u003Ca href=\"#%E7%AC%AC5%E8%AF%BE-%E8%AF%AD%E8%A8%80%E5%B0%8F%E8%B0%88\">第5课 语言小谈\u003C/a>\n\u003Cul>\n\u003Cli>\u003Ca href=\"#52-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E8%A7%84%E5%88%99%E4%B8%8E%E5%8F%98%E9%80%9A\">5.2 数据类型——规则与变通\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#53-%E5%8A%A8%E6%80%81%E8%AF%AD%E8%A8%80%E6%8A%AB%E7%9D%80%E5%BD%A9%E8%A1%A3%E9%A3%9E%E8%88%9E%E7%9A%84%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%80\">5.3 动态语言——披着彩衣飞舞的脚本语言\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#54-%E8%AF%AD%E8%A8%80%E8%AF%AF%E5%8C%BA%E8%AF%AD%E8%A8%80%E7%9A%84%E5%AE%97%E6%95%99%E6%83%85%E7%BB%93\">5.4 语言误区——语言的宗教情结\u003C/a>\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\u003Ca href=\"#%E7%AC%AC6%E8%AF%BE-%E8%AF%AD%E8%A8%80%E7%AE%80%E8%AF%84\">第6课 语言简评\u003C/a>\n\u003Cul>\n\u003Cli>\u003Ca href=\"#63-%E5%89%8D%E5%8F%B0%E8%AF%AD%E8%A8%80%E8%A7%86%E8%A7%89%E4%B8%8E%E4%BA%A4%E4%BA%92%E7%9A%84%E8%89%BA%E6%9C%AF\">6.3 前台语言——视觉与交互的艺术\u003C/a>\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"重要范式\">重要范式\u003C/h2>\n\u003Cblockquote class=\"callout-info\" data-callout=\"info\" data-expandable=\"false\" data-expanded=\"false\">\n\n                \u003Cdiv class=\"callout-title\">\n                  \u003Cdiv class=\"callout-title-icon\">\u003Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\u003Ccircle cx=\"12\" cy=\"12\" r=\"10\">\u003C/circle>\u003Cline x1=\"12\" y1=\"16\" x2=\"12\" y2=\"12\">\u003C/line>\u003Cline x1=\"12\" y1=\"8\" x2=\"12.01\" y2=\"8\">\u003C/line>\u003C/svg>\u003C/div>\n                  \u003Cdiv class=\"callout-title-text\">🍭\u003C/div>\n                \u003C/div>\n                \n              \n\u003C/blockquote>\n\u003Cblockquote>\n\u003Cp>从理论上而言，完全可以有非命令式的机器语言存在，前提是计算机采用了特殊的硬件实现，比如非冯·诺伊曼结构的数据流机 (\u003Ccode>dataflow machine\u003C/code>)和归约机(\u003Ccode>reduction machine\u003C/code>)。但这类计算机并未流行于市，相应的机器语言自然罕见了:\u003C/p>\n\u003C/blockquote>\n\u003Ch3 id=\"编程范式\">编程范式\u003C/h3>\n\u003Ch4 id=\"命令式编程\">命令式编程\u003C/h4>\n\u003Cblockquote>\n\u003Cp>命令式编程(\u003Ccode>imperative programming\u003C/code>)。用命令式编写的 程序由命令序列组成，即一系列祈使句:‘先做这，再做那’，强调‘怎么 做’。更学术点说，命令式编程是电脑——准确地讲，是冯·诺伊曼机 (\u003Ccode>von Neumann machine\u003C/code>)——运行机制的抽象，即依序从内存中获取指 令和数据，然后去执行。从范式的角度看，其世界观是\u003C/p>\u003Cdiv>\u003C/div> 干行动指令组成的有序列表。其方法论是\u003Cdiv>\u003C/div>，用语 句来执行指令。\u003Cp>\u003C/p>\n\u003C/blockquote>\n\u003Cp>命令式编程是行动导向的，因而算法是显性而结果是隐性的；声明式编程是目标驱动的，因而目标是显性而算法是隐性的\u003C/p>\n\u003Ch4 id=\"结构化编程\">结构化编程\u003C/h4>\n\u003Cblockquote>\n\u003Cp>结构化编程(\u003Ccode>structured programming\u003C/code>或简称SP)，它是在过程 式编程的基础上发展起来的。其本质是一种编程原则，提倡代码应具有 清晰的逻辑结构，以保证程序易于读写、测试、维护和优化。\u003C/p>\n\u003C/blockquote>\n\u003Cp>典型语言：\u003Ccode>Pascal\u003C/code>\u003C/p>\n\u003Ch4 id=\"声明式编程\">声明式编程\u003C/h4>\n\u003Cp>主要包括函数式编程和逻辑式编程。\u003C/p>\n\u003Cblockquote class=\"callout-info\" data-callout=\"info\" data-expandable=\"false\" data-expanded=\"false\">\n\n                \u003Cdiv class=\"callout-title\">\n                  \u003Cdiv class=\"callout-title-icon\">\u003Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\u003Ccircle cx=\"12\" cy=\"12\" r=\"10\">\u003C/circle>\u003Cline x1=\"12\" y1=\"16\" x2=\"12\" y2=\"12\">\u003C/line>\u003Cline x1=\"12\" y1=\"8\" x2=\"12.01\" y2=\"8\">\u003C/line>\u003C/svg>\u003C/div>\n                  \n                \u003C/div>\n                \n              \n\u003C/blockquote>\n\u003Cblockquote>\n\u003Cp>函数式编程：将计算描述为数学函数的求值 逻辑式编程：通过提供一系列事实和规则来推导和论证结论\u003C/p>\n\u003C/blockquote>\n\u003Cp>函数式语言典型语言：Lisp、Haskll、Scheme\u003C/p>\n\u003Cp>逻辑式语言典型语言：Prolog\u003C/p>\n\u003Cp>使用不同编程范式实现阶乘运算\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"c\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"c\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">int\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> factorial\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#F47067\">int\u003C/span>\u003Cspan style=\"color:#F69D50\"> n\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">int\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> f \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> 1\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">for\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (; n \u003C/span>\u003Cspan style=\"color:#F47067\">>\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> 1\u003C/span>\u003Cspan style=\"color:#ADBAC7\">; \u003C/span>\u003Cspan style=\"color:#F47067\">--\u003C/span>\u003Cspan style=\"color:#ADBAC7\">n) f \u003C/span>\u003Cspan style=\"color:#F47067\">*=\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> n;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">return\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> f;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">}\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"lisp\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"lisp\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">defun\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> factorial\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(n) (\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">if (\u003C/span>\u003Cspan style=\"color:#6CB6FF\">=\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> n \u003C/span>\u003Cspan style=\"color:#6CB6FF\">0\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) \u003C/span>\u003Cspan style=\"color:#6CB6FF\">1\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#6CB6FF\">*\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> n (factorial(\u003C/span>\u003Cspan style=\"color:#6CB6FF\">-\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> n \u003C/span>\u003Cspan style=\"color:#6CB6FF\">1\u003C/span>\u003Cspan style=\"color:#ADBAC7\">)))\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">)\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"prolog\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"prolog\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">factorial\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#6CB6FF\">0\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, \u003C/span>\u003Cspan style=\"color:#6CB6FF\">1\u003C/span>\u003Cspan style=\"color:#ADBAC7\">)\u003C/span>\u003Cspan style=\"color:#F47067\">.\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">factorial\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#F69D50\">N\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, \u003C/span>\u003Cspan style=\"color:#F69D50\">F\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) \u003C/span>\u003Cspan style=\"color:#F47067\">:-\u003C/span>\u003Cspan style=\"color:#F69D50\"> M\u003C/span>\u003Cspan style=\"color:#F47067\"> is \u003C/span>\u003Cspan style=\"color:#F69D50\">N\u003C/span>\u003Cspan style=\"color:#F47067\">-\u003C/span>\u003Cspan style=\"color:#6CB6FF\">1\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, factorial(\u003C/span>\u003Cspan style=\"color:#F69D50\">M\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, \u003C/span>\u003Cspan style=\"color:#F69D50\">Fm\u003C/span>\u003Cspan style=\"color:#ADBAC7\">), \u003C/span>\u003Cspan style=\"color:#F69D50\">F\u003C/span>\u003Cspan style=\"color:#F47067\"> is \u003C/span>\u003Cspan style=\"color:#F69D50\">N\u003C/span>\u003Cspan style=\"color:#F47067\"> *\u003C/span>\u003Cspan style=\"color:#F69D50\"> Fm\u003C/span>\u003Cspan style=\"color:#F47067\">.\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Cp>不同：C明确给出了阶乘的迭代算法，而Lisp仅描述了阶乘的递归定义，Prolog则陈述了两个关于阶乘的断言\u003C/p>\n\u003Cblockquote class=\"callout-summary\" data-callout=\"summary\" data-expandable=\"false\" data-expanded=\"false\">\n\n                \u003Cdiv class=\"callout-title\">\n                  \u003Cdiv class=\"callout-title-icon\">\u003Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\u003Crect x=\"8\" y=\"2\" width=\"8\" height=\"4\" rx=\"1\" ry=\"1\">\u003C/rect>\u003Cpath d=\"M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2\">\u003C/path>\u003Cpath d=\"M12 11h4\">\u003C/path>\u003Cpath d=\"M12 16h4\">\u003C/path>\u003Cpath d=\"M8 11h.01\">\u003C/path>\u003Cpath d=\"M8 16h.01\">\u003C/path>\u003C/svg>\u003C/div>\n                  \n                \u003C/div>\n                \n              \n\u003C/blockquote>\n\u003Cblockquote>\n\u003Cp>声明式编程让我们重回数学思维； 函数式编程类似代数中的表达式变换和计算； 逻辑式编程则类似数理推理逻辑，其中的变量也如数学中一样，是抽象符号而非内存地址。因此，没有赋值运算，不会产生变量被改写的副作用（side effect），也不存在内存分配和释放的问题。\u003C/p>\n\u003C/blockquote>\n\u003Cp>迭代和递归的区别：\u003C/p>\n\u003Col>\n\u003Cli>迭代比递归更符合命令式的思维模式，因前者贴近机器语言而后者贴近数学语言\u003C/li>\n\u003Cli>除了尾递归（\u003Ccode>tail recursion\u003C/code>）外，一般递归比迭代开销大\u003C/li>\n\u003Cli>声明式语言提倡递归而不支持迭代\u003C/li>\n\u003Cli>就语法而言，它不允许迭代中的循环变量\u003C/li>\n\u003Cli>就视角而言，迭代着眼于微观过程而递归着眼于宏观过程\u003C/li>\n\u003C/ol>\n\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/fw6/assets/main/toy_docs/20230719123214.png\" alt=\"image.png\">\u003C/p>\n\u003Cp>| 范式 | 程序 | 输入 | 输出 | 程序设计 | 程序运行 |\u003C/p>\n\u003Cp>| ------ | -------- | -------- | -------- | -------- | ---------- |\u003C/p>\n\u003Cp>| 命令式 | 自动机 | 初始状态 | 最终状态 | 设计指令 | 命令执行 |\u003C/p>\n\u003Cp>| 函数式 | 数学函数 | 自变量 | 因变量 | 设计函数 | 表达式转换 |\u003C/p>\n\u003Cp>| 逻辑式 | 逻辑证明 | 题设 | 结论 | 设计命题 | 逻辑推理 |\u003C/p>\n\u003Ch3 id=\"对象范式oop\">对象范式（OOP）\u003C/h3>\n\u003Cp>函数是被动的实体，对象是主动的实体\u003C/p>\n\u003Cp>过程式程序的世界是君主制的；OO程序是民主制的\u003C/p>\n\u003Cp>封装使得公民拥有个体身份；继承使得公民拥有家庭身份；多态使得公民拥有社会身份\u003C/p>\n\u003Cp>函数式、命令式、逻辑式互相平行，而OOP与他们正交\u003C/p>\n\u003Cp>与其说OOP更具重用性，倒不如说更具易用性\u003C/p>\n\u003Cblockquote class=\"callout-tip\" data-callout=\"tip\" data-expandable=\"false\" data-expanded=\"false\">\n\n                \u003Cdiv class=\"callout-title\">\n                  \u003Cdiv class=\"callout-title-icon\">\u003Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\u003Cpath d=\"M8.5 14.5A2.5 2.5 0 0 0 11 12c0-1.38-.5-2-1-3-1.072-2.143-.224-4.054 2-6 .5 2.5 2 4.9 4 6.5 2 1.6 3 3.5 3 5.5a7 7 0 1 1-14 0c0-1.153.433-2.294 1-3a2.5 2.5 0 0 0 2.5 2.5z\">\u003C/path>\u003C/svg>\u003C/div>\n                  \n                \u003C/div>\n                \n              \n\u003C/blockquote>\n\u003Cblockquote>\n\u003Cp>对一个没有独立思考习惯的人来讲，与其说他认同一个理论，不如说他认同该理论倡导者的权威，而在他仰视权威的同时，也把自己的思想交托给了权威。\u003C/p>\n\u003C/blockquote>\n\u003Ch3 id=\"并发范式合作与竞争\">并发范式（合作与竞争）\u003C/h3>\n\u003Cp>并发式编程以进程为导向，以任务为中心将系统模块化\u003C/p>\n\u003Cp>并发式编程以资源共享与竞争为主线\u003C/p>\n\u003Cp>程序设计将围绕进程的划分与调度、进程之间的通信与同步来展开\u003C/p>\n\u003Ch2 id=\"常用范式\">常用范式\u003C/h2>\n\u003Ch3 id=\"泛型范式-generic-programming\">泛型范式 Generic Programming\u003C/h3>\n\u003Cp>泛型编程是算法导向的，即以算法为起点和中心点，逐渐将所涉及的概念内涵模糊化、外延扩大化，将所涉及的运算抽象化、一般化，从而扩展算法的适用范围\u003C/p>\n\u003Cp>STL有3要素: 算法、容器和和迭代器。算法是一系列可行的步骤；容器是数据的集合，是抽象化的数组；迭代器是算法与容器之间的接口，是抽象化的指针。算法串联数据，数据实化算法。\u003C/p>\n\u003Cp>泛型编程不仅能泛化算法中涉及的概念(数据类型)，还能泛 化行为(函数、方法、运算)。\u003C/p>\n\u003Cp>对指定集合中满足指定条件的元素进行指定处理。\u003C/p>\n\u003Cp>通过模板，泛化了容器———可以是数组、列表、集合、映射、队列、栈、字符串等等；泛化了元素——可以是任何数据类型，泛化了处理方法和限定条件——可以是任何函数。\u003C/p>\n\u003Cp>这里的处理方法和限定条件不限于函数，还可以是函子（\u003Ccode>functor\u003C/code>）——自带状态的函数对象；另外，迭代器也被泛化了——可以从前往后移动，，可以来回移动，可以随机移动，可以按任意预定义的规律移动。\u003C/p>\n\u003Cp>泛型编程是算法导向的，以算法为中心，逐渐将其所涉及的概 念内涵模糊化、外延扩大化，并将其所涉及的运算抽象化、一般化，从 而提高算法的可重用性。\u003C/p>\n\u003Ch3 id=\"元编程-meta-programming\">元编程 Meta Programming\u003C/h3>\n\u003Cp>元编程：关于程序的程序，或者说是编写、操纵程序的程序\u003C/p>\n\u003Cp>元程序将程序作为数据来对待，能自我发现、自我赋权和自我升级，有着其他程序所不具备的自觉性、自适应性和智能性，可以说是一种最高级的程序。\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"c++\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"c++\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">// 元编程\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">template\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> &#x3C;\u003C/span>\u003Cspan style=\"color:#F47067\">int\u003C/span>\u003Cspan style=\"color:#F69D50\"> N\u003C/span>\u003Cspan style=\"color:#ADBAC7\">>\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">struct\u003C/span>\u003Cspan style=\"color:#F69D50\"> factorial\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">enum\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> { value: N * factorial&#x3C;N - 1>::\u003C/span>\u003Cspan style=\"color:#6CB6FF\">value\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> };\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">};\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">template\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> &#x3C;>\u003C/span>\u003Cspan style=\"color:#768390\"> // 特化（speicialization）\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">struct\u003C/span>\u003Cspan style=\"color:#F69D50\"> factorial\u003C/span>\u003Cspan style=\"color:#ADBAC7\">&#x3C;\u003C/span>\u003Cspan style=\"color:#6CB6FF\">0\u003C/span>\u003Cspan style=\"color:#ADBAC7\">> {\u003C/span>\u003Cspan style=\"color:#768390\"> // 递归中止\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">enum\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> { \u003C/span>\u003Cspan style=\"color:#6CB6FF\">value\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> 1\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> };\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">};\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">void\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> main\u003C/span>\u003Cspan style=\"color:#ADBAC7\">() {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">// 以下等价于 cout &#x3C;&#x3C; 120 &#x3C;&#x3C; end1;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">cout \u003C/span>\u003Cspan style=\"color:#F47067\">&#x3C;&#x3C;\u003C/span>\u003Cspan style=\"color:#F69D50\"> factorial\u003C/span>\u003Cspan style=\"color:#ADBAC7\">&#x3C;\u003C/span>\u003Cspan style=\"color:#6CB6FF\">5\u003C/span>\u003Cspan style=\"color:#ADBAC7\">>::value \u003C/span>\u003Cspan style=\"color:#F47067\">&#x3C;&#x3C;\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> end1;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">}\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Cp>\u003Ccode>Lex\u003C/code> \u003Ccode>Yacc\u003C/code> \u003Ccode>ANTLR\u003C/code>\u003C/p>\n\u003Cp>编译器本身就是元编程的典型范例———把高级语言转化为汇编语言或机器语言的程序，不就是能写程序的程序吗？\u003C/p>\n\u003Cblockquote class=\"callout-info\" data-callout=\"info\" data-expandable=\"false\" data-expanded=\"false\">\n\n                \u003Cdiv class=\"callout-title\">\n                  \u003Cdiv class=\"callout-title-icon\">\u003Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\u003Ccircle cx=\"12\" cy=\"12\" r=\"10\">\u003C/circle>\u003Cline x1=\"12\" y1=\"16\" x2=\"12\" y2=\"12\">\u003C/line>\u003Cline x1=\"12\" y1=\"8\" x2=\"12.01\" y2=\"8\">\u003C/line>\u003C/svg>\u003C/div>\n                  \n                \u003C/div>\n                \n              \n\u003C/blockquote>\n\u003Cblockquote>\n\u003Cp>\u003Cspan role=\"img\" aria-label=\"desktop computer\">🖥️\u003C/span> 语言导向式编程（Language-Oriented Programming，简称\u003Ccode>LOP\u003C/code>）\u003C/p>\n\u003C/blockquote>\n\u003Cp>产生式编程与静态元编程都能自动生成源代码。产生式编程强调代码的生成，元编程强调生成代码的可执行性。此外，动态元编程并不生成源代码，但能在运行期间修改程序。\u003C/p>\n\u003Ch3 id=\"切面范式aop\">切面范式（AOP）\u003C/h3>\n\u003Cp>从宏观角度看，太阳底下没有新鲜事——AOP无非是SoC原理和DRY原则的一种应用； 从微观角度看，太阳每天都是新的——AOP虽自OOP的土壤中长出，却脱离藩篱自成一体。\u003C/p>\n\u003Cp>OOP 只能沿着继承树的纵向方向重用，AOP就是在管道上钻一些孔，在每个孔中注入新的代码流\u003C/p>\n\u003Cblockquote class=\"callout-quote\" data-callout=\"quote\" data-expandable=\"false\" data-expanded=\"false\">\n\n                \u003Cdiv class=\"callout-title\">\n                  \u003Cdiv class=\"callout-title-icon\">\u003Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\u003Cpath d=\"M3 21c3 0 7-1 7-8V5c0-1.25-.756-2.017-2-2H4c-1.25 0-2 .75-2 1.972V11c0 1.25.75 2 2 2 1 0 1 0 1 1v1c0 1-1 2-2 2s-1 .008-1 1.031V20c0 1 0 1 1 1z\">\u003C/path>\u003Cpath d=\"M15 21c3 0 7-1 7-8V5c0-1.25-.757-2.017-2-2h-4c-1.25 0-2 .75-2 1.972V11c0 1.25.75 2 2 2h.75c0 2.25.25 4-2.75 4v3c0 1 0 1 1 1z\">\u003C/path>\u003C/svg>\u003C/div>\n                  \n                \u003C/div>\n                \n              \n\u003C/blockquote>\n\u003Cblockquote>\n\u003Cp>SoC：Separation of Concerns。即关注点分离\u003C/p>\n\u003C/blockquote>\n\u003Cp>抽象与分解的原则：单一化、正交化。每个模块职责明确专一；模块之间相互独立，即高内聚低耦合（high cohesion &#x26; low coupling）。此原则相当普适，是分析复杂事物的一种基本方法，在数学和物理中应用尤为广泛，如质因式分解、正交分解、谱分解等等。\u003C/p>\n\u003Ch2 id=\"oop\">OOP\u003C/h2>\n\u003Cblockquote>\n\u003Cp>A script is what you give the actors, a program is what you give the audience\u003C/p>\n\u003C/blockquote>\n\u003Cblockquote>\n\u003Cp>脚本是给演员看的，节目是给观众看的。\u003C/p>\n\u003C/blockquote>\n\u003Cblockquote class=\"callout-quote\" data-callout=\"quote\" data-expandable=\"false\" data-expanded=\"false\">\n\n                \u003Cdiv class=\"callout-title\">\n                  \u003Cdiv class=\"callout-title-icon\">\u003Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\u003Cpath d=\"M3 21c3 0 7-1 7-8V5c0-1.25-.756-2.017-2-2H4c-1.25 0-2 .75-2 1.972V11c0 1.25.75 2 2 2 1 0 1 0 1 1v1c0 1-1 2-2 2s-1 .008-1 1.031V20c0 1 0 1 1 1z\">\u003C/path>\u003Cpath d=\"M15 21c3 0 7-1 7-8V5c0-1.25-.757-2.017-2-2h-4c-1.25 0-2 .75-2 1.972V11c0 1.25.75 2 2 2h.75c0 2.25.25 4-2.75 4v3c0 1 0 1 1 1z\">\u003C/path>\u003C/svg>\u003C/div>\n                  \n                \u003C/div>\n                \n              \n\u003C/blockquote>\n\u003Cblockquote>\n\u003Cp>理想的架构师应当如文学大师，既有恢弘大气的 构思，又有细腻深刻的笔法;应当如统军大帅，既有运筹帷幄的韬略， 又有冲锋陷阵的武功。那些在语言与低级之间、设计与高级之间毫不犹 豫地划等号的人，多半高不成低不就，既不懂语言，也不懂设计。:\u003C/p>\n\u003C/blockquote>\n\u003Cp>RAII（Resource Acquisition Is Initialization）: 资源获取即初始化，准确称为RRIF（Resource Release Is Finalization，资源释放即终结化） 将资源的取放于某一生命周期绑定，初始化对象时获取资源，终结化时释放资源，用户不再直接管理资源，只需控制相应的对象即可。\u003C/p>\n\u003Cp>DTO（Data Transfer Object或DTO）：数据传输对象，不含业务逻辑，仅作为简单数据容器，实际上也属于具体数据类型\u003C/p>\n\u003Cblockquote>\n\u003Cp>Programming to an interface, not an Implementation\u003C/p>\n\u003C/blockquote>\n\u003Cblockquote>\n\u003Cp>通过接口而非实现来编程\u003C/p>\n\u003C/blockquote>\n\u003Cp>抽象：将一类模型最本质最不易变化的部分提炼出来\u003C/p>\n\u003Cp>封装：将信息隐藏，即是将非本质、容易变化的部分隐藏起来，从而将一个类划分为阴阳两面\u003C/p>\n\u003Cp>OCP（Open/Close Principle）: 开闭原则，对扩展开放，对修改封闭\u003C/p>\n\u003Ch2 id=\"笔记\">笔记\u003C/h2>\n\u003Ch3 id=\"第1课-开班导言\">第1课 开班导言\u003C/h3>\n\u003Cp>对于一个软件开发者来说，这意味着4个阶段：学会（知其所然）——掌握一些具体编程知识的初级程序员。会学（知所以然）——能快速而深刻地理解技术并举一反三的程序员。会用（人为我用）——能将所学灵活运用到实际编程设计之中的高级程序员。被用（我为人用）——能设计出广为人用的应用程序（application）、库（library）、工具包（toolkit）、框架（framework）等的系统分析师和\u003C/p>\n\u003Cp>架构师。至于被用的更高层次，如发明出主流的设计模式、算法、语言，乃至理论等，则可称得上计算机专家了\u003C/p>\n\u003Cp>如果知识是水，我们要挖掘最先涌动的泉眼；如果知识是火，我们要捕捉起初点燃的火花。如果知识是树，其树大根深，不究立固之本则无以知过去；其枝繁叶茂，不握支撑之干则无以知当下；其蓬勃旺盛，不察生长之点则无以知将来。这里的问题不一定是预设的，结论不一定是终极的，甚至不一定是正确的，但一定是有的放矢、发人深思的。由此决定了这里的学习方式将是开放多元、双向互动的。\u003C/p>\n\u003Ch4 id=\"12-首轮提问什么语言好\">1.2 首轮提问——什么语言好？\u003C/h4>\n\u003Cp>一个优秀的程序员，除了要迅速掌握知识、善于领悟思想外，还必须具备务实与研究精神、独立与合作精神、批判与自省精神\u003C/p>\n\u003Ch4 id=\"13-语言选择合适的就是好的\">1.3 语言选择——合适的就是好的\u003C/h4>\n\u003Cp>所以好的语言就是适合编程者和解决对象的语言\u003C/p>\n\u003Cp>高级语言好比长兵器，威力强大却难免滞重，长于大型应用，可谓‘一寸长，一寸强’；低级语言好比短兵器，轻便灵活却难免风险，长于底层应用，可谓‘一寸短，一寸险’。\u003C/p>\n\u003Ch4 id=\"14-初识范式程序王国中的世界观与方法论\">1.4 初识范式——程序王国中的世界观与方法论\u003C/h4>\n\u003Cp>评判语言优劣，不能离开使用语言的主体和对象。好的语言就是适合编程者和解决对象的语言\u003C/p>\n\u003Cp>计算机语言按其发展历程分为5代，依次为：机器语言、汇编语言、高级语言、面向问题语言和人工智能语言\u003C/p>\n\u003Cp>编程是为了解决问题，而解决问题可以有多种视角和思路，其中普适且行之有效的模式被归结为范式\u003C/p>\n\u003Cp>由于着眼点和思维方式的不同，相应的范式自然各有侧重和倾向，因此一些范式常用‘oriented’来描\u003C/p>\n\u003Cp>“按梦中情人的标准去找对象，具体目标未定但选择倾向已定，这就是一种导向，而且是对象导向。找到之后再约会，不就面向对象了吗？\u003C/p>\n\u003Cp>每种范式都引导人们带着其特有的倾向和思路去分析和解决问题\u003C/p>\n\u003Ch4 id=\"15-开发技术实用还是时髦\">1.5 开发技术——实用还是时髦？\u003C/h4>\n\u003Cp>Object-Oriented多译作“面向对象”，但不如“对象导向”贴切\u003C/p>\n\u003Cp>如果把一门编程语言比作兵器，它的语法、工具和技巧等是招法，它采用的编程范式则是心法\u003C/p>\n\u003Cp>范式的世界观体现在语言的核心概念之中，范式的方法论体现在语言的表达机制中\u003C/p>\n\u003Cp>库和工具包是为程序员带来自由的，框架是为程序员带来约束的\u003C/p>\n\u003Cp>设计模式是软件的战术思想，架构是软件的战略决策。\u003C/p>\n\u003Cp>软件构筑了一个可重用的设计。与库和工具包不同之处在于前者侧重设计重用而后两者侧重代码重用\u003C/p>\n\u003Cp>库和工具包是为程序员带来自由的，框架是为程序员带来约束的\u003C/p>\n\u003Cp>至于架构，一般指一个软件系统的最高层次的整体结构和规划，一个架构可能包含多个框架，而一个框架可能包含多个设计模式\u003C/p>\n\u003Ch3 id=\"第2课-重要范式\">第2课 重要范式\u003C/h3>\n\u003Cp>从范式的角度看，其世界观是：程序是由若干行动指令组成的有序列表。其方法论是：用变量来存储数据，用语句来执行指令。\u003C/p>\n\u003Ch4 id=\"22-声明范式目标决定行动\">2.2 声明范式——目标决定行动\u003C/h4>\n\u003Cp>转化为指定的输出\u003C/p>\n\u003Cp>命令式编程是行动导向（Action-Oriented）的，因而算法是显性而目标是隐性的；声明式编程是目标驱动（Goal-Driven）的，因而目标是显性而算法是隐性的\u003C/p>\n\u003Cp>一则迭代比递归更符合命令式的思维模式，因为前者贴近机器语言而后者贴近数学语言；二则除尾递归（tail recursion）[10]外，一般递归比迭代的开销（overhead）大。相反，声明式语言提倡递归而不支持迭代[11]。就语法而言，它不允许迭代中的循环变量；就视角而言，\u003C/p>\n\u003Cp>迭代着眼微观过程而递归着眼宏观规律\u003C/p>\n\u003Cp>命令式把程序看作一个自动机，输入是初始状态，输出是最终状态，编程就是设计一系列指令，通过自动机执行以完成状态转变；函数式把程序看作一个数学函数，输入是自变量，输出是因变量，编程就是设计一系列函数，通过表达式变换以完成计算；逻辑式把程序看作一个逻辑证明，输入是题设，输出是结论，编程就是设计一系列命题，通过逻辑推理以完成证明\u003C/p>\n\u003Cp>声明式编程专注问题的分析和表达而不是算法实现，不用指明执行顺序，一般没有或极少有副作用，也不存在内存管理问题。这些都大大降低了编程的复杂度，同时也非常适合于并发式计算\u003C/p>\n\u003Ch4 id=\"23-对象范式民主制社会的编程法则\">2.3 对象范式——民主制社会的编程法则\u003C/h4>\n\u003Cp>：自动机机制，通过设计指令完成从初始态到最终态的转变。函数式：数学变换机制，通过设计函数完成从自变量到因变量的计算。逻辑式：逻辑证明机制，通过逻辑推理完成从题设到结论的证明。\u003C/p>\n\u003Cp>函数是被动的实体，对象是主动的实体\u003C/p>\n\u003Cp>封装使得公民拥有个体身份，继承使得公民拥有家庭身份，多态使得公民拥有社会身份。\u003C/p>\n\u003Cp>实软件设计最重要的并不是编程语言，甚至也不是编程范式，而是抽象思维\u003C/p>\n\u003Cp>以数据为中心组织逻辑，将系统视为相互作用的对象集合，并利用继承与多态来增强可维护性、可扩展性和可重用性\u003C/p>\n\u003Ch4 id=\"24-并发范式合作与竞争\">2.4 并发范式——合作与竞争\u003C/h4>\n\u003Cp>并发式编程以进程为导向、以任务为中心将系统模块化\u003C/p>\n\u003Cp>并发式编程以资源共享与竞争为主线\u003C/p>\n\u003Cp>尾递归是一种特殊的递归，其递归调用出现在函数的最后一步运算（尾部）\u003C/p>\n\u003Ch3 id=\"第3课-常用范式\">第3课 常用范式\u003C/h3>\n\u003Cp>“Generic Programming，简称GP，其基本思想是：将算法与其作用的数据结构分离，并将后者尽可能泛化，最大限度地实现算法重用\u003C/p>\n\u003Cp>STL有3要素：算法、容器和和迭代器。算法是一系列可行的步骤；容器是数据的集合，是抽象化的数组；迭代器是算法与容器之间的接口，是抽象化的指针。算法串联数据，数据实化算法\u003C/p>\n\u003Cp>泛型编程不仅能泛化算法中涉及的概念（数据类型），还能泛化行为（函数、方法、运算）\u003C/p>\n\u003Ch4 id=\"32-超级范式提升语言的级别\">3.2 超级范式——提升语言的级别\u003C/h4>\n\u003Cp>元编程（Metaprogramming），简称MP。此处的前缀‘meta-’常译作‘元’，其实就是‘超级’、‘行而上’的意思\u003C/p>\n\u003Cp>有了编译器的存在，汇编语言升级为第3代高级语言；同样借助Yacc、ANTLR之类的元编程工具，第3代语言可以升级为第4代的DSL语言。\u003C/p>\n\u003Cp>语言导向式编程[5]（Language-Oriented Programming，简称LOP）\u003C/p>\n\u003Cp>这种编程范式的思路是：在建立一套DSL体系之后，直接用它们来编写软件，尽量不用通用语言。\u003C/p>\n\u003Cp>如果说OOP的关键在于构造对象的概念，那么LOP的关键在于构造语言的语法\u003C/p>\n\u003Cp>—产生式编程（Generative Programming）[7]的范畴\u003C/p>\n\u003Cp>元编程有诸多应用：许多开发工具、框架引擎之类的基础软件都有自动生成源代码的功能；创造DSL以便更高效地处理专门领域的业务；自动生成重复代码；动态改变程序的语句、函数，类，等等\u003C/p>\n\u003Ch4 id=\"33-切面范式多角度看问题\">3.3 切面范式——多角度看问题\u003C/h4>\n\u003Cp>如果一个程序是一个管道系统，AOP就是在管道上钻一些孔，在每个孔中注入新的代码流\u003C/p>\n\u003Cp>抽象是前提，分解是方式，模块化是结果。\u003C/p>\n\u003Cp>在调用某些对象的方法、读写某些对象的域、抛出某些异常等前后需要用到统一的业务逻辑，诸如日志输出、代码跟踪、性能监控、异常处理、安全检查、事务管理，等等。为解决此类问题，AOP应运而生\u003C/p>\n\u003Cp>AOP实现的关键是将advice的代码嵌入到主体程序之中，术语称编织（weaving）\u003C/p>\n\u003Cp>编织可分两种：一种是静态编织，通过修改源码或字节码（bytecode）在编译期（compile-time）、后编译期（post-compile）或加载期（load-time）嵌入代码\u003C/p>\n\u003Cp>另一种是动态编织，通过代理（proxy）等技术在运行期（run-time）实现嵌入\u003C/p>\n\u003Cp>如果把一个复杂的系统看作复合色的白光，经过第1个三棱镜——关注分离器，系统被分解为不同的切面，如同不同的单色的彩光。这些切面经过第2个三棱镜——编织器，再度合成为原系统\u003C/p>\n\u003Cp>抽象与分解的原则是单一化和正交化，以保障软件系统符合“高内聚、低耦合”的要求\u003C/p>\n\u003Ch4 id=\"34-事件驱动有事我叫你没事别烦我\">3.4 事件驱动——有事我叫你，没事别烦我\u003C/h4>\n\u003Cp>接入点是附加行为——建议（advice）的执行点，切入点（pointcut）是指定的接入点（join point）集合，这些接入点共享一段插入代码。切入点与建议组成了切面（aspect），是模块化的横切关注点\u003C/p>\n\u003Cp>控制反转、依赖反转和依赖注射）的主题是控制与依赖，目的是解耦，方法是反转，而实现这一切的关键是抽象接口。\u003C/p>\n\u003Cp>回调”强调的是行为方式——低层反调高层，而“抽象接口”强调的是实现方式——正是由于接口具有抽象性，低层才能在调用它时无须虑及高层的具体细节，从而实现控制反转\u003C/p>\n\u003Cp>控制反转导致了事件驱动式编程的被动性\u003C/p>\n\u003Cp>事件驱动式还具有异步性的特征，这是由事件的不可预测性与随机性决定的。\u003C/p>\n\u003Cp>独立是异步的前提，耗时是异步的理由\u003C/p>\n\u003Cp>发行/订阅模式正是观察者模式的别名，一方面可看作简化或退化的事件驱动式，另一方面可看作事件驱动式的核心思想\u003C/p>\n\u003Cblockquote class=\"callout-quote\" data-callout=\"quote\" data-expandable=\"false\" data-expanded=\"false\">\n\n                \u003Cdiv class=\"callout-title\">\n                  \u003Cdiv class=\"callout-title-icon\">\u003Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\u003Cpath d=\"M3 21c3 0 7-1 7-8V5c0-1.25-.756-2.017-2-2H4c-1.25 0-2 .75-2 1.972V11c0 1.25.75 2 2 2 1 0 1 0 1 1v1c0 1-1 2-2 2s-1 .008-1 1.031V20c0 1 0 1 1 1z\">\u003C/path>\u003Cpath d=\"M15 21c3 0 7-1 7-8V5c0-1.25-.757-2.017-2-2h-4c-1.25 0-2 .75-2 1.972V11c0 1.25.75 2 2 2h.75c0 2.25.25 4-2.75 4v3c0 1 0 1 1 1z\">\u003C/path>\u003C/svg>\u003C/div>\n                  \n                \u003C/div>\n                \n              \n\u003C/blockquote>\n\u003Cblockquote>\n\u003Cp>什么是好莱坞原则？”“Don’t call us, we’ll call you.\u003C/p>\n\u003C/blockquote>\n\u003Cp>好莱坞经纪公司相当于一个背后运作的软件平台，艺人相当于一个callback，‘留下你的电话’就是注册callback，‘我们会打给你的’就是异步调用callback。\u003C/p>\n\u003Cp>别打电话给我们’意味着经纪公司处于主导地位，艺人们处于受控状态，这便是控制反转（Inversion of Control，简称IoC）。”\u003C/p>\n\u003Cp>“一般library中用到callback只是局部的控制反转，而framework将IoC机制用到全局\u003C/p>\n\u003Cp>程序员牺牲了对应用程序流程的主导权，换来的是更简洁的代码和更高的生产效率\u003C/p>\n\u003Cp>如果将编程譬比命题作文，不用framework的程序是一张可以自由写作的白纸，library是作文素材库；采用framework的程序是一篇成型的作文，作者只须填写空白的词语和段落即可。\u003C/p>\n\u003Cp>“控制反转不仅增强了framework在代码和设计上的重用性，还极大地提高了framework的可扩展性。\u003C/p>\n\u003Cp>依赖反转原则（Dependency-Inversion Principle，简称DIP）更加具体——高层模块不应依赖低层模块，它们都应依赖抽象；抽象不应依赖细节，细节应依赖抽象\u003C/p>\n\u003Cp>依赖注射（Dependency Injection，简称DI）——动态地为一个软件组件提供外部依赖\u003C/p>\n\u003Cp>回调函数的提法较为古老，多出现于过程式编程，抽象接口是更现代、更OO的说法\u003C/p>\n\u003Cp>‘回调’强调的是行为方式——低层反调高层，而‘抽象接口’强调的是实现方式——正是由于接口具有抽象性，低层才能在调用它时无须虑及高层的具体细节，从而实现控制反转。\u003C/p>\n\u003Cp>如何设计事件机制？其中，包括事件定义、事件触发、事件侦查、事件转化、事件合并、事件调度、事件传播、事件处理、事件连带（event cascade）[14]等一系列问题。\u003C/p>\n\u003Cp>“软件的可伸缩性（scalability）一般指从容应对工作量增长的能力，常与性能（performance）等指标一并被考量\u003C/p>\n\u003Cp>控制反转的主要作用是降低模块之间的依赖性，从而降低模块的耦合度和复杂度，提高软件的可重用性、柔韧性和可扩展性，但对可伸缩性并无太大帮助\u003C/p>\n\u003Cp>独立是异步的前提，耗时是异步的理由。至于随机嘛，只是副产品，一个独立且耗时的子过程，通常结束时间也是不可预期的\u003C/p>\n\u003Cp>事件处理器事先在关注的事件源上注册，后者不定期地发表事件对象，经过事件管理器的转化（translate）、合并（coalesce）、排队（enqueue）、分派（dispatch）等集中处理后，事件处理器接收到事件并对其进行相应处理\u003C/p>\n\u003Cp>通过事件机制，事件源与事件处理器之间建立了松耦合的多对多关系：一个事件源可以有多个处理器，一个处理器可以监听多个事件源\u003C/p>\n\u003Cp>事件处理器也能产生事件，实现处理器接口的事件源也能处理事件，它们可以角色换位，于是又演化为peer-to-peer模式\u003C/p>\n\u003Cp>该模式省略了事件管理器部分，由事件源直接调用事件处理器的接口。这样更加简明易用，但威力有所削弱，缺少事件管理、事件连带等机制\u003C/p>\n\u003Cp>事件是程序中令人关注的信息状态上的变化。在基于事件驱动的系统中，事件包括内建事件与用户自定义事件，其中内建事件又分为底层事件和语义事件。此外，事件还有自然事件与合成事件之分\u003C/p>\n\u003Cp>异步过程在主程序中以非堵塞的机制运行，即主程序不必等待该过程的返回就能继续下一步。异步机制能减少随机因素造成的资源浪费，提高系统的性能和可伸缩性\u003C/p>\n\u003Ch3 id=\"第4课-重温范式\">第4课 重温范式\u003C/h3>\n\u003Cp>编程语言的语法、语义等都是从编程范式的树根衍生而出的枝叶，把握了这种脉络和节奏，代码才会如音乐舞蹈般韵律有致\u003C/p>\n\u003Cp>容忍无知不是放任无知，而是一种学习的技巧，让无知成为求知的动力而不是障碍。容忍无知能使我们既不沮丧气馁，也不急于求成。在学习时不妨略过一些细节或难点，先概览全貌以获取感性认识，然后在逐步积累中升华为理性认识\u003C/p>\n\u003Cp>如果你不了解编程范式，那么眼中的编程语言只是语法、语义、核心库、规范等组成的集合，写出的代码虽能编译、能工作，却会显得生硬、别扭\u003C/p>\n\u003Cp>软件中的范式除了编程范式外，还有架构范式[1]、数据库范式[2]等\u003C/p>\n\u003Cp>函数式还有一个重要特征：无副作用或尽量减少副作用[4]。所谓无副作用，是指一个函数在被调用前后保持程序的状态不变。无副作用的函数不会改变非局部变量的值，不会改变传入的参数，也没有I/O操作。\u003C/p>\n\u003Cp>而函数式程序则是进行表达式变换，一般不会改变变量的值。其实函数式并非完全不改变内存，只不过改变的是栈内存（stack）罢了\u003C/p>\n\u003Cp>首先，没有副作用的函数易于重构、调试和单元测试。其次，代码有效性与函数顺序无关，方便并发处理和优化处理\u003C/p>\n\u003Cp>通常要计算f（g（x））的值，须要计算完g（x）后才能将所得值代入函数f。有了惰性求值机制，g（x）的计算完全由函数f的需求来驱动，避免做无用功。此乃其惰性之所在。\u003C/p>\n\u003Cp>惰性求值不仅能节省有限的时间，还能超越无限的时间——g（x）甚至可以永不退出，从而可能产生无穷的输出结果集供函数f使用\u003C/p>\n\u003Cp>没有副作用的函数是引用透明的（referential transparency），即一个表达式随时可以用它的值来替换[6]，正如数学中的函数一样\u003C/p>\n\u003Ch4 id=\"42-逻辑范式当算法失去了控制\">4.2 逻辑范式——当算法失去了控制\u003C/h4>\n\u003Cp>逻辑式与过程式和函数式的一个不同之处是，它没有明显的输入、输出之分\u003C/p>\n\u003Cp>：算法=逻辑+控制。其中逻辑是算法的核心，控制主要用于改进算法的效率。在逻辑式编程中，程序员只需表达逻辑，而控制交给编程语言的解释器或编译器去管理。\u003C/p>\n\u003Cp>但缺点是运行效率偏低，可掌控性较差，与常规的过程式思维差异较大，更适合基于规则（rule-based）而不是基于状态（state-based）的应用[13]\u003C/p>\n\u003Cp>逻辑式编程不仅适用于人工智能方面的学术领域，同样广泛适用于各种涉及知识管理、决策分析等方面的应用领域\u003C/p>\n\u003Ch4 id=\"43-汇总范式一张五味俱全的大烙饼\">4.3 汇总范式——一张五味俱全的大烙饼\u003C/h4>\n\u003Cp>“设计模式一般针对某一特定场景的问题，而编程范式针对的是广泛得多的问题领域，通常有一整套的思想和理论体系，具有全局性、系统性和渗透性，这一点在5大重要范式中显得尤为突出。因此，编程范式更普适更抽象，涉及的深度和广度也是设计模式难以比拟的\u003C/p>\n\u003Cp>设计模式是遵循设计原则的一些具体技巧，以保证代码的可维护性、扩展性和可重用性为目的。它重在设计，对语言一般没有要求[15]。编程范式则不同，对语言往往有专门的要求\u003C/p>\n\u003Cp>语言本来就是围绕其所倡导的核心范式来设计的\u003C/p>\n\u003Ch4 id=\"44-情景范式餐馆里的编程范式\">4.4 情景范式——餐馆里的编程范式\u003C/h4>\n\u003Cp>编程范式的核心价值在于：突破原有编程方式的某些限制，带来新思维和新方法，从而进一步解放程序员的劳动力\u003C/p>\n\u003Cp>可以这么理解（闭包）：所谓包，指函数与其周围的环境变量捆绑打包；所谓闭，指这些变量是封闭的，只能为该函数所专用\u003C/p>\n\u003Cp>正向推理自底向上，利用推理规则从已有的事实数据推出更多的数据，直到达成目标；逆向推理正相反，自顶向下，从目标出发寻找满足结论的事实[21]。相比而言，正向推理适合针对不同输入作出不同反应，而逆向推理适合回答查询。\u003C/p>\n\u003Ch3 id=\"第5课-语言小谈\">第5课 语言小谈\u003C/h3>\n\u003Cp>“软件工程中有个迭代开发法，本班则采用迭代学习法：即在具体知识与抽象理论之间进行折返式学习\u003C/p>\n\u003Ch4 id=\"52-数据类型规则与变通\">5.2 数据类型——规则与变通\u003C/h4>\n\u003Cp>所谓迭代学习法，是指在具体知识与抽象理论之间进行增量式的循环学习\u003C/p>\n\u003Cp>要想工作胜任愉快，才能、兴趣、方法和努力缺一不可。一套好的方法可以激发才能、兴趣和努力\u003C/p>\n\u003Cp>数据类型包含两个要素：一个是允许取值的集合，一个是允许参与的运算\u003C/p>\n\u003Cp>数据类型的意义何在？”句号回答：“限定一个变量的数据类型，就意味着限制了该变量的取值范围和所参与的运算，这从一定程度上保证了代码的安全性。”冒号追问：“还有吗？”句号略作思考后说：“用户自定义的数据类型，如C中的结构和Java中的类或接口，赋予数据以逻辑内涵，提高了代码的抽象性\u003C/p>\n\u003Cp>“数据类型既有针对机器的物理意义，又有针对人的逻辑意义。前者用于进行底层的内存分配和数值运算等，后者用于表达高层的逻辑概念\u003C/p>\n\u003Cp>所谓动态类型语言（dynamic typing language），正是指类型检查发生在运行期间（run-time）的语言。”“那静态类型语言（static typing language）自然是类型检查发生在编译期间（compile-time）的语言\u003C/p>\n\u003Cp>类型的动静与强弱完全是正交的两个概念\u003C/p>\n\u003Cp>前者以类型的绑定（binding）时间来划分，后者以类型的约束强度来划分\u003C/p>\n\u003Cp>鸭子类型是动态类型的一种风格，允许非继承性多态，即一个对象的类型可以由其接口集合来确定，不须要通过显式继承。它有利于代码重用，但也可能造成误用和滥用\u003C/p>\n\u003Cp>类型的动静以类型的绑定时间来划分，类型的强弱以类型的约束强度来划分，它们之间没有必然联系。弱类型语言允许类型的隐性转化，被认为是类型不安全的；而强类型语言则一般不允许这种转化，被认为是类型安全的\u003C/p>\n\u003Ch4 id=\"53-动态语言披着彩衣飞舞的脚本语言\">5.3 动态语言——披着彩衣飞舞的脚本语言\u003C/h4>\n\u003Cp>“脚本（script）的提法，是为了区别于一般的程序（program）\u003C/p>\n\u003Cp>：‘A script is what you give the actors, a program is whatyou give the audience’。直译为：脚本是给演员看的，节目是给观众看的\u003C/p>\n\u003Cp>脚本语言以语言的实际用途为标志，动态语言以语言的语法特征为标志\u003C/p>\n\u003Cp>单从用途上看，一个脚本语言如果不再局限于命令行工具和粘合工具，从专用语言发展为通用语言，并能胜任复杂的应用开发，或许更有资格归为动态语言。\u003C/p>\n\u003Cp>再从用法上看，动态语言能在运行中增加或改变数据结构、函数定义、对象行为或指令流程等。如果说动态类型语言的动态体现在类型上，动态语言的动态则体现在结构和功能上\u003C/p>\n\u003Cp>➢脚本语言一般是解释型语言，不须要通过“编写－编译－链接－运行”的循环圈，便利快捷，加之简洁宽松的语法、面向字符的特性，以及较强的文本处理能力，尤其适合作为粘合语言，多用于系统管理和集成。\u003C/p>\n\u003Ch4 id=\"54-语言误区语言的宗教情结\">5.4 语言误区——语言的宗教情结\u003C/h4>\n\u003Cp>如果一种语言不能影响你对编程的看法，那么就不值得去了解\u003C/p>\n\u003Cp>破除语言的宗教情结，保持自我批判的勇气和精神\u003C/p>\n\u003Cp>每种语言都有其特到之处和不足之处，与其抱怨争执，不如扬长避短\u003C/p>\n\u003Ch3 id=\"第6课-语言简评\">第6课 语言简评\u003C/h3>\n\u003Cp>将资源的取放与某一对象的生命周期绑定，初始化对象时获取资源，终结化对象时释放资源。用户代码不再直接管理资源，只须控制相应的对象即可\u003C/p>\n\u003Cp>专门提供了using语句来简化释放资源（IDisposable）的代码\u003C/p>\n\u003Ch4 id=\"63-前台语言视觉与交互的艺术\">6.3 前台语言——视觉与交互的艺术\u003C/h4>\n\u003Cp>JavaScript作为一门动态语言，集过程式、对象式、函数式、事件驱动式、元编程等于一身\u003C/p>",{"headings":1345,"localImagePaths":1447,"remoteImagePaths":1448,"frontmatter":1449,"imagePaths":1454},[1346,1347,1349,1351,1353,1355,1357,1360,1363,1365,1368,1371,1374,1377,1378,1381,1384,1387,1390,1393,1396,1399,1402,1405,1408,1411,1414,1417,1420,1423,1426,1429,1432,1435,1438,1441,1444],{"depth":31,"slug":324,"text":325},{"depth":31,"slug":1348,"text":1348},"重要范式",{"depth":37,"slug":1350,"text":1350},"编程范式",{"depth":347,"slug":1352,"text":1352},"命令式编程",{"depth":347,"slug":1354,"text":1354},"结构化编程",{"depth":347,"slug":1356,"text":1356},"声明式编程",{"depth":37,"slug":1358,"text":1359},"对象范式oop","对象范式（OOP）",{"depth":37,"slug":1361,"text":1362},"并发范式合作与竞争","并发范式（合作与竞争）",{"depth":31,"slug":1364,"text":1364},"常用范式",{"depth":37,"slug":1366,"text":1367},"泛型范式-generic-programming","泛型范式 Generic Programming",{"depth":37,"slug":1369,"text":1370},"元编程-meta-programming","元编程 Meta Programming",{"depth":37,"slug":1372,"text":1373},"切面范式aop","切面范式（AOP）",{"depth":31,"slug":1375,"text":1376},"oop","OOP",{"depth":31,"slug":166,"text":166},{"depth":37,"slug":1379,"text":1380},"第1课-开班导言","第1课 开班导言",{"depth":347,"slug":1382,"text":1383},"12-首轮提问什么语言好","1.2 首轮提问——什么语言好？",{"depth":347,"slug":1385,"text":1386},"13-语言选择合适的就是好的","1.3 语言选择——合适的就是好的",{"depth":347,"slug":1388,"text":1389},"14-初识范式程序王国中的世界观与方法论","1.4 初识范式——程序王国中的世界观与方法论",{"depth":347,"slug":1391,"text":1392},"15-开发技术实用还是时髦","1.5 开发技术——实用还是时髦？",{"depth":37,"slug":1394,"text":1395},"第2课-重要范式","第2课 重要范式",{"depth":347,"slug":1397,"text":1398},"22-声明范式目标决定行动","2.2 声明范式——目标决定行动",{"depth":347,"slug":1400,"text":1401},"23-对象范式民主制社会的编程法则","2.3 对象范式——民主制社会的编程法则",{"depth":347,"slug":1403,"text":1404},"24-并发范式合作与竞争","2.4 并发范式——合作与竞争",{"depth":37,"slug":1406,"text":1407},"第3课-常用范式","第3课 常用范式",{"depth":347,"slug":1409,"text":1410},"32-超级范式提升语言的级别","3.2 超级范式——提升语言的级别",{"depth":347,"slug":1412,"text":1413},"33-切面范式多角度看问题","3.3 切面范式——多角度看问题",{"depth":347,"slug":1415,"text":1416},"34-事件驱动有事我叫你没事别烦我","3.4 事件驱动——有事我叫你，没事别烦我",{"depth":37,"slug":1418,"text":1419},"第4课-重温范式","第4课 重温范式",{"depth":347,"slug":1421,"text":1422},"42-逻辑范式当算法失去了控制","4.2 逻辑范式——当算法失去了控制",{"depth":347,"slug":1424,"text":1425},"43-汇总范式一张五味俱全的大烙饼","4.3 汇总范式——一张五味俱全的大烙饼",{"depth":347,"slug":1427,"text":1428},"44-情景范式餐馆里的编程范式","4.4 情景范式——餐馆里的编程范式",{"depth":37,"slug":1430,"text":1431},"第5课-语言小谈","第5课 语言小谈",{"depth":347,"slug":1433,"text":1434},"52-数据类型规则与变通","5.2 数据类型——规则与变通",{"depth":347,"slug":1436,"text":1437},"53-动态语言披着彩衣飞舞的脚本语言","5.3 动态语言——披着彩衣飞舞的脚本语言",{"depth":347,"slug":1439,"text":1440},"54-语言误区语言的宗教情结","5.4 语言误区——语言的宗教情结",{"depth":37,"slug":1442,"text":1443},"第6课-语言简评","第6课 语言简评",{"depth":347,"slug":1445,"text":1446},"63-前台语言视觉与交互的艺术","6.3 前台语言——视觉与交互的艺术",[],[],{"title":1335,"description":15,"pubDate":501,"heroImage":1337,"date created":1450,"date modified":1451,"tags":1452,"minutesRead":1453},["Date","2024-06-29T00:00:00.000Z"],["Date","2024-06-29T00:00:00.000Z"],"notes Programming","46 min read",[],"200-Learning/210-Programing/《冒号课堂》.md","200-learning/210-programing/算法入门",{"id":1456,"data":1458,"body":1464,"filePath":1465,"digest":1466,"rendered":1467,"legacyId":1478},{"title":1459,"description":15,"draft":16,"pubDate":1460,"heroImage":1461,"tags":1462},"算法入门",["Date","2023-07-08T05:55:00.000Z"],"https://images.unsplash.com/photo-1665690399410-eafc2b35a767?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1200&q=80",[133,242,1463],"algorithms","> A friend may well be reckoned the masterpiece of nature.\n> — \u003Ccite>Ralph Waldo Emerson\u003C/cite>","src/content/blog/200-Learning/210-Programing/算法入门.md","cca0155fee827338",{"html":1468,"metadata":1469},"\u003Cblockquote>\n\u003Cp>A friend may well be reckoned the masterpiece of nature.\n— \u003Ccite>Ralph Waldo Emerson\u003C/cite>\u003C/p>\n\u003C/blockquote>",{"headings":1470,"localImagePaths":1471,"remoteImagePaths":1472,"frontmatter":1473,"imagePaths":1477},[],[],[],{"title":1459,"description":15,"pubDate":1474,"heroImage":1461,"date created":1474,"date modified":1475,"draft":16,"tags":1476,"minutesRead":79},"2023-07-08 13:55","2023-07-08",[133,242,1463],[],"200-Learning/210-Programing/算法入门.md","200-learning/210-programing/打造无缝博客搭建流程从obsidian到github-pages",{"id":1479,"data":1481,"body":1487,"filePath":1488,"digest":1489,"rendered":1490,"legacyId":1517},{"title":1482,"description":1483,"pubDate":1484,"heroImage":1485,"tags":1486},"打造无缝博客搭建流程：从Obsidian到GitHub Pages","本文将介绍如何使用Obsidian创作博客，在GitHub自动同步，通过GitHub Workflow实现分支合并，结合Astro前端框架搭建网站，自动部署至GitHub Pages。通过这无缝流程，创作者可以专注于内容，无需繁琐操作，打造个人博客。",["Date","2023-08-12T14:43:00.000Z"],"https://images.unsplash.com/photo-1504805572947-34fad45aed93?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1200&q=80",[20],"# 打造无缝博客搭建流程：从Obsidian到GitHub Pages\n\n> True knowledge exists in knowing that you know nothing.\n> — \u003Ccite>Isocrates\u003C/cite>\n\n:::tip\n以下内容通过[ChatGPT生成](https://chat.openai.com/share/86232a67-ea2d-4975-8989-a620d6c11b26)+微调（懒得写了😄）\n:::\n\n[博客文章仓库](https://github.com/fw6/obsidian-blogs)\n[博客站点仓库](https://github.com/fw6/blog)\n\n随着数字时代的到来，个人博客成为展示自我、分享知识的理想平台。在本文中，我将介绍我是如何搭建我的个人博客网站，通过将Obsidian、GitHub以及Astro前端框架等工具有机结合，实现了博客文章的创作、同步和展示的无缝流程。\n\n## 使用Obsidian进行博客创作\n\n我选择使用Obsidian作为博客文章的创作工具，因为它提供了优雅的笔记管理和编辑体验。在Obsidian中，我可以轻松地组织我的思维，编写文章，并添加标签、链接等元素。这使得博客内容的创作变得高效而有趣。\n\n## 实现博客内容自动同步\n\n为了将我在Obsidian中创作的内容自动同步到我的GitHub仓库中，我使用了`obsidian-git`插件。通过配置这个插件，每当我在Obsidian中保存一篇文章，它会自动将文章同步到GitHub仓库的`master`分支中。\n\n## 利用GitHub Workflow实现自动分支合并\n\n在GitHub仓库中，我设置了一个GitHub Workflow，以便在每次将内容推送到`master`分支时自动触发分支合并操作。具体而言，我将`master`分支合并到一个专门用于博客内容的`blog`分支中。这样，我可以确保博客文章的内容始终保持同步，且能够轻松地进行版本控制。\n\n如果自动同步失败☹️，会自动创建PR（将`master`合并到`blog`分支）📢\n\n```yaml\nname: CI_auto_merge\non:\n  push:\n    branches:\n      - master\n    paths:\n      - '**.md'\n      - '**.mdx'\n\njobs:\n  auto-merge-blog-branch:\n    name: Auto merge blog branch\n    runs-on: ubuntu-latest\n    permissions: write-all\n    steps:\n      - name: checkout\n        uses: actions/checkout@v3\n        with:\n          ref: blog\n\n      - name: Set Git config\n        run: |\n            git config --local user.email \"actions@github.com\"\n            git config --local user.name \"Github Actions\"\n\n      - name: Merge master back to blog\n        run: |\n            git fetch --unshallow\n            git pull\n            git merge --no-ff origin/master -m \"Auto-merge master back to blog\"\n            git push\n\n      - name: Generate a pr after after previous step failed\n        if: ${{ failure() }}\n        run: |\n            gh pr create --base astro --head master --title \"Auto Merge Astro Branch\" --body \"Auto Merge Astro Branch\" --label \"automerge\"\n        env:\n            GH_TOKEN: ${{ github.token }}\n\n      - name: Trigger Astro CI workflow on master branch at blog repo from outside\n        # https://stackoverflow.com/questions/71499150/how-to-run-a-workflow-using-github-cli\n        run: gh workflow run astro.yml --ref master --repo git@github.com:fw6/blog.git\n        env:\n            GH_TOKEN: ${{ secrets.workflow_triggers }}\n        # run: |\n        #     REPO_OWNER=fw6\n        #     REPO_NAME=blog\n        #     BRANCH=master\n        #     WORKFLOW_ID=astro.yml\n        #     ACCESS_TOKEN=${{ secrets.workflow_triggers }}\n        #     URL=\"https://api.github.com/repos/$REPO_OWNER/$REPO_NAME/actions/workflows/$WORKFLOW_ID/dispatches\"\n        #     PAYLOAD='{\"ref\":\"$BRANCH\"}'\n\n        #     curl -X POST -H \"Accept: application/vnd.github.v3+json\" \\\n        #         -H \"Authorization: Bearer $ACCESS_TOKEN\" \\\n        #         -H \"Content-Type: application/json\" \\\n        #         -d \"$PAYLOAD\" \\\n        #         \"$URL\"\n```\n\n## 基于Astro前端框架搭建博客网站\n\n为了将博客内容呈现给读者，我选择了Astro前端框架搭建博客网站。我创建了一个独立的代码仓库，并使用Git的`submodule`功能将其与博客文章的`blog`分支关联起来。这样，我可以在网站中展示最新的博客内容，与Obsidian中的文章保持同步。\n\n## 构建GitHub Workflow实现自动部署\n\n在博客网站的源码仓库中，我设置了另一个GitHub Workflow，以实现自动部署。这个Workflow包括以下主要步骤：\n\n1. 同步`submodule`：首先，Workflow会同步博客文章所在仓库的`blog`分支，确保网站源码与最新的博客内容一致。\n2. 安装Node.js和依赖项：接下来，Workflow会安装所需的Node.js和依赖项，以准备进行网站的编译和构建。\n3. 触发Astro编译脚本：Workflow会执行Astro编译脚本，将博客网站的源码转换为静态文件，准备部署到GitHub Pages上。\n4. 部署到GitHub Pages：最后，Workflow将编译后的静态文件部署到GitHub Pages上，使得我的博客内容能够在互联网上访问。\n\n```yaml\n# Sample workflow for building and deploying an Astro site to GitHub Pages\n#\n# To get started with Astro see: https://docs.astro.build/en/getting-started/\n#\nname: Deploy Astro site to Pages\n\non:\n  # Runs on pushes targeting the default branch\n  push:\n    branches: [\"master\"]\n\n  # Allows you to run this workflow manually from the Actions tab\n  workflow_dispatch:\n\n# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages\npermissions:\n  contents: read\n  pages: write\n  id-token: write\n\n# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.\n# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.\nconcurrency:\n  group: \"pages\"\n  cancel-in-progress: false\n\njobs:\n  build:\n    name: Build\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n        with:\n          submodules: true\n\n      # https://github.com/actions/checkout/issues/417#issuecomment-1640448307\n      - name: Update submodules from origin master\n        env:\n            PAT: ${{ secrets.PAT }}\n        run: |\n            git submodule foreach --recursive git checkout master\n            git submodule foreach --recursive git pull origin master\n\n      - name: Remove obsidion directories\n        run:\n            rm -rf src/content/blog/{_github,_obsidian,_cedict_ts.u8,.obsidian,.github,.gitignore,renovate.json,cedict_ts.u8}\n\n      - name: Setup pnpm\n        # You may pin to the exact commit or the version.\n        # uses: pnpm/action-setup@c3b53f6a16e57305370b4ae5a540c2077a1d50dd\n        uses: pnpm/action-setup@v2.2.4\n        with:\n            run_install: false\n            version: 8\n\n      - name: Setup Node\n        uses: actions/setup-node@v3\n        with:\n          node-version-file: \"package.json\"\n          cache: \"pnpm\"\n\n      - name: Get pnpm store directory\n        id: pnpm-cache\n        shell: bash\n        run: |\n            echo \"STORE_PATH=$(pnpm store path)\" >> $GITHUB_OUTPUT\n\n      - uses: actions/cache@v3\n        name: Setup pnpm cache\n        with:\n            path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}\n            key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}\n            restore-keys: |\n                ${{ runner.os }}-pnpm-store-\n\n      - name: Install dependencies\n        run: pnpm i\n\n      - name: Setup Pages\n        id: pages\n        uses: actions/configure-pages@v3\n\n      - name: Build with Astro\n        run: |\n          pnpm build \\\n            --site \"${{ steps.pages.outputs.origin }}\" \\\n            --base \"${{ steps.pages.outputs.base_path }}\"\n\n\n      - name: Upload artifact\n        uses: actions/upload-pages-artifact@v1\n        with:\n          path: \"./dist\"\n\n  deploy:\n    environment:\n        name: github-pages\n        url: ${{ steps.deployment.outputs.page_url }}\n    needs: build\n    runs-on: ubuntu-latest\n    name: Deploy\n    steps:\n      - name: Deploy to GitHub Pages\n        id: deployment\n        uses: actions/deploy-pages@v2\n```\n\n通过这个精心设计的GitHub Workflow，我可以实现博客内容的自动更新和部署，让读者随时随地都能够浏览到最新的文章和信息。\n\n## 总结\n\n通过将Obsidian、GitHub和Astro前端框架等工具融合在一起，我成功地搭建了一个高效、自动化的博客网站搭建流程。从创作到同步再到部署，整个流程无缝衔接，让我能够专注于内容创作，而不必过多担心技术细节。希望本文能够为有类似需求的朋友提供一些有用的思路和方法。","src/content/blog/200-Learning/210-Programing/打造无缝博客搭建流程：从Obsidian到GitHub Pages.md","80f3a74db4f3bad4",{"html":1491,"metadata":1492},"\u003Ch1 id=\"打造无缝博客搭建流程从obsidian到github-pages\">打造无缝博客搭建流程：从Obsidian到GitHub Pages\u003C/h1>\n\u003Cblockquote>\n\u003Cp>True knowledge exists in knowing that you know nothing.\n— \u003Ccite>Isocrates\u003C/cite>\u003C/p>\n\u003C/blockquote>\n\u003Caside class=\"callout callout-tip\">\u003Cdiv class=\"callout-indicator\">\u003Cdiv class=\"callout-hint\">\u003Csvg viewBox=\"0 0 24 24\" width=\"24\" height=\"24\" fill=\"currentColor\" class=\"callout-hint-tip\">\u003Cpath fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M1.43909 8.85483L1.44039 8.85354L4.96668 5.33815C5.30653 4.99386 5.7685 4.79662 6.2524 4.78972L6.26553 4.78963L12.9014 4.78962L13.8479 3.84308C16.9187 0.772319 20.0546 0.770617 21.4678 0.975145C21.8617 1.02914 22.2271 1.21053 22.5083 1.4917C22.7894 1.77284 22.9708 2.13821 23.0248 2.53199C23.2294 3.94517 23.2278 7.08119 20.1569 10.1521L19.2107 11.0983V17.7338L19.2106 17.7469C19.2037 18.2308 19.0067 18.6933 18.6624 19.0331L15.1456 22.5608C14.9095 22.7966 14.6137 22.964 14.29 23.0449C13.9663 23.1259 13.6267 23.1174 13.3074 23.0204C12.9881 22.9235 12.7011 22.7417 12.4771 22.4944C12.2533 22.2473 12.1006 21.9441 12.0355 21.6171L11.1783 17.3417L6.65869 12.822L4.34847 12.3589L2.38351 11.965C2.05664 11.8998 1.75272 11.747 1.50564 11.5232C1.25835 11.2992 1.07653 11.0122 0.979561 10.6929C0.882595 10.3736 0.874125 10.034 0.955057 9.7103C1.03599 9.38659 1.20328 9.09092 1.43909 8.85483ZM6.8186 10.8724L2.94619 10.096L6.32006 6.73268H10.9583L6.8186 10.8724ZM15.2219 5.21703C17.681 2.75787 20.0783 2.75376 21.1124 2.8876C21.2462 3.92172 21.2421 6.31895 18.783 8.77812L12.0728 15.4883L8.51172 11.9272L15.2219 5.21703ZM13.9042 21.0538L13.1279 17.1811L17.2676 13.0414V17.68L13.9042 21.0538Z\">\u003C/path>\u003Cpath d=\"M9.31827 18.3446C9.45046 17.8529 9.17864 17.3369 8.68945 17.1724C8.56178 17.1294 8.43145 17.1145 8.30512 17.1243C8.10513 17.1398 7.91519 17.2172 7.76181 17.3434C7.62613 17.455 7.51905 17.6048 7.45893 17.7835C6.97634 19.2186 5.77062 19.9878 4.52406 20.4029C4.08525 20.549 3.6605 20.644 3.29471 20.7053C3.35607 20.3395 3.45098 19.9148 3.59711 19.476C4.01221 18.2294 4.78141 17.0237 6.21648 16.5411C6.39528 16.481 6.54504 16.3739 6.65665 16.2382C6.85126 16.0016 6.92988 15.678 6.84417 15.3647C6.83922 15.3466 6.83373 15.3286 6.82767 15.3106C6.74106 15.053 6.55701 14.8557 6.33037 14.7459C6.10949 14.6389 5.84816 14.615 5.59715 14.6994C5.47743 14.7397 5.36103 14.7831 5.24786 14.8294C3.22626 15.6569 2.2347 17.4173 1.75357 18.8621C1.49662 19.6337 1.36993 20.3554 1.30679 20.8818C1.27505 21.1464 1.25893 21.3654 1.25072 21.5213C1.24662 21.5993 1.24448 21.6618 1.24337 21.7066L1.243 21.7226L1.24235 21.7605L1.2422 21.7771L1.24217 21.7827L1.24217 21.7856C1.24217 22.3221 1.67703 22.7579 2.2137 22.7579L2.2155 22.7579L2.22337 22.7578L2.23956 22.7577C2.25293 22.7575 2.27096 22.7572 2.29338 22.7567C2.33821 22.7555 2.40073 22.7534 2.47876 22.7493C2.63466 22.7411 2.85361 22.725 3.11822 22.6932C3.64462 22.6301 4.36636 22.5034 5.13797 22.2464C6.58274 21.7653 8.3431 20.7738 9.17063 18.7522C9.21696 18.639 9.26037 18.5226 9.30064 18.4029C9.30716 18.3835 9.31304 18.364 9.31827 18.3446Z\">\u003C/path>\u003C/svg>\u003C/div>\u003Cdiv class=\"callout-title\">Tip\u003C/div>\u003C/div>\u003Cdiv class=\"callout-content\">\u003Cp>以下内容通过\u003Ca href=\"https://chat.openai.com/share/86232a67-ea2d-4975-8989-a620d6c11b26\">ChatGPT生成\u003C/a>+微调（懒得写了\u003Cspan role=\"img\" aria-label=\"grinning face with smiling eyes\">😄\u003C/span>）\u003C/p>\u003C/div>\u003C/aside>\n\u003Cp>\u003Ca href=\"https://github.com/fw6/obsidian-blogs\">博客文章仓库\u003C/a>\n\u003Ca href=\"https://github.com/fw6/blog\">博客站点仓库\u003C/a>\u003C/p>\n\u003Cp>随着数字时代的到来，个人博客成为展示自我、分享知识的理想平台。在本文中，我将介绍我是如何搭建我的个人博客网站，通过将Obsidian、GitHub以及Astro前端框架等工具有机结合，实现了博客文章的创作、同步和展示的无缝流程。\u003C/p>\n\u003Ch2 id=\"使用obsidian进行博客创作\">使用Obsidian进行博客创作\u003C/h2>\n\u003Cp>我选择使用Obsidian作为博客文章的创作工具，因为它提供了优雅的笔记管理和编辑体验。在Obsidian中，我可以轻松地组织我的思维，编写文章，并添加标签、链接等元素。这使得博客内容的创作变得高效而有趣。\u003C/p>\n\u003Ch2 id=\"实现博客内容自动同步\">实现博客内容自动同步\u003C/h2>\n\u003Cp>为了将我在Obsidian中创作的内容自动同步到我的GitHub仓库中，我使用了\u003Ccode>obsidian-git\u003C/code>插件。通过配置这个插件，每当我在Obsidian中保存一篇文章，它会自动将文章同步到GitHub仓库的\u003Ccode>master\u003C/code>分支中。\u003C/p>\n\u003Ch2 id=\"利用github-workflow实现自动分支合并\">利用GitHub Workflow实现自动分支合并\u003C/h2>\n\u003Cp>在GitHub仓库中，我设置了一个GitHub Workflow，以便在每次将内容推送到\u003Ccode>master\u003C/code>分支时自动触发分支合并操作。具体而言，我将\u003Ccode>master\u003C/code>分支合并到一个专门用于博客内容的\u003Ccode>blog\u003C/code>分支中。这样，我可以确保博客文章的内容始终保持同步，且能够轻松地进行版本控制。\u003C/p>\n\u003Cp>如果自动同步失败\u003Cspan role=\"img\" aria-label=\"frowning face\">☹️\u003C/span>，会自动创建PR（将\u003Ccode>master\u003C/code>合并到\u003Ccode>blog\u003C/code>分支）\u003Cspan role=\"img\" aria-label=\"loudspeaker\">📢\u003C/span>\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"yaml\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"yaml\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#8DDB8C\">name\u003C/span>\u003Cspan style=\"color:#ADBAC7\">: \u003C/span>\u003Cspan style=\"color:#96D0FF\">CI_auto_merge\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#6CB6FF\">on\u003C/span>\u003Cspan style=\"color:#ADBAC7\">:\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#8DDB8C\">  push\u003C/span>\u003Cspan style=\"color:#ADBAC7\">:\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#8DDB8C\">    branches\u003C/span>\u003Cspan style=\"color:#ADBAC7\">:\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">      - \u003C/span>\u003Cspan style=\"color:#96D0FF\">master\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#8DDB8C\">    paths\u003C/span>\u003Cspan style=\"color:#ADBAC7\">:\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">      - \u003C/span>\u003Cspan style=\"color:#96D0FF\">'**.md'\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">      - \u003C/span>\u003Cspan style=\"color:#96D0FF\">'**.mdx'\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#8DDB8C\">jobs\u003C/span>\u003Cspan style=\"color:#ADBAC7\">:\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#8DDB8C\">  auto-merge-blog-branch\u003C/span>\u003Cspan style=\"color:#ADBAC7\">:\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#8DDB8C\">    name\u003C/span>\u003Cspan style=\"color:#ADBAC7\">: \u003C/span>\u003Cspan style=\"color:#96D0FF\">Auto merge blog branch\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#8DDB8C\">    runs-on\u003C/span>\u003Cspan style=\"color:#ADBAC7\">: \u003C/span>\u003Cspan style=\"color:#96D0FF\">ubuntu-latest\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#8DDB8C\">    permissions\u003C/span>\u003Cspan style=\"color:#ADBAC7\">: \u003C/span>\u003Cspan style=\"color:#96D0FF\">write-all\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#8DDB8C\">    steps\u003C/span>\u003Cspan style=\"color:#ADBAC7\">:\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">      - \u003C/span>\u003Cspan style=\"color:#8DDB8C\">name\u003C/span>\u003Cspan style=\"color:#ADBAC7\">: \u003C/span>\u003Cspan style=\"color:#96D0FF\">checkout\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#8DDB8C\">        uses\u003C/span>\u003Cspan style=\"color:#ADBAC7\">: \u003C/span>\u003Cspan style=\"color:#96D0FF\">actions/checkout@v3\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#8DDB8C\">        with\u003C/span>\u003Cspan style=\"color:#ADBAC7\">:\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#8DDB8C\">          ref\u003C/span>\u003Cspan style=\"color:#ADBAC7\">: \u003C/span>\u003Cspan style=\"color:#96D0FF\">blog\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">      - \u003C/span>\u003Cspan style=\"color:#8DDB8C\">name\u003C/span>\u003Cspan style=\"color:#ADBAC7\">: \u003C/span>\u003Cspan style=\"color:#96D0FF\">Set Git config\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#8DDB8C\">        run\u003C/span>\u003Cspan style=\"color:#ADBAC7\">: \u003C/span>\u003Cspan style=\"color:#F47067\">|\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#96D0FF\">            git config --local user.email \"actions@github.com\"\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#96D0FF\">            git config --local user.name \"Github Actions\"\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">      - \u003C/span>\u003Cspan style=\"color:#8DDB8C\">name\u003C/span>\u003Cspan style=\"color:#ADBAC7\">: \u003C/span>\u003Cspan style=\"color:#96D0FF\">Merge master back to blog\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#8DDB8C\">        run\u003C/span>\u003Cspan style=\"color:#ADBAC7\">: \u003C/span>\u003Cspan style=\"color:#F47067\">|\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#96D0FF\">            git fetch --unshallow\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#96D0FF\">            git pull\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#96D0FF\">            git merge --no-ff origin/master -m \"Auto-merge master back to blog\"\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#96D0FF\">            git push\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">      - \u003C/span>\u003Cspan style=\"color:#8DDB8C\">name\u003C/span>\u003Cspan style=\"color:#ADBAC7\">: \u003C/span>\u003Cspan style=\"color:#96D0FF\">Generate a pr after after previous step failed\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#8DDB8C\">        if\u003C/span>\u003Cspan style=\"color:#ADBAC7\">: \u003C/span>\u003Cspan style=\"color:#96D0FF\">${{ failure() }}\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#8DDB8C\">        run\u003C/span>\u003Cspan style=\"color:#ADBAC7\">: \u003C/span>\u003Cspan style=\"color:#F47067\">|\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#96D0FF\">            gh pr create --base astro --head master --title \"Auto Merge Astro Branch\" --body \"Auto Merge Astro Branch\" --label \"automerge\"\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#8DDB8C\">        env\u003C/span>\u003Cspan style=\"color:#ADBAC7\">:\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#8DDB8C\">            GH_TOKEN\u003C/span>\u003Cspan style=\"color:#ADBAC7\">: \u003C/span>\u003Cspan style=\"color:#96D0FF\">${{ github.token }}\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">      - \u003C/span>\u003Cspan style=\"color:#8DDB8C\">name\u003C/span>\u003Cspan style=\"color:#ADBAC7\">: \u003C/span>\u003Cspan style=\"color:#96D0FF\">Trigger Astro CI workflow on master branch at blog repo from outside\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">        # https://stackoverflow.com/questions/71499150/how-to-run-a-workflow-using-github-cli\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#8DDB8C\">        run\u003C/span>\u003Cspan style=\"color:#ADBAC7\">: \u003C/span>\u003Cspan style=\"color:#96D0FF\">gh workflow run astro.yml --ref master --repo git@github.com:fw6/blog.git\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#8DDB8C\">        env\u003C/span>\u003Cspan style=\"color:#ADBAC7\">:\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#8DDB8C\">            GH_TOKEN\u003C/span>\u003Cspan style=\"color:#ADBAC7\">: \u003C/span>\u003Cspan style=\"color:#96D0FF\">${{ secrets.workflow_triggers }}\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">        # run: |\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">        #     REPO_OWNER=fw6\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">        #     REPO_NAME=blog\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">        #     BRANCH=master\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">        #     WORKFLOW_ID=astro.yml\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">        #     ACCESS_TOKEN=${{ secrets.workflow_triggers }}\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">        #     URL=\"https://api.github.com/repos/$REPO_OWNER/$REPO_NAME/actions/workflows/$WORKFLOW_ID/dispatches\"\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">        #     PAYLOAD='{\"ref\":\"$BRANCH\"}'\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">        #     curl -X POST -H \"Accept: application/vnd.github.v3+json\" \\\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">        #         -H \"Authorization: Bearer $ACCESS_TOKEN\" \\\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">        #         -H \"Content-Type: application/json\" \\\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">        #         -d \"$PAYLOAD\" \\\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">        #         \"$URL\"\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Ch2 id=\"基于astro前端框架搭建博客网站\">基于Astro前端框架搭建博客网站\u003C/h2>\n\u003Cp>为了将博客内容呈现给读者，我选择了Astro前端框架搭建博客网站。我创建了一个独立的代码仓库，并使用Git的\u003Ccode>submodule\u003C/code>功能将其与博客文章的\u003Ccode>blog\u003C/code>分支关联起来。这样，我可以在网站中展示最新的博客内容，与Obsidian中的文章保持同步。\u003C/p>\n\u003Ch2 id=\"构建github-workflow实现自动部署\">构建GitHub Workflow实现自动部署\u003C/h2>\n\u003Cp>在博客网站的源码仓库中，我设置了另一个GitHub Workflow，以实现自动部署。这个Workflow包括以下主要步骤：\u003C/p>\n\u003Col>\n\u003Cli>同步\u003Ccode>submodule\u003C/code>：首先，Workflow会同步博客文章所在仓库的\u003Ccode>blog\u003C/code>分支，确保网站源码与最新的博客内容一致。\u003C/li>\n\u003Cli>安装Node.js和依赖项：接下来，Workflow会安装所需的Node.js和依赖项，以准备进行网站的编译和构建。\u003C/li>\n\u003Cli>触发Astro编译脚本：Workflow会执行Astro编译脚本，将博客网站的源码转换为静态文件，准备部署到GitHub Pages上。\u003C/li>\n\u003Cli>部署到GitHub Pages：最后，Workflow将编译后的静态文件部署到GitHub Pages上，使得我的博客内容能够在互联网上访问。\u003C/li>\n\u003C/ol>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"yaml\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"yaml\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\"># Sample workflow for building and deploying an Astro site to GitHub Pages\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">#\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\"># To get started with Astro see: https://docs.astro.build/en/getting-started/\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">#\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#8DDB8C\">name\u003C/span>\u003Cspan style=\"color:#ADBAC7\">: \u003C/span>\u003Cspan style=\"color:#96D0FF\">Deploy Astro site to Pages\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#6CB6FF\">on\u003C/span>\u003Cspan style=\"color:#ADBAC7\">:\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">  # Runs on pushes targeting the default branch\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#8DDB8C\">  push\u003C/span>\u003Cspan style=\"color:#ADBAC7\">:\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#8DDB8C\">    branches\u003C/span>\u003Cspan style=\"color:#ADBAC7\">: [\u003C/span>\u003Cspan style=\"color:#96D0FF\">\"master\"\u003C/span>\u003Cspan style=\"color:#ADBAC7\">]\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">  # Allows you to run this workflow manually from the Actions tab\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#8DDB8C\">  workflow_dispatch\u003C/span>\u003Cspan style=\"color:#ADBAC7\">:\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\"># Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#8DDB8C\">permissions\u003C/span>\u003Cspan style=\"color:#ADBAC7\">:\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#8DDB8C\">  contents\u003C/span>\u003Cspan style=\"color:#ADBAC7\">: \u003C/span>\u003Cspan style=\"color:#96D0FF\">read\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#8DDB8C\">  pages\u003C/span>\u003Cspan style=\"color:#ADBAC7\">: \u003C/span>\u003Cspan style=\"color:#96D0FF\">write\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#8DDB8C\">  id-token\u003C/span>\u003Cspan style=\"color:#ADBAC7\">: \u003C/span>\u003Cspan style=\"color:#96D0FF\">write\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\"># Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\"># However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#8DDB8C\">concurrency\u003C/span>\u003Cspan style=\"color:#ADBAC7\">:\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#8DDB8C\">  group\u003C/span>\u003Cspan style=\"color:#ADBAC7\">: \u003C/span>\u003Cspan style=\"color:#96D0FF\">\"pages\"\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#8DDB8C\">  cancel-in-progress\u003C/span>\u003Cspan style=\"color:#ADBAC7\">: \u003C/span>\u003Cspan style=\"color:#6CB6FF\">false\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#8DDB8C\">jobs\u003C/span>\u003Cspan style=\"color:#ADBAC7\">:\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#8DDB8C\">  build\u003C/span>\u003Cspan style=\"color:#ADBAC7\">:\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#8DDB8C\">    name\u003C/span>\u003Cspan style=\"color:#ADBAC7\">: \u003C/span>\u003Cspan style=\"color:#96D0FF\">Build\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#8DDB8C\">    runs-on\u003C/span>\u003Cspan style=\"color:#ADBAC7\">: \u003C/span>\u003Cspan style=\"color:#96D0FF\">ubuntu-latest\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#8DDB8C\">    steps\u003C/span>\u003Cspan style=\"color:#ADBAC7\">:\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">      - \u003C/span>\u003Cspan style=\"color:#8DDB8C\">name\u003C/span>\u003Cspan style=\"color:#ADBAC7\">: \u003C/span>\u003Cspan style=\"color:#96D0FF\">Checkout\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#8DDB8C\">        uses\u003C/span>\u003Cspan style=\"color:#ADBAC7\">: \u003C/span>\u003Cspan style=\"color:#96D0FF\">actions/checkout@v3\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#8DDB8C\">        with\u003C/span>\u003Cspan style=\"color:#ADBAC7\">:\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#8DDB8C\">          submodules\u003C/span>\u003Cspan style=\"color:#ADBAC7\">: \u003C/span>\u003Cspan style=\"color:#6CB6FF\">true\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">      # https://github.com/actions/checkout/issues/417#issuecomment-1640448307\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">      - \u003C/span>\u003Cspan style=\"color:#8DDB8C\">name\u003C/span>\u003Cspan style=\"color:#ADBAC7\">: \u003C/span>\u003Cspan style=\"color:#96D0FF\">Update submodules from origin master\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#8DDB8C\">        env\u003C/span>\u003Cspan style=\"color:#ADBAC7\">:\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#8DDB8C\">            PAT\u003C/span>\u003Cspan style=\"color:#ADBAC7\">: \u003C/span>\u003Cspan style=\"color:#96D0FF\">${{ secrets.PAT }}\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#8DDB8C\">        run\u003C/span>\u003Cspan style=\"color:#ADBAC7\">: \u003C/span>\u003Cspan style=\"color:#F47067\">|\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#96D0FF\">            git submodule foreach --recursive git checkout master\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#96D0FF\">            git submodule foreach --recursive git pull origin master\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">      - \u003C/span>\u003Cspan style=\"color:#8DDB8C\">name\u003C/span>\u003Cspan style=\"color:#ADBAC7\">: \u003C/span>\u003Cspan style=\"color:#96D0FF\">Remove obsidion directories\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#8DDB8C\">        run\u003C/span>\u003Cspan style=\"color:#ADBAC7\">:\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#96D0FF\">            rm -rf src/content/blog/{_github,_obsidian,_cedict_ts.u8,.obsidian,.github,.gitignore,renovate.json,cedict_ts.u8}\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">      - \u003C/span>\u003Cspan style=\"color:#8DDB8C\">name\u003C/span>\u003Cspan style=\"color:#ADBAC7\">: \u003C/span>\u003Cspan style=\"color:#96D0FF\">Setup pnpm\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">        # You may pin to the exact commit or the version.\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">        # uses: pnpm/action-setup@c3b53f6a16e57305370b4ae5a540c2077a1d50dd\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#8DDB8C\">        uses\u003C/span>\u003Cspan style=\"color:#ADBAC7\">: \u003C/span>\u003Cspan style=\"color:#96D0FF\">pnpm/action-setup@v2.2.4\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#8DDB8C\">        with\u003C/span>\u003Cspan style=\"color:#ADBAC7\">:\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#8DDB8C\">            run_install\u003C/span>\u003Cspan style=\"color:#ADBAC7\">: \u003C/span>\u003Cspan style=\"color:#6CB6FF\">false\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#8DDB8C\">            version\u003C/span>\u003Cspan style=\"color:#ADBAC7\">: \u003C/span>\u003Cspan style=\"color:#6CB6FF\">8\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">      - \u003C/span>\u003Cspan style=\"color:#8DDB8C\">name\u003C/span>\u003Cspan style=\"color:#ADBAC7\">: \u003C/span>\u003Cspan style=\"color:#96D0FF\">Setup Node\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#8DDB8C\">        uses\u003C/span>\u003Cspan style=\"color:#ADBAC7\">: \u003C/span>\u003Cspan style=\"color:#96D0FF\">actions/setup-node@v3\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#8DDB8C\">        with\u003C/span>\u003Cspan style=\"color:#ADBAC7\">:\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#8DDB8C\">          node-version-file\u003C/span>\u003Cspan style=\"color:#ADBAC7\">: \u003C/span>\u003Cspan style=\"color:#96D0FF\">\"package.json\"\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#8DDB8C\">          cache\u003C/span>\u003Cspan style=\"color:#ADBAC7\">: \u003C/span>\u003Cspan style=\"color:#96D0FF\">\"pnpm\"\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">      - \u003C/span>\u003Cspan style=\"color:#8DDB8C\">name\u003C/span>\u003Cspan style=\"color:#ADBAC7\">: \u003C/span>\u003Cspan style=\"color:#96D0FF\">Get pnpm store directory\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#8DDB8C\">        id\u003C/span>\u003Cspan style=\"color:#ADBAC7\">: \u003C/span>\u003Cspan style=\"color:#96D0FF\">pnpm-cache\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#8DDB8C\">        shell\u003C/span>\u003Cspan style=\"color:#ADBAC7\">: \u003C/span>\u003Cspan style=\"color:#96D0FF\">bash\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#8DDB8C\">        run\u003C/span>\u003Cspan style=\"color:#ADBAC7\">: \u003C/span>\u003Cspan style=\"color:#F47067\">|\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#96D0FF\">            echo \"STORE_PATH=$(pnpm store path)\" >> $GITHUB_OUTPUT\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">      - \u003C/span>\u003Cspan style=\"color:#8DDB8C\">uses\u003C/span>\u003Cspan style=\"color:#ADBAC7\">: \u003C/span>\u003Cspan style=\"color:#96D0FF\">actions/cache@v3\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#8DDB8C\">        name\u003C/span>\u003Cspan style=\"color:#ADBAC7\">: \u003C/span>\u003Cspan style=\"color:#96D0FF\">Setup pnpm cache\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#8DDB8C\">        with\u003C/span>\u003Cspan style=\"color:#ADBAC7\">:\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#8DDB8C\">            path\u003C/span>\u003Cspan style=\"color:#ADBAC7\">: \u003C/span>\u003Cspan style=\"color:#96D0FF\">${{ steps.pnpm-cache.outputs.STORE_PATH }}\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#8DDB8C\">            key\u003C/span>\u003Cspan style=\"color:#ADBAC7\">: \u003C/span>\u003Cspan style=\"color:#96D0FF\">${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#8DDB8C\">            restore-keys\u003C/span>\u003Cspan style=\"color:#ADBAC7\">: \u003C/span>\u003Cspan style=\"color:#F47067\">|\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#96D0FF\">                ${{ runner.os }}-pnpm-store-\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">      - \u003C/span>\u003Cspan style=\"color:#8DDB8C\">name\u003C/span>\u003Cspan style=\"color:#ADBAC7\">: \u003C/span>\u003Cspan style=\"color:#96D0FF\">Install dependencies\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#8DDB8C\">        run\u003C/span>\u003Cspan style=\"color:#ADBAC7\">: \u003C/span>\u003Cspan style=\"color:#96D0FF\">pnpm i\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">      - \u003C/span>\u003Cspan style=\"color:#8DDB8C\">name\u003C/span>\u003Cspan style=\"color:#ADBAC7\">: \u003C/span>\u003Cspan style=\"color:#96D0FF\">Setup Pages\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#8DDB8C\">        id\u003C/span>\u003Cspan style=\"color:#ADBAC7\">: \u003C/span>\u003Cspan style=\"color:#96D0FF\">pages\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#8DDB8C\">        uses\u003C/span>\u003Cspan style=\"color:#ADBAC7\">: \u003C/span>\u003Cspan style=\"color:#96D0FF\">actions/configure-pages@v3\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">      - \u003C/span>\u003Cspan style=\"color:#8DDB8C\">name\u003C/span>\u003Cspan style=\"color:#ADBAC7\">: \u003C/span>\u003Cspan style=\"color:#96D0FF\">Build with Astro\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#8DDB8C\">        run\u003C/span>\u003Cspan style=\"color:#ADBAC7\">: \u003C/span>\u003Cspan style=\"color:#F47067\">|\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#96D0FF\">          pnpm build \\\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#96D0FF\">            --site \"${{ steps.pages.outputs.origin }}\" \\\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#96D0FF\">            --base \"${{ steps.pages.outputs.base_path }}\"\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">      - \u003C/span>\u003Cspan style=\"color:#8DDB8C\">name\u003C/span>\u003Cspan style=\"color:#ADBAC7\">: \u003C/span>\u003Cspan style=\"color:#96D0FF\">Upload artifact\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#8DDB8C\">        uses\u003C/span>\u003Cspan style=\"color:#ADBAC7\">: \u003C/span>\u003Cspan style=\"color:#96D0FF\">actions/upload-pages-artifact@v1\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#8DDB8C\">        with\u003C/span>\u003Cspan style=\"color:#ADBAC7\">:\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#8DDB8C\">          path\u003C/span>\u003Cspan style=\"color:#ADBAC7\">: \u003C/span>\u003Cspan style=\"color:#96D0FF\">\"./dist\"\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#8DDB8C\">  deploy\u003C/span>\u003Cspan style=\"color:#ADBAC7\">:\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#8DDB8C\">    environment\u003C/span>\u003Cspan style=\"color:#ADBAC7\">:\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#8DDB8C\">        name\u003C/span>\u003Cspan style=\"color:#ADBAC7\">: \u003C/span>\u003Cspan style=\"color:#96D0FF\">github-pages\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#8DDB8C\">        url\u003C/span>\u003Cspan style=\"color:#ADBAC7\">: \u003C/span>\u003Cspan style=\"color:#96D0FF\">${{ steps.deployment.outputs.page_url }}\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#8DDB8C\">    needs\u003C/span>\u003Cspan style=\"color:#ADBAC7\">: \u003C/span>\u003Cspan style=\"color:#96D0FF\">build\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#8DDB8C\">    runs-on\u003C/span>\u003Cspan style=\"color:#ADBAC7\">: \u003C/span>\u003Cspan style=\"color:#96D0FF\">ubuntu-latest\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#8DDB8C\">    name\u003C/span>\u003Cspan style=\"color:#ADBAC7\">: \u003C/span>\u003Cspan style=\"color:#96D0FF\">Deploy\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#8DDB8C\">    steps\u003C/span>\u003Cspan style=\"color:#ADBAC7\">:\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">      - \u003C/span>\u003Cspan style=\"color:#8DDB8C\">name\u003C/span>\u003Cspan style=\"color:#ADBAC7\">: \u003C/span>\u003Cspan style=\"color:#96D0FF\">Deploy to GitHub Pages\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#8DDB8C\">        id\u003C/span>\u003Cspan style=\"color:#ADBAC7\">: \u003C/span>\u003Cspan style=\"color:#96D0FF\">deployment\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#8DDB8C\">        uses\u003C/span>\u003Cspan style=\"color:#ADBAC7\">: \u003C/span>\u003Cspan style=\"color:#96D0FF\">actions/deploy-pages@v2\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Cp>通过这个精心设计的GitHub Workflow，我可以实现博客内容的自动更新和部署，让读者随时随地都能够浏览到最新的文章和信息。\u003C/p>\n\u003Ch2 id=\"总结\">总结\u003C/h2>\n\u003Cp>通过将Obsidian、GitHub和Astro前端框架等工具融合在一起，我成功地搭建了一个高效、自动化的博客网站搭建流程。从创作到同步再到部署，整个流程无缝衔接，让我能够专注于内容创作，而不必过多担心技术细节。希望本文能够为有类似需求的朋友提供一些有用的思路和方法。\u003C/p>",{"headings":1493,"localImagePaths":1511,"remoteImagePaths":1512,"frontmatter":1513,"imagePaths":1516},[1494,1496,1499,1501,1504,1507,1510],{"depth":29,"slug":1495,"text":1482},"打造无缝博客搭建流程从obsidian到github-pages",{"depth":31,"slug":1497,"text":1498},"使用obsidian进行博客创作","使用Obsidian进行博客创作",{"depth":31,"slug":1500,"text":1500},"实现博客内容自动同步",{"depth":31,"slug":1502,"text":1503},"利用github-workflow实现自动分支合并","利用GitHub Workflow实现自动分支合并",{"depth":31,"slug":1505,"text":1506},"基于astro前端框架搭建博客网站","基于Astro前端框架搭建博客网站",{"depth":31,"slug":1508,"text":1509},"构建github-workflow实现自动部署","构建GitHub Workflow实现自动部署",{"depth":31,"slug":702,"text":702},[],[],{"title":1482,"description":1483,"pubDate":1514,"heroImage":1485,"date created":1514,"date modified":1198,"tags":1515,"minutesRead":777},"2023-08-12 22:43",[20],[],"200-Learning/210-Programing/打造无缝博客搭建流程：从Obsidian到GitHub Pages.md","200-learning/210-programing/算法套路",{"id":1518,"data":1520,"body":1525,"filePath":1526,"digest":1527,"rendered":1528,"legacyId":1542},{"title":1521,"description":15,"draft":16,"pubDate":1522,"heroImage":1523,"tags":1524},"算法套路",["Date","2023-08-15T14:16:00.000Z"],"https://images.unsplash.com/photo-1691437196305-b26b8b78fc01?crop=entropy&cs=srgb&fm=jpg&ixid=M3wzNjM5Nzd8MHwxfHJhbmRvbXx8fHx8fHx8fDE2OTIxMDkwMjh8&ixlib=rb-4.0.3&q=85",[133,242],"## 动态规划\n\n### 背包问题\n\n**完全背包和01背包问题唯一不同的地方就是，每种物品有无限件**。\n\n01背包:\n核心代码：\n```js\nfor(int i = 0; i \u003C weight.length; i++) { // 遍历物品\n    for(int j = bagWeight; j >= weight[i]; j--) { // 遍历背包容量\n        dp[j] = Math.max(dp[j], dp[j - weight[i]] + value[i]);\n    }\n}\n```\n01背包内嵌的循环是从大到小遍历，为了保证每个物品仅被添加一次。\n\n\n完全背包: 有N件物品和一个最多能背重量为W的背包。第i件物品的重量是`weight[i]`，得到的价值是`value[i]` 。**每件物品都有无限个（也就是可以放入背包多次）**，求解将哪些物品装入背包里物品价值总和最大。\n核心代码：\n```js\n// 先遍历物品，再遍历背包\nfor(int i = 0; i \u003C weight.length; i++) { // 遍历物品\n    for(int j = weight[i]; j \u003C= bagWeight ; j++) { // 遍历背包容量\n        dp[j] = Math.max(dp[j], dp[j - weight[i]] + value[i]);\n    }\n}\n```\n完全背包的物品是可以添加多次的，所以要从小到大去遍历\n\n\n:::warning\n求装满背包有几种方法，公式都是：`dp[j] += dp[j - nums[i]];`\n:::","src/content/blog/200-Learning/210-Programing/算法套路.md","b127d519e312fac6",{"html":1529,"metadata":1530},"\u003Ch2 id=\"动态规划\">动态规划\u003C/h2>\n\u003Ch3 id=\"背包问题\">背包问题\u003C/h3>\n\u003Cp>\u003Cstrong>完全背包和01背包问题唯一不同的地方就是，每种物品有无限件\u003C/strong>。\u003C/p>\n\u003Cp>01背包:\n核心代码：\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"js\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">for\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(int i \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> 0\u003C/span>\u003Cspan style=\"color:#ADBAC7\">; i \u003C/span>\u003Cspan style=\"color:#F47067\">&#x3C;\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> weight.\u003C/span>\u003Cspan style=\"color:#6CB6FF\">length\u003C/span>\u003Cspan style=\"color:#ADBAC7\">; i\u003C/span>\u003Cspan style=\"color:#F47067\">++\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) { \u003C/span>\u003Cspan style=\"color:#768390\">// 遍历物品\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">    for\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(int j \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> bagWeight; j \u003C/span>\u003Cspan style=\"color:#F47067\">>=\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> weight[i]; j\u003C/span>\u003Cspan style=\"color:#F47067\">--\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) { \u003C/span>\u003Cspan style=\"color:#768390\">// 遍历背包容量\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">        dp[j] \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> Math.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">max\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(dp[j], dp[j \u003C/span>\u003Cspan style=\"color:#F47067\">-\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> weight[i]] \u003C/span>\u003Cspan style=\"color:#F47067\">+\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> value[i]);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    }\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Cp>01背包内嵌的循环是从大到小遍历，为了保证每个物品仅被添加一次。\u003C/p>\n\u003Cp>完全背包: 有N件物品和一个最多能背重量为W的背包。第i件物品的重量是\u003Ccode>weight[i]\u003C/code>，得到的价值是\u003Ccode>value[i]\u003C/code> 。\u003Cstrong>每件物品都有无限个（也就是可以放入背包多次）\u003C/strong>，求解将哪些物品装入背包里物品价值总和最大。\n核心代码：\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"js\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">// 先遍历物品，再遍历背包\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">for\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(int i \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> 0\u003C/span>\u003Cspan style=\"color:#ADBAC7\">; i \u003C/span>\u003Cspan style=\"color:#F47067\">&#x3C;\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> weight.\u003C/span>\u003Cspan style=\"color:#6CB6FF\">length\u003C/span>\u003Cspan style=\"color:#ADBAC7\">; i\u003C/span>\u003Cspan style=\"color:#F47067\">++\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) { \u003C/span>\u003Cspan style=\"color:#768390\">// 遍历物品\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">    for\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(int j \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> weight[i]; j \u003C/span>\u003Cspan style=\"color:#F47067\">&#x3C;=\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> bagWeight ; j\u003C/span>\u003Cspan style=\"color:#F47067\">++\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) { \u003C/span>\u003Cspan style=\"color:#768390\">// 遍历背包容量\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">        dp[j] \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> Math.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">max\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(dp[j], dp[j \u003C/span>\u003Cspan style=\"color:#F47067\">-\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> weight[i]] \u003C/span>\u003Cspan style=\"color:#F47067\">+\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> value[i]);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    }\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Cp>完全背包的物品是可以添加多次的，所以要从小到大去遍历\u003C/p>\n\u003Caside class=\"callout callout-warn\">\u003Cdiv class=\"callout-indicator\">\u003Cdiv class=\"callout-hint\">\u003Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" aria-hidden=\"true\">\u003Cpath d=\"M12 9v4m0 4h.01M8.681 4.082C9.351 2.797 10.621 2 12 2s2.649.797 3.319 2.082l6.203 11.904a4.28 4.28 0 0 1-.046 4.019C20.793 21.241 19.549 22 18.203 22H5.797c-1.346 0-2.59-.759-3.273-1.995a4.28 4.28 0 0 1-.046-4.019L8.681 4.082Z\">\u003C/path>\u003C/svg>\u003C/div>\u003Cdiv class=\"callout-title\">Warning\u003C/div>\u003C/div>\u003Cdiv class=\"callout-content\">\u003Cp>求装满背包有几种方法，公式都是：\u003Ccode>dp[j] += dp[j - nums[i]];\u003C/code>\u003C/p>\u003C/div>\u003C/aside>",{"headings":1531,"localImagePaths":1536,"remoteImagePaths":1537,"frontmatter":1538,"imagePaths":1541},[1532,1534],{"depth":31,"slug":1533,"text":1533},"动态规划",{"depth":37,"slug":1535,"text":1535},"背包问题",[],[],{"title":1521,"description":15,"pubDate":1539,"heroImage":1523,"date created":1539,"date modified":589,"draft":16,"tags":1540,"minutesRead":404},"2023-08-15 22:16",[133,242],[],"200-Learning/210-Programing/算法套路.md","200-learning/210-programing/重学css",{"id":1543,"data":1545,"body":1550,"filePath":1551,"digest":1552,"rendered":1553,"legacyId":1587},{"title":1546,"description":15,"pubDate":1547,"heroImage":1548,"tags":1549},"重学CSS",["Date","2023-06-27T08:23:00.000Z"],"https://images.unsplash.com/photo-1523437113738-bbd3cc89fb19?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=640&q=80",[133,181,242,1104],"#CSS #Programming #FE\n\n> Silence is deep as Eternity; Speech is shallow as Time.\n> — \u003Ccite>Thomas Carlyle\u003C/cite>\n\n\n\n- [Learn CSS | web.dev](https://web.dev/learn/css/)\n- [CSS - 学习 Web 开发 | MDN](https://developer.mozilla.org/zh-CN/docs/Learn/CSS)\n\n\n## TOC\n\n## `:where` 和 `:is`\n[`:where()` - CSS：层叠样式表 | MDN](https://developer.mozilla.org/zh-CN/docs/Web/CSS/:where)\n[`:is()` - CSS：层叠样式表 | MDN](https://developer.mozilla.org/zh-CN/docs/Web/CSS/:is)\n\n`:is()` CSS 伪类函数以选择器列表作为参数，并选择该列表中任意一个选择器可以选择的元素。\n\n`:where()` CSS 伪类函数接受选择器列表作为它的参数，将会选择所有能被该选择器列表中任何一条规则选中的元素。\n\n```css\n/** 给二级列表添加样式 */\n:is(ol, ul) :is(ol, ul) ol {\n    list-style-type: lower-greek;\n    color: chocolate;\n}\n\n/* Selects any paragraph inside a header, main or footer element that is being hovered */\n:where(header, main, footer) p:hover {\n  color: red;\n  cursor: pointer;\n}\n```\n\n两者之间的区别在于，`:is()` 会计入整个选择器的优先级（它采用其最具体参数的优先级），而 `:where()` 的优先级为 0。这可以通过 `:where()` 参考页面上的示例来演示。\n\n规范将 `:is()` 和 `:where()` 定义为接受容错选择器列表。\n1. `:is()` 伪类可以大大简化您的 CSS 选择器。\n2. `:is()` 不能选择伪元素\n\n\n## 视觉格式化模型\n\n[视觉格式化模型 - CSS：层叠样式表 | MDN](https://developer.mozilla.org/zh-CN/docs/Web/CSS/Visual_formatting_model)\n\n- 块（block）：块在文档流中占据独立的区域，块与块之间在垂直方向按照顺序依次堆叠\n- 包含块（containing block）：包含其他盒子的块称为包含块\n- 盒子（box）：由CSS引擎根据文档中的内容创建，主要用于文档元素的定位、布局、格式化等用途。\n- 块级元素（block level element）：元素的display为block、table、list-item时，该元素将成为块级元素。元素是否是块级元素，仅是元素本身的属性，并不直接用于格式化上下文的创建或布局。\n- 块级盒子（block level box）：由块级元素生成。一个块级元素至少包含一个块级盒子，但也可能生成多个（例如列表项元素）\n- 块盒子（block box）：如果一个块级盒子同时也是一个块容器盒子，则称其为块盒子。除具名块盒子之外，还有一类块盒子是匿名的，这类盒子被称为匿名块盒子（anonymuse block box），匿名盒子无法被css选择器选中。\n- 块容器盒子（block containing box）：块容器盒子侧重于当前盒子作为*容器*这一角色，它不参与当前块的布局与定位，描述的仅仅是当前盒子与其后代之间的关系。\n- 行内级元素（inline level element）：display为**inline**、**inline-block**、**inline-table**的元素称为行内级元素。与块级元素一样，元素是否是行内级元素仅是元素本身的属性，并不直接用于格式化上下文的创建与布局。\n- 行内级盒子（inline-level box）：由行内级元素生成。行内级盒子包含行内盒子和原子行内级盒子两种，区别在于该盒子是否参与行内格式化上下文的创建。\n- 行内盒子（inline box）：参与行内格式化上下文创建的行内级盒子称为行内盒子。与块盒子类似，行内盒子也分为具名行内盒子和匿名行内盒子（anonymous inline box）两种。\n- 原子行内级盒子（atomic inline-level box）：不参与行内格式化上下文创建的行内级盒子。原子行内级盒子一开始叫做原子行内盒子（atomic inline box），后被修正。原子行内级盒子的内容不会拆分成多行显示。\n\n每个块级盒子都会参与*块格式化上下文*的创建，而每个块级元素都至少会生成一个块级盒子，即主块级盒子（principal block-level box）。\n主块级盒子包含由后代元素生成的盒子及其内容，同时它也会参与到*定位方案*。\n一个块级盒子可能也是一个块容器盒子。块容器盒子要么只包含其他块级盒子，要么只包含行内盒子并同时创建一个行内格式化上下文。\n\n块级盒子描述了元素与其父元素和兄弟元素之间的行为，而块容器盒子描述了元素跟其后代之间的行为。一个同时是块容器盒子的块级盒子被称为块盒子。\n\n在某些情况下进行视觉格式化时需要添加增补性的盒子，这些盒子不能用CSS选择器选中，因此被称为匿名盒子。匿名盒子所有可继承的CSS属性值都是`inherit`，而所有不可继承的CSS属性值都为`initial`。创建匿名块盒子的情形如下：\n1. 块包含行内级盒子和块级盒子时，会在相邻的行内级盒子外创建匿名块盒子。\n2. 行内盒子包含一或多个块盒子。此时，包含块盒子的盒子会拆分为两个行内盒子，分别位于块盒子的前后。\n```html\n\u003C!-- 1 -->\n\u003Cdiv class=\"flex\">\nI am wrapped in an anonymous box\n\u003Cp>I am in the paragraph\u003C/p>\nI am wrapped in an anonymous box.\n\u003C/div>\n\n\u003C!-- 2 -->\n\u003Cdiv class=\"example\">\nI am wrapped in an anonymous box\n\u003Cp>I am in the paragraph\u003C/p>\nI am wrapped in an anonymous box.\n\u003C/div>\n```\n\n\n\n## 定位方案\n\n- 普通流：按照次序依次定位每个盒子\n- 浮动：将盒子从普通流中单独拎出来，将其放到盒子的某一边\n- 绝对定位：按照绝对位置来定位盒子，其位置根据盒子的包含元素所建立的绝对坐标系来计算，因此绝对定位元素有可能覆盖其他元素。\n\n### 普通流\n\n按照次序依次定位每个盒子。\n当CSS的`position`属性为`static`或`relative`，并且`float`为`none`时，其布局方式为普通流。\n在块格式化上下文中，盒子在垂直方向依次排列；在行内格式化上下文中，盒子则水平排列。\n普通流又有两种情况：\n- positon为static时为静态定位，此时每个盒子根据普通流所计算出的确切位置来定位。\n- position为relative时为相对定位，此时每个盒子还会根据top、bottom、left、right属性的值在其原本所在的位置上产生指定大小偏移。\n\n### 浮动\n\n浮动盒子会浮动到当前行的开始和尾部位置，这会导致普通流中的文本及其他内容会“流”到浮动盒子边缘处，除非元素通过clear清楚了前面的浮动。\n一个盒子的float值不为none，并且其position为static或relative时，该盒子为浮动定位。\n\n行盒子会伸缩以适应浮动盒子的大小。\n\n### 绝对定位\n\n绝对定位中盒子会完全从当前流中移除，并不会在与其有任何联系（仅指位置和定位计算）。\n\n元素的position为absolute或fixed，该元素为绝对定位。\n\n## 应用或脱离流布局\n\n脱离常规流的元素：\n- floated items。浮动的元素\n- items with `position: absolute` (including `position: fixed` which acts in the same way)。通过设置 position 属性为 absolute 或者 fixed 的元素\n- the root element (`html`) 根元素\n脱离常规流的元素会创建新的块级格式化上下文环境，其中包含对的所有元素构成了一个小的布局环境，与页面中的其他内容分割开来。而根元素，作为所有页面的容器自身脱离常规流，为整个文档创建一个块级格式化上下文环境。\n\n当移动元素或使元素脱离文档流，为防止折叠，你可能需要对元素内容和严肃周围内容做一些管理，要么清楚浮动，要么保证相对定位不会覆盖其他元素。\n\n\n## 块格式化上下文\n\n>块格式化上下文（Block Formatting Context，BFC）：是Web页面的可视CSS渲染的一部分，是块级盒子布局过程发生的区域，也是浮动元素与其他元素交互的区域。\n\n格式化上下文包含以下几种类型：\n1. 块格式化上下文。根据布局块规则布局子元素\n2. 内联格式化上下文。\n3. 灵活格式化上下文。将其子元素布局为灵活项（flex items）\n\n下列方式会创建块格式化上下文：\n- 根元素（`\u003Chtml>`）\n- 浮动元素（[`float`](https://developer.mozilla.org/zh-CN/docs/Web/CSS/float) 值不为 `none`）\n- 绝对定位元素（[`position`](https://developer.mozilla.org/zh-CN/docs/Web/CSS/position) 值为 `absolute` 或 `fixed`）\n- 行内块元素（[`display`](https://developer.mozilla.org/zh-CN/docs/Web/CSS/display) 值为 `inline-block`）\n- 表格单元格（[`display`](https://developer.mozilla.org/zh-CN/docs/Web/CSS/display) 值为 `table-cell`，HTML 表格单元格默认值）\n- 表格标题（[`display`](https://developer.mozilla.org/zh-CN/docs/Web/CSS/display) 值为 `table-caption`，HTML 表格标题默认值）\n- 匿名表格单元格元素（[`display`](https://developer.mozilla.org/zh-CN/docs/Web/CSS/display) 值为 `table`、`table-row`、 `table-row-group`、`table-header-group`、`table-footer-group`（分别是 HTML table、tr、tbody、thead、tfoot 的默认值）或 `inline-table`）\n- [`overflow`](https://developer.mozilla.org/zh-CN/docs/Web/CSS/overflow) 值不为 `visible`、`clip` 的块元素\n- [`display`](https://developer.mozilla.org/zh-CN/docs/Web/CSS/display) 值为 `flow-root` 的元素\n- [`contain`](https://developer.mozilla.org/zh-CN/docs/Web/CSS/contain) 值为 `layout`、`content` 或 `paint` 的元素\n- 弹性元素（[`display`](https://developer.mozilla.org/zh-CN/docs/Web/CSS/display) 值为 `flex` 或 `inline-flex` 元素的直接子元素），如果它们本身既不是 [flex](https://developer.mozilla.org/zh-CN/docs/Glossary/Flex_Container)、[grid](https://developer.mozilla.org/zh-CN/docs/Glossary/Grid_Container) 也不是 [table](https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_table) 容器\n- 网格元素（[`display`](https://developer.mozilla.org/zh-CN/docs/Web/CSS/display) 值为 `grid` 或 `inline-grid` 元素的直接子元素），如果它们本身既不是 [flex](https://developer.mozilla.org/zh-CN/docs/Glossary/Flex_Container)、[grid](https://developer.mozilla.org/zh-CN/docs/Glossary/Grid_Container) 也不是 [table](https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_table) 容器\n- 多列容器（[`column-count`](https://developer.mozilla.org/zh-CN/docs/Web/CSS/column-count) 或 [`column-width` (en-US)](https://developer.mozilla.org/en-US/docs/Web/CSS/column-width \"Currently only available in English (US)\") 值不为 `auto`，包括`column-count` 为 `1`）\n- `column-span` 值为 `all` 的元素始终会创建一个新的 BFC，即使该元素没有包裹在一个多列容器中 ([规范变更](https://github.com/w3c/csswg-drafts/commit/a8634b96900279916bd6c505fda88dda71d8ec51), [Chrome bug](https://bugs.chromium.org/p/chromium/issues/detail?id=709362))\n\n\n例子：\n```html\n\u003Cdiv class=\"box\">\n   \u003Cdiv class=\"float\">I am a floated box!\u003C/div>\n   \u003Cp>I am content inside the container.\u003C/p>\n\u003C/div>\n```\n```css\n.box {\n   background-color: rgb(224, 206, 247);\n   border: 5px solid rebeccapurple;\n}\n```\n\n![image.png](https://raw.githubusercontent.com/fw6/assets/main/toy_docs/20230705153904.png)\n\n在上面例子中由于float的内容比旁边内容高，所以float的元素贯穿了box；浮动脱离文档流，因此背景和边框仅包含内容不包含浮动。\n创建一个新的BFC将包含该浮动，如外部容器元素设置`overflow: auto`或其他不是`overflow: visible`的值。\n推荐一个新的方式显式创建BFC：`display: flow-root`，不会产生任何其他潜在的副作用，容器下的所有内容都将参与容器的块格式上下文，并且浮动不会从元素底部弹出。\n\n\n\n## 文本断行与包装文本\n\n[Overflowing text | MDN Play](https://developer.mozilla.org/en-US/play?id=qtxraz4LZy72oE60ZNsdlUHKQY0jyA9wIzoBIO6VRfXRP2V274cvwwOEnKqp6SgDkbB2ea0tyAh0b1e5)\n[CSS Box Sizing Module Level 3](https://www.w3.org/TR/css-sizing-3/)\n[CSS Writing Modes Level 3](https://www.w3.org/TR/css-writing-modes-3/)\n\n\n```html\n\u003Cdiv class=\"preview\">\n  \u003Cdiv class=\"box\">Llanfairpwllgwyngyllgogerychwyrndrobwllllantysiliogogogoch\u003C/div>\n\u003C/div>\n```\n```css\n.preview {\n  border: 1px solid;\n  padding: 16px;\n}\n.box {\n  inline-size: 50px;\n  border: 1px solid red;\n}\n```\noverflow默认visible，故文本超出时还能继续看到。\ninline-size或width可设置为min-width，宽度设置为最小内容宽度，\n如果需要内容宽度适应inline-size，但还要能完整换行展示出来，可配合使用`overflow-wrap:break-word`，这个样式会将超出的单词完整换行（可用`word-break`替代）\n\n单词边界换行方式也可选择增加连字符：`hyphens: manual`\n\n## Shape\n\n[CSS Shapes Module Level 2](https://drafts.csswg.org/css-shapes-2/)\n\n\nCSS的Shape相关规范定义了浮动图像元素的任意几何形状。\n其他类似的规范有：\n- [CSS Masking - CSS：层叠样式表 | MDN](https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_masking) 定义部分或完全隐藏视觉部分元素区域\n- [CSS Exclusions Module Level 1](https://www.w3.org/TR/css3-exclusions/) 定义了容器盒子内包装上下文的排除区域与内联流内容的环绕（流动）关系\n\n\n![image.png](https://raw.githubusercontent.com/fw6/assets/main/toy_docs/20230705200647.png)\n```css\n.float {\n\twidth: 100px;\n\theight: 100px;\n\tshape-outside: polygon(10px 10px, 90px 50px, 40px 50px, 90px 90px, 10px 90px);\n\tshape-margin: 10px;\n}\n```","src/content/blog/200-Learning/210-Programing/重学CSS.md","9c1ea5a78da01958",{"html":1554,"metadata":1555},"\u003Cp>#CSS #Programming #FE\u003C/p>\n\u003Cblockquote>\n\u003Cp>Silence is deep as Eternity; Speech is shallow as Time.\n— \u003Ccite>Thomas Carlyle\u003C/cite>\u003C/p>\n\u003C/blockquote>\n\u003Cul>\n\u003Cli>\u003Ca href=\"https://web.dev/learn/css/\">Learn CSS | web.dev\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Learn/CSS\">CSS - 学习 Web 开发 | MDN\u003C/a>\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"toc\">TOC\u003C/h2>\n\u003Cul>\n\u003Cli>\u003Ca href=\"#where-%E5%92%8C-is\">\u003Ccode>:where\u003C/code> 和 \u003Ccode>:is\u003C/code>\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#%E8%A7%86%E8%A7%89%E6%A0%BC%E5%BC%8F%E5%8C%96%E6%A8%A1%E5%9E%8B\">视觉格式化模型\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#%E5%AE%9A%E4%BD%8D%E6%96%B9%E6%A1%88\">定位方案\u003C/a>\n\u003Cul>\n\u003Cli>\u003Ca href=\"#%E6%99%AE%E9%80%9A%E6%B5%81\">普通流\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#%E6%B5%AE%E5%8A%A8\">浮动\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#%E7%BB%9D%E5%AF%B9%E5%AE%9A%E4%BD%8D\">绝对定位\u003C/a>\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\u003Ca href=\"#%E5%BA%94%E7%94%A8%E6%88%96%E8%84%B1%E7%A6%BB%E6%B5%81%E5%B8%83%E5%B1%80\">应用或脱离流布局\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#%E5%9D%97%E6%A0%BC%E5%BC%8F%E5%8C%96%E4%B8%8A%E4%B8%8B%E6%96%87\">块格式化上下文\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#%E6%96%87%E6%9C%AC%E6%96%AD%E8%A1%8C%E4%B8%8E%E5%8C%85%E8%A3%85%E6%96%87%E6%9C%AC\">文本断行与包装文本\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#shape\">Shape\u003C/a>\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"where-和-is\">\u003Ccode>:where\u003C/code> 和 \u003Ccode>:is\u003C/code>\u003C/h2>\n\u003Cp>\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/:where\">\u003Ccode>:where()\u003C/code> - CSS：层叠样式表 | MDN\u003C/a>\n\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/:is\">\u003Ccode>:is()\u003C/code> - CSS：层叠样式表 | MDN\u003C/a>\u003C/p>\n\u003Cp>\u003Ccode>:is()\u003C/code> CSS 伪类函数以选择器列表作为参数，并选择该列表中任意一个选择器可以选择的元素。\u003C/p>\n\u003Cp>\u003Ccode>:where()\u003C/code> CSS 伪类函数接受选择器列表作为它的参数，将会选择所有能被该选择器列表中任何一条规则选中的元素。\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"css\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"css\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">/** 给二级列表添加样式 */\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#6CB6FF\">:is\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#8DDB8C\">ol\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, \u003C/span>\u003Cspan style=\"color:#8DDB8C\">ul\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) \u003C/span>\u003Cspan style=\"color:#6CB6FF\">:is\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#8DDB8C\">ol\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, \u003C/span>\u003Cspan style=\"color:#8DDB8C\">ul\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) \u003C/span>\u003Cspan style=\"color:#8DDB8C\">ol\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#6CB6FF\">    list-style-type\u003C/span>\u003Cspan style=\"color:#ADBAC7\">: \u003C/span>\u003Cspan style=\"color:#6CB6FF\">lower-greek\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#6CB6FF\">    color\u003C/span>\u003Cspan style=\"color:#ADBAC7\">: \u003C/span>\u003Cspan style=\"color:#6CB6FF\">chocolate\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">}\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">/* Selects any paragraph inside a header, main or footer element that is being hovered */\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#6CB6FF\">:where\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#8DDB8C\">header\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, \u003C/span>\u003Cspan style=\"color:#8DDB8C\">main\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, \u003C/span>\u003Cspan style=\"color:#8DDB8C\">footer\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) \u003C/span>\u003Cspan style=\"color:#8DDB8C\">p\u003C/span>\u003Cspan style=\"color:#6CB6FF\">:hover\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#6CB6FF\">  color\u003C/span>\u003Cspan style=\"color:#ADBAC7\">: \u003C/span>\u003Cspan style=\"color:#6CB6FF\">red\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#6CB6FF\">  cursor\u003C/span>\u003Cspan style=\"color:#ADBAC7\">: \u003C/span>\u003Cspan style=\"color:#6CB6FF\">pointer\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Cp>两者之间的区别在于，\u003Ccode>:is()\u003C/code> 会计入整个选择器的优先级（它采用其最具体参数的优先级），而 \u003Ccode>:where()\u003C/code> 的优先级为 0。这可以通过 \u003Ccode>:where()\u003C/code> 参考页面上的示例来演示。\u003C/p>\n\u003Cp>规范将 \u003Ccode>:is()\u003C/code> 和 \u003Ccode>:where()\u003C/code> 定义为接受容错选择器列表。\u003C/p>\n\u003Col>\n\u003Cli>\u003Ccode>:is()\u003C/code> 伪类可以大大简化您的 CSS 选择器。\u003C/li>\n\u003Cli>\u003Ccode>:is()\u003C/code> 不能选择伪元素\u003C/li>\n\u003C/ol>\n\u003Ch2 id=\"视觉格式化模型\">视觉格式化模型\u003C/h2>\n\u003Cp>\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/Visual_formatting_model\">视觉格式化模型 - CSS：层叠样式表 | MDN\u003C/a>\u003C/p>\n\u003Cul>\n\u003Cli>块（block）：块在文档流中占据独立的区域，块与块之间在垂直方向按照顺序依次堆叠\u003C/li>\n\u003Cli>包含块（containing block）：包含其他盒子的块称为包含块\u003C/li>\n\u003Cli>盒子（box）：由CSS引擎根据文档中的内容创建，主要用于文档元素的定位、布局、格式化等用途。\u003C/li>\n\u003Cli>块级元素（block level element）：元素的display为block、table、list-item时，该元素将成为块级元素。元素是否是块级元素，仅是元素本身的属性，并不直接用于格式化上下文的创建或布局。\u003C/li>\n\u003Cli>块级盒子（block level box）：由块级元素生成。一个块级元素至少包含一个块级盒子，但也可能生成多个（例如列表项元素）\u003C/li>\n\u003Cli>块盒子（block box）：如果一个块级盒子同时也是一个块容器盒子，则称其为块盒子。除具名块盒子之外，还有一类块盒子是匿名的，这类盒子被称为匿名块盒子（anonymuse block box），匿名盒子无法被css选择器选中。\u003C/li>\n\u003Cli>块容器盒子（block containing box）：块容器盒子侧重于当前盒子作为\u003Cem>容器\u003C/em>这一角色，它不参与当前块的布局与定位，描述的仅仅是当前盒子与其后代之间的关系。\u003C/li>\n\u003Cli>行内级元素（inline level element）：display为\u003Cstrong>inline\u003C/strong>、\u003Cstrong>inline-block\u003C/strong>、\u003Cstrong>inline-table\u003C/strong>的元素称为行内级元素。与块级元素一样，元素是否是行内级元素仅是元素本身的属性，并不直接用于格式化上下文的创建与布局。\u003C/li>\n\u003Cli>行内级盒子（inline-level box）：由行内级元素生成。行内级盒子包含行内盒子和原子行内级盒子两种，区别在于该盒子是否参与行内格式化上下文的创建。\u003C/li>\n\u003Cli>行内盒子（inline box）：参与行内格式化上下文创建的行内级盒子称为行内盒子。与块盒子类似，行内盒子也分为具名行内盒子和匿名行内盒子（anonymous inline box）两种。\u003C/li>\n\u003Cli>原子行内级盒子（atomic inline-level box）：不参与行内格式化上下文创建的行内级盒子。原子行内级盒子一开始叫做原子行内盒子（atomic inline box），后被修正。原子行内级盒子的内容不会拆分成多行显示。\u003C/li>\n\u003C/ul>\n\u003Cp>每个块级盒子都会参与\u003Cem>块格式化上下文\u003C/em>的创建，而每个块级元素都至少会生成一个块级盒子，即主块级盒子（principal block-level box）。\n主块级盒子包含由后代元素生成的盒子及其内容，同时它也会参与到\u003Cem>定位方案\u003C/em>。\n一个块级盒子可能也是一个块容器盒子。块容器盒子要么只包含其他块级盒子，要么只包含行内盒子并同时创建一个行内格式化上下文。\u003C/p>\n\u003Cp>块级盒子描述了元素与其父元素和兄弟元素之间的行为，而块容器盒子描述了元素跟其后代之间的行为。一个同时是块容器盒子的块级盒子被称为块盒子。\u003C/p>\n\u003Cp>在某些情况下进行视觉格式化时需要添加增补性的盒子，这些盒子不能用CSS选择器选中，因此被称为匿名盒子。匿名盒子所有可继承的CSS属性值都是\u003Ccode>inherit\u003C/code>，而所有不可继承的CSS属性值都为\u003Ccode>initial\u003C/code>。创建匿名块盒子的情形如下：\u003C/p>\n\u003Col>\n\u003Cli>块包含行内级盒子和块级盒子时，会在相邻的行内级盒子外创建匿名块盒子。\u003C/li>\n\u003Cli>行内盒子包含一或多个块盒子。此时，包含块盒子的盒子会拆分为两个行内盒子，分别位于块盒子的前后。\u003C/li>\n\u003C/ol>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"html\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"html\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">&#x3C;!-- 1 -->\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">&#x3C;\u003C/span>\u003Cspan style=\"color:#8DDB8C\">div\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> class\u003C/span>\u003Cspan style=\"color:#ADBAC7\">=\u003C/span>\u003Cspan style=\"color:#96D0FF\">\"flex\"\u003C/span>\u003Cspan style=\"color:#ADBAC7\">>\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">I am wrapped in an anonymous box\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">&#x3C;\u003C/span>\u003Cspan style=\"color:#8DDB8C\">p\u003C/span>\u003Cspan style=\"color:#ADBAC7\">>I am in the paragraph&#x3C;/\u003C/span>\u003Cspan style=\"color:#8DDB8C\">p\u003C/span>\u003Cspan style=\"color:#ADBAC7\">>\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">I am wrapped in an anonymous box.\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">&#x3C;/\u003C/span>\u003Cspan style=\"color:#8DDB8C\">div\u003C/span>\u003Cspan style=\"color:#ADBAC7\">>\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">&#x3C;!-- 2 -->\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">&#x3C;\u003C/span>\u003Cspan style=\"color:#8DDB8C\">div\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> class\u003C/span>\u003Cspan style=\"color:#ADBAC7\">=\u003C/span>\u003Cspan style=\"color:#96D0FF\">\"example\"\u003C/span>\u003Cspan style=\"color:#ADBAC7\">>\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">I am wrapped in an anonymous box\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">&#x3C;\u003C/span>\u003Cspan style=\"color:#8DDB8C\">p\u003C/span>\u003Cspan style=\"color:#ADBAC7\">>I am in the paragraph&#x3C;/\u003C/span>\u003Cspan style=\"color:#8DDB8C\">p\u003C/span>\u003Cspan style=\"color:#ADBAC7\">>\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">I am wrapped in an anonymous box.\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">&#x3C;/\u003C/span>\u003Cspan style=\"color:#8DDB8C\">div\u003C/span>\u003Cspan style=\"color:#ADBAC7\">>\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Ch2 id=\"定位方案\">定位方案\u003C/h2>\n\u003Cul>\n\u003Cli>普通流：按照次序依次定位每个盒子\u003C/li>\n\u003Cli>浮动：将盒子从普通流中单独拎出来，将其放到盒子的某一边\u003C/li>\n\u003Cli>绝对定位：按照绝对位置来定位盒子，其位置根据盒子的包含元素所建立的绝对坐标系来计算，因此绝对定位元素有可能覆盖其他元素。\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"普通流\">普通流\u003C/h3>\n\u003Cp>按照次序依次定位每个盒子。\n当CSS的\u003Ccode>position\u003C/code>属性为\u003Ccode>static\u003C/code>或\u003Ccode>relative\u003C/code>，并且\u003Ccode>float\u003C/code>为\u003Ccode>none\u003C/code>时，其布局方式为普通流。\n在块格式化上下文中，盒子在垂直方向依次排列；在行内格式化上下文中，盒子则水平排列。\n普通流又有两种情况：\u003C/p>\n\u003Cul>\n\u003Cli>positon为static时为静态定位，此时每个盒子根据普通流所计算出的确切位置来定位。\u003C/li>\n\u003Cli>position为relative时为相对定位，此时每个盒子还会根据top、bottom、left、right属性的值在其原本所在的位置上产生指定大小偏移。\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"浮动\">浮动\u003C/h3>\n\u003Cp>浮动盒子会浮动到当前行的开始和尾部位置，这会导致普通流中的文本及其他内容会“流”到浮动盒子边缘处，除非元素通过clear清楚了前面的浮动。\n一个盒子的float值不为none，并且其position为static或relative时，该盒子为浮动定位。\u003C/p>\n\u003Cp>行盒子会伸缩以适应浮动盒子的大小。\u003C/p>\n\u003Ch3 id=\"绝对定位\">绝对定位\u003C/h3>\n\u003Cp>绝对定位中盒子会完全从当前流中移除，并不会在与其有任何联系（仅指位置和定位计算）。\u003C/p>\n\u003Cp>元素的position为absolute或fixed，该元素为绝对定位。\u003C/p>\n\u003Ch2 id=\"应用或脱离流布局\">应用或脱离流布局\u003C/h2>\n\u003Cp>脱离常规流的元素：\u003C/p>\n\u003Cul>\n\u003Cli>floated items。浮动的元素\u003C/li>\n\u003Cli>items with \u003Ccode>position: absolute\u003C/code> (including \u003Ccode>position: fixed\u003C/code> which acts in the same way)。通过设置 position 属性为 absolute 或者 fixed 的元素\u003C/li>\n\u003Cli>the root element (\u003Ccode>html\u003C/code>) 根元素\n脱离常规流的元素会创建新的块级格式化上下文环境，其中包含对的所有元素构成了一个小的布局环境，与页面中的其他内容分割开来。而根元素，作为所有页面的容器自身脱离常规流，为整个文档创建一个块级格式化上下文环境。\u003C/li>\n\u003C/ul>\n\u003Cp>当移动元素或使元素脱离文档流，为防止折叠，你可能需要对元素内容和严肃周围内容做一些管理，要么清楚浮动，要么保证相对定位不会覆盖其他元素。\u003C/p>\n\u003Ch2 id=\"块格式化上下文\">块格式化上下文\u003C/h2>\n\u003Cblockquote>\n\u003Cp>块格式化上下文（Block Formatting Context，BFC）：是Web页面的可视CSS渲染的一部分，是块级盒子布局过程发生的区域，也是浮动元素与其他元素交互的区域。\u003C/p>\n\u003C/blockquote>\n\u003Cp>格式化上下文包含以下几种类型：\u003C/p>\n\u003Col>\n\u003Cli>块格式化上下文。根据布局块规则布局子元素\u003C/li>\n\u003Cli>内联格式化上下文。\u003C/li>\n\u003Cli>灵活格式化上下文。将其子元素布局为灵活项（flex items）\u003C/li>\n\u003C/ol>\n\u003Cp>下列方式会创建块格式化上下文：\u003C/p>\n\u003Cul>\n\u003Cli>根元素（\u003Ccode>&#x3C;html>\u003C/code>）\u003C/li>\n\u003Cli>浮动元素（\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/float\">\u003Ccode>float\u003C/code>\u003C/a> 值不为 \u003Ccode>none\u003C/code>）\u003C/li>\n\u003Cli>绝对定位元素（\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/position\">\u003Ccode>position\u003C/code>\u003C/a> 值为 \u003Ccode>absolute\u003C/code> 或 \u003Ccode>fixed\u003C/code>）\u003C/li>\n\u003Cli>行内块元素（\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/display\">\u003Ccode>display\u003C/code>\u003C/a> 值为 \u003Ccode>inline-block\u003C/code>）\u003C/li>\n\u003Cli>表格单元格（\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/display\">\u003Ccode>display\u003C/code>\u003C/a> 值为 \u003Ccode>table-cell\u003C/code>，HTML 表格单元格默认值）\u003C/li>\n\u003Cli>表格标题（\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/display\">\u003Ccode>display\u003C/code>\u003C/a> 值为 \u003Ccode>table-caption\u003C/code>，HTML 表格标题默认值）\u003C/li>\n\u003Cli>匿名表格单元格元素（\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/display\">\u003Ccode>display\u003C/code>\u003C/a> 值为 \u003Ccode>table\u003C/code>、\u003Ccode>table-row\u003C/code>、 \u003Ccode>table-row-group\u003C/code>、\u003Ccode>table-header-group\u003C/code>、\u003Ccode>table-footer-group\u003C/code>（分别是 HTML table、tr、tbody、thead、tfoot 的默认值）或 \u003Ccode>inline-table\u003C/code>）\u003C/li>\n\u003Cli>\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/overflow\">\u003Ccode>overflow\u003C/code>\u003C/a> 值不为 \u003Ccode>visible\u003C/code>、\u003Ccode>clip\u003C/code> 的块元素\u003C/li>\n\u003Cli>\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/display\">\u003Ccode>display\u003C/code>\u003C/a> 值为 \u003Ccode>flow-root\u003C/code> 的元素\u003C/li>\n\u003Cli>\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/contain\">\u003Ccode>contain\u003C/code>\u003C/a> 值为 \u003Ccode>layout\u003C/code>、\u003Ccode>content\u003C/code> 或 \u003Ccode>paint\u003C/code> 的元素\u003C/li>\n\u003Cli>弹性元素（\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/display\">\u003Ccode>display\u003C/code>\u003C/a> 值为 \u003Ccode>flex\u003C/code> 或 \u003Ccode>inline-flex\u003C/code> 元素的直接子元素），如果它们本身既不是 \u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Glossary/Flex_Container\">flex\u003C/a>、\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Glossary/Grid_Container\">grid\u003C/a> 也不是 \u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_table\">table\u003C/a> 容器\u003C/li>\n\u003Cli>网格元素（\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/display\">\u003Ccode>display\u003C/code>\u003C/a> 值为 \u003Ccode>grid\u003C/code> 或 \u003Ccode>inline-grid\u003C/code> 元素的直接子元素），如果它们本身既不是 \u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Glossary/Flex_Container\">flex\u003C/a>、\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Glossary/Grid_Container\">grid\u003C/a> 也不是 \u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_table\">table\u003C/a> 容器\u003C/li>\n\u003Cli>多列容器（\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/column-count\">\u003Ccode>column-count\u003C/code>\u003C/a> 或 \u003Ca href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/column-width\" title=\"Currently only available in English (US)\">\u003Ccode>column-width\u003C/code> (en-US)\u003C/a> 值不为 \u003Ccode>auto\u003C/code>，包括\u003Ccode>column-count\u003C/code> 为 \u003Ccode>1\u003C/code>）\u003C/li>\n\u003Cli>\u003Ccode>column-span\u003C/code> 值为 \u003Ccode>all\u003C/code> 的元素始终会创建一个新的 BFC，即使该元素没有包裹在一个多列容器中 (\u003Ca href=\"https://github.com/w3c/csswg-drafts/commit/a8634b96900279916bd6c505fda88dda71d8ec51\">规范变更\u003C/a>, \u003Ca href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=709362\">Chrome bug\u003C/a>)\u003C/li>\n\u003C/ul>\n\u003Cp>例子：\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"html\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"html\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">&#x3C;\u003C/span>\u003Cspan style=\"color:#8DDB8C\">div\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> class\u003C/span>\u003Cspan style=\"color:#ADBAC7\">=\u003C/span>\u003Cspan style=\"color:#96D0FF\">\"box\"\u003C/span>\u003Cspan style=\"color:#ADBAC7\">>\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">   &#x3C;\u003C/span>\u003Cspan style=\"color:#8DDB8C\">div\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> class\u003C/span>\u003Cspan style=\"color:#ADBAC7\">=\u003C/span>\u003Cspan style=\"color:#96D0FF\">\"float\"\u003C/span>\u003Cspan style=\"color:#ADBAC7\">>I am a floated box!&#x3C;/\u003C/span>\u003Cspan style=\"color:#8DDB8C\">div\u003C/span>\u003Cspan style=\"color:#ADBAC7\">>\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">   &#x3C;\u003C/span>\u003Cspan style=\"color:#8DDB8C\">p\u003C/span>\u003Cspan style=\"color:#ADBAC7\">>I am content inside the container.&#x3C;/\u003C/span>\u003Cspan style=\"color:#8DDB8C\">p\u003C/span>\u003Cspan style=\"color:#ADBAC7\">>\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">&#x3C;/\u003C/span>\u003Cspan style=\"color:#8DDB8C\">div\u003C/span>\u003Cspan style=\"color:#ADBAC7\">>\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"css\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"css\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#6CB6FF\">.box\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#6CB6FF\">   background-color\u003C/span>\u003Cspan style=\"color:#ADBAC7\">: \u003C/span>\u003Cspan style=\"color:#6CB6FF\">rgb\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#6CB6FF\">224\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, \u003C/span>\u003Cspan style=\"color:#6CB6FF\">206\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, \u003C/span>\u003Cspan style=\"color:#6CB6FF\">247\u003C/span>\u003Cspan style=\"color:#ADBAC7\">);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#6CB6FF\">   border\u003C/span>\u003Cspan style=\"color:#ADBAC7\">: \u003C/span>\u003Cspan style=\"color:#6CB6FF\">5\u003C/span>\u003Cspan style=\"color:#F47067\">px\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> solid\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> rebeccapurple\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/fw6/assets/main/toy_docs/20230705153904.png\" alt=\"image.png\">\u003C/p>\n\u003Cp>在上面例子中由于float的内容比旁边内容高，所以float的元素贯穿了box；浮动脱离文档流，因此背景和边框仅包含内容不包含浮动。\n创建一个新的BFC将包含该浮动，如外部容器元素设置\u003Ccode>overflow: auto\u003C/code>或其他不是\u003Ccode>overflow: visible\u003C/code>的值。\n推荐一个新的方式显式创建BFC：\u003Ccode>display: flow-root\u003C/code>，不会产生任何其他潜在的副作用，容器下的所有内容都将参与容器的块格式上下文，并且浮动不会从元素底部弹出。\u003C/p>\n\u003Ch2 id=\"文本断行与包装文本\">文本断行与包装文本\u003C/h2>\n\u003Cp>\u003Ca href=\"https://developer.mozilla.org/en-US/play?id=qtxraz4LZy72oE60ZNsdlUHKQY0jyA9wIzoBIO6VRfXRP2V274cvwwOEnKqp6SgDkbB2ea0tyAh0b1e5\">Overflowing text | MDN Play\u003C/a>\n\u003Ca href=\"https://www.w3.org/TR/css-sizing-3/\">CSS Box Sizing Module Level 3\u003C/a>\n\u003Ca href=\"https://www.w3.org/TR/css-writing-modes-3/\">CSS Writing Modes Level 3\u003C/a>\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"html\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"html\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">&#x3C;\u003C/span>\u003Cspan style=\"color:#8DDB8C\">div\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> class\u003C/span>\u003Cspan style=\"color:#ADBAC7\">=\u003C/span>\u003Cspan style=\"color:#96D0FF\">\"preview\"\u003C/span>\u003Cspan style=\"color:#ADBAC7\">>\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">  &#x3C;\u003C/span>\u003Cspan style=\"color:#8DDB8C\">div\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> class\u003C/span>\u003Cspan style=\"color:#ADBAC7\">=\u003C/span>\u003Cspan style=\"color:#96D0FF\">\"box\"\u003C/span>\u003Cspan style=\"color:#ADBAC7\">>Llanfairpwllgwyngyllgogerychwyrndrobwllllantysiliogogogoch&#x3C;/\u003C/span>\u003Cspan style=\"color:#8DDB8C\">div\u003C/span>\u003Cspan style=\"color:#ADBAC7\">>\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">&#x3C;/\u003C/span>\u003Cspan style=\"color:#8DDB8C\">div\u003C/span>\u003Cspan style=\"color:#ADBAC7\">>\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"css\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"css\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#6CB6FF\">.preview\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#6CB6FF\">  border\u003C/span>\u003Cspan style=\"color:#ADBAC7\">: \u003C/span>\u003Cspan style=\"color:#6CB6FF\">1\u003C/span>\u003Cspan style=\"color:#F47067\">px\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> solid\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#6CB6FF\">  padding\u003C/span>\u003Cspan style=\"color:#ADBAC7\">: \u003C/span>\u003Cspan style=\"color:#6CB6FF\">16\u003C/span>\u003Cspan style=\"color:#F47067\">px\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">}\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#6CB6FF\">.box\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#6CB6FF\">  inline-size\u003C/span>\u003Cspan style=\"color:#ADBAC7\">: \u003C/span>\u003Cspan style=\"color:#6CB6FF\">50\u003C/span>\u003Cspan style=\"color:#F47067\">px\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#6CB6FF\">  border\u003C/span>\u003Cspan style=\"color:#ADBAC7\">: \u003C/span>\u003Cspan style=\"color:#6CB6FF\">1\u003C/span>\u003Cspan style=\"color:#F47067\">px\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> solid\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> red\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Cp>overflow默认visible，故文本超出时还能继续看到。\ninline-size或width可设置为min-width，宽度设置为最小内容宽度，\n如果需要内容宽度适应inline-size，但还要能完整换行展示出来，可配合使用\u003Ccode>overflow-wrap:break-word\u003C/code>，这个样式会将超出的单词完整换行（可用\u003Ccode>word-break\u003C/code>替代）\u003C/p>\n\u003Cp>单词边界换行方式也可选择增加连字符：\u003Ccode>hyphens: manual\u003C/code>\u003C/p>\n\u003Ch2 id=\"shape\">Shape\u003C/h2>\n\u003Cp>\u003Ca href=\"https://drafts.csswg.org/css-shapes-2/\">CSS Shapes Module Level 2\u003C/a>\u003C/p>\n\u003Cp>CSS的Shape相关规范定义了浮动图像元素的任意几何形状。\n其他类似的规范有：\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_masking\">CSS Masking - CSS：层叠样式表 | MDN\u003C/a> 定义部分或完全隐藏视觉部分元素区域\u003C/li>\n\u003Cli>\u003Ca href=\"https://www.w3.org/TR/css3-exclusions/\">CSS Exclusions Module Level 1\u003C/a> 定义了容器盒子内包装上下文的排除区域与内联流内容的环绕（流动）关系\u003C/li>\n\u003C/ul>\n\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/fw6/assets/main/toy_docs/20230705200647.png\" alt=\"image.png\">\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"css\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"css\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#6CB6FF\">.float\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#6CB6FF\">\twidth\u003C/span>\u003Cspan style=\"color:#ADBAC7\">: \u003C/span>\u003Cspan style=\"color:#6CB6FF\">100\u003C/span>\u003Cspan style=\"color:#F47067\">px\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#6CB6FF\">\theight\u003C/span>\u003Cspan style=\"color:#ADBAC7\">: \u003C/span>\u003Cspan style=\"color:#6CB6FF\">100\u003C/span>\u003Cspan style=\"color:#F47067\">px\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#6CB6FF\">\tshape-outside\u003C/span>\u003Cspan style=\"color:#ADBAC7\">: \u003C/span>\u003Cspan style=\"color:#6CB6FF\">polygon\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#6CB6FF\">10\u003C/span>\u003Cspan style=\"color:#F47067\">px\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> 10\u003C/span>\u003Cspan style=\"color:#F47067\">px\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, \u003C/span>\u003Cspan style=\"color:#6CB6FF\">90\u003C/span>\u003Cspan style=\"color:#F47067\">px\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> 50\u003C/span>\u003Cspan style=\"color:#F47067\">px\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, \u003C/span>\u003Cspan style=\"color:#6CB6FF\">40\u003C/span>\u003Cspan style=\"color:#F47067\">px\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> 50\u003C/span>\u003Cspan style=\"color:#F47067\">px\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, \u003C/span>\u003Cspan style=\"color:#6CB6FF\">90\u003C/span>\u003Cspan style=\"color:#F47067\">px\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> 90\u003C/span>\u003Cspan style=\"color:#F47067\">px\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, \u003C/span>\u003Cspan style=\"color:#6CB6FF\">10\u003C/span>\u003Cspan style=\"color:#F47067\">px\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> 90\u003C/span>\u003Cspan style=\"color:#F47067\">px\u003C/span>\u003Cspan style=\"color:#ADBAC7\">);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#6CB6FF\">\tshape-margin\u003C/span>\u003Cspan style=\"color:#ADBAC7\">: \u003C/span>\u003Cspan style=\"color:#6CB6FF\">10\u003C/span>\u003Cspan style=\"color:#F47067\">px\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>",{"headings":1556,"localImagePaths":1580,"remoteImagePaths":1581,"frontmatter":1582,"imagePaths":1586},[1557,1558,1561,1563,1565,1567,1569,1571,1573,1575,1577],{"depth":31,"slug":324,"text":325},{"depth":31,"slug":1559,"text":1560},"where-和-is",":where 和 :is",{"depth":31,"slug":1562,"text":1562},"视觉格式化模型",{"depth":31,"slug":1564,"text":1564},"定位方案",{"depth":37,"slug":1566,"text":1566},"普通流",{"depth":37,"slug":1568,"text":1568},"浮动",{"depth":37,"slug":1570,"text":1570},"绝对定位",{"depth":31,"slug":1572,"text":1572},"应用或脱离流布局",{"depth":31,"slug":1574,"text":1574},"块格式化上下文",{"depth":31,"slug":1576,"text":1576},"文本断行与包装文本",{"depth":31,"slug":1578,"text":1579},"shape","Shape",[],[],{"title":1546,"description":15,"pubDate":76,"heroImage":1548,"date created":1583,"date modified":78,"tags":1584,"minutesRead":1585},"2023-06-26 09:42",[133,181,242,1104],"14 min read",[],"200-Learning/210-Programing/重学CSS.md","200-learning/220-english/blogs",{"id":1588,"data":1590,"body":1595,"filePath":1596,"digest":1597,"rendered":1598,"legacyId":1616},{"title":1591,"description":15,"draft":16,"pubDate":1592,"heroImage":1593,"tags":1594},"Blogs",["Date","2023-07-04T06:06:00.000Z"],"https://images.unsplash.com/photo-1510070112810-d4e9a46d9e91?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1200&q=80",[20],"# Blogs\n\n> Inspiration exists, but it has to find us working.\n> — \u003Ccite>Pablo Picasso\u003C/cite>\n\n## yrs blogs\n\n[Deep dive into Yrs architecture](https://www.bartoszsypytkowski.com/yrs-architecture/)\n\n- causality 因果关系\n- dedicated 专用\n- correlated 相关联的，相关的\n- deceptive 骗人的，欺骗性的\n- reinforce 加强\n- squashed 压扁的\n- disposed 处置，废弃的\n- hearth 炉灶\n- consecutively 连续的\n- scenarios 场景\n- underneath 在下面\n- capable 有能力的\n\n## learn CSS (web.dev)\n\n[Learn CSS](https://web.dev/learn/css)\n\n- extrinsic 外部的\n- intrinsic 内在的\n-","src/content/blog/200-Learning/220-English/Blogs.md","74a0acf511050559",{"html":1599,"metadata":1600},"\u003Ch1 id=\"blogs\">Blogs\u003C/h1>\n\u003Cblockquote>\n\u003Cp>Inspiration exists, but it has to find us working.\n— \u003Ccite>Pablo Picasso\u003C/cite>\u003C/p>\n\u003C/blockquote>\n\u003Ch2 id=\"yrs-blogs\">yrs blogs\u003C/h2>\n\u003Cp>\u003Ca href=\"https://www.bartoszsypytkowski.com/yrs-architecture/\">Deep dive into Yrs architecture\u003C/a>\u003C/p>\n\u003Cul>\n\u003Cli>causality 因果关系\u003C/li>\n\u003Cli>dedicated 专用\u003C/li>\n\u003Cli>correlated 相关联的，相关的\u003C/li>\n\u003Cli>deceptive 骗人的，欺骗性的\u003C/li>\n\u003Cli>reinforce 加强\u003C/li>\n\u003Cli>squashed 压扁的\u003C/li>\n\u003Cli>disposed 处置，废弃的\u003C/li>\n\u003Cli>hearth 炉灶\u003C/li>\n\u003Cli>consecutively 连续的\u003C/li>\n\u003Cli>scenarios 场景\u003C/li>\n\u003Cli>underneath 在下面\u003C/li>\n\u003Cli>capable 有能力的\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"learn-css-webdev\">learn CSS (web.dev)\u003C/h2>\n\u003Cp>\u003Ca href=\"https://web.dev/learn/css\">Learn CSS\u003C/a>\u003C/p>\n\u003Cul>\n\u003Cli>extrinsic 外部的\u003C/li>\n\u003Cli>intrinsic 内在的\u003C/li>\n\u003Cli>\u003C/li>\n\u003C/ul>",{"headings":1601,"localImagePaths":1610,"remoteImagePaths":1611,"frontmatter":1612,"imagePaths":1615},[1602,1604,1607],{"depth":29,"slug":1603,"text":1591},"blogs",{"depth":31,"slug":1605,"text":1606},"yrs-blogs","yrs blogs",{"depth":31,"slug":1608,"text":1609},"learn-css-webdev","learn CSS (web.dev)",[],[],{"title":1591,"description":15,"pubDate":1613,"heroImage":1593,"date created":1613,"date modified":1614,"draft":16,"minutesRead":79},"2023-07-04 14:06","2023-07-04",[],"200-Learning/220-English/Blogs.md","200-learning/220-english/dietcode-blog",{"id":1617,"data":1619,"body":1624,"filePath":1625,"digest":1626,"rendered":1627,"legacyId":1638},{"title":1620,"description":15,"draft":16,"pubDate":1621,"heroImage":1622,"tags":1623},"Dietcode Blog",["Date","2023-07-04T06:00:00.000Z"],"https://images.unsplash.com/photo-1518082593638-b6e73b35d39a?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1200&q=80",[20],"# Dietcode Blog\n\n> The noblest worship is to make yourself as good and as just as you can.\n> — \u003Ccite>Isocrates\u003C/cite>\n\n[Dietcode | Sid's blog](https://dietcode.io/)\n\n- Muncher 饥饿者\n- Sufficiently 充分的\n- complicated 复杂的\n- repetitive 重复的\n- Declarative 声明式的\n- Indispensable 不可或缺的\n- Variadic 可变的\n- Exhausted 用完的，耗尽的，筋疲力尽的\n- Allocation 分配\n- Comma 逗号\n- Up-front 前期 预先\n- Terminate 终止\n- Imperative 势在必行的，至关重要的\n- Parenthesis 插入语\n- Unwind 解开、松开\n- Intuition 直觉\n- Second-nature 老习惯\n- sigils 印记\n- intrigues 激起..的兴趣、阴谋诡计\n- Inaccuracies 不准确之处","src/content/blog/200-Learning/220-English/Dietcode Blog.md","58e06bcbdeccadec",{"html":1628,"metadata":1629},"\u003Ch1 id=\"dietcode-blog\">Dietcode Blog\u003C/h1>\n\u003Cblockquote>\n\u003Cp>The noblest worship is to make yourself as good and as just as you can.\n— \u003Ccite>Isocrates\u003C/cite>\u003C/p>\n\u003C/blockquote>\n\u003Cp>\u003Ca href=\"https://dietcode.io/\">Dietcode | Sid’s blog\u003C/a>\u003C/p>\n\u003Cul>\n\u003Cli>Muncher 饥饿者\u003C/li>\n\u003Cli>Sufficiently 充分的\u003C/li>\n\u003Cli>complicated 复杂的\u003C/li>\n\u003Cli>repetitive 重复的\u003C/li>\n\u003Cli>Declarative 声明式的\u003C/li>\n\u003Cli>Indispensable 不可或缺的\u003C/li>\n\u003Cli>Variadic 可变的\u003C/li>\n\u003Cli>Exhausted 用完的，耗尽的，筋疲力尽的\u003C/li>\n\u003Cli>Allocation 分配\u003C/li>\n\u003Cli>Comma 逗号\u003C/li>\n\u003Cli>Up-front 前期 预先\u003C/li>\n\u003Cli>Terminate 终止\u003C/li>\n\u003Cli>Imperative 势在必行的，至关重要的\u003C/li>\n\u003Cli>Parenthesis 插入语\u003C/li>\n\u003Cli>Unwind 解开、松开\u003C/li>\n\u003Cli>Intuition 直觉\u003C/li>\n\u003Cli>Second-nature 老习惯\u003C/li>\n\u003Cli>sigils 印记\u003C/li>\n\u003Cli>intrigues 激起..的兴趣、阴谋诡计\u003C/li>\n\u003Cli>Inaccuracies 不准确之处\u003C/li>\n\u003C/ul>",{"headings":1630,"localImagePaths":1633,"remoteImagePaths":1634,"frontmatter":1635,"imagePaths":1637},[1631],{"depth":29,"slug":1632,"text":1620},"dietcode-blog",[],[],{"title":1620,"description":15,"pubDate":1636,"heroImage":1622,"date created":1636,"date modified":1614,"draft":16,"minutesRead":79},"2023-07-04 14:00",[],"200-Learning/220-English/Dietcode Blog.md","200-learning/210-programing/浏览器工作原理",{"id":1639,"data":1641,"body":1646,"filePath":1647,"digest":1648,"rendered":1649,"legacyId":1712},{"title":1642,"description":15,"pubDate":1643,"heroImage":1644,"tags":1645},"浏览器工作原理",["Date","2023-08-01T08:15:00.000Z"],"https://images.unsplash.com/photo-1617854818583-09e7f077a156?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1200&q=80",[20,1104],"- [小贴士：如何制作快速加载的 HTML 页面 - 学习 Web 开发 | MDN](https://developer.mozilla.org/zh-CN/docs/Learn/HTML/Howto/Author_fast-loading_HTML_pages)\n- [渲染页面：浏览器的工作原理 - Web 性能 | MDN](https://developer.mozilla.org/zh-CN/docs/Web/Performance/How_browsers_work)\n- [渐进式加载 - 渐进式 Web 应用（PWA） | MDN](https://developer.mozilla.org/zh-CN/docs/Web/Progressive_web_apps/Tutorials/js13kGames/Loading)\n- [Web 性能 | MDN (mozilla.org)](https://developer.mozilla.org/zh-CN/docs/Web/Performance)\n\n\n浏览器从URL到网页的过程：\n1. 浏览器使用HTTP协议或者HTTPS协议，向服务器请求页面\n2. 把请求回来的HTML代码经过解析，构建成DOM树\n3. 计算DOM树上的CSS属性\n4. 最后根据CSS属性对元素逐个进行渲染，得到内存中的位图\n5. 一个可选的步骤是对位图进行合成，这会极大地增加后续绘制的速度\n6. 合成之后，再绘制到界面上\n\n从HTTP请求回来之后，这个过程并非一般想象中的一步做完再做下一步，而是一条流水线。\n从HTTP请求回来，就构成了流式的数据，后续的DOM树构建、CSS计算、渲染、合成、绘制，都是尽可能地处理前一步的产出：即不等到上一步骤完全结束，就开始处理上一步的输出，这样在浏览网页时，才会看到逐步出现的画面。\n\n网页请求从 HTML 文件请求开始。服务器返回 HTML——响应头和数据。然后浏览器开始解析 HTML，转换收到的数据为 DOM 树。浏览器每次发现外部资源就初始化请求，无论是样式、脚本或者嵌入的图片引用。有时请求会阻塞，这意味着解析剩下的 HTML 会被终止直到重要的资源被处理。浏览器接着解析 HTML，发请求和构造 DOM 直到文件结尾，这时开始构造 CSS 对象模型。等到 DOM 和 CSSOM 完成之后，浏览器构造渲染树，计算所有可见内容的样式。一旦渲染树完成布局开始，定义所有渲染树元素的位置和大小。完成之后，页面被渲染完成，或者说是绘制到屏幕上。\n\n## HTTP协议\n\n浏览器要做的事就是根据URL把数据取出来，取回数据使用的是HTTP协议，实际上这个过程之前还有个DNS查询。\n\nHTTP标准由IETF组织制定，跟它相关的标准主要有两份：\n- [HTTP1.1](https://datatracker.ietf.org/doc/html/rfc2616) \n- [HTTP1.1](https://datatracker.ietf.org/doc/html/rfc7234)\n\nHTTP协议是基于TCP协议出现的，对TCP协议来说，TCP协议是一条双向的通讯通道，HTTP在TCP基础上，规定了Requset-Response的模式。这个模式决定了必定是由浏览器端率先发起的。\n\n大部分情况下，浏览器的实现者只需要用一个TCP库，甚至一个现成的HTTP库就能搞定浏览器的网络通讯部分。HTTP是纯粹的文本协议，它是规定了使用TCP协议来传输文本格式的一个应用层协议。\n\n下面我们使用纯粹的TCP客户端手动实现HTTP\n\n首先运行telnet，并连接到`baidu.com`主机，在命令行输入如下内容\n```sh\ntelnet baidu.com 80\n```\n\n ![image.png](https://raw.githubusercontent.com/fw6/assets/main/toy_docs/20230801175451.png)\n\n\n这个时候，TCP连接已经简历，输入如下字符作为请求：\n```\nGET / HTTP/1.1\nHost: baidu.com\n```\n按下两次回车，可收到服务端请求：\n```\nHTTP/1.1 200 OK\nDate: Tue, 01 Aug 2023 09:47:39 GMT\nServer: Apache\nLast-Modified: Tue, 12 Jan 2010 13:48:00 GMT\nETag: \"51-47cf7e6ee8400\"\nAccept-Ranges: bytes\nContent-Length: 81\nCache-Control: max-age=86400\nExpires: Wed, 02 Aug 2023 09:47:39 GMT\nConnection: Keep-Alive\nContent-Type: text/html\n\n\u003Chtml>\n\u003Cmeta http-equiv=\"refresh\" content=\"0;url=http://www.baidu.com/\">\n\u003C/html>\n```\n\n这就是一次完整的HTTP请求过程了，可以看到在TCP通道中传输的，完全是文本。\n\n在请求部分，第一行被称作request line，它分为3部分：HTTP Method、请求路径、请求的协议和版本。\n\n在响应部分，第一行被称为response line，也分为3部分：协议和版本、状态码和状态文本。\n紧跟在request line或response line之后的，是请求头/响应头，这些头由若干行组成，每行是用冒号分割的名称和值。\n\n在头之后，以一个空行（两个换行符）为分割，是请求体/响应体，请求体可能包含文件或者表单数据，响应体则是HTML代码。\n\n:::info\nTCP慢启动：第一个响应数据包大小是14kb。慢启动时均衡网络连接速度的算法。慢启动逐渐增加发送数据的数量直到达到网络的最大带宽。\n:::\n\n### HTTP Method\n\n首先看request line里面的方法。这里的方法与编程中的方法意义类似，表示此次HTTP请求希望执行的操作类型。方法有以下几种定义：\n- GET\n- POST\n- HEAD\n- PUT\n- DELETE\n- CONNECT\n- OPTIONS\n- TRACE\n\n浏览器通过地址栏访问都是GET方法，表单提交产生POST方法。\nHEAD与GET类似，只返回响应头，多数由JavaScript发起。\nPUT和DELETE分别表示添加资源和删除资源，但这只是语义上的约束。\nCONNECT多用于HTTPS和WebSocket\nOPTIONS和TRACE一般用于调试，多数线上服务都不支持。\n\n### HTTP Status code & Status text\n\n常见的HTTP状态码有以下几种：\n- 1xx：临时回应，表示客户端请继续\n- 2xx：请求成功\n- 3xx： 表示请求目标有变化，希望客户端进一步处理\n    - 301 & 302: 永久性或临时性跳转\n    - 304: 客户端缓存没更新\n- 4xx：客户端请求错误\n    - 403: 无权限\n    - 404: 请求页面不存在\n- 5xx：服务端请求错误\n    - 500: 服务端错误\n    - 503: 服务端暂时性错误，可重试\n\n对前端而言，1xx系列的状态码非常陌生，原因是1xx的状态被浏览器HTTP库直接处理掉了，不会让上层应用知晓。\n2xx系列最熟悉的是200，这通常是网页请求成功的标志。\n3xx系列比较复杂，301和302两个状态表示当前资源已被转移，不过一个是永久转移一个是临时转移。实际上301更近似报错，表示客户端下次别来了。\n304产生的前提是：客户端本地已经有缓存的版本了，并且在Request中告诉了服务器，当服务器通过事件或tag发现没有更新的时候，就会返回不含body的304状态。\n\n### HTTP Head\n\nHTTP头可以看成一个键值对。原则上HTTP头也是一种数据，我们可以自由定义HTTP头和值。在HTTP标准中定义了完整的请求、响应头。\n\n先来看看Request Header。\n![image.png](https://raw.githubusercontent.com/fw6/assets/main/toy_docs/20230801182023.png)\n接下来看下Response Header：\n![image.png](https://raw.githubusercontent.com/fw6/assets/main/toy_docs/20230801182111.png)\n\n上方仅仅列出了常用的HTTP头，完整列表可在rfc2616中找到。\n\n### HTTP Request Body\n\nHTTP请求的Body主要用于提交表单的场景。实际上HTTP请求的body是比较自由的，只要浏览器端发送的Body服务端认可就可以。一些常见的body格式：\n- application/json\n- application/x-www-form-urlencoded\n- multipart/form-data\n- text/xml\n\n\n### HTTPS\n\n在HTTP协议的基础上，HTTPS和HTTP2规定了更复杂的内容，但是它基本保持了HTTP的设计思想，即：Request-Response模式。\n\nHTTPS有两个作用，一是确定请求的目标服务器身份，二是保证传输的数据不会被网络中间节点窃听或篡改。\n\nHTTPS相关标准链接：[RFC 2818 - HTTP Over TLS](https://datatracker.ietf.org/doc/html/rfc2818)\nHTTPS使用加密通道传输HTTP的内容，但是HTTP首先与服务器建立一条TLS加密通道。TLS构建于TCP协议之上，它实际上是对传输内容作了一次加密，所以从传输内容上看，HTTPS和HTTP没有任何区别。\n\n### HTTP2\n\nHTTP2是对HTTP1.1的升级，相关标准参考：[RFC 7540 - Hypertext Transfer Protocol Version 2 (HTTP/2)](https://datatracker.ietf.org/doc/html/rfc7540)\n\nHTTP2.0最大的改进有2点，一是支持服务端推送，二是支持TCP连接复用。\n\n服务端推送能够在客户端发送第一个请求到服务端时，提前把一部分内容推送给客户端，放入缓存中。可以避免客户端请求顺序带来的并行度不高导致的性能问题。\nTCP连接复用，则使用同一个TCP连接来传输多个HTTP请求，避免了TCP连接建立时的3次握手开销，和初建TCP连接时传输窗口小的问题。\n\n## 构建DOM树🌲\n\n:::tldr\nDOM 构建是增量的。HTML 响应变成令牌（token），令牌变成节点，而节点又变成 DOM 树。\n:::\n\n通过HTTP请求返回了网页的HTML内容，接下来介绍如何解析HTML代码，DOM树又如何构建。\n\nDOM 树描述了文档的内容。`\u003Chtml>`元素是第一个标签也是文档树的根节点。树反映了不同标记之间的关系和层次结构。嵌套在其他标记中的标记是子节点。DOM 节点的数量越多，构建 DOM 树所需的时间就越长。\n![image.png](https://raw.githubusercontent.com/fw6/assets/main/toy_docs/20230801205432.png)\n\nHTML的结构并不算太复杂，日常开发需要的“词”（编译原理中的token，表示最小有意义的单元），种类大约只有标签开始、属性、标签结束、注释、CDATA节点几种。\n![image.png](https://raw.githubusercontent.com/fw6/assets/main/toy_docs/20230801190213.png)\n\n浏览器从HTTP协议收到的字符流读取字符。每输入一个字符，都要做一个决策，判断当前节点类型与操作，浏览器工程师常用状态机实现将字符流解析为词。\n\n![image.png](https://raw.githubusercontent.com/fw6/assets/main/toy_docs/20230801190432.png)\n[HTML官方文档](https://html.spec.whatwg.org/multipage/parsing.html#tokenization)规定了80多个状态，用状态机做词法分析，其实就是把每个词的特征字符逐个拆开成独立状态，然后再把所有词的特征字符链合并起来，形成连通图结构。\n\n接下来要把这些简单的词构建为DOM树，这个过程用栈来实现：\n```js\nfunction HTMLSyntaticalParser(){\n    var stack = [new HTMLDocument];\n    this.receiveInput = function(token) {\n        //……\n    }\n    this.getOutput = function(){\n        return stack[0];\n    }\n}\n```\n\nreceiveInput负责接受词法部分产生的词，在接受的同时开始构建DOM树，当接收完所有输入，栈顶就是最后的根节点了，也就是DOM树的产出。在符合标准的浏览器中，不一样的HTML节点对应了不同的Node的子类。\n\n大致流程如下：\n- 栈顶元素就是当前节点\n- 遇到属性，就添加到当前节点\n- 遇到文本节点，如果当前是文本节点，则与文本节点合并，否则入栈作为当前节点的子节点\n- 遇到注释节点，作为当前节点的子节点\n- 遇到tag start就入栈一个节点，当前节点还是这个节点的父节点\n- 遇到tag end就出栈一个节点（还可以检查是否匹配）\n\n:::info\n当解析器发现非阻塞资源，例如一张图片，浏览器会请求这些资源并且继续解析。当遇到一个 CSS 文件时，解析也可以继续进行，但是对于 `\u003Cscript>` 标签（特别是没有 `async` 或者 `defer` 属性的）会阻塞渲染并停止 HTML 的解析。尽管浏览器的预加载扫描器加速了这个过程，但过多的脚本仍然是一个重要的瓶颈。\n:::\n\n:::warning\n等待获取 CSS 不会阻塞 HTML 的解析或者下载，但是它确实会阻塞 JavaScript，因为 JavaScript 经常用于查询元素的 CSS 属性。\n:::\n\n\n## 构建CSSOM树🌲\n\n**CSS 对象模型** **(CSSOM)** 是树形式的所有 CSS 选择器和每个选择器的相关属性的映射，具有树的根节点，同级，后代，子级和其他关系。CSSOM 与文档对象模型 (DOM)非常相似。两者都是**关键渲染路径**的一部分，也是正确渲染一个网站必须采取的一系列步骤。\n\nCSSOM 与 DOM 一起构建**渲染树**，浏览器依次使用渲染树来布局和绘制网页。\n\nCSS 有其自身的规则集合用来定义标识。注意 CSS 中的 C 代表的是“层叠”。CSS 规则是级联的。随着解析器转换标识为节点，节点的后代继承了样式。像处理 HTML 那样的增量处理功能没有被应用到 CSS 上，因为后续规则可能被之前的所覆盖。CSS 对象模型随着 CSS 的解析而被构建，但是直到完成都不能被用来构建渲染树，因为样式将会被之后的解析所覆盖而不应该被渲染到屏幕上。\n\n:::info\nDOM 构造是增量的，CSSOM 却不是。CSS 是渲染阻塞的：浏览器会阻塞页面渲染直到它接收和执行了所有的 CSS。CSS 是渲染阻塞是因为规则可以被覆盖，所以内容不能被渲染直到 CSSOM 的完成。\n:::\n\n## 其他过程\n\n### JavaScript编译\n\n当 CSS 被解析并创建 CSSOM 时，其他资源，包括 JavaScript 文件正在下载（借助预加载扫描器）。JavaScript 被解释、编译、解析和执行。脚本被解析为抽象语法树。一些浏览器引擎使用抽象语法树（AST）并将其传递到解释器中，输出在主线程上执行的字节码。这就是所谓的 JavaScript 编译。\n\n### 构建辅助功能树🌲\n\n浏览器还构建辅助设备用于分析和解释内容的辅助功能（accessibility）树。无障碍对象模型（AOM）类似于 DOM 的语义版本。当 DOM 更新时，浏览器会更新辅助功能树。辅助技术本身无法修改无障碍树。\n\n在构建 AOM 之前，屏幕阅读器无法访问内容。\n\n## 渲染\n\n渲染步骤包括样式、布局、绘制，在某些情况下还包括合成。在解析步骤中创建的 CSSOM 树和 DOM 树组合成一个 Render 树，然后用于计算每个可见元素的布局，然后将其绘制到屏幕上。在某些情况下，可以将内容提升到它们自己的层并进行合成，通过在 GPU 而不是 CPU 上绘制屏幕的一部分来提高性能，从而释放主线程。\n\n### 构建Render树🌲\n\n接下来将 DOM 和 CSSOM 组合成一个 Render 树，计算样式树或渲染树从 DOM 树的根开始构建，遍历每个可见节点。\n\n像`\u003Chead>`和它的子节点以及任何具有 `display: none` 样式的结点，例如 `script { display: none; }`（在 user agent stylesheets 可以看到这个样式）这些标签将不会显示，也就是它们不会出现在 Render 树上。具有 `visibility: hidden` 的节点会出现在 Render 树上，因为它们会占用空间。\n\n每个可见节点都应用了其 CSSOM 规则。Render 树保存所有具有内容和计算样式的可见节点——将所有相关样式匹配到 DOM 树中的每个可见节点，并根据**CSS 级联**确定每个节点的计算样式。\n\n### Layout\n\n接下来在渲染树上运行布局以计算每个节点的几何体。布局是确定呈现树中所有节点的宽度、高度和位置，以及确定页面上每个对象的大小和位置的过程。回流是对页面的任何部分或整个文档的任何后续大小和位置的确定。\n\n构建渲染树后，开始布局。渲染树标识显示哪些节点（即使不可见）及其计算样式，但不标识每个节点的尺寸或位置。为了确定每个对象的确切大小和位置，浏览器从渲染树的根开始遍历它。\n\n在网页上，大多数东西都是一个盒子。不同的设备和不同的桌面意味着无限数量的不同的视区大小。在此阶段，考虑到视区大小，浏览器将确定屏幕上所有不同框的尺寸。以视区的大小为基础，布局通常从 body 开始，用每个元素的框模型属性排列所有 body 的子孙元素的尺寸，为不知道其尺寸的替换元素（例如图像）提供占位符空间。\n\n第一次确定节点的大小和位置称为布局。随后对节点大小和位置的重新计算称为回流。假设初始布局发生在返回图像之前，若我们没有提前声明图像的大小，一旦确定了图像大小，就会有回流。\n\n:::hint\n为了减小布局事件的频率和时长，批量更新或者避免改动盒模型属性。\n:::\n\n### Paint\n\n最后一步是将各个节点绘制到屏幕上，第一次出现的节点称为**first meaningful paint**。在绘制或光栅化阶段，浏览器将在布局阶段计算的每个框转换为屏幕上的实际像素。绘画包括将元素的每个可视部分绘制到屏幕上，包括文本、颜色、边框、阴影和替换的元素（如按钮和图像）。浏览器需要非常快地完成这项工作。\n\n绘制可以将布局树中的元素分解为多个层。将内容提升到 GPU 上的层（而不是 CPU 上的主线程）可以提高绘制和重新绘制性能。有一些特定的属性和元素可以实例化一个层，包括 `\u003Cvideo>` 和 `\u003Ccanvas>`，任何 CSS 属性为 `opacity`、3D `transform`、`will-change`的元素，还有一些其他元素。这些节点将与子节点一起绘制到它们自己的层上，除非子节点由于上述一个（或多个）原因需要自己的层。\n\n:::warning\n分层确实可以提高性能，但是它以内存管理为代价，因此不应作为 web 性能优化策略的一部分过度使用。\n:::\n\n### Compositing\n\n当文档的各个部分以不同的层绘制，相互重叠时，必须进行合成，以确保它们以正确的顺序绘制到屏幕上，并正确显示内容。\n\n当页面继续加载资源时，可能会发生回流（例如加载图片资源），回流会触发重新绘制和重新组合。例如，如果我们定义了图像的大小，就不需要重新绘制，只需要重新绘制需要重新绘制的层，并在必要时进行合成。若未设置图像大小，从服务器获取图像后，渲染过程将返回到布局步骤并从那里重新开始。\n\n## Interactivity\n\n一旦主线程绘制页面完成，可以认为已经“准备好了”，但事实并非如此。如果加载包含 JavaScript（并且延迟到`onload`事件激发后执行），则主线程可能很忙，无法用于滚动、触摸和其他交互。\n\nTTI（Time to Interactivity）是测量从第一个请求导致 DNS 查询和 SSL 连接到页面可交互时所用的时间（可交互是*First Contentful Paint*之后的时间点）。如果主线程正在解析、编译和执行 JavaScript，则它不可用，因此无法及时（小于 50ms）响应用户交互。","src/content/blog/200-Learning/210-Programing/浏览器工作原理.md","2e32902b0effd02e",{"html":1650,"metadata":1651},"\u003Cul>\n\u003Cli>\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Learn/HTML/Howto/Author_fast-loading_HTML_pages\">小贴士：如何制作快速加载的 HTML 页面 - 学习 Web 开发 | MDN\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/Performance/How_browsers_work\">渲染页面：浏览器的工作原理 - Web 性能 | MDN\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/Progressive_web_apps/Tutorials/js13kGames/Loading\">渐进式加载 - 渐进式 Web 应用（PWA） | MDN\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/Performance\">Web 性能 | MDN (mozilla.org)\u003C/a>\u003C/li>\n\u003C/ul>\n\u003Cp>浏览器从URL到网页的过程：\u003C/p>\n\u003Col>\n\u003Cli>浏览器使用HTTP协议或者HTTPS协议，向服务器请求页面\u003C/li>\n\u003Cli>把请求回来的HTML代码经过解析，构建成DOM树\u003C/li>\n\u003Cli>计算DOM树上的CSS属性\u003C/li>\n\u003Cli>最后根据CSS属性对元素逐个进行渲染，得到内存中的位图\u003C/li>\n\u003Cli>一个可选的步骤是对位图进行合成，这会极大地增加后续绘制的速度\u003C/li>\n\u003Cli>合成之后，再绘制到界面上\u003C/li>\n\u003C/ol>\n\u003Cp>从HTTP请求回来之后，这个过程并非一般想象中的一步做完再做下一步，而是一条流水线。\n从HTTP请求回来，就构成了流式的数据，后续的DOM树构建、CSS计算、渲染、合成、绘制，都是尽可能地处理前一步的产出：即不等到上一步骤完全结束，就开始处理上一步的输出，这样在浏览网页时，才会看到逐步出现的画面。\u003C/p>\n\u003Cp>网页请求从 HTML 文件请求开始。服务器返回 HTML——响应头和数据。然后浏览器开始解析 HTML，转换收到的数据为 DOM 树。浏览器每次发现外部资源就初始化请求，无论是样式、脚本或者嵌入的图片引用。有时请求会阻塞，这意味着解析剩下的 HTML 会被终止直到重要的资源被处理。浏览器接着解析 HTML，发请求和构造 DOM 直到文件结尾，这时开始构造 CSS 对象模型。等到 DOM 和 CSSOM 完成之后，浏览器构造渲染树，计算所有可见内容的样式。一旦渲染树完成布局开始，定义所有渲染树元素的位置和大小。完成之后，页面被渲染完成，或者说是绘制到屏幕上。\u003C/p>\n\u003Ch2 id=\"http协议\">HTTP协议\u003C/h2>\n\u003Cp>浏览器要做的事就是根据URL把数据取出来，取回数据使用的是HTTP协议，实际上这个过程之前还有个DNS查询。\u003C/p>\n\u003Cp>HTTP标准由IETF组织制定，跟它相关的标准主要有两份：\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ca href=\"https://datatracker.ietf.org/doc/html/rfc2616\">HTTP1.1\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://datatracker.ietf.org/doc/html/rfc7234\">HTTP1.1\u003C/a>\u003C/li>\n\u003C/ul>\n\u003Cp>HTTP协议是基于TCP协议出现的，对TCP协议来说，TCP协议是一条双向的通讯通道，HTTP在TCP基础上，规定了Requset-Response的模式。这个模式决定了必定是由浏览器端率先发起的。\u003C/p>\n\u003Cp>大部分情况下，浏览器的实现者只需要用一个TCP库，甚至一个现成的HTTP库就能搞定浏览器的网络通讯部分。HTTP是纯粹的文本协议，它是规定了使用TCP协议来传输文本格式的一个应用层协议。\u003C/p>\n\u003Cp>下面我们使用纯粹的TCP客户端手动实现HTTP\u003C/p>\n\u003Cp>首先运行telnet，并连接到\u003Ccode>baidu.com\u003C/code>主机，在命令行输入如下内容\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"sh\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"sh\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F69D50\">telnet\u003C/span>\u003Cspan style=\"color:#96D0FF\"> baidu.com\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> 80\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/fw6/assets/main/toy_docs/20230801175451.png\" alt=\"image.png\">\u003C/p>\n\u003Cp>这个时候，TCP连接已经简历，输入如下字符作为请求：\u003C/p>\n\u003Cpre>\u003Ccode>GET / HTTP/1.1\nHost: baidu.com\n\u003C/code>\u003C/pre>\n\u003Cp>按下两次回车，可收到服务端请求：\u003C/p>\n\u003Cpre>\u003Ccode>HTTP/1.1 200 OK\nDate: Tue, 01 Aug 2023 09:47:39 GMT\nServer: Apache\nLast-Modified: Tue, 12 Jan 2010 13:48:00 GMT\nETag: \"51-47cf7e6ee8400\"\nAccept-Ranges: bytes\nContent-Length: 81\nCache-Control: max-age=86400\nExpires: Wed, 02 Aug 2023 09:47:39 GMT\nConnection: Keep-Alive\nContent-Type: text/html\n\n&#x3C;html>\n&#x3C;meta http-equiv=\"refresh\" content=\"0;url=http://www.baidu.com/\">\n&#x3C;/html>\n\u003C/code>\u003C/pre>\n\u003Cp>这就是一次完整的HTTP请求过程了，可以看到在TCP通道中传输的，完全是文本。\u003C/p>\n\u003Cp>在请求部分，第一行被称作request line，它分为3部分：HTTP Method、请求路径、请求的协议和版本。\u003C/p>\n\u003Cp>在响应部分，第一行被称为response line，也分为3部分：协议和版本、状态码和状态文本。\n紧跟在request line或response line之后的，是请求头/响应头，这些头由若干行组成，每行是用冒号分割的名称和值。\u003C/p>\n\u003Cp>在头之后，以一个空行（两个换行符）为分割，是请求体/响应体，请求体可能包含文件或者表单数据，响应体则是HTML代码。\u003C/p>\n\u003Caside class=\"callout callout-assert\">\u003Cdiv class=\"callout-indicator\">\u003Cdiv class=\"callout-hint\">\u003Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" aria-hidden=\"true\">\u003Ccircle cx=\"19\" cy=\"5\" r=\"3\">\u003C/circle>\u003Cpath d=\"M20 11.929V15c0 1.656-1.344 3-3 3h-3l-6 4v-4H5c-1.656 0-3-1.344-3-3V7c0-1.656 1.344-3 3-3h7.071\">\u003C/path>\u003C/svg>\u003C/div>\u003Cdiv class=\"callout-title\">Info\u003C/div>\u003C/div>\u003Cdiv class=\"callout-content\">\u003Cp>TCP慢启动：第一个响应数据包大小是14kb。慢启动时均衡网络连接速度的算法。慢启动逐渐增加发送数据的数量直到达到网络的最大带宽。\u003C/p>\u003C/div>\u003C/aside>\n\u003Ch3 id=\"http-method\">HTTP Method\u003C/h3>\n\u003Cp>首先看request line里面的方法。这里的方法与编程中的方法意义类似，表示此次HTTP请求希望执行的操作类型。方法有以下几种定义：\u003C/p>\n\u003Cul>\n\u003Cli>GET\u003C/li>\n\u003Cli>POST\u003C/li>\n\u003Cli>HEAD\u003C/li>\n\u003Cli>PUT\u003C/li>\n\u003Cli>DELETE\u003C/li>\n\u003Cli>CONNECT\u003C/li>\n\u003Cli>OPTIONS\u003C/li>\n\u003Cli>TRACE\u003C/li>\n\u003C/ul>\n\u003Cp>浏览器通过地址栏访问都是GET方法，表单提交产生POST方法。\nHEAD与GET类似，只返回响应头，多数由JavaScript发起。\nPUT和DELETE分别表示添加资源和删除资源，但这只是语义上的约束。\nCONNECT多用于HTTPS和WebSocket\nOPTIONS和TRACE一般用于调试，多数线上服务都不支持。\u003C/p>\n\u003Ch3 id=\"http-status-code--status-text\">HTTP Status code &#x26; Status text\u003C/h3>\n\u003Cp>常见的HTTP状态码有以下几种：\u003C/p>\n\u003Cul>\n\u003Cli>1xx：临时回应，表示客户端请继续\u003C/li>\n\u003Cli>2xx：请求成功\u003C/li>\n\u003Cli>3xx： 表示请求目标有变化，希望客户端进一步处理\n\u003Cul>\n\u003Cli>301 &#x26; 302: 永久性或临时性跳转\u003C/li>\n\u003Cli>304: 客户端缓存没更新\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>4xx：客户端请求错误\n\u003Cul>\n\u003Cli>403: 无权限\u003C/li>\n\u003Cli>404: 请求页面不存在\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>5xx：服务端请求错误\n\u003Cul>\n\u003Cli>500: 服务端错误\u003C/li>\n\u003Cli>503: 服务端暂时性错误，可重试\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ul>\n\u003Cp>对前端而言，1xx系列的状态码非常陌生，原因是1xx的状态被浏览器HTTP库直接处理掉了，不会让上层应用知晓。\n2xx系列最熟悉的是200，这通常是网页请求成功的标志。\n3xx系列比较复杂，301和302两个状态表示当前资源已被转移，不过一个是永久转移一个是临时转移。实际上301更近似报错，表示客户端下次别来了。\n304产生的前提是：客户端本地已经有缓存的版本了，并且在Request中告诉了服务器，当服务器通过事件或tag发现没有更新的时候，就会返回不含body的304状态。\u003C/p>\n\u003Ch3 id=\"http-head\">HTTP Head\u003C/h3>\n\u003Cp>HTTP头可以看成一个键值对。原则上HTTP头也是一种数据，我们可以自由定义HTTP头和值。在HTTP标准中定义了完整的请求、响应头。\u003C/p>\n\u003Cp>先来看看Request Header。\n\u003Cimg src=\"https://raw.githubusercontent.com/fw6/assets/main/toy_docs/20230801182023.png\" alt=\"image.png\">\n接下来看下Response Header：\n\u003Cimg src=\"https://raw.githubusercontent.com/fw6/assets/main/toy_docs/20230801182111.png\" alt=\"image.png\">\u003C/p>\n\u003Cp>上方仅仅列出了常用的HTTP头，完整列表可在rfc2616中找到。\u003C/p>\n\u003Ch3 id=\"http-request-body\">HTTP Request Body\u003C/h3>\n\u003Cp>HTTP请求的Body主要用于提交表单的场景。实际上HTTP请求的body是比较自由的，只要浏览器端发送的Body服务端认可就可以。一些常见的body格式：\u003C/p>\n\u003Cul>\n\u003Cli>application/json\u003C/li>\n\u003Cli>application/x-www-form-urlencoded\u003C/li>\n\u003Cli>multipart/form-data\u003C/li>\n\u003Cli>text/xml\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"https\">HTTPS\u003C/h3>\n\u003Cp>在HTTP协议的基础上，HTTPS和HTTP2规定了更复杂的内容，但是它基本保持了HTTP的设计思想，即：Request-Response模式。\u003C/p>\n\u003Cp>HTTPS有两个作用，一是确定请求的目标服务器身份，二是保证传输的数据不会被网络中间节点窃听或篡改。\u003C/p>\n\u003Cp>HTTPS相关标准链接：\u003Ca href=\"https://datatracker.ietf.org/doc/html/rfc2818\">RFC 2818 - HTTP Over TLS\u003C/a>\nHTTPS使用加密通道传输HTTP的内容，但是HTTP首先与服务器建立一条TLS加密通道。TLS构建于TCP协议之上，它实际上是对传输内容作了一次加密，所以从传输内容上看，HTTPS和HTTP没有任何区别。\u003C/p>\n\u003Ch3 id=\"http2\">HTTP2\u003C/h3>\n\u003Cp>HTTP2是对HTTP1.1的升级，相关标准参考：\u003Ca href=\"https://datatracker.ietf.org/doc/html/rfc7540\">RFC 7540 - Hypertext Transfer Protocol Version 2 (HTTP/2)\u003C/a>\u003C/p>\n\u003Cp>HTTP2.0最大的改进有2点，一是支持服务端推送，二是支持TCP连接复用。\u003C/p>\n\u003Cp>服务端推送能够在客户端发送第一个请求到服务端时，提前把一部分内容推送给客户端，放入缓存中。可以避免客户端请求顺序带来的并行度不高导致的性能问题。\nTCP连接复用，则使用同一个TCP连接来传输多个HTTP请求，避免了TCP连接建立时的3次握手开销，和初建TCP连接时传输窗口小的问题。\u003C/p>\n\u003Ch2 id=\"构建dom树\">构建DOM树\u003Cspan role=\"img\" aria-label=\"evergreen tree\">🌲\u003C/span>\u003C/h2>\n\u003Caside class=\"callout callout-abstract\">\u003Cdiv class=\"callout-indicator\">\u003Cdiv class=\"callout-hint\">\u003Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"callout-hint-abstract\">\u003Crect x=\"8\" y=\"2\" width=\"8\" height=\"4\" rx=\"1\" ry=\"1\">\u003C/rect>\u003Cpath d=\"M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2\">\u003C/path>\u003Cpath d=\"M12 11h4\">\u003C/path>\u003Cpath d=\"M12 16h4\">\u003C/path>\u003Cpath d=\"M8 11h.01\">\u003C/path>\u003Cpath d=\"M8 16h.01\">\u003C/path>\u003C/svg>\u003C/div>\u003Cdiv class=\"callout-title\">Abstract\u003C/div>\u003C/div>\u003Cdiv class=\"callout-content\">\u003Cp>DOM 构建是增量的。HTML 响应变成令牌（token），令牌变成节点，而节点又变成 DOM 树。\u003C/p>\u003C/div>\u003C/aside>\n\u003Cp>通过HTTP请求返回了网页的HTML内容，接下来介绍如何解析HTML代码，DOM树又如何构建。\u003C/p>\n\u003Cp>DOM 树描述了文档的内容。\u003Ccode>&#x3C;html>\u003C/code>元素是第一个标签也是文档树的根节点。树反映了不同标记之间的关系和层次结构。嵌套在其他标记中的标记是子节点。DOM 节点的数量越多，构建 DOM 树所需的时间就越长。\n\u003Cimg src=\"https://raw.githubusercontent.com/fw6/assets/main/toy_docs/20230801205432.png\" alt=\"image.png\">\u003C/p>\n\u003Cp>HTML的结构并不算太复杂，日常开发需要的“词”（编译原理中的token，表示最小有意义的单元），种类大约只有标签开始、属性、标签结束、注释、CDATA节点几种。\n\u003Cimg src=\"https://raw.githubusercontent.com/fw6/assets/main/toy_docs/20230801190213.png\" alt=\"image.png\">\u003C/p>\n\u003Cp>浏览器从HTTP协议收到的字符流读取字符。每输入一个字符，都要做一个决策，判断当前节点类型与操作，浏览器工程师常用状态机实现将字符流解析为词。\u003C/p>\n\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/fw6/assets/main/toy_docs/20230801190432.png\" alt=\"image.png\">\n\u003Ca href=\"https://html.spec.whatwg.org/multipage/parsing.html#tokenization\">HTML官方文档\u003C/a>规定了80多个状态，用状态机做词法分析，其实就是把每个词的特征字符逐个拆开成独立状态，然后再把所有词的特征字符链合并起来，形成连通图结构。\u003C/p>\n\u003Cp>接下来要把这些简单的词构建为DOM树，这个过程用栈来实现：\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"js\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">function\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> HTMLSyntaticalParser\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(){\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">    var\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> stack \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> [\u003C/span>\u003Cspan style=\"color:#F47067\">new\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> HTMLDocument];\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#6CB6FF\">    this\u003C/span>\u003Cspan style=\"color:#ADBAC7\">.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">receiveInput\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#F47067\"> function\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#F69D50\">token\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">        //……\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    }\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#6CB6FF\">    this\u003C/span>\u003Cspan style=\"color:#ADBAC7\">.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">getOutput\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#F47067\"> function\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(){\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">        return\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> stack[\u003C/span>\u003Cspan style=\"color:#6CB6FF\">0\u003C/span>\u003Cspan style=\"color:#ADBAC7\">];\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    }\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Cp>receiveInput负责接受词法部分产生的词，在接受的同时开始构建DOM树，当接收完所有输入，栈顶就是最后的根节点了，也就是DOM树的产出。在符合标准的浏览器中，不一样的HTML节点对应了不同的Node的子类。\u003C/p>\n\u003Cp>大致流程如下：\u003C/p>\n\u003Cul>\n\u003Cli>栈顶元素就是当前节点\u003C/li>\n\u003Cli>遇到属性，就添加到当前节点\u003C/li>\n\u003Cli>遇到文本节点，如果当前是文本节点，则与文本节点合并，否则入栈作为当前节点的子节点\u003C/li>\n\u003Cli>遇到注释节点，作为当前节点的子节点\u003C/li>\n\u003Cli>遇到tag start就入栈一个节点，当前节点还是这个节点的父节点\u003C/li>\n\u003Cli>遇到tag end就出栈一个节点（还可以检查是否匹配）\u003C/li>\n\u003C/ul>\n\u003Caside class=\"callout callout-assert\">\u003Cdiv class=\"callout-indicator\">\u003Cdiv class=\"callout-hint\">\u003Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" aria-hidden=\"true\">\u003Ccircle cx=\"19\" cy=\"5\" r=\"3\">\u003C/circle>\u003Cpath d=\"M20 11.929V15c0 1.656-1.344 3-3 3h-3l-6 4v-4H5c-1.656 0-3-1.344-3-3V7c0-1.656 1.344-3 3-3h7.071\">\u003C/path>\u003C/svg>\u003C/div>\u003Cdiv class=\"callout-title\">Info\u003C/div>\u003C/div>\u003Cdiv class=\"callout-content\">\u003Cp>当解析器发现非阻塞资源，例如一张图片，浏览器会请求这些资源并且继续解析。当遇到一个 CSS 文件时，解析也可以继续进行，但是对于 \u003Ccode>&#x3C;script>\u003C/code> 标签（特别是没有 \u003Ccode>async\u003C/code> 或者 \u003Ccode>defer\u003C/code> 属性的）会阻塞渲染并停止 HTML 的解析。尽管浏览器的预加载扫描器加速了这个过程，但过多的脚本仍然是一个重要的瓶颈。\u003C/p>\u003C/div>\u003C/aside>\n\u003Caside class=\"callout callout-warn\">\u003Cdiv class=\"callout-indicator\">\u003Cdiv class=\"callout-hint\">\u003Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" aria-hidden=\"true\">\u003Cpath d=\"M12 9v4m0 4h.01M8.681 4.082C9.351 2.797 10.621 2 12 2s2.649.797 3.319 2.082l6.203 11.904a4.28 4.28 0 0 1-.046 4.019C20.793 21.241 19.549 22 18.203 22H5.797c-1.346 0-2.59-.759-3.273-1.995a4.28 4.28 0 0 1-.046-4.019L8.681 4.082Z\">\u003C/path>\u003C/svg>\u003C/div>\u003Cdiv class=\"callout-title\">Warning\u003C/div>\u003C/div>\u003Cdiv class=\"callout-content\">\u003Cp>等待获取 CSS 不会阻塞 HTML 的解析或者下载，但是它确实会阻塞 JavaScript，因为 JavaScript 经常用于查询元素的 CSS 属性。\u003C/p>\u003C/div>\u003C/aside>\n\u003Ch2 id=\"构建cssom树\">构建CSSOM树\u003Cspan role=\"img\" aria-label=\"evergreen tree\">🌲\u003C/span>\u003C/h2>\n\u003Cp>\u003Cstrong>CSS 对象模型\u003C/strong> \u003Cstrong>(CSSOM)\u003C/strong> 是树形式的所有 CSS 选择器和每个选择器的相关属性的映射，具有树的根节点，同级，后代，子级和其他关系。CSSOM 与文档对象模型 (DOM)非常相似。两者都是\u003Cstrong>关键渲染路径\u003C/strong>的一部分，也是正确渲染一个网站必须采取的一系列步骤。\u003C/p>\n\u003Cp>CSSOM 与 DOM 一起构建\u003Cstrong>渲染树\u003C/strong>，浏览器依次使用渲染树来布局和绘制网页。\u003C/p>\n\u003Cp>CSS 有其自身的规则集合用来定义标识。注意 CSS 中的 C 代表的是“层叠”。CSS 规则是级联的。随着解析器转换标识为节点，节点的后代继承了样式。像处理 HTML 那样的增量处理功能没有被应用到 CSS 上，因为后续规则可能被之前的所覆盖。CSS 对象模型随着 CSS 的解析而被构建，但是直到完成都不能被用来构建渲染树，因为样式将会被之后的解析所覆盖而不应该被渲染到屏幕上。\u003C/p>\n\u003Caside class=\"callout callout-assert\">\u003Cdiv class=\"callout-indicator\">\u003Cdiv class=\"callout-hint\">\u003Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" aria-hidden=\"true\">\u003Ccircle cx=\"19\" cy=\"5\" r=\"3\">\u003C/circle>\u003Cpath d=\"M20 11.929V15c0 1.656-1.344 3-3 3h-3l-6 4v-4H5c-1.656 0-3-1.344-3-3V7c0-1.656 1.344-3 3-3h7.071\">\u003C/path>\u003C/svg>\u003C/div>\u003Cdiv class=\"callout-title\">Info\u003C/div>\u003C/div>\u003Cdiv class=\"callout-content\">\u003Cp>DOM 构造是增量的，CSSOM 却不是。CSS 是渲染阻塞的：浏览器会阻塞页面渲染直到它接收和执行了所有的 CSS。CSS 是渲染阻塞是因为规则可以被覆盖，所以内容不能被渲染直到 CSSOM 的完成。\u003C/p>\u003C/div>\u003C/aside>\n\u003Ch2 id=\"其他过程\">其他过程\u003C/h2>\n\u003Ch3 id=\"javascript编译\">JavaScript编译\u003C/h3>\n\u003Cp>当 CSS 被解析并创建 CSSOM 时，其他资源，包括 JavaScript 文件正在下载（借助预加载扫描器）。JavaScript 被解释、编译、解析和执行。脚本被解析为抽象语法树。一些浏览器引擎使用抽象语法树（AST）并将其传递到解释器中，输出在主线程上执行的字节码。这就是所谓的 JavaScript 编译。\u003C/p>\n\u003Ch3 id=\"构建辅助功能树\">构建辅助功能树\u003Cspan role=\"img\" aria-label=\"evergreen tree\">🌲\u003C/span>\u003C/h3>\n\u003Cp>浏览器还构建辅助设备用于分析和解释内容的辅助功能（accessibility）树。无障碍对象模型（AOM）类似于 DOM 的语义版本。当 DOM 更新时，浏览器会更新辅助功能树。辅助技术本身无法修改无障碍树。\u003C/p>\n\u003Cp>在构建 AOM 之前，屏幕阅读器无法访问内容。\u003C/p>\n\u003Ch2 id=\"渲染\">渲染\u003C/h2>\n\u003Cp>渲染步骤包括样式、布局、绘制，在某些情况下还包括合成。在解析步骤中创建的 CSSOM 树和 DOM 树组合成一个 Render 树，然后用于计算每个可见元素的布局，然后将其绘制到屏幕上。在某些情况下，可以将内容提升到它们自己的层并进行合成，通过在 GPU 而不是 CPU 上绘制屏幕的一部分来提高性能，从而释放主线程。\u003C/p>\n\u003Ch3 id=\"构建render树\">构建Render树\u003Cspan role=\"img\" aria-label=\"evergreen tree\">🌲\u003C/span>\u003C/h3>\n\u003Cp>接下来将 DOM 和 CSSOM 组合成一个 Render 树，计算样式树或渲染树从 DOM 树的根开始构建，遍历每个可见节点。\u003C/p>\n\u003Cp>像\u003Ccode>&#x3C;head>\u003C/code>和它的子节点以及任何具有 \u003Ccode>display: none\u003C/code> 样式的结点，例如 \u003Ccode>script { display: none; }\u003C/code>（在 user agent stylesheets 可以看到这个样式）这些标签将不会显示，也就是它们不会出现在 Render 树上。具有 \u003Ccode>visibility: hidden\u003C/code> 的节点会出现在 Render 树上，因为它们会占用空间。\u003C/p>\n\u003Cp>每个可见节点都应用了其 CSSOM 规则。Render 树保存所有具有内容和计算样式的可见节点——将所有相关样式匹配到 DOM 树中的每个可见节点，并根据\u003Cstrong>CSS 级联\u003C/strong>确定每个节点的计算样式。\u003C/p>\n\u003Ch3 id=\"layout\">Layout\u003C/h3>\n\u003Cp>接下来在渲染树上运行布局以计算每个节点的几何体。布局是确定呈现树中所有节点的宽度、高度和位置，以及确定页面上每个对象的大小和位置的过程。回流是对页面的任何部分或整个文档的任何后续大小和位置的确定。\u003C/p>\n\u003Cp>构建渲染树后，开始布局。渲染树标识显示哪些节点（即使不可见）及其计算样式，但不标识每个节点的尺寸或位置。为了确定每个对象的确切大小和位置，浏览器从渲染树的根开始遍历它。\u003C/p>\n\u003Cp>在网页上，大多数东西都是一个盒子。不同的设备和不同的桌面意味着无限数量的不同的视区大小。在此阶段，考虑到视区大小，浏览器将确定屏幕上所有不同框的尺寸。以视区的大小为基础，布局通常从 body 开始，用每个元素的框模型属性排列所有 body 的子孙元素的尺寸，为不知道其尺寸的替换元素（例如图像）提供占位符空间。\u003C/p>\n\u003Cp>第一次确定节点的大小和位置称为布局。随后对节点大小和位置的重新计算称为回流。假设初始布局发生在返回图像之前，若我们没有提前声明图像的大小，一旦确定了图像大小，就会有回流。\u003C/p>\n\u003Caside class=\"callout callout-tip\">\u003Cdiv class=\"callout-indicator\">\u003Cdiv class=\"callout-hint\">\u003Csvg viewBox=\"0 0 24 24\" width=\"24\" height=\"24\" fill=\"currentColor\" class=\"callout-hint-tip\">\u003Cpath fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M1.43909 8.85483L1.44039 8.85354L4.96668 5.33815C5.30653 4.99386 5.7685 4.79662 6.2524 4.78972L6.26553 4.78963L12.9014 4.78962L13.8479 3.84308C16.9187 0.772319 20.0546 0.770617 21.4678 0.975145C21.8617 1.02914 22.2271 1.21053 22.5083 1.4917C22.7894 1.77284 22.9708 2.13821 23.0248 2.53199C23.2294 3.94517 23.2278 7.08119 20.1569 10.1521L19.2107 11.0983V17.7338L19.2106 17.7469C19.2037 18.2308 19.0067 18.6933 18.6624 19.0331L15.1456 22.5608C14.9095 22.7966 14.6137 22.964 14.29 23.0449C13.9663 23.1259 13.6267 23.1174 13.3074 23.0204C12.9881 22.9235 12.7011 22.7417 12.4771 22.4944C12.2533 22.2473 12.1006 21.9441 12.0355 21.6171L11.1783 17.3417L6.65869 12.822L4.34847 12.3589L2.38351 11.965C2.05664 11.8998 1.75272 11.747 1.50564 11.5232C1.25835 11.2992 1.07653 11.0122 0.979561 10.6929C0.882595 10.3736 0.874125 10.034 0.955057 9.7103C1.03599 9.38659 1.20328 9.09092 1.43909 8.85483ZM6.8186 10.8724L2.94619 10.096L6.32006 6.73268H10.9583L6.8186 10.8724ZM15.2219 5.21703C17.681 2.75787 20.0783 2.75376 21.1124 2.8876C21.2462 3.92172 21.2421 6.31895 18.783 8.77812L12.0728 15.4883L8.51172 11.9272L15.2219 5.21703ZM13.9042 21.0538L13.1279 17.1811L17.2676 13.0414V17.68L13.9042 21.0538Z\">\u003C/path>\u003Cpath d=\"M9.31827 18.3446C9.45046 17.8529 9.17864 17.3369 8.68945 17.1724C8.56178 17.1294 8.43145 17.1145 8.30512 17.1243C8.10513 17.1398 7.91519 17.2172 7.76181 17.3434C7.62613 17.455 7.51905 17.6048 7.45893 17.7835C6.97634 19.2186 5.77062 19.9878 4.52406 20.4029C4.08525 20.549 3.6605 20.644 3.29471 20.7053C3.35607 20.3395 3.45098 19.9148 3.59711 19.476C4.01221 18.2294 4.78141 17.0237 6.21648 16.5411C6.39528 16.481 6.54504 16.3739 6.65665 16.2382C6.85126 16.0016 6.92988 15.678 6.84417 15.3647C6.83922 15.3466 6.83373 15.3286 6.82767 15.3106C6.74106 15.053 6.55701 14.8557 6.33037 14.7459C6.10949 14.6389 5.84816 14.615 5.59715 14.6994C5.47743 14.7397 5.36103 14.7831 5.24786 14.8294C3.22626 15.6569 2.2347 17.4173 1.75357 18.8621C1.49662 19.6337 1.36993 20.3554 1.30679 20.8818C1.27505 21.1464 1.25893 21.3654 1.25072 21.5213C1.24662 21.5993 1.24448 21.6618 1.24337 21.7066L1.243 21.7226L1.24235 21.7605L1.2422 21.7771L1.24217 21.7827L1.24217 21.7856C1.24217 22.3221 1.67703 22.7579 2.2137 22.7579L2.2155 22.7579L2.22337 22.7578L2.23956 22.7577C2.25293 22.7575 2.27096 22.7572 2.29338 22.7567C2.33821 22.7555 2.40073 22.7534 2.47876 22.7493C2.63466 22.7411 2.85361 22.725 3.11822 22.6932C3.64462 22.6301 4.36636 22.5034 5.13797 22.2464C6.58274 21.7653 8.3431 20.7738 9.17063 18.7522C9.21696 18.639 9.26037 18.5226 9.30064 18.4029C9.30716 18.3835 9.31304 18.364 9.31827 18.3446Z\">\u003C/path>\u003C/svg>\u003C/div>\u003Cdiv class=\"callout-title\">Tip\u003C/div>\u003C/div>\u003Cdiv class=\"callout-content\">\u003Cp>为了减小布局事件的频率和时长，批量更新或者避免改动盒模型属性。\u003C/p>\u003C/div>\u003C/aside>\n\u003Ch3 id=\"paint\">Paint\u003C/h3>\n\u003Cp>最后一步是将各个节点绘制到屏幕上，第一次出现的节点称为\u003Cstrong>first meaningful paint\u003C/strong>。在绘制或光栅化阶段，浏览器将在布局阶段计算的每个框转换为屏幕上的实际像素。绘画包括将元素的每个可视部分绘制到屏幕上，包括文本、颜色、边框、阴影和替换的元素（如按钮和图像）。浏览器需要非常快地完成这项工作。\u003C/p>\n\u003Cp>绘制可以将布局树中的元素分解为多个层。将内容提升到 GPU 上的层（而不是 CPU 上的主线程）可以提高绘制和重新绘制性能。有一些特定的属性和元素可以实例化一个层，包括 \u003Ccode>&#x3C;video>\u003C/code> 和 \u003Ccode>&#x3C;canvas>\u003C/code>，任何 CSS 属性为 \u003Ccode>opacity\u003C/code>、3D \u003Ccode>transform\u003C/code>、\u003Ccode>will-change\u003C/code>的元素，还有一些其他元素。这些节点将与子节点一起绘制到它们自己的层上，除非子节点由于上述一个（或多个）原因需要自己的层。\u003C/p>\n\u003Caside class=\"callout callout-warn\">\u003Cdiv class=\"callout-indicator\">\u003Cdiv class=\"callout-hint\">\u003Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" aria-hidden=\"true\">\u003Cpath d=\"M12 9v4m0 4h.01M8.681 4.082C9.351 2.797 10.621 2 12 2s2.649.797 3.319 2.082l6.203 11.904a4.28 4.28 0 0 1-.046 4.019C20.793 21.241 19.549 22 18.203 22H5.797c-1.346 0-2.59-.759-3.273-1.995a4.28 4.28 0 0 1-.046-4.019L8.681 4.082Z\">\u003C/path>\u003C/svg>\u003C/div>\u003Cdiv class=\"callout-title\">Warning\u003C/div>\u003C/div>\u003Cdiv class=\"callout-content\">\u003Cp>分层确实可以提高性能，但是它以内存管理为代价，因此不应作为 web 性能优化策略的一部分过度使用。\u003C/p>\u003C/div>\u003C/aside>\n\u003Ch3 id=\"compositing\">Compositing\u003C/h3>\n\u003Cp>当文档的各个部分以不同的层绘制，相互重叠时，必须进行合成，以确保它们以正确的顺序绘制到屏幕上，并正确显示内容。\u003C/p>\n\u003Cp>当页面继续加载资源时，可能会发生回流（例如加载图片资源），回流会触发重新绘制和重新组合。例如，如果我们定义了图像的大小，就不需要重新绘制，只需要重新绘制需要重新绘制的层，并在必要时进行合成。若未设置图像大小，从服务器获取图像后，渲染过程将返回到布局步骤并从那里重新开始。\u003C/p>\n\u003Ch2 id=\"interactivity\">Interactivity\u003C/h2>\n\u003Cp>一旦主线程绘制页面完成，可以认为已经“准备好了”，但事实并非如此。如果加载包含 JavaScript（并且延迟到\u003Ccode>onload\u003C/code>事件激发后执行），则主线程可能很忙，无法用于滚动、触摸和其他交互。\u003C/p>\n\u003Cp>TTI（Time to Interactivity）是测量从第一个请求导致 DNS 查询和 SSL 连接到页面可交互时所用的时间（可交互是\u003Cem>First Contentful Paint\u003C/em>之后的时间点）。如果主线程正在解析、编译和执行 JavaScript，则它不可用，因此无法及时（小于 50ms）响应用户交互。\u003C/p>",{"headings":1652,"localImagePaths":1705,"remoteImagePaths":1706,"frontmatter":1707,"imagePaths":1711},[1653,1656,1659,1662,1665,1668,1671,1674,1677,1680,1682,1685,1688,1690,1693,1696,1699,1702],{"depth":31,"slug":1654,"text":1655},"http协议","HTTP协议",{"depth":37,"slug":1657,"text":1658},"http-method","HTTP Method",{"depth":37,"slug":1660,"text":1661},"http-status-code--status-text","HTTP Status code & Status text",{"depth":37,"slug":1663,"text":1664},"http-head","HTTP Head",{"depth":37,"slug":1666,"text":1667},"http-request-body","HTTP Request Body",{"depth":37,"slug":1669,"text":1670},"https","HTTPS",{"depth":37,"slug":1672,"text":1673},"http2","HTTP2",{"depth":31,"slug":1675,"text":1676},"构建dom树","构建DOM树🌲",{"depth":31,"slug":1678,"text":1679},"构建cssom树","构建CSSOM树🌲",{"depth":31,"slug":1681,"text":1681},"其他过程",{"depth":37,"slug":1683,"text":1684},"javascript编译","JavaScript编译",{"depth":37,"slug":1686,"text":1687},"构建辅助功能树","构建辅助功能树🌲",{"depth":31,"slug":1689,"text":1689},"渲染",{"depth":37,"slug":1691,"text":1692},"构建render树","构建Render树🌲",{"depth":37,"slug":1694,"text":1695},"layout","Layout",{"depth":37,"slug":1697,"text":1698},"paint","Paint",{"depth":37,"slug":1700,"text":1701},"compositing","Compositing",{"depth":31,"slug":1703,"text":1704},"interactivity","Interactivity",[],[],{"title":1642,"description":15,"pubDate":1708,"heroImage":1644,"date created":1708,"date modified":1281,"tags":1709,"minutesRead":1710},"2023-08-01 16:15",[20,1104],"24 min read",[],"200-Learning/210-Programing/浏览器工作原理.md","200-learning/220-english/dioxus",{"id":1713,"data":1715,"body":1720,"filePath":1721,"digest":1722,"rendered":1723,"legacyId":1731},{"title":1716,"description":15,"draft":16,"pubDate":1717,"heroImage":1718,"tags":1719},"Dioxus",["Date","2023-07-04T06:00:00.000Z"],"https://images.unsplash.com/photo-1546410531-bb4caa6b424d?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1200&q=80",[20],"- ergonomic 工程学的\n- Portable 便捷式的\n- performant 性能卓越的\n- Mature 成熟的\n- churn 搅动\n- drastically 大幅度的","src/content/blog/200-Learning/220-English/Dioxus.md","fa036607f1aca1f2",{"html":1724,"metadata":1725},"\u003Cul>\n\u003Cli>ergonomic 工程学的\u003C/li>\n\u003Cli>Portable 便捷式的\u003C/li>\n\u003Cli>performant 性能卓越的\u003C/li>\n\u003Cli>Mature 成熟的\u003C/li>\n\u003Cli>churn 搅动\u003C/li>\n\u003Cli>drastically 大幅度的\u003C/li>\n\u003C/ul>",{"headings":1726,"localImagePaths":1727,"remoteImagePaths":1728,"frontmatter":1729,"imagePaths":1730},[],[],[],{"title":1716,"description":15,"pubDate":1636,"heroImage":1718,"date created":1636,"date modified":1614,"draft":16,"minutesRead":79},[],"200-Learning/220-English/Dioxus.md","200-learning/220-english/others",{"id":1732,"data":1734,"body":1739,"filePath":1740,"digest":1741,"rendered":1742,"legacyId":1753},{"title":1735,"description":15,"draft":16,"pubDate":1736,"heroImage":1737,"tags":1738},"Others",["Date","2023-07-04T05:59:00.000Z"],"https://images.unsplash.com/photo-1498435999018-6803de1f1c1f?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1200&q=80",[20],"# Others\n\n> Reality leaves a lot to the imagination.\n> — \u003Ccite>John Lennon\u003C/cite>\n\n- delves 翻找、钻研\n- lemme 让我\n- seamlessly 无缝的\n- a boatload of 一船的，大量的\n- piqued 激起\n- handicap 障碍\n- That's a tad too much 这有点过分了\n- ginormouse 巨大的\n- **You lost me there, mate! 你把我弄迷惑了，伙计**\n- credible 可信的\n- lax 松懈\n- robust 强壮的💪\n- sole 唯一\n- caveats 注意事项\n- mindblowing 脑洞大开","src/content/blog/200-Learning/220-English/Others.md","9423dd223a0c55b3",{"html":1743,"metadata":1744},"\u003Ch1 id=\"others\">Others\u003C/h1>\n\u003Cblockquote>\n\u003Cp>Reality leaves a lot to the imagination.\n— \u003Ccite>John Lennon\u003C/cite>\u003C/p>\n\u003C/blockquote>\n\u003Cul>\n\u003Cli>delves 翻找、钻研\u003C/li>\n\u003Cli>lemme 让我\u003C/li>\n\u003Cli>seamlessly 无缝的\u003C/li>\n\u003Cli>a boatload of 一船的，大量的\u003C/li>\n\u003Cli>piqued 激起\u003C/li>\n\u003Cli>handicap 障碍\u003C/li>\n\u003Cli>That’s a tad too much 这有点过分了\u003C/li>\n\u003Cli>ginormouse 巨大的\u003C/li>\n\u003Cli>\u003Cstrong>You lost me there, mate! 你把我弄迷惑了，伙计\u003C/strong>\u003C/li>\n\u003Cli>credible 可信的\u003C/li>\n\u003Cli>lax 松懈\u003C/li>\n\u003Cli>robust 强壮的\u003Cspan role=\"img\" aria-label=\"flexed biceps\">💪\u003C/span>\u003C/li>\n\u003Cli>sole 唯一\u003C/li>\n\u003Cli>caveats 注意事项\u003C/li>\n\u003Cli>mindblowing 脑洞大开\u003C/li>\n\u003C/ul>",{"headings":1745,"localImagePaths":1748,"remoteImagePaths":1749,"frontmatter":1750,"imagePaths":1752},[1746],{"depth":29,"slug":1747,"text":1735},"others",[],[],{"title":1735,"description":15,"pubDate":1751,"heroImage":1737,"date created":1751,"date modified":1614,"draft":16,"minutesRead":79},"2023-07-04 13:59",[],"200-Learning/220-English/Others.md","200-learning/220-english/serde",{"id":1754,"data":1756,"body":1760,"filePath":1761,"digest":1762,"rendered":1763,"legacyId":1771},{"title":1757,"description":15,"draft":16,"pubDate":1758,"heroImage":1737,"tags":1759},"Serde",["Date","2023-07-04T05:59:00.000Z"],[20],"| word  | meaning  |\n|---|---|\n|brittle|脆弱的，易碎的|\n|serialization|连载|\n|representable|可表示的|\n|effectively|有效的|\n|profound|意义深远的|\n|instinctive|本能的，直觉的|\n|derive|使起源，使产生，得到，获得|\n|mechanism|方法，机制|\n|elaborate|复杂的，精心制作的|\n|occasion|特别的事情，适当的时机|\n|convoluted|晦涩难懂的，错综复杂的|\n|perspective|态度、观点、思考方法|\n|encountering|遇到|\n|combination|结合体、联合体|\n|adjacently|相邻的|\n|braced|做好准备的|\n|analogous|类似的，相似的|\n|arbitrary|武断的，任意的|\n|reasonable|合理的，公平的|\n|distinction|差别、区别|\n|compactly|紧凑的|\n|instantiated|实例化、具现化|\n|hint|暗示、提示|\n|causality|因果关系|\n|convention|习俗|","src/content/blog/200-Learning/220-English/Serde.md","00551c3ef7d17472",{"html":1764,"metadata":1765},"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u003Ctable>\u003Cthead>\u003Ctr>\u003Cth>word\u003C/th>\u003Cth>meaning\u003C/th>\u003C/tr>\u003C/thead>\u003Ctbody>\u003Ctr>\u003Ctd>brittle\u003C/td>\u003Ctd>脆弱的，易碎的\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>serialization\u003C/td>\u003Ctd>连载\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>representable\u003C/td>\u003Ctd>可表示的\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>effectively\u003C/td>\u003Ctd>有效的\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>profound\u003C/td>\u003Ctd>意义深远的\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>instinctive\u003C/td>\u003Ctd>本能的，直觉的\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>derive\u003C/td>\u003Ctd>使起源，使产生，得到，获得\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>mechanism\u003C/td>\u003Ctd>方法，机制\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>elaborate\u003C/td>\u003Ctd>复杂的，精心制作的\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>occasion\u003C/td>\u003Ctd>特别的事情，适当的时机\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>convoluted\u003C/td>\u003Ctd>晦涩难懂的，错综复杂的\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>perspective\u003C/td>\u003Ctd>态度、观点、思考方法\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>encountering\u003C/td>\u003Ctd>遇到\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>combination\u003C/td>\u003Ctd>结合体、联合体\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>adjacently\u003C/td>\u003Ctd>相邻的\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>braced\u003C/td>\u003Ctd>做好准备的\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>analogous\u003C/td>\u003Ctd>类似的，相似的\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>arbitrary\u003C/td>\u003Ctd>武断的，任意的\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>reasonable\u003C/td>\u003Ctd>合理的，公平的\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>distinction\u003C/td>\u003Ctd>差别、区别\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>compactly\u003C/td>\u003Ctd>紧凑的\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>instantiated\u003C/td>\u003Ctd>实例化、具现化\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>hint\u003C/td>\u003Ctd>暗示、提示\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>causality\u003C/td>\u003Ctd>因果关系\u003C/td>\u003C/tr>\u003Ctr>\u003Ctd>convention\u003C/td>\u003Ctd>习俗\u003C/td>\u003C/tr>\u003C/tbody>\u003C/table>",{"headings":1766,"localImagePaths":1767,"remoteImagePaths":1768,"frontmatter":1769,"imagePaths":1770},[],[],[],{"title":1757,"description":15,"pubDate":1751,"heroImage":1737,"date created":1751,"date modified":1614,"draft":16,"minutesRead":79},[],"200-Learning/220-English/Serde.md","200-learning/220-sociology/新手管理者面临的9个问题",{"id":1772,"data":1774,"body":1780,"filePath":1781,"digest":1782,"rendered":1783,"legacyId":1824},{"title":1775,"description":15,"pubDate":1776,"heroImage":1777,"tags":1778},"新手管理者面临的9个问题🙋",["Date","2023-08-06T02:09:00.000Z"],"https://images.unsplash.com/photo-1649750555596-e90e79106943?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1200&q=80",[133,1779],"management","一线管理者根据企业的战略决策，带领着一线作战团队，驱动团队拿到企业想要的结果，把企业的要求和目标转化为一场场“战役”的胜利。简单来讲就是“顶层指明方向，一线创造战果”。\n\n在我们个人职业生涯中，从执行者被任命为一线管理者，意味着我们必须迎接职业生涯中真正的挑战。企业对新手管理者的要求也变成了：既善于做好业务，又能够带好团队。\n\n职业转型最重要的第一步就是“角色认知”，也就是清晰地明确自己的角色、上级的角色、下级的角色，以及自己未来的角色，对管理形成系统化的思维。\n\n![image.png](https://raw.githubusercontent.com/fw6/assets/main/toy_docs/20230806101908.png)\n\n下面是新手管理者的九个难题：\n\n## 1 当从同事变为管理者，该如何接受和适应“管理者”的身份？\n\n当被提拔后，首先面对的难题是如何管理过去的同事。之前平级的同事，无论你或者他们，接受和适应你作为管理者的身份，都需要一个磨合的过程。\n\n## 2 管理空降兵是应硬着陆？还是软着陆？空降到团队做管理者，你该如何被团队接纳和认可？\n\n与团队破冰是空降管理者首先面临的难题，因为团队都在时刻审视和判断你是否有资格做他们的领导。\n\n你不仅要设法给团队留下良好的第一印象，还要表明你的态度，让团队了解你将给他们带来什么，以及你将如何管理大家。\n\n即使有了良好的开端，给团队留下了很好的第一印象，你也需要在工作中用实力证明自己，兑现对团队的承诺。你与下属的谈话、开会、安排工作、处理问题等任一行动都像是在考试，知道你完全征服团队为止。\n\n怎么做？\n1. 不要着急做事，认理解公司/团队的工作情况、业务模式，多看多思考多提问🙋\n2. 耐心与上级沟通目标，了解领导和公司对于自己的期待，以及接下来的工作重点和目标🎯\n3. 了解你的团队，做好一对一面谈，了解他们的期待、特长、问题、目标等🫡\n\n## 3 作为团队掌舵人，如何去给团队成员分配合理的任务，提出合理的要求？\n\n作为管理者，要求过高，会让整个团队充满挫折感；管理者很平和，又会让员工过于舒适，得不到发展。该怎么办？\n\n合理的标准：常规工作，员工基本能百分之百完成；富有挑战性的工作，员工大约有七成把握完成，或者大约有七成员工能百分之百达成目标，剩下三成员工能超越目标或无法达成目标。\n\n对新手管理者而言，困难的时如何正确判断和掌握“合理”的程度。了解每一个下属，并结合他们不同的情况安排不同的工作，不是件容易的事。\n\n## 4 如何激发员工积极性？如何让员工承担更多或更有挑战性的工作，付出额外的努力？\n\n在工作中，当任务繁忙或存在挑战时，把任务分配下去，对于新手管理者是个挑战。\n\n如果团队已经在加班加点，或者团队中有人在休假，人手不够，此时让你多给团队布置一项任务，你可能都会感到自己在为难下属，担心额外的任务会成为压垮员工的最后一根稻草。\n\n## 5 作为管理者，如何让员工理解和认同你的要求，真正承担起责任？\n\n管理要看得见人，员工不是机器，他们有自己的想法、习惯和偏好，作为新手管理者，如何让员工“听话”是个难点。很可能在你下令之前，有人已经开始行动，有人迟迟没有反应。更多时候，下属的行动会与你原本的想法南辕北辙，或者即使大方向一致，但细节和结果总不尽如人意。\n因此，你会感到自己需要把每一个细节都沟通到位，并在员工执行时盯紧每一个环节，一旦有一点没有注意到，就有可能偏离轨道，出现问题。\n\n要让员工按照要求执行，并执行到位，你就不能像驾校教练那样只给指令。你需要做的是，让员工真正理解你的要求，并调动他们的主观能动性。\n\n## 6 如何摆脱救火队长的角色？如何有条理的处理团队搞不定的问题和突发情况？\n\n在带团队过程中，团队遇到的问题通常会汇报给管理者，尤其是非常规的和团队搞不定的难题。管路者是一个团队的信息节点，组织自上而下的信息，以及员工自下而上的信息都需要管理者传递。团队遇到的很多问题都需要汇报给管理者，由管理者决策，然后团队再采取行动。\n\n作为团队管理者，面对的问题大致以下3类：\n- 咨询类问题。例如“什么问题应该找谁” “过去有没有类似的案例或项目”等等。尤其是体系不够完备的企业，通常将管理者或企业内的老员工作为团队“百事通”\n- 决策类问题。好一点的情况，员工会把现状、分析和建议摆出来，让管理者拿主意；但很多时候，员工只是抛出问题；另一种是资源类问题，需要管理者或其他部门争取或协调资源\n- 大多是员工遇到无法解决的问题，不知道怎么办，找管理者寻求帮助。\n\n新手管理者很容易被各式各样的问题压垮。需要做到既帮助团队切实解决问题，又不让自己陷于团队的问题之中。\n\n## 7 如何及时掌握团队的任务执行情况？做好风险预案，如何提前干预？\n\n管理者很容易被团队问题裹挟，四处救火，疲于应付，不能事先掌握团队的执行情况，总在接收”最后一分钟的惊喜“。\n\n管理者不需要惊喜，只需要按规则办事。\n\n虽然一直在跟团队开会，也在用日报、周报了解员工的工作情况，但当有问题发生时，你仍然”后知后觉“。\n\n员工遇到情况，并非下属有意隐瞒，很多时候只是没意识到问题的严重性，或以为自己有能力解决。\n\n## 8 如何用恰当的方式给予员工反馈？正反馈负反馈该如何在合适的场景下提出？\n\n作为新手管理者，你一开始可能不会有意识地主动给予员工反馈，有不少人都是等到绩效考核时才给予员工反馈；也有一些管理者只跟员工谈论工作中的事情，虽然对员工的表现都看在眼里，也有很多想法，但很少发表意见。\n\n怎么夸人不尴尬，且夸到位，真正让下属感到被肯定和激励，这也是个难题。\n\n## 9 如何施展自身情景领导力？如何根据员工的不同情况，因材施教？\n\n在一开始指导下属时，你就会发现教会别人远比自己做难。你可能会因此而丧失了耐心和风度，教导方式变得严厉和粗暴，给下属带来很多压力，让其有挫败感。\n\n你也可能在指导几次之后发觉没效果，于是干脆把活儿接下来自己干。更让你受挫的时，你发现很多在你看来明摆着的道理，下属却难以理解。一些对你行之有效的方法，下属学起来却走了样。更糟心的是，很多员工并不能理解你的苦心。你给了那么多资源和机会，但他们自己不想发展，不愿付出任何努力。\n\n作为新手管理者，把注意力从“事”转移到“人”上，了解每一个下属，有能力或有方法对他们进行针对性的辅导，而非非常大的考验和锻炼，这也是你要面对的管理难题。\n\n大部分管理者在被提拔之前，通常都绩效出众，在“执行力”和“专业”上具备一定优势。一方面，做管理需要依赖这些优势。因为指导团队不是逐一告诉下属每个步骤具体要做什么，而是要在方向和策略上给予团队指引，一针见血地点出关键问题、预判风险，给出相应的指导。这都要求大家对业务有精准的判断，以及高于团队眼光的洞察。如果你对业务的理解不够，管理团队就是“无本之木，无源之水”，也无法落于实际和产生效果~\n\n另一方面，如果过于依赖自己的专业力和执行力，沿用自己最擅长的方式解决问题，一直做自己最擅长的事，又会制约你的发展。因为如果你分不出时间和精力去尝试不擅长的事，也就永远学不会用新的方法解决问题。\n\n## 最后，如何从执行者角色过渡到管理者？\n\n第一，通过沟通提高下属的工作效率，提高下属时间意识。\n\n作为一个管理者，光自己做得好还不够，同时还要有良好的沟通能力，帮助团队成员工作更高效。把领导的指令清楚准确的传达给团队成员，让他们正确理解指令的要求和标准是什么，明确每个任务最终实现的时间节点，在时间节点之前充分做好检查督促。并且迅速将工作完成，是具备管理能力的体现。\n\n因为，一项任务远不是任何一个人可以单独完成的，需要团队的协作能力，管理者学会合理分工，安排好团队内每位员工的工作内容，让他们正确高效的完成领导的要求，就是至关重要的事情。\n\n作为管理，必须具备良好的沟通能力，学会通过沟通获得下属的准确信息，充分了解他们，才能做到因人而异，量才而用。\n\n\n第二，对业务要更加了然于心，以身作则起好带头作用。\n\n管理者不仅是简单的传达命令，或是向领导反馈团队成员的信息，工作的进度，需要解决的事项。而应该是以身作则的起好带头作用。\n不但具有处理各项信息、事务的能力，还能将公司业务操作流程熟练于胸。作为一个团队的管理者，如果对专业的知识不熟悉，团队中出现的问题不能得到解决，不仅管理者要对自身的能力产生怀疑，团队的成员也会因此看轻管理者。\n\n第三，建立大局观。「执行者」可能只关注当下的个人发展，和恰当的同事关系，但成为管理者之后，就要从只关注个人发展，转变为关注整个团队、部门、整个公司的发展了。所以要逐渐培养起来大局观意识，即一切以最终完成公司目标为使命。\n\n跳出原来的工作方式，站在全局角度了解当前部门工作流程、业务和核心工作是什么？熟悉每个工作程序，梳理工作中遇到的问题，罗列出来，并找出解决的方法。","src/content/blog/200-Learning/220-Sociology/新手管理者面临的9个问题🙋.md","0f317e6b23c761ed",{"html":1784,"metadata":1785},"\u003Cp>一线管理者根据企业的战略决策，带领着一线作战团队，驱动团队拿到企业想要的结果，把企业的要求和目标转化为一场场“战役”的胜利。简单来讲就是“顶层指明方向，一线创造战果”。\u003C/p>\n\u003Cp>在我们个人职业生涯中，从执行者被任命为一线管理者，意味着我们必须迎接职业生涯中真正的挑战。企业对新手管理者的要求也变成了：既善于做好业务，又能够带好团队。\u003C/p>\n\u003Cp>职业转型最重要的第一步就是“角色认知”，也就是清晰地明确自己的角色、上级的角色、下级的角色，以及自己未来的角色，对管理形成系统化的思维。\u003C/p>\n\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/fw6/assets/main/toy_docs/20230806101908.png\" alt=\"image.png\">\u003C/p>\n\u003Cp>下面是新手管理者的九个难题：\u003C/p>\n\u003Ch2 id=\"1-当从同事变为管理者该如何接受和适应管理者的身份\">1 当从同事变为管理者，该如何接受和适应“管理者”的身份？\u003C/h2>\n\u003Cp>当被提拔后，首先面对的难题是如何管理过去的同事。之前平级的同事，无论你或者他们，接受和适应你作为管理者的身份，都需要一个磨合的过程。\u003C/p>\n\u003Ch2 id=\"2-管理空降兵是应硬着陆还是软着陆空降到团队做管理者你该如何被团队接纳和认可\">2 管理空降兵是应硬着陆？还是软着陆？空降到团队做管理者，你该如何被团队接纳和认可？\u003C/h2>\n\u003Cp>与团队破冰是空降管理者首先面临的难题，因为团队都在时刻审视和判断你是否有资格做他们的领导。\u003C/p>\n\u003Cp>你不仅要设法给团队留下良好的第一印象，还要表明你的态度，让团队了解你将给他们带来什么，以及你将如何管理大家。\u003C/p>\n\u003Cp>即使有了良好的开端，给团队留下了很好的第一印象，你也需要在工作中用实力证明自己，兑现对团队的承诺。你与下属的谈话、开会、安排工作、处理问题等任一行动都像是在考试，知道你完全征服团队为止。\u003C/p>\n\u003Cp>怎么做？\u003C/p>\n\u003Col>\n\u003Cli>不要着急做事，认理解公司/团队的工作情况、业务模式，多看多思考多提问\u003Cspan role=\"img\" aria-label=\"person raising hand\">🙋\u003C/span>\u003C/li>\n\u003Cli>耐心与上级沟通目标，了解领导和公司对于自己的期待，以及接下来的工作重点和目标\u003Cspan role=\"img\" aria-label=\"direct hit\">🎯\u003C/span>\u003C/li>\n\u003Cli>了解你的团队，做好一对一面谈，了解他们的期待、特长、问题、目标等\u003Cspan role=\"img\" aria-label=\"\">🫡\u003C/span>\u003C/li>\n\u003C/ol>\n\u003Ch2 id=\"3-作为团队掌舵人如何去给团队成员分配合理的任务提出合理的要求\">3 作为团队掌舵人，如何去给团队成员分配合理的任务，提出合理的要求？\u003C/h2>\n\u003Cp>作为管理者，要求过高，会让整个团队充满挫折感；管理者很平和，又会让员工过于舒适，得不到发展。该怎么办？\u003C/p>\n\u003Cp>合理的标准：常规工作，员工基本能百分之百完成；富有挑战性的工作，员工大约有七成把握完成，或者大约有七成员工能百分之百达成目标，剩下三成员工能超越目标或无法达成目标。\u003C/p>\n\u003Cp>对新手管理者而言，困难的时如何正确判断和掌握“合理”的程度。了解每一个下属，并结合他们不同的情况安排不同的工作，不是件容易的事。\u003C/p>\n\u003Ch2 id=\"4-如何激发员工积极性如何让员工承担更多或更有挑战性的工作付出额外的努力\">4 如何激发员工积极性？如何让员工承担更多或更有挑战性的工作，付出额外的努力？\u003C/h2>\n\u003Cp>在工作中，当任务繁忙或存在挑战时，把任务分配下去，对于新手管理者是个挑战。\u003C/p>\n\u003Cp>如果团队已经在加班加点，或者团队中有人在休假，人手不够，此时让你多给团队布置一项任务，你可能都会感到自己在为难下属，担心额外的任务会成为压垮员工的最后一根稻草。\u003C/p>\n\u003Ch2 id=\"5-作为管理者如何让员工理解和认同你的要求真正承担起责任\">5 作为管理者，如何让员工理解和认同你的要求，真正承担起责任？\u003C/h2>\n\u003Cp>管理要看得见人，员工不是机器，他们有自己的想法、习惯和偏好，作为新手管理者，如何让员工“听话”是个难点。很可能在你下令之前，有人已经开始行动，有人迟迟没有反应。更多时候，下属的行动会与你原本的想法南辕北辙，或者即使大方向一致，但细节和结果总不尽如人意。\n因此，你会感到自己需要把每一个细节都沟通到位，并在员工执行时盯紧每一个环节，一旦有一点没有注意到，就有可能偏离轨道，出现问题。\u003C/p>\n\u003Cp>要让员工按照要求执行，并执行到位，你就不能像驾校教练那样只给指令。你需要做的是，让员工真正理解你的要求，并调动他们的主观能动性。\u003C/p>\n\u003Ch2 id=\"6-如何摆脱救火队长的角色如何有条理的处理团队搞不定的问题和突发情况\">6 如何摆脱救火队长的角色？如何有条理的处理团队搞不定的问题和突发情况？\u003C/h2>\n\u003Cp>在带团队过程中，团队遇到的问题通常会汇报给管理者，尤其是非常规的和团队搞不定的难题。管路者是一个团队的信息节点，组织自上而下的信息，以及员工自下而上的信息都需要管理者传递。团队遇到的很多问题都需要汇报给管理者，由管理者决策，然后团队再采取行动。\u003C/p>\n\u003Cp>作为团队管理者，面对的问题大致以下3类：\u003C/p>\n\u003Cul>\n\u003Cli>咨询类问题。例如“什么问题应该找谁” “过去有没有类似的案例或项目”等等。尤其是体系不够完备的企业，通常将管理者或企业内的老员工作为团队“百事通”\u003C/li>\n\u003Cli>决策类问题。好一点的情况，员工会把现状、分析和建议摆出来，让管理者拿主意；但很多时候，员工只是抛出问题；另一种是资源类问题，需要管理者或其他部门争取或协调资源\u003C/li>\n\u003Cli>大多是员工遇到无法解决的问题，不知道怎么办，找管理者寻求帮助。\u003C/li>\n\u003C/ul>\n\u003Cp>新手管理者很容易被各式各样的问题压垮。需要做到既帮助团队切实解决问题，又不让自己陷于团队的问题之中。\u003C/p>\n\u003Ch2 id=\"7-如何及时掌握团队的任务执行情况做好风险预案如何提前干预\">7 如何及时掌握团队的任务执行情况？做好风险预案，如何提前干预？\u003C/h2>\n\u003Cp>管理者很容易被团队问题裹挟，四处救火，疲于应付，不能事先掌握团队的执行情况，总在接收”最后一分钟的惊喜“。\u003C/p>\n\u003Cp>管理者不需要惊喜，只需要按规则办事。\u003C/p>\n\u003Cp>虽然一直在跟团队开会，也在用日报、周报了解员工的工作情况，但当有问题发生时，你仍然”后知后觉“。\u003C/p>\n\u003Cp>员工遇到情况，并非下属有意隐瞒，很多时候只是没意识到问题的严重性，或以为自己有能力解决。\u003C/p>\n\u003Ch2 id=\"8-如何用恰当的方式给予员工反馈正反馈负反馈该如何在合适的场景下提出\">8 如何用恰当的方式给予员工反馈？正反馈负反馈该如何在合适的场景下提出？\u003C/h2>\n\u003Cp>作为新手管理者，你一开始可能不会有意识地主动给予员工反馈，有不少人都是等到绩效考核时才给予员工反馈；也有一些管理者只跟员工谈论工作中的事情，虽然对员工的表现都看在眼里，也有很多想法，但很少发表意见。\u003C/p>\n\u003Cp>怎么夸人不尴尬，且夸到位，真正让下属感到被肯定和激励，这也是个难题。\u003C/p>\n\u003Ch2 id=\"9-如何施展自身情景领导力如何根据员工的不同情况因材施教\">9 如何施展自身情景领导力？如何根据员工的不同情况，因材施教？\u003C/h2>\n\u003Cp>在一开始指导下属时，你就会发现教会别人远比自己做难。你可能会因此而丧失了耐心和风度，教导方式变得严厉和粗暴，给下属带来很多压力，让其有挫败感。\u003C/p>\n\u003Cp>你也可能在指导几次之后发觉没效果，于是干脆把活儿接下来自己干。更让你受挫的时，你发现很多在你看来明摆着的道理，下属却难以理解。一些对你行之有效的方法，下属学起来却走了样。更糟心的是，很多员工并不能理解你的苦心。你给了那么多资源和机会，但他们自己不想发展，不愿付出任何努力。\u003C/p>\n\u003Cp>作为新手管理者，把注意力从“事”转移到“人”上，了解每一个下属，有能力或有方法对他们进行针对性的辅导，而非非常大的考验和锻炼，这也是你要面对的管理难题。\u003C/p>\n\u003Cp>大部分管理者在被提拔之前，通常都绩效出众，在“执行力”和“专业”上具备一定优势。一方面，做管理需要依赖这些优势。因为指导团队不是逐一告诉下属每个步骤具体要做什么，而是要在方向和策略上给予团队指引，一针见血地点出关键问题、预判风险，给出相应的指导。这都要求大家对业务有精准的判断，以及高于团队眼光的洞察。如果你对业务的理解不够，管理团队就是“无本之木，无源之水”，也无法落于实际和产生效果~\u003C/p>\n\u003Cp>另一方面，如果过于依赖自己的专业力和执行力，沿用自己最擅长的方式解决问题，一直做自己最擅长的事，又会制约你的发展。因为如果你分不出时间和精力去尝试不擅长的事，也就永远学不会用新的方法解决问题。\u003C/p>\n\u003Ch2 id=\"最后如何从执行者角色过渡到管理者\">最后，如何从执行者角色过渡到管理者？\u003C/h2>\n\u003Cp>第一，通过沟通提高下属的工作效率，提高下属时间意识。\u003C/p>\n\u003Cp>作为一个管理者，光自己做得好还不够，同时还要有良好的沟通能力，帮助团队成员工作更高效。把领导的指令清楚准确的传达给团队成员，让他们正确理解指令的要求和标准是什么，明确每个任务最终实现的时间节点，在时间节点之前充分做好检查督促。并且迅速将工作完成，是具备管理能力的体现。\u003C/p>\n\u003Cp>因为，一项任务远不是任何一个人可以单独完成的，需要团队的协作能力，管理者学会合理分工，安排好团队内每位员工的工作内容，让他们正确高效的完成领导的要求，就是至关重要的事情。\u003C/p>\n\u003Cp>作为管理，必须具备良好的沟通能力，学会通过沟通获得下属的准确信息，充分了解他们，才能做到因人而异，量才而用。\u003C/p>\n\u003Cp>第二，对业务要更加了然于心，以身作则起好带头作用。\u003C/p>\n\u003Cp>管理者不仅是简单的传达命令，或是向领导反馈团队成员的信息，工作的进度，需要解决的事项。而应该是以身作则的起好带头作用。\n不但具有处理各项信息、事务的能力，还能将公司业务操作流程熟练于胸。作为一个团队的管理者，如果对专业的知识不熟悉，团队中出现的问题不能得到解决，不仅管理者要对自身的能力产生怀疑，团队的成员也会因此看轻管理者。\u003C/p>\n\u003Cp>第三，建立大局观。「执行者」可能只关注当下的个人发展，和恰当的同事关系，但成为管理者之后，就要从只关注个人发展，转变为关注整个团队、部门、整个公司的发展了。所以要逐渐培养起来大局观意识，即一切以最终完成公司目标为使命。\u003C/p>\n\u003Cp>跳出原来的工作方式，站在全局角度了解当前部门工作流程、业务和核心工作是什么？熟悉每个工作程序，梳理工作中遇到的问题，罗列出来，并找出解决的方法。\u003C/p>",{"headings":1786,"localImagePaths":1817,"remoteImagePaths":1818,"frontmatter":1819,"imagePaths":1823},[1787,1790,1793,1796,1799,1802,1805,1808,1811,1814],{"depth":31,"slug":1788,"text":1789},"1-当从同事变为管理者该如何接受和适应管理者的身份","1 当从同事变为管理者，该如何接受和适应“管理者”的身份？",{"depth":31,"slug":1791,"text":1792},"2-管理空降兵是应硬着陆还是软着陆空降到团队做管理者你该如何被团队接纳和认可","2 管理空降兵是应硬着陆？还是软着陆？空降到团队做管理者，你该如何被团队接纳和认可？",{"depth":31,"slug":1794,"text":1795},"3-作为团队掌舵人如何去给团队成员分配合理的任务提出合理的要求","3 作为团队掌舵人，如何去给团队成员分配合理的任务，提出合理的要求？",{"depth":31,"slug":1797,"text":1798},"4-如何激发员工积极性如何让员工承担更多或更有挑战性的工作付出额外的努力","4 如何激发员工积极性？如何让员工承担更多或更有挑战性的工作，付出额外的努力？",{"depth":31,"slug":1800,"text":1801},"5-作为管理者如何让员工理解和认同你的要求真正承担起责任","5 作为管理者，如何让员工理解和认同你的要求，真正承担起责任？",{"depth":31,"slug":1803,"text":1804},"6-如何摆脱救火队长的角色如何有条理的处理团队搞不定的问题和突发情况","6 如何摆脱救火队长的角色？如何有条理的处理团队搞不定的问题和突发情况？",{"depth":31,"slug":1806,"text":1807},"7-如何及时掌握团队的任务执行情况做好风险预案如何提前干预","7 如何及时掌握团队的任务执行情况？做好风险预案，如何提前干预？",{"depth":31,"slug":1809,"text":1810},"8-如何用恰当的方式给予员工反馈正反馈负反馈该如何在合适的场景下提出","8 如何用恰当的方式给予员工反馈？正反馈负反馈该如何在合适的场景下提出？",{"depth":31,"slug":1812,"text":1813},"9-如何施展自身情景领导力如何根据员工的不同情况因材施教","9 如何施展自身情景领导力？如何根据员工的不同情况，因材施教？",{"depth":31,"slug":1815,"text":1816},"最后如何从执行者角色过渡到管理者","最后，如何从执行者角色过渡到管理者？",[],[],{"title":1775,"description":15,"pubDate":1820,"heroImage":1777,"date created":1820,"date modified":267,"tags":1821,"minutesRead":1822},"2023-08-06 10:09",[133,1779],"16 min read",[],"200-Learning/220-Sociology/新手管理者面临的9个问题🙋.md","200-learning/220-sociology/聊聊第一性原理",{"id":1825,"data":1827,"body":1833,"filePath":1834,"digest":1835,"rendered":1836,"legacyId":1848},{"title":1828,"description":1829,"draft":16,"pubDate":1830,"heroImage":1831,"tags":1832},"聊聊第一性原理","在任何一个系统中，存在第一性原理，是一个最基本的命题或假设，不能被省略，也不能被违反。———亚里士多德",["Date","2023-08-01T13:33:00.000Z"],"https://raw.githubusercontent.com/fw6/assets/main/toy_docs/20230801213558.png",[20],"2300多年前，亚里士多德提出了第一性原理的概念：「在任何一个系统中，存在第一性原理，是一个最基本的命题或假设，不能被省略，也不能被违反。」\n\n“第一原理”的思维框架可以追溯到古希腊哲学家亚里士多德的形而上学。在更早的远古时代，人们都是以神话和传说来解释世界，这本质上是一种类比和隐喻式的思维。而古希腊则开始了思维方式从“讲故事”到“讲道理”的演变，人们用逻辑、概念化的模型和理论来解释宇宙，萌发了科学的种子，亚里士多德则系统地总结了“第一性”智慧。\n\n作为计算物理中的一个专业名词，广义的第一性原理计算指的是一切基于量子力学原理的计算。第一性原理就是从头计算，不需要任何参数，只需要一些基本的物理常量，就可以得到体系基态的基本性质的原理。物理学研究的第一条原则，不要以类比方式来推理，应该从最根本的真理开始思考 。\n\n马斯克作为第一性原理的忠实鼓吹者与成功实践者，来看看他对其的理解：\n我们运用第一性原理，而不是类比思维去思考问题，是非常重要的。我们在生活中总是倾向于比较，对别人已经做过或者正在做的事情，我们也都跟风去做。这样发展的结果，只能产生细小的迭代发展。\n\n「第一性原理」的思考方式，是用物理学的角度看待世界，也就是说一层层拨开事物表象，看到里面的本质，再从本质一层层往上走。\n\n这是他眼中的“第一性原理思维模型”：**回溯事物本质，重新思考该怎么做**。\n\n1.第一性原理是演绎思维\n2.第一性原理和追本溯源的区别在于出发点不同，一个从原理出发，一个从问题出发\n3.相比追本溯源，第一性原理能够有更广阔的思路，能够创造性解决问题\n4.第一性原理有其局限，因为它有其覆盖边界；要解决这个问题，就需要丰富原理库，进行多元思考\n\n\n**第一性原理是一个定律，或是一个模型。搜集的越多，那你能解答的问题也就越多。**\n\n**培养第一性原理思维的捷径就是跨学科学习！**\n\n## 领导力第一性原理","src/content/blog/200-Learning/220-Sociology/聊聊第一性原理.md","c68a2d8df14f7935",{"html":1837,"metadata":1838},"\u003Cp>2300多年前，亚里士多德提出了第一性原理的概念：「在任何一个系统中，存在第一性原理，是一个最基本的命题或假设，不能被省略，也不能被违反。」\u003C/p>\n\u003Cp>“第一原理”的思维框架可以追溯到古希腊哲学家亚里士多德的形而上学。在更早的远古时代，人们都是以神话和传说来解释世界，这本质上是一种类比和隐喻式的思维。而古希腊则开始了思维方式从“讲故事”到“讲道理”的演变，人们用逻辑、概念化的模型和理论来解释宇宙，萌发了科学的种子，亚里士多德则系统地总结了“第一性”智慧。\u003C/p>\n\u003Cp>作为计算物理中的一个专业名词，广义的第一性原理计算指的是一切基于量子力学原理的计算。第一性原理就是从头计算，不需要任何参数，只需要一些基本的物理常量，就可以得到体系基态的基本性质的原理。物理学研究的第一条原则，不要以类比方式来推理，应该从最根本的真理开始思考 。\u003C/p>\n\u003Cp>马斯克作为第一性原理的忠实鼓吹者与成功实践者，来看看他对其的理解：\n我们运用第一性原理，而不是类比思维去思考问题，是非常重要的。我们在生活中总是倾向于比较，对别人已经做过或者正在做的事情，我们也都跟风去做。这样发展的结果，只能产生细小的迭代发展。\u003C/p>\n\u003Cp>「第一性原理」的思考方式，是用物理学的角度看待世界，也就是说一层层拨开事物表象，看到里面的本质，再从本质一层层往上走。\u003C/p>\n\u003Cp>这是他眼中的“第一性原理思维模型”：\u003Cstrong>回溯事物本质，重新思考该怎么做\u003C/strong>。\u003C/p>\n\u003Cp>1.第一性原理是演绎思维\n2.第一性原理和追本溯源的区别在于出发点不同，一个从原理出发，一个从问题出发\n3.相比追本溯源，第一性原理能够有更广阔的思路，能够创造性解决问题\n4.第一性原理有其局限，因为它有其覆盖边界；要解决这个问题，就需要丰富原理库，进行多元思考\u003C/p>\n\u003Cp>\u003Cstrong>第一性原理是一个定律，或是一个模型。搜集的越多，那你能解答的问题也就越多。\u003C/strong>\u003C/p>\n\u003Cp>\u003Cstrong>培养第一性原理思维的捷径就是跨学科学习！\u003C/strong>\u003C/p>\n\u003Ch2 id=\"领导力第一性原理\">领导力第一性原理\u003C/h2>",{"headings":1839,"localImagePaths":1842,"remoteImagePaths":1843,"frontmatter":1844,"imagePaths":1847},[1840],{"depth":31,"slug":1841,"text":1841},"领导力第一性原理",[],[],{"title":1828,"description":1829,"pubDate":1845,"heroImage":1831,"date created":1845,"date modified":1281,"draft":16,"tags":1846,"minutesRead":956},"2023-08-01 21:33",[20],[],"200-Learning/220-Sociology/聊聊第一性原理.md","300-work/310-sharing/monorepo开发实践",{"id":1849,"data":1851,"body":1856,"filePath":1857,"digest":1858,"rendered":1859,"legacyId":1870},{"title":1852,"description":15,"draft":16,"pubDate":1853,"heroImage":1854,"tags":1855},"Untitled",["Date","2023-11-20T02:53:00.000Z"],"https://images.unsplash.com/photo-1549735651-77a5e0e7954b?q=80&w=1200&auto=format&fit=crop",[20],"> Trying to define yourself is like trying to bite your own teeth  .\n> — \u003Ccite>Alan Watts\u003C/cite>\n\nI. 介绍  \nA. 什么是monorepo  \n\nB. monorepo的优势和挑战  \n\n  \nII. 仓库管理工具  \nA. 介绍nx和lerna  \nB. 如何使用nx和lerna进行monorepo仓库管理  \n\nC. 任务编排和调度的最佳实践  \n\n  \nIII. 组件开发  \nA. 介绍storybook  \nB. 如何使用storybook进行组件开发  \n\nC. 组件开发的最佳实践  \n\n  \nIV. 样式开发  \nA. 介绍tailwindcss  \nB. 如何使用tailwindcss进行样式开发  \n\nC. 样式开发的最佳实践  \n\n  \nV. 组件开发模式  \nA. 介绍headless component模式  \nB. 如何使用headless component模式进行组件开发  \n\nC. headless component模式的最佳实践  \n\n  \nVI. 总结和展望  \nA. monorepo最佳实践的总结  \nB. 未来monorepo的发展趋势","src/content/blog/300-work/310-sharing/Monorepo开发实践.md","ea8fda8410bb2426",{"html":1860,"metadata":1861},"\u003Cblockquote>\n\u003Cp>Trying to define yourself is like trying to bite your own teeth  .\n— \u003Ccite>Alan Watts\u003C/cite>\u003C/p>\n\u003C/blockquote>\n\u003Cp>I. 介绍\u003Cbr>\nA. 什么是monorepo\u003C/p>\n\u003Cp>B. monorepo的优势和挑战\u003C/p>\n\u003Cp>II. 仓库管理工具\u003Cbr>\nA. 介绍nx和lerna\u003Cbr>\nB. 如何使用nx和lerna进行monorepo仓库管理\u003C/p>\n\u003Cp>C. 任务编排和调度的最佳实践\u003C/p>\n\u003Cp>III. 组件开发\u003Cbr>\nA. 介绍storybook\u003Cbr>\nB. 如何使用storybook进行组件开发\u003C/p>\n\u003Cp>C. 组件开发的最佳实践\u003C/p>\n\u003Cp>IV. 样式开发\u003Cbr>\nA. 介绍tailwindcss\u003Cbr>\nB. 如何使用tailwindcss进行样式开发\u003C/p>\n\u003Cp>C. 样式开发的最佳实践\u003C/p>\n\u003Cp>V. 组件开发模式\u003Cbr>\nA. 介绍headless component模式\u003Cbr>\nB. 如何使用headless component模式进行组件开发\u003C/p>\n\u003Cp>C. headless component模式的最佳实践\u003C/p>\n\u003Cp>VI. 总结和展望\u003Cbr>\nA. monorepo最佳实践的总结\u003Cbr>\nB. 未来monorepo的发展趋势\u003C/p>",{"headings":1862,"localImagePaths":1863,"remoteImagePaths":1864,"frontmatter":1865,"imagePaths":1869},[],[],[],{"title":1852,"description":15,"pubDate":1866,"heroImage":1854,"date created":1866,"date modified":1867,"draft":16,"tags":1868,"minutesRead":79},"2023-11-20 10:53","2024305-161-20",[20],[],"300-work/310-sharing/Monorepo开发实践.md","calendar/daily-notes/2023-02-11",{"id":1871,"data":1873,"body":1878,"filePath":1879,"digest":1880,"rendered":1881,"legacyId":1890},{"title":1874,"description":15,"draft":16,"pubDate":1875,"heroImage":1876,"tags":1877},"2023-02-11",["Date","2023-06-27T08:23:00.000Z"],"https://images.unsplash.com/photo-1684019329793-f86cf9cf38af?crop=entropy&cs=srgb&fm=jpg&ixid=M3wzNjM5Nzd8MHwxfHJhbmRvbXx8fHx8fHx8fDE2ODc4NDUxOTZ8&ixlib=rb-4.0.3&q=85&w=1200&h=400",[20],"> If you have the guts to keep making mistakes, your wisdom and intelligence leap forward with huge momentum.\n> — \u003Ccite>Holly Near\u003C/cite>\n\n\n- 今天的 3 Frog 是？\n\t- 受限编辑的填写表单域模式\n\t- 设计外部NodeView接入\n\t- DesignToken与设计图保持一致\n- Before Work\n\t- 早起看书\n- Deep Work 1\n\t- 09:00 - 11:40 设计外部NodeView接入\n- Noon\n\t- 12:00 - 12:30 午饭\n\t- 12:30 - 13:00 读书/刷驾考题\n\t- 13:00 - 13:30 午休\n- Deep Work 2\n\t- 13:30 - 18:00 受限编辑的填写表单域模式\n- 明天的计划和 3 Frog 是？\n\t- 受限编辑的填写表单域模式\n- 运动\n\t- 19:30 - 20:30\n- Shallow Work\n\t- 21:00 - 10:30\n\t\t- 跟着视频学习Rust\n- After Work\n- 想法","src/content/blog/Calendar/Daily notes/2023-02-11.md","8bc1bc30a8aa6888",{"html":1882,"metadata":1883},"\u003Cblockquote>\n\u003Cp>If you have the guts to keep making mistakes, your wisdom and intelligence leap forward with huge momentum.\n— \u003Ccite>Holly Near\u003C/cite>\u003C/p>\n\u003C/blockquote>\n\u003Cul>\n\u003Cli>今天的 3 Frog 是？\n\u003Cul>\n\u003Cli>受限编辑的填写表单域模式\u003C/li>\n\u003Cli>设计外部NodeView接入\u003C/li>\n\u003Cli>DesignToken与设计图保持一致\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>Before Work\n\u003Cul>\n\u003Cli>早起看书\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>Deep Work 1\n\u003Cul>\n\u003Cli>09\u003Cdiv>\u003C/div> - 11\u003Cdiv>\u003C/div> 设计外部NodeView接入\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>Noon\n\u003Cul>\n\u003Cli>12\u003Cdiv>\u003C/div> - 12\u003Cdiv>\u003C/div> 午饭\u003C/li>\n\u003Cli>12\u003Cdiv>\u003C/div> - 13\u003Cdiv>\u003C/div> 读书/刷驾考题\u003C/li>\n\u003Cli>13\u003Cdiv>\u003C/div> - 13\u003Cdiv>\u003C/div> 午休\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>Deep Work 2\n\u003Cul>\n\u003Cli>13\u003Cdiv>\u003C/div> - 18\u003Cdiv>\u003C/div> 受限编辑的填写表单域模式\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>明天的计划和 3 Frog 是？\n\u003Cul>\n\u003Cli>受限编辑的填写表单域模式\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>运动\n\u003Cul>\n\u003Cli>19\u003Cdiv>\u003C/div> - 20\u003Cdiv>\u003C/div>\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>Shallow Work\n\u003Cul>\n\u003Cli>21\u003Cdiv>\u003C/div> - 10\u003Cdiv>\u003C/div>\n\u003Cul>\n\u003Cli>跟着视频学习Rust\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>After Work\u003C/li>\n\u003Cli>想法\u003C/li>\n\u003C/ul>",{"headings":1884,"localImagePaths":1885,"remoteImagePaths":1886,"frontmatter":1887,"imagePaths":1889},[],[],[],{"title":1874,"description":15,"pubDate":76,"heroImage":1876,"date created":1888,"date modified":78,"draft":16,"minutesRead":79},"2023-02-10 23:39",[],"Calendar/Daily notes/2023-02-11.md","calendar/daily-notes/2023-07-04",{"id":1891,"data":1893,"body":1897,"filePath":1898,"digest":1899,"rendered":1900,"legacyId":1909},{"title":1614,"description":15,"draft":16,"pubDate":1894,"heroImage":1895,"tags":1896},["Date",""],"![photo by Marek Piwnicki on Unsplash](https://images.unsplash.com/photo-1686079746732-ab2a86a36b82?crop=entropy&cs=srgb&fm=jpg&ixid=M3wzNjM5Nzd8MHwxfHJhbmRvbXx8fHx8fHx8fDE2ODg0Mzg3MTJ8&ixlib=rb-4.0.3&q=85&w=1200&h=400)",[20],"- 今天的 3 Frog 是？\n\t- 1\n\t- 2\n\t- 3\n- Before Work\n- Deep Work 1\n\t- 08:00 - 11:40\n- Noon\n\t- 12:00 - 12:30 消费昨日资讯 30m\n\t- 12:30 - 13:30 读书\n\t- 13:30 - 14:00 午休\n- Deep Work 2\n\t- 14:00 - 18:00\n- 明天的计划和 3 Frog 是？\n- 运动\n\t- 19:30 - 20:30\n- Shallow Work\n- After Work\n\t- 23:00 - 24:00 英语\n- 想法","src/content/blog/Calendar/Daily notes/2023-07-04.md","860d8766aac1f8ec",{"html":1901,"metadata":1902},"\u003Cul>\n\u003Cli>今天的 3 Frog 是？\n\u003Cul>\n\u003Cli>1\u003C/li>\n\u003Cli>2\u003C/li>\n\u003Cli>3\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>Before Work\u003C/li>\n\u003Cli>Deep Work 1\n\u003Cul>\n\u003Cli>08\u003Cdiv>\u003C/div> - 11\u003Cdiv>\u003C/div>\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>Noon\n\u003Cul>\n\u003Cli>12\u003Cdiv>\u003C/div> - 12\u003Cdiv>\u003C/div> 消费昨日资讯 30m\u003C/li>\n\u003Cli>12\u003Cdiv>\u003C/div> - 13\u003Cdiv>\u003C/div> 读书\u003C/li>\n\u003Cli>13\u003Cdiv>\u003C/div> - 14\u003Cdiv>\u003C/div> 午休\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>Deep Work 2\n\u003Cul>\n\u003Cli>14\u003Cdiv>\u003C/div> - 18\u003Cdiv>\u003C/div>\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>明天的计划和 3 Frog 是？\u003C/li>\n\u003Cli>运动\n\u003Cul>\n\u003Cli>19\u003Cdiv>\u003C/div> - 20\u003Cdiv>\u003C/div>\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>Shallow Work\u003C/li>\n\u003Cli>After Work\n\u003Cul>\n\u003Cli>23\u003Cdiv>\u003C/div> - 24\u003Cdiv>\u003C/div> 英语\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>想法\u003C/li>\n\u003C/ul>",{"headings":1903,"localImagePaths":1904,"remoteImagePaths":1905,"frontmatter":1906,"imagePaths":1908},[],[],[],{"title":1614,"description":15,"pubDate":1907,"heroImage":1895,"draft":16,"minutesRead":79},"星期二 07 2023",[],"Calendar/Daily notes/2023-07-04.md","200-learning/210-programing/随便整理的前端面试常考点",{"id":1910,"data":1912,"body":1917,"filePath":1918,"digest":1919,"rendered":1920,"legacyId":2330},{"title":1913,"description":15,"pubDate":1914,"heroImage":1915,"tags":1916},"随便整理的前端面试常考点",["Date","2023-08-02T01:22:00.000Z"],"https://images.unsplash.com/photo-1622674777904-386b3ef30c4a?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=1200&q=80",[133],"## TOC\n\n\n## 浏览器\n\n### 聊聊你了解的W3C规范？\n\nW3C相关规范工作组组成：\n- **CSS 工作组**\n- **HTML ⼯作组**(HTMLWG) 与**WHATWG**合作发布HTML与DOM正式推荐标准\n- **⽆障碍指南⼯作组**发布了WCAG 3.0 ⼯作草案(WD)，除继承WCAG 2.2及以前版本(2.1、2.0)之外，还⾸次纳⼊ UAAG 2.0 (⽤户代理⽆障碍指南) 和ATAG 2.0 (创作⼯具⽆障碍指南) 的内容并进⾏扩展。将提供⼀个新模式来更全 ⾯和灵活地解决 Web ⽆障碍（可访问性）问题\n- **Web 性能⼯作组**继续发布性能监测与优化相关的 API\n- **Web 应⽤⼯作组**持续客户端应⽤相关技术讨论，Web 在线编辑相关的技术，如⾼亮选择、虚拟键盘、内 容选择等\n- **WPT Web平台测试** 规范特性的测试平台\n\n对HTML来说一直都有两个组织维护：HTML工作组（HTMLWG）与WHATWG。是两个独立的组织，不过随着后期的发展，有关于HTML相关的标准都由WHATWG组织维护和推进。\n\n以前描述CSS都是使用版本号来描述，比如CSS1.0、CSS2.0、CSS2.1和CSS3之类，\n![image.png](https://raw.githubusercontent.com/fw6/assets/main/toy_docs/20230802164441.png)\n但随着CSS功能模块变多、每个功能模块发展进度有差异，后面定义CSS规范不再以整体版本号描述，而是按单个模块版本维护，如CSS Grid模块，分为Level1、Level2、Level3之类。\n\nWCAG相关规范构建了具有可访问性Web应用的理论参考和依据。UAAG 2.0 (⽤户代理⽆障碍指南) 和ATAG 2.0 (创作⼯具⽆障碍指南)\n\n[Weixin Official Accounts Platform](https://mp.weixin.qq.com/s/Kq0inC2lrjrvAaP-0ltQoQ)\n\n\n### DOM树怎么生成的?\n\n一旦浏览器收到第一块数据，它就开始解析收到的信息。“解析”是浏览器将通过网络接收到的数据转换为DOM、CSSOM的步骤，通过渲染器把DOM和CSSOM在屏幕上绘制成页面。\n\n:::info\n即使请求的页面HTML超过了14KB，浏览器也将开始解析尝试根据其数据进行渲染。这就是为什么在前14KB中包含浏览器开始渲染页面的所有内容，或至少包含页面模板（第一次渲染所需的CSS和HTML），这对Web性能优化很重要。\n:::\n\n渲染DOM树分为5个阶段：\n1. 处理HTML标记并构造DOM树。当遇到CSS文件、非阻塞资源（如图片）时解析继续进行，但对于没有`defer`或`async`属性的`\u003Cscript>`标签时，浏览器会阻塞渲染并停止HTML的解析（虽然浏览器的预加载扫描器会加速该过程）。等待获取CSS不会阻塞HTML解析但会阻塞JavaScript！\n2. 处理CSS并构建CSSOM树。CSSOM包含来自用户代理样式表的样式。在此同时，也会有JavaScript编译、构建辅助功能树等过程\n3. 将DOM和CSSOM组合为一个Render树。Render树将所有相关样式匹配到DOM树的每个可见节点，并根据CSS级联确定每个节点的计算样式。\n4. 在渲染树上运行布局以计算每个节点的几何体。第一次确定节点的大小和位置称为布局，随后对节点和大小的重新计算称为回流。\n5. 最后一步将各个节点绘制到屏幕上。绘制可以将布局树上的元素分解为多层，将内容提升到GPU上的层可以提高绘制和重绘性能。当文档中各个不同部分以不同的层绘制相互重叠时，就必须进行合成，以确保按照正确的顺序绘制到屏幕上。\n\n:::note\n使用Chrome开发工具进行性能分析分析：\n1. Chrome DevTools - more tools - Layers\n2. Chrome DevTools - more tools - Rendering\n3. Chrome DevTools - more tools - Animations\n4. Chrome DevTools - Performance\n:::\n\n### script标签中`async`和`defer`属性的区别？\n\n带`async`属性的脚本：\n- 对于普通脚本则会并行请求，并加快解析和执行；\n- 对于模块脚本，那么脚本及其所有依赖都会在延迟队列中执行，确保它们会被并行请求并尽快解析和执行。\n\n带`defer`属性的脚本：\n- 对模块脚本不生效（默认`defer`）\n- 对缺少`src`属性的脚本不生效\n- 表示在文档解析后，但在触发`DOMContentLoaded`之前执行\n- 阻塞`DOMContentLoaded`事件触发，直到脚本完成加载并执行\n- 按照文档出现顺序执行\n\n### 讲下浏览器渲染时的合成层？\n\n在每个DOM树节点都会对应一个LayoutObject，当它们的LayoutObject处于相同的坐标空间时，就会形成一个RenderLayers，也就是渲染层。\n\nRenderLayers保证页面以正确的顺序合成，这时候就出现了层的合成（composite），从而正确处理透明元素与重叠元素的显示。\n\n在Chrome中有两种不同的层类型：\n- RenderLayer渲染层，负责对应的DOM子树\n- GraphicsLayer图形层，负责对应的RenderLayer子树\n\n在RenderLayer下有RenderObject，其保持了树结构并通过向绘图上下文（GraphicsContext）发出绘制调用来绘制Nodes。\n每个GraphicsLayer下都有一个GraphicsContext，其用于负责输出该层的位图，位图储存在共享内存中作为纹理上传到GPU中，最后由GPU将多个位图合成，然后draw到屏幕上\n\n:::note\nGraphicsContext绘图上下文的责任就是向屏幕进行像素绘制（先把像素级别数据存在位图，然后再显示到显示器），在Chrome里绘图上下文包含了Skia的调用\n:::\n\n某些特殊的渲染层会被认为是合成层（Composition Layer），合成层拥有单独的GraphicsContext，而其他非合成层的渲染层，则和第一个拥有GraphicsContext父层共用一个。\n\n影响composite的因素：\n- Transform 3D：translate3D，translateZ等\n- video、canvas、iframe等元素\n- 通过`Element.animate`实现的opacity动画转换\n- 通过CSS 动画实现的opacity动画转换\n- postion: fixed;\n- will-change\n- filter\n- 有合成层的后代元素同时本身overflow不为visible\n- ...\n\n### 回流和重绘的区别？\n\n- Reflow（回流）：浏览器要花时间去渲染，当它发现了某个部分发生了变化影响了布局，那就需要倒回去重新渲染。\n- Repaint（重绘）：如果只是改变了某个元素的背景颜色，文字颜色等，不影响元素周围或内部布局的属性，将只会引起浏览器的repaint，重画某一部分。\n### 关于客户端存储？\n\n传统方式：\n- cookies\n\n新流派：\n- Web Storage API\n- IndexedDB API\n\n未来：\n- [Cache API](https://developer.mozilla.org/zh-CN/docs/Web/API/Cache)：用于存储特定HTTP请求的响应文件，通常与Service Worker一起使用。\n\n关于Web Storage API:\n- sessionStorage只在页面会话期间生效（浏览器打开状态，包含页面加载和恢复）；localStorage始终存在\n- sessionStorage**为每个给定的源维持一个独立的存储区域**（同一URL多个Tab，Storage是独立的），**如果新标签或窗口打开新页面会复制顶级浏览器会话上下文（共享Storage）**\n- Storage特定于页面协议，区分https、http\n- StorageEvent：Storage对象发生变化，`storage`事件会触发：相同域名下的其他页面发生的变化才会触发\n\n### 什么是`process-per-site-instance`策略？\n\n每个标签对应一个渲染进程，如果从一个页面打开了一个新页面，新打开的页面与当前页面还属于同一个站点的话，那么新页面会复用当前页面的渲染进程。\n\n### 能说在什么是核心网页指标Core Web Vitals吗？\n\n\n### JSBridge实现原理？\n\nJSBridge是一种webview侧和native侧进行通信的手段。webview通过JSBridge调用Native的能力，Native通过JSBridge在Webview端执行一些逻辑。\n\n- API注入，原理其实就是 Native 获取 JavaScript环境上下文，并直接在上面挂载对象或者方法，使 js 可以直接调用，Android 与 IOS 分别拥有对应的挂载方式\n- WebView 中的 prompt/console/alert 拦截，通常使用 prompt，因为这个方法在前端中使用频率低，比较不会出现冲突\n- WebView URL Scheme 跳转拦截([JSBridge原理解析](https://mp.weixin.qq.com/s/lJJjbmuOZXE25I7FIz7OVg))\n\n### 如何解决首页加载慢的问题？\n\n等待资源加载时间和大部分情况下的浏览器单线程执行是影响 Web 性能的两大主要原因。了解浏览器单线程的本质与最小化主线程的责任可以优化 Web 性能，来确保渲染的流畅和交互响应的及时。\n\n导致加载慢可能的因素：\n- 网络延时\n- 资源文件体积过大\n- 资源加载重复发送请求\n- 加载脚本，渲染内容卡住了\n\n解决方案：\n- 减少入口文件体积（路由懒加载）\n- 静态资源本地缓存（service worker、http缓存）\n- UI框架按需加载（babel-plugin-import）\n- 图片资源压缩（在线字体图标、雪碧图）\n- 开启[Brotli](https://github.com/google/brotli)/Gzip压缩\n- 使用SSR\n\n[Web 性能 | MDN](https://developer.mozilla.org/zh-CN/docs/Web/Performance)\n\n推荐的优化启动性能的方案：\n1. 异步执行的脚本标签上加async或defer\n2. 需要解码的资源文件（解码JPEG转为原始纹理数据），最好在worker中做\n3. 所有能并行的数据处理都应该并行化\n4. 在启动的HTML文件中，不包含不会在关键渲染路径中出现的样式和脚本，最好仅在需要时加载\n5. 不要让Web引擎构建不需要的DOM\n\n### 关键渲染路径是啥？如何优化？\n\n关键渲染路径是浏览器将 HTML，CSS 和 JavaScript 转换为屏幕上的像素所经历的步骤序列。优化关键渲染路径可提高渲染性能。关键渲染路径包含了 文档对象模型(DOM)，CSS 对象模型 (CSSOM)，渲染树和布局。\n\n压缩和媒体查询来异步处理CSS为非阻塞请求。\n\n- 通过异步、延迟加载或者消除非关键资源来减少请求数量\n- 优化必须的请求数量和每个文件体积\n- 区分关键资源优先级来优化被加载资源的顺序，缩短关键路径长度\n\n### 如何优化TTFB？\n\nTime to First Byte(TTFB)是一项基本Web性能指标，作为粗略指南，网站应努力达到0.8s或更短。\n![image.png](https://raw.githubusercontent.com/fw6/assets/main/toy_docs/20230813161431.png)\n\n:::info\nTTFB不是核心Web Vitals指标，所有网站不一定需要满足“良好”的TTFB阀值。\n原因：对于SPA应用来说需要快速获取HTML，然后由JavaScript接管渲染内容，较低的TTFB很重要；对于服务端渲染TTFB较高但具有更好的FCP和LCP。所以TTFB只是个粗略指南，需要你根据网站渲染方式权衡。\n:::\n以下内容来自[Optimize Time to First Byte](https://web.dev/optimize-ttfb/#platform-specific-guidance)\n1. 特定平台优化指导\n2. 选择好的托管服务\n   1. 确保足够的内存\n   2. 确保托管平台的后端堆栈技术较新\n3. 使用CDN\n   将资源缓存在离用户物理距离更近的边缘服务器上。CDN其他优势如下：\n   1. 更快的DNS解析速度\n   2. CDN可能使用HTTP2/3等现代协议从边缘服务提供内容\n   3. HTTP/3适用UDP解决了TCP队头阻塞等问题\n   4. CDN可能还提供现代版本的TLS，可降低TLS协商中的延迟\n      TLS1.3的设计尤其旨在使TLS协商尽可能短\n   5. 一些CDN提供商提供通常被称为边缘工作线程的功能，该功能使用与Service Worker类似的API拦截请求，以编程方式管理边缘缓存中的响应或完全重写响应\n   6. CDN服务商擅长压缩优化\n   7. CDN服务商自动缓存静态资源的压缩响应\n4. 尽可能缓存内容\n5. 避免多个页面重定向\n   重定向类型分为：\n   1. 同源重定向。完全发生在你的网站\n   2. 跨源重定向。例如短链服务\n6. 流式传输HTML\n   浏览器经过优化，可在流式传输时有效的处理标记\n7. 使用Service Worker\n   是用Service Worker充当浏览器和服务器之间的代理\n8. 使用`103 Early Hints`\n   信息状态响应码，一般和`Link`header一起使用，来允许用户在浏览器还在准备响应数据的时候预加载一些资源\n\n### 如何测量性能？\n\n性能API：[Performance API - Web API 接口参考 | MDN](https://developer.mozilla.org/zh-CN/docs/Web/API/Performance_API)\n\n工具和指标：\n- [PageSpeed Insights](https://pagespeed.web.dev/)\n- [WebPageTest - Website Performance and Optimization Test](https://www.webpagetest.org/)\n- Devtools的网络监视器和性能监视器\n- Chrome的Lighthouse\n\n### 懒加载有哪些手段？\n\n1. 代码拆分\n   - 入口点分离，通过应用的入口点分离代码\n   - 动态分离：使用动态`import()`语句分离代码\n2. 脚本类型模块\n   任何`\u003Cscript type=\"module\">`模块脚本标签默认情况下都会延迟（`defer`）\n3. CSS可使用媒体类型和查询实现非阻塞渲染\n   如：`\u003Clink href=\"style.css\" rel=\"stylesheet\" media=\"all\" />`\n4. 字体。默认情况下字体会延迟到构造渲染树之前，这可能会导致文本渲染延迟\n   可使用`\u003Clink rel=\"preload\">`、font-display、字体加载API覆盖默认行为并预加载字体资源\n5. 图片和iframe，可加`loading=\"lazy\"`属性（延迟加载屏幕外的图片/iframe）\n\n### 普通`\u003Cscript>`与`\u003Cscript type=\"module\">`有哪些区别？\n\n1. 模块代码需要使用CORS协议跨源获取\n2. 默认自动延迟加载（defer）\n3. 默认使用严格模式\n4. 使用范围仅限该模块（无法全局获得）\n\n### HTML属性`rel=\"preload\"`、`rel=\"preloadmodule\"`、`rel=\"prefetch\"`、`rel=\"prerender\"`、`rel=\"subresources\"`等有何区别？\n\n- `rel=\"preload\"`，提前下载并缓存资源，常用于字体文件、媒体文件等比较大的资源，提前下载并缓存，防止阻塞主渲染进程\n- `rel=\"preloadmodule\"`，提前下载、解析、编译模块文件，仅对`\u003Cscript type=\"module\">`生效，常用于模块依赖项的预加载\n- `rel=\"prefetch\"`，提前获取下一导航页面的资源（优先级比preload低），但对当前页面资源无效。\n- `rel=\"prerender\"`，在背后提前渲染指定的页面，如果用户导航到该页面可加速\n- `rel=\"subresources\"`，与preload相同但无法获取资源优先级\n\n## NodeJS\n\n### 如何做NodeJS性能优化？\n\n1. 不要过度优化。\n2. 确定慢的类型和种类。CPU密集型、IO密集型，还是内存使用过高？\n3. 优化代码\n    1. CPU密集型：优化算法、优化方案、基于Worker实现多线程、换原生语言实现\n    2. IO密集型：利用Node的异步特性，减少阻塞，使用流处理大文件\n    3. 增加缓存\n4. 注意程序外的优化。（换硬件、更新版本）\n5. 其他有效的点\n    1. 打包依赖\n    2. 按需加载\n    3. require(\"v8-compile-cache\")\n6. 增加benchmark库或CI Action。\n\n[How we made Vite 4.3 faaaaster 🚀 | sun0day's blog - lost in code](https://sun0day.github.io/blog/vite/why-vite4_3-is-faster.html)\n\n### npm install 和 npm ci有啥区别？\n\nnpm ci 和 npm install 类似，区别是 npm ci 要求项目中必须有 package-lock.json，同时他会完全根据 lock 文件进行依赖安装，如果和 package.json 中的文件有冲突，会报错。同时顾名思义，npm ci 是在 ci 环境中推荐使用的 npm install。\n\n\n\n## HTTP\n\n### 如何理解CDN？\n\nCDN（Content Delivery Network）内容分发网络\n\n构建在现有网络基础之上的*智能虚拟网络*，依靠部署在各地的边缘服务器，通过中心平台的**负载均衡、内容分发、调度等**功能模块，使用户**就近获取所需内容**，降低网络拥塞，提高用户访问响应速度和命中率。\n\n`CDN` 的关键技术主要有内容存储和分发技术。\n\n用户在上网的时候不用直接访问源站，而是访问离他“最近的”一个 CDN 节点，术语叫**边缘节点**，其实就是缓存了源站内容的代理服务器。\n\n原理：\n1. DNS返回的不再是IP地址，而是CNAME别名记录，指向CDN的全局负载均衡\n   CNAME实际上在域名解析中充当中间人（代理）角色，\n2. 由于没有IP地址，本地DNS会向负载均衡系统发请求进行智能调度\n3. 看用户IP地址，查表得知地理位置，找相对最近的边缘节点\n4. 看用户所在运营商，找相同网络的边缘节点\n5. 检查边缘节点的负载状况，找负载较轻的节点（其他如：健康状况、服务能力、带宽、响应时间等）\n6. 得到最合适的边缘节点后，把该节点返回给用户\n\n好处：\n1. 更快的DNS解析\n2. CDN服务商可能使用更现代的HTTP协议\n3. TLS协商过程可能更快（版本高）、使用HTTP的QUIC\n4. 工作线程队列功能提供类似service worker的缓存响应与编程能力\n5. 压缩优化、自动静态资源响应压缩\n\n### DNS解析流程？\n\nDNS相当于翻译官，将域名翻译为IP地址。\n1. 首先找浏览器的DNS缓存\n2. 没找到则找操作系统DNS缓存\n3. 还没找到则本地域名服务器\n4. 还没有，则：\n    1. 向根DNS服务器获取顶级DNS服务器地址\n    2. 向顶级DNS服务器地址获取权威DNS服务器地址\n    3. 最终得到IP\n5. 本地域名服务器给到操作系统，自己缓存下\n6. 操作系统给到浏览器，自己缓存下\n7. 浏览器得到，自己缓存下\n\n![image.png](https://raw.githubusercontent.com/fw6/assets/main/toy_docs/20230804140218.png)\n\n- 根 DNS 服务器：返回顶级域 DNS 服务器的 IP 地址\n- 顶级 DNS 服务器：返回权威 DNS 服务器的 IP 地址\n- 权威 DNS 服务器：返回相应主机的 IP 地址\n\n### HTTP2.0有哪些优化？HTTP3了解吗？\n\n- HTTP/2 是二进制协议而不是文本协议。不再可读，也不可无障碍的手动创建，改善的优化技术现在可被实施。\n- 这是一个多路复用协议。并行的请求能在同一个链接中处理，移除了 HTTP/1.x 中顺序和阻塞的约束。\n- 压缩了标头。因为标头在一系列请求中常常是相似的，其移除了重复和传输重复数据的成本。\n- 其允许服务器在客户端缓存中填充数据，通过一个叫服务器推送的机制来提前请求。\n\n[HTTP 的发展 - HTTP | MDN](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Basics_of_HTTP/Evolution_of_HTTP#http3%E2%80%94%E2%80%94%E5%9F%BA%E4%BA%8E%20_quic_%E7%9A%84_http)\nHTTP传输层变为QUIC而不是TCP。\nHTTP2通过单个TCP连接运行，所以在TCP层处理的数据丢失检测和重传会阻止所有流得传输。\nQUIC通过UDP运行多个流并为每个流实现了丢失检测和重传。\n\n### HTTPS 与HTTP的区别？\n\n- HTTPS是HTTP协议的安全版本，HTTP协议的数据传输是明文的，是不安全的，HTTPS使用了SSL/TLS协议进行了加密处理，相对更安全\n- HTTP 和 HTTPS 使用连接方式不同，默认端口也不一样，HTTP是80，HTTPS是443\n- HTTPS 由于需要设计加密以及多次握手，性能方面不如 HTTP\n- HTTPS需要SSL，SSL 证书需要钱，功能越强大的证书费用越高\n\n### HTTPS如何保证安全？\n\n在采用`SSL`后，`HTTP`就拥有了`HTTPS`的加密、证书和完整性保护这些功能\n\n>SSL(Secure Sockets Layer 安全套接字协议),及其继任者传输层安全（Transport Layer Security，TLS）是为网络通信提供安全及数据完整性的一种安全协议\n\n- 对称加密：采用协商的密钥对数据加密\n- 非对称加密：实现身份认证和密钥协商\n- 摘要算法：验证信息的完整性\n- 数字签名：身份验证\n\n[为什么说HTTPS比HTTP安全? HTTPS是如何保证安全的？](https://vue3js.cn/interview/http/HTTPS.html#%E4%BA%8C%E3%80%81%E5%A6%82%E4%BD%95%E5%81%9A)\n\n### HTTP缓存？\n\n[HTTP 缓存 - HTTP | MDN](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Caching)\n\n缓存分为4种，当一次查找且都没命中时，才会请求网络：\n- Service Worker + Cache Storage\n- Memory Cache。内存使用率比较高的文件。关闭Tab页面就释放\n- Disk Cache。 比较大的 JS、CSS 文件会直接被丢进磁盘。\n- Push Cache + HTTP2。只在会话存在\n\n通过`HTTP Header`设置缓存策略：\n1. 强缓存\n    使用强缓存不会发送HTTP请求，直接从缓存中拿数据，状态码为200，size显示为`from disk cache`或`from memory cache`。\n    强缓存可以通过设置两种 HTTP Header 实现：`Expires` （服务器事件和浏览器事件可能不一致）和 `Cache-Control`。\n2. 协商缓存。\n    强缓存失效就进入协商缓存。\n    浏览器在请求头中携带缓存标识，服务器根据缓存标识决定是否使用缓存，协商缓存生效则返回 304 和 Not Modified，失效则返回 200 和最新版本请求结果。\n    协商缓存可以可以通过设置两种 HTTP Header 实现：`Last-Modified` 和 `ETag`。\n\n:::warning\n**如果什么缓存策略都没设置**：浏览器会采用一个启发式的算法，通常会取响应头中的 Date 减去 Last-Modified 值的 10% 作为缓存时间。\n:::\n\n强制重新验证：\n1. `cache-control`设置为`no-cache`\n   或者`cache-control`设置为`max-age=0, must-revalidate`，这是HTTP1.1之前的兼容方案\n2. 同时设置`ETag`和`Last-Modified`\n\n不使用缓存：`cache-control`设置为`no-store`\n### Cache-Control中no-cache和no-store有何区别？\n\n- `no-cache`：在发布缓存副本之前，强制要求缓存把请求提交给原始服务器进行验证 (强制协商缓存验证)。\n- `no-store`：缓存不应存储有关客户端请求或服务器响应的任何内容，即不使用任何缓存（完全不缓存）。\n\n### CSRF是啥？如何防范？\n\nCross-Site Request Forgery\n\n跨站请求攻击，简单地说，是攻击者通过一些技术手段欺骗用户的浏览器去访问一个自己曾经认证过的网站并执行一些操作（如发邮件，发消息，甚至财产操作如转账和购买商品）。由于浏览器曾经认证过，所以被访问的网站会认为是真正的用户操作而去执行。这利用了web中用户身份验证的一个漏洞：**简单的身份验证只能保证请求是发自某个用户的浏览器，却不能保证请求本身是用户自愿发出的**。\n\n\n[Cross-Site Request Forgery Prevention - OWASP Cheat Sheet Series](https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html#cross-site-request-forgery-prevention-cheat-sheet)\n如何防范：\n- 后端框架一般带内置实现\n- 使用令牌同步模式\n  当用户发送请求时，服务器端应用将令牌嵌入HTML表单，并发送给客户端。客户端提交HTML表单时候，会将令牌发送到服务端，令牌的验证是由服务端实行的。令牌可以通过任何方式生成，只要确保随机性和唯一性\n- 检查Referer字段\n  这个字段用以标明请求来源于哪个地址。在处理敏感数据请求时，通常来说，Referer字段应和请求的地址位于同一域名下。\n- 静态网站使用double submit cookie技术\n  服务端生成个随机数给客户端，请求时带上给服务端验证。\n### XSS是啥？如何防范？\n\n**跨站脚本**（英语：Cross-site scripting，通常简称为：XSS）是一种网站应用程序的安全漏洞攻击，是代码注入的一种。它允许恶意用户将代码注入到网页上，其他用户在观看网页时就会受到影响。这类攻击通常包含了HTML以及用户端脚本语言。\n\n**XSS**攻击通常指的是通过利用网页开发时留下的漏洞，通过巧妙的方法注入恶意指令代码到网页，使用户加载并执行攻击者恶意制造的网页程序。\n\n如何防范:\n- 过滤特殊字符（DOMPurify、HTML Sanitizer）\n- 关闭JavaScript（浏览器设置）\n\n### cookie有何作用？如何禁止访问？\n\n作用：\n1. 会话状态管理。如用户登录状态、购物车、游戏分数或其他需要记录的信息\n2. 个性化设置。如用户自定义设置、主题或其他设置\n3. 浏览器行为追踪。如跟踪分析用户行为等。\n\n限制：\n- 大小不能超过4kb\n- cookie总数不能超过20+，具体取决于浏览器\n- 每次请求都会携带cookie数据，会带来额外的性能开销\n\n如何限制访问Cookies：\n1. Secure。只应被HTTPS协议加密过的请求发送给服务端（但无法阻止cookie中敏感信息的访问）\n2. HttpOnly。无法通过`Document.cookie`API访问到带`HttpOnly`属性的cookie\n\n> 三方cookie：非当前域下的cookie都属于三方cookie\n\n三方cookie的使用场景：\n- 单点登陆\n- 前端日志打点\n- 广告营销\n- 记录用户画像\n\nSameSite干啥的？阻止浏览器将此Cookie与跨站点请求一起发送，降低跨源信息泄漏的风险。\n\n### 能介绍下HTTP 访问控制（CORS）吗？\n\n跨域访问：双方同意的基础上实现数据的可编程访问\n\n1. 为啥会产生跨域？\n    1. 保护登录鉴权数据\n2. 那些不会产生跨域？\n3. 如何跨域\n    1. 带域名限制的跨域方案\n        1. iframe + postMessage\n            允许不同页面发送消息\n        2. CORS白名单跨域\n            一组W3C标准的名称，主要使用服务端的header来控制是否能发送请求\n            - access-control-allow-origin 决定来访域名\n            - access-control-allow-headers 决定支持哪些header\n            - **Access-Control-Allow-Credentials 决定是否带本域名的cookie**\n        3. WebSocket\n            不属于http协议，不存在跨域\n    2. 无法限制来访域名的跨域方案\n        1. JSONP跨域\n            创建script标签，无法确定调用方\n        2. 表单提交跨域\n        3. URL传参跨域\n        4. 服务端代理跨域\n    3. [window.name](http://window.name) 跨域\n\n使用dns-prefetch：`\u003Clink rel=\"dns-prefetch\" href=\"https://fonts.googleapis.com/\" />`\n:::warning\n`dns-prefetch` 仅对跨源域上的 DNS 查找有效\n:::\n\n### HTML属性`crossorigin`有啥用？\n\n**`crossorigin`** 属性在 [`\u003Caudio>`](https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/audio)、[`\u003Cimg>`](https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/img)、[`\u003Clink>`](https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/link)、[`\u003Cscript>`](https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/script) 和 [`\u003Cvideo>`](https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/video) 元素中有效，它们提供对 CORS 的支持，定义该元素如何处理跨源请求，从而实现对该元素获取数据的 CORS 请求的配置。\n\n1. `crossorigin`会让浏览器启用CORS访问检查，检查http响应头的Access-Control-Allow-Origin\n2. 对于传统script需要跨域获取的js资源，控制暴露出其报错的详细信息\n   可以使跨域js暴露出跟同域js同样的报错信息\n3. 对于`module script`，控制用于跨域请求的凭据模式\n\n使用下面的 `\u003Cscript>`元素告诉浏览器执行来自 `https://example.com/example-framework.js` 的脚本且不发送用户凭据。\n```html\n\u003Cscript\n  src=\"https://example.com/example-framework.js\"\n  crossorigin=\"anonymous\">\u003C/script>\n```\n\n## JavaScript\n\n### 说说你知道的JavaScript解释器？\n\nJIT(Just-in-time) compilation engines：\n- v8。Google Chrome\n- Chakra。Edge(Internet Explore)\n- Spider Monkey。Mozilla FireFox\n- JavaScript Core Webkit。Safari\n- Hermes。Meta React Native\n\nRuntime interpreter engines：\n- QuickJS\n- Boa。Written in Rust\n- Rhino。Mozilla\n\n### JavaScript为啥被设计为单线程？\n\n与其用途有关，作为浏览器脚本，JavaScript的主要用途是与用户互动、操作DOM。这决定了它只能是单线程。比如，加入JavaScript支持多线程，一个线程添加DOM节点，另一个线程删除DOM节点，这就会带来混乱。\n\n在被设计出来的那个年代来说是一个很好的选择，那个时候很少有多处理器的计算机，而且当时预期由JavaScript处理的代码量相对较少。\n\n自从定时器（setTimeout和setInterval）加入到Web API中，浏览器提供的JavaScript环境就已经逐渐发展到包含任务调度、多线程应用开发等强大特性。\n\n浏览器除了主线程外，后续增加了web worker的能力，允许创建独立的线程。\n\n主线程：处理用户事件、页面绘制。\n\n### 说下微任务和宏任务？\n\n- [在 JavaScript 中通过 queueMicrotask() 使用微任务 - Web API 接口参考 | MDN](https://developer.mozilla.org/zh-CN/docs/Web/API/HTML_DOM_API/Microtask_guide)\n- [深入：微任务与 Javascript 运行时环境 - Web API 接口参考 | MDN](https://developer.mozilla.org/zh-CN/docs/Web/API/HTML_DOM_API/Microtask_guide/In_depth)\n\nJavaScript运行时：在执行 JavaScript 代码的时候，JavaScript 运行时实际上维护了一组用于执行 JavaScript 代码的**代理**。每个代理由一组执行上下文的集合、执行上下文栈、主线程、一组可能创建用于执行 worker 的额外的线程集合、一个任务队列以及一个微任务队列构成。除了主线程（某些浏览器在多个代理之间共享的主线程）之外，其他组成部分对该代理都是唯一的。\n\n每个代理都是由事件循环驱动的，事件循环负责收集事件（包含用户事件和其他非用户事件等）、对任务进行排队以便在合适的时机执行回调。然后执行处于等待中的JavaScript任务，然后是微任务，然后在开始下一轮循环之前执行一些必要的渲染和绘制操作。\n\n:::note\n网页和APP的代码和浏览器本身的用户界面程序运行在相同的线程中，共享相同的事件循环，该线程就是主线程。它除了运行网页本身的代码之外，还负责收集和派发用户和其他事件，以及渲染和绘制网页内容等。\n:::\n\n有以下三种事件循环：\n- Window事件循环：驱动所有共享同源的窗口（多个同源窗口可能运行在相同的事件循环中，如在窗口中打开新窗口或包含在iframe中）。\n- Worker事件循环：包含所有形式的worker，如web worker、service worker、shared worker\n- Worklet事件循环：驱动运行worklet的代理，包含Worklet、[AudioWorklet](https://developer.chrome.com/blog/audio-worklet/)以及PaingWorklet\n\n- 在每一次事件循环开始迭代的时候运行时执行队列中每个任务，在每次开始迭代之后加入到队列中的任务需要等到下一次迭代开始后才会被执行。\n- 每次当一个任务退出切执行上下文为空时，微任务队列中每一个微任务会依次被执行，直到为空。微任务可以添加微任务，新的微任务在下一次任务开始执行之前，在当前事件循环迭代结束之前执行。\n\n什么是任务？\n>由执行诸如从头执行一段程序、执行事件回调或一个interval/timeout被触发而调度的任务JavaScript代码。\n\n何时会将任务添加到任务队列？\n1. 一段新程序或子程序被直接执行时（比如在控制台或一个`\u003Cscript>`元素中运行代码）\n2. 触发了一个事件，将其回调函数添加到任务队列时\n3. 执行一个由setTimeout或setInterval创建的interval或timeout，以致对应的回调函数被添加到任务队列时。\n\n>微任务的执行顺序在所有进行中的任务（pending task）完成之后，在对浏览器的事件循环产生控制之前。\n\n创建微任务的方式：\n- Web API：\n  1. [Mutation Observer](https://developer.mozilla.org/zh-CN/docs/Web/API/MutationObserver)\n  2. [queueMicrotask](https://developer.mozilla.org/zh-CN/docs/Web/API/queueMicrotask)\n- JavaScript：\n  1. Promise\n\n### 聊聊你了解的V8垃圾回收\n\n#### 调用栈的垃圾回收\n\n有一个记录当前执行状态的指针(称为 ESP)指向调用栈中的函数执行上下文。当函数执行完成之后，就需要销毁函数的执行上下文了，这时候，ESP 就帮上忙了，JavaScript 会将 ESP 下移到后面的函数执行上下文，这个下移的过程就是销毁当前函数执行上下文的过程。\n\n#### 堆中的垃圾回收\n\n\n与栈中的垃圾回收不同的是，栈中无效的内存会被直接覆盖掉，而堆中的垃圾回收需要使用 JavaScript 中的垃圾回收器。\n\n垃圾回收一般分为下面的几个步骤：\n1. 通过 GC Root 标记空间中的**活动对象**和**非活动对象**\n    目前 V8 采用 可访问性(reachablility)算法来判断堆中的对象是否为活动对象。这个算法其实就将一些 GC Root 作为初始存活对象的集合，从 GC Root 对象触发，遍历 GC Root 中的所有对象。\n    1. 能够通过 GC Root 遍历到的对象会被认为**是可访问的**，我们将其标记为活动对象，必须保留\n    2. 如果一个对象无法通过 GC Root 遍历到，那么就认为这个对象是**不可访问的**，可能需要被回收，并标记为非活动对象。\n\n    GC Root通常包括并不限于以下几种：\n    - 全局`windows`对象(位于每个`iframe`中)\n    - 文档 DOM 树,由可以通过遍历文档到达所有原生 DOM 节点组成\n    - 存放栈上的变量。\n2. 回收非活动对象占据的内存\n3. 内存整理\n\n代际假说：\n- 大部分对象在内存中存在的时间很短，比如说函数内部的变量，或者块级作用域中的变量，当函数或块级代码块执行结束时，作用域内部定义的变量也会被销毁，这一类对象被分配内存后，很快就会变得不可用。\n- 只要不死的对象，都会持续很久的存在，比如说 window、DOM、Web API 等。\n\n代际假说将对象大致分为两种，长寿的和短命的，垃圾回收也顺势把堆分为新生代和老生代两块区域。\n\nV8 也分别使用了两个不同的垃圾回收器来高效的实施垃圾回收：\n- 副垃圾回收器，主要负责新生代的垃圾回收。**Scavenge 算法**\n- 主垃圾回收器，主要负责老生代的垃圾回收。**标记-清除(Mark-Sweep)**\n\n[V8 垃圾回收原来这么简单？ - 知乎](https://zhuanlan.zhihu.com/p/146749402)\n\n#### 新生区如何晋升为老生区？\n\n1. 一些大的对象会被直接分配到老生区\n2. 在新生区经历两次垃圾回收还能存活，会被晋升\n\n#### 全停顿\n\n垃圾回收操作会暂停 JavaScript 的运行，回收完毕后才会恢复执行，这种行为就是全停顿。\n\n为了降低全停顿所带来的卡顿，V8 引擎采用了增量标记(Incremental Marking) 算法进行优化，将标记过程分为一个个小任务，这些小任务的执行时间比较短，可以穿插在其他的 JavaScript 任务中间执行，这样就不会有明显的卡顿了。\n\n当然，V8 所采用的优化方案不只这一种，而是多种方案综合使用的，除了增量回收还有并行回收、并发回收等。\n- 并行回收：垃圾回收器会使用多个辅助线程来并行执行垃圾回收\n- 并发回收：回收线程在执行 JavaScript 的过程中，辅助线程在后台执行垃圾回收\n\n\n### 说下执行上下文、闭包？\n\n闭包：绑定了执行环境的函数。\n闭包的组成部分：\n- 环境部分\n    - 词法环境（所在执行上下文一部分）\n    - 标识符列表：函数中用到的未声明的变量\n- 表达式部分：函数体\n\n在一个函数的执行上下文中包含若干内容：\n- 词法环境。当获取this或变量时使用\n- 变量环境。声明变量时使用\n- 用于恢复代码执行位置的代码执行状态\n- 正在被执行的函数\n- 使用的基础库和内置对象实例\n- 生成器上下文时表示当前生成器\n\n### 实现一个深拷贝\n\n对于可序列化的对象，可直接使用：`JSON.parse(JSON.stringify(obj))`。但函数、Symbol、HTML Element、递归数据等许多其他情况会失败。☹️\n\n另一种方式，如果在实现了[`structuredClone`](https://developer.mozilla.org/zh-CN/docs/Web/API/structuredClone)的JavaScript运行时环境下，可使用：`structuredClone(obj)`。（`core-js`支持polyfill）\n\n手写深拷贝：\n```js\nfunction deepClone (obj, hash = new WeakMap()) {\n    if (obj === null) return obj;\n    if (obj instanceof Date) return new Date(obj);\n    if (obj instanceof RegExp) return new RegExp(obj);\n    if (typeof obj !== 'object') return obj;\n    if (hash.has(obj)) return hash.get(obj);\n\n    let cloneObj = new obj.constructor();\n    hash.set(obj, cloneObj);\n    for (let key in obj) {\n        if (obj.hasOwnProperty(key)) {\n            cloneObj[key] = deepClone(obj[key], hash);\n        }\n    }\n    return cloneObj;\n}\n```\n\n### JavaScript装箱转换、拆箱转换？\n\n每一种基本类型如Number、String、Boolean、Symbol在对象中都有对应的类，所谓装箱转换，正是把基本类型转换为对应的对象。\n\n使用装箱机制得到Symbol对象：\n```js\nconst symbolObj = (function() {return this;}).call(Symbol());\nconsole.log(symbolObj instanceof Symbol); // true\n```\n\n在JavaScript标准中规定了ToPrimitive函数，它是对象类型到基本类型的转换（拆箱转换）\n拆箱转换会尝试调用valueOf和toString来获得拆箱后的基本类型。如果valueOf和toString都不存在或未返回基本类型，则会产生类型错误`TypeError`\n\n### 使用`Object.prototype.toString.call(obj)`判断类型的原理是啥？\n\n[Symbol.toStringTag - JavaScript | MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toStringTag)\n\n大多数内置的对象提供了它们自己的 `@@toStringTag` 属性。所有内置对象的 `@@toStringTag` 属性都是不可写的（writable）、不可枚举的（enumerable）但是可配置的（configurable）。\n\n```js\nObject.prototype.toString.call(new Map()); // \"[object Map]\"\nObject.prototype.toString.call(function* () {}); // \"[object GeneratorFunction]\"\nObject.prototype.toString.call(Promise.resolve()); // \"[object Promise]\"\n```\n\n:::tip\n当创建自己的类时，可以自定义标签：\n```js\nclass ValidatorClass {\n  get [Symbol.toStringTag]() {\n    return \"Validator\";\n  }\n}\n\nObject.prototype.toString.call(new ValidatorClass()); // \"[object Validator]\"\n```\n:::\n\n### 能说下前端的模块系统吗？\n\n#### AMD与CMD的区别？\n\n- 对于依赖的模块，AMD提前执行，CMD是延迟执行\n- CMD推崇依赖就近，AMD推崇依赖前置\n- AMD的API一个能当多个用，职责单一；CMD每个API都简单纯粹\n\nUMD是AMD和CommonJS的综合产物，AMD用于浏览器，CommonJS用于服务器。UMD则是则是两者的兼容模式，解决了跨平台问题。\n\n#### CommonJS的实现原理？\n\n在编译过程中，对CommonJS模块代码进行包装放到一个函数中，并将require、exports、module作为形参传入进去。\n在模块加载的时候，通过类似eval的函数执行模块包装函数。\n\n#### ES Module与CommonJS的差异？\n\n1. 语法 `import/export` `require/module`\n2. ESM静态导入导出，编译过程确定了模块依赖路径，易实现tree shaking；import() 懒加载、代码分割；\n3. CommonJS同步加载并执行文件；ESM提前加载并执行文件\n4. CommonJS由JS运行时实现；ESM是语言特性支持\n5. ESM模块导出的值是动态的，CommonJS导出值是原始值的副本。\n\n### `Object.is`和\\=\\=\\=有啥区别？\n\n1. NaN \\=\\=\\= NaN -> false; Object.is(NaN, NaN) -> true\n2. -0 \\=\\=\\= +0 -> true; Object.is(-0, +0) -> false\n\n### 0.1 + 0.2 \\=\\=\\= 0.3?\n\n浮点数类型的值通常表示的是某个数字的近似值。在计算机中，浮点数实际是使用二进制来实现的，但是我们通常想用十进制来完成浮点数运算。这种不匹配性导致了歧义的发生。此外，虽然浮点数通常用来表示实数，然而它的精度是有限。\n\n很多值，无法用二进制精确表示，如 0.1、1/3\n\n测试一个数学运算结果是否落在真实数学结果的一个可接受范围内是比较安全的。这个范围通常被称为机器最小值（EPSILON）或最小单元取整数\n\n### `new String(\"foo\")`和`\"foo\"`相等吗？\n\n使用\\=\\=相等。会进行类型转换\n使用\\=\\=\\=不相等。不会进行类型转换，`new String(\"foo\")`是一个包装器对象\n\n### JS 数组为什么没有负数索引？\n\nJS最初设计希望足够简单（相对Java），于是将数组下标也统一设计成对象属性访问。这样，一个普通对象就可以当作数组来用；所谓数组，相对普通对象唯一本质性的区别就是有一个魔法属性`length` 。\n\n如果通过索引找不到会上溯到原型链上去找，不仅有害性能也有安全隐患。\n\n数组下标的coerce是ToString而不是ToNumber。（对于属性的key来说不存在负数，只有字符串而已）\n\n### typeof null \\=\\=\\= ‘object’ ?\n\njs在底层存储变量的时候会在变量的机器码的低位1-3位存储其类型信息(000：对象，010：浮点数，100：字符串，110：布尔，1：整数)，但是null所有机器码均为0，直接被当做了对象来看待。\n\n### `const`怎么阻止非原始值的重新赋值？\n\n1. Object.freeze（注意，它是shadow的）\n2. TypeScript的as const\n\n使用场景🎬：\n1. 配置对象\n2. 常量对象\n3. 全局状态\n4. 内部实现（属性或方法）\n\n### `for...in`、 `for...of`区别？ 迭代器协议与可迭代协议区别？内置可迭代对象有哪些？\n\n- for...in 遍历对象的可枚举属性(Symbol除外，可用Object.getOwnPropertySymbols)\n- for...of 遍历可迭代对象\n\n- 可迭代协议：必须有`@@iterator`(`[Symbol.iterator]`)方法\n- 迭代器协议：实现了一个拥有以下语义（semantic）的 **`next()`** 方法\n  - next(), 返回`IteratorResult`的函数\n\n内置可迭代对象：\n- Array\n- Map/WeakMap\n- Set/WeakSet\n- String\n- TypedArray\n- arguments\n- NodeList\n- Intl.Segments\n\n### Promises/A+规范？\n\n[图灵社区](https://www.ituring.com.cn/article/66566)\n\n### 手写Promise\n\n[MDN Play](https://developer.mozilla.org/zh-CN/play?id=agNnmRm7wwdD7vIzJHurJOmrh7%2FCFcsYRi3BUPQ5y9T3fnS1vkxa%2FJfl2Ym%2BEgA69l9540%2B9qq2LpElR)\n\n```js\nclass MyPromise {\n    status = 'pending';\n    value = null;\n    reason = null;\n\n    onFulfilledCallbacks = [];\n    onRejectedCallbacks = [];\n\n    constructor(handler) {\n        const resolve = (v) => { \n            this.status = 'fulfilled';\n            this.value = v;\n            this.fulfilledCallbacks.forEach(cb => cb(v));\n        };\n        const reject = e => { \n            this.status = 'rejected';\n            this.reason = e;\n            this.rejectedCallbacks.forEach(cb => cb(e));\n        };\n\n        try {\n            handler(resolve, reject);\n        } catch (error) {\n            reject(error)\n        }\n    }\n\n    then (onFulfilled, onRejected) { \n        return new MyPromise((resolve, reject) => {\n            if (this.status === 'rejected') { \n                try {\n                    const rejectedFromLastPromise = onRejected(this.reason);\n                    if (rejectedFromLastPromise instanceof MyPromise) { \n                        rejectedFromLastPromise.then(resolve, reject);\n                    } else { \n                        reject(rejectedFromLastPromise);\n                    }\n                } catch (error) {\n                    reject(error);\n                }\n            }\n\n            if (this.status === 'fulfilled') { \n                try {\n                    const resolvedFromLastPromise = onFulfilled(this.value);\n                    if (resolvedFromLastPromise instanceof MyPromise) { \n                        resolvedFromLastPromise.then(resolve, reject);\n                    } else { \n                        resolve(resolvedFromLastPromise);\n                    }\n                } catch (error) {\n                    reject(error)\n                }\n            }\n\n            if (this.status === 'pending') { \n                this.onFulfilledCallbacks.push(() => { \n                    try {\n                        const resolvedFromLastPromise = onFulfilled(this.value);\n                        if (resolvedFromLastPromise instanceof MyPromise) { \n                            resolvedFromLastPromise.then(resolve, reject);\n                        } else { \n                            resolve(resolvedFromLastPromise);\n                        }\n                    } catch (error) {\n                        reject(error)\n                    }\n                });\n\n                this.onRejectedCallbacks.push(() => { \n                    try {\n                        const rejectedFromLastPromise = onRejected(this.reason);\n                        if (rejectedFromLastPromise instanceof MyPromise) { \n                            rejectedFromLastPromise.then(resolve, reject);\n                        } else { \n                            reject(rejectedFromLastPromise);\n                        }\n                    } catch (error) {\n                        reject(error);\n                    }\n                });\n            }\n        });\n    }\n}\n```\n\n### 实现new\n\n`new`操作符做了什么？\n1. 创建了一个全新的对象。\n2. 这个对象会被执行`[[Prototype]]`（也就是`__proto__`）链接。\n3. 生成的新对象会绑定到函数调用的`this`。\n4. 通过`new`创建的每个对象将最终被`[[Prototype]]`链接到这个函数的`prototype`对象上。\n5. 如果函数没有返回对象类型`Object`(包含`Functoin`, `Array`, `Date`, `RegExg`, `Error`)，那么`new`表达式中的函数调用会自动返回这个新的对象。\n6. 怎么模拟实现\n```js\nfunction myNew(ctor, ...args) {\n    // ES6 new.target 指向构造函数\n    myNew.traget = ctor;\n\n    let newObj = Object.create(ctor);\n    const ctorReturnResult = ctor.apply(newObj, args);\n    if (typeof ctorReturnResult === 'object' && ctorReturnResult !== null || typeof ctorReturnResult === 'function') return ctorReturnResult;\n\n    return newObj;\n}\n```\n\n### 实现instanceof\n\n```js\nfunction myInstanceof(left, right) {\n    left = left.__proto__;\n    while (true) {\n        if (!left) return false;\n        if ((left = left.__proto__) === right.prototype) return true;\n    }\n}\n```\n- 首先获取类型的原型\n- 然后获得对象的原型\n- 然后一直循环判断对象的原型是否等于类型的原型，直到对象原型为 `null`，因为原型链最终为 `null`\n\n### 实现EventEmitter\n[mitt](https://github.com/developit/mitt/blob/main/src/index.ts)\n\n```js\nfunction emitter() {\n    const all = new Map();\n\n    return {\n        all,\n        on (type, handler) {\n            if (!all.has(type)) {\n                all.set(type, []);\n            }\n            all.get(type).push(handler);\n        },\n        emit (type, ...args) {\n            if (!all.has(type)) return;\n\n            all.get(type).forEach(handler => handler(...args));\n        },\n        off (type, handler) {\n            if (!all.has(type)) return;\n            all.get(type).splice(all.get(type).indexOf(handler) >>> 0, 1);\n        }\n    };\n}\n```\n\n### 实现call/apply/bind\n\n```js\nfunction myBind(context = window, ...args) {\n    if (this === Function.prototype) throw new Error()\n    const fn = Symbol.for('bind');\n    context[fn] = this;\n    const result = context[fn](...args);\n    delete context[fn];\n    return result;\n}\n\nfunction myApply(context, args) {\n    const fn = Symbol.for('apply');\n    context[fn] = this;\n    const result = context[fn](...args);\n    delete result[fn]\n    return result;\n}\n\nfunction myBind(context, args) {\n    const _this = this;_\n    return function(...args2) {\n        return _this.apply(context, args.concat(args2));\n    }\n}\n```\n\n### 实现柯里化函数\n\n用闭包把参数保存起来，当参数的数量足够执行函数了，就开始执行函数。\n\n```js\nfunction currying(fn, ...args) {\n    if (args.length >= fn.length) return fn(...args);\n\n    return (...args2) => currying(fn, ...args, ...args2)\n}\n```\n\n### 实现类似lodash的get方法\n\n```js\nconst get = (obj, paths, defaultValue) => {\n    const res = (typeof paths === 'string' ? paths.split('.') : paths).flatMap(s => s.split('[').flatMap(s => s.split(']').filter(Boolean))).reduce((acc, cur) => acc && Reflect.get(acc, cur), obj);\n    return typeof res === 'undefined' ? defaultValue : res;\n}\n```\n\n### TypeScript中type和interface区别在哪？如何抉择？\n\n1. interface无法表示联合类型、映射类型和条件类型，type可以\n2. interface可以使用extends，type不行（此外，`extends`比`&`更快）\n3. 在同一个scope下重复声明interface会merge（三方库类型扩展很方便），而type会报错\n4. type隐式实现了索引签名，而interface没有\n\n1\n```ts\n// unions\ntype A = boolean | string;\n// mapped types\ntype B = { [x:string]: boolean };\n// conditional types\ntype C = A extends boolean ? string : boolean;\n```\n\n2\n```ts\ninterface A {\n    name: string;\n}\ninterface B extends A {\n    age: number;\n}\ntype C = { name: string; } & { age: number };\n```\n\n3\n```ts\ninterface A {\n    name: string;\n}\ninterface A {\n    age: number;\n}\n```\n\n4\n```ts\ntype A = Record\u003Cstring, boolean>;\ninterface B { x: number; y: number };\nconst attrs: B = { x: 1, y: 2 };\n\n// Type 'B' is not assignable to type 'A'.\n// Index signature for type 'string' is missing in type 'B'.\nconst newAttrs: A = attrs;\n```\n\n\n## Web框架\n\n### 解释下CSR、SSR、SSG、ISR、RSC？\n\n1. CSR客户端渲染，下载脚本，加载服务端数据，然后渲染\n2. SSR是服务端渲染，服务端加载数据，渲染HTML，然后客户端下载脚本，然后注水加交互\n3. SSG、ISR、RSC都是SSR的不同形式。\n    1. SSG是SSR的预处理版本，先在编译时运行SSR，产出HTML（类比预制菜）\n    2. ISR全称Incremental Static Regeneration增量静态再生，是SSR和SSG的结合，第一次请求特定页面将生成的HTML发送并保存（有过期时间），下次再次请求直接返回上次生成的\n    3. RSC在SSR基础上提供Server Component的能力，用组件的方式写服务端逻辑，类似PHP，好处是返回的文件大小降低了。\n\n![image.png](https://raw.githubusercontent.com/fw6/assets/main/toy_docs/20230804174545.png)\n\n![image.png](https://raw.githubusercontent.com/fw6/assets/main/toy_docs/20230804174558.png)\nSSR\n\n### Diff DOM\n\n当组件被渲染时，虚拟 DOM 计算新状态和先前状态之间的差异（diffing），并对真实 DOM 进行最小的更改集，以使其与更新的虚拟 DOM 同步（reconciliation）。\n\n**Block Virtual DOM**\n1. 静态分析阶段，将树的动态部分提取到 mappings 中（可以在编译时也可以在运行时）;\n2. 通过脏检查比较数据来确定发生了哪些变化。状态变化则通过mappings更新DOM（只设计状态而不是虚拟DOM）\n\n具体步骤\n- 不使用React渲染jsx，而是使用million.js，用holes 表示动态变化的部分并传递到虚拟DOM，holes作为动态内容的占位符\n- 一旦通过脏检查确定状态变化的内容，即可通过mappings找到各自的节点并直接更新DOM\nBlock Virtual DOM适合的使用场景：\n- 静态内容较多。此时可跳过大量静态部分\n- 适用于稳定、变化不大的UI树，\n\n### Vue\n\n#### 谈谈你对MVVM的理解？\n\nMVVM 是 Model-View-ViewModel 的缩写。MVVM 是一种设计思想。 Model 层代表数据模型，也可以在 Model 中定义数据修改和操作的业务逻辑; View 代表 UI 组件，它负责将数据模型转化成 UI 展现出来，View 是一个同步 View 和 Model 的对象 在 MVVM 架构下，View 和 Model 之间并没有直接的联系，而是通过 ViewModel 进行交互， Model 和 ViewModel 之间的交互是双向的， 因此 View 数据的变化会同步到 Model 中，而 Model 数据的变化也会立即反应到 View 上。 对 ViewModel 通过双向数据绑定把 View 层和 Model 层连接了起来，而 View 和 Model 之间的 同步工作完全是自动的，无需人为干涉，因此开发者只需关注业务逻辑，不需要手动操作 DOM，不需要关注数据状态的同步问题，复杂的数据状态维护完全由 MVVM 来统一管理。\n\n#### Vue的响应式系统如何创建的？\n\nVue的响应性系统是通过深度转换JavaScript对象为响应式代理来实现的。通过Proxy追踪对象的读写操作。\n\n在track内部，检查当前正在运行的副作用，被将副作用存储在一个全局的WeakMap数据结构中。\n在trigger中，查好该属性所有的副作用订阅，并执行它们。\n\n在响应式副作用中，更新视图（调用虚拟DOM渲染函数）。\n\n#### Vue为何跟推荐使用模板而非渲染函数？\n\nVue 模板会被预编译成虚拟 DOM 渲染函数。Vue 也提供了 API 使我们可以不使用模板编译，直接手写渲染函数。在处理高度动态的逻辑时，渲染函数相比于模板更加灵活，因为你可以完全地使用 JavaScript 来构造你想要的 vnode。\n\n那么为什么 Vue 默认推荐使用模板呢？有以下几点原因：\n1. 模板更贴近实际的 HTML。这使得我们能够更方便地重用一些已有的 HTML 代码片段，能够带来更好的可访问性体验、能更方便地使用 CSS 应用样式，并且更容易使设计师理解和修改。\n2. 由于其确定的语法，更容易对模板做静态分析。这使得 Vue 的模板编译器能够应用许多编译时优化来提升虚拟 DOM 的性能表现。\n\n编译器可以静态分析模板并在生成的代码中留下标记，使得运行时尽可能地走捷径。与此同时，Vue仍旧保留了边界情况时用户想要使用底层渲染函数的能力。称这种混合解决方案为**带编译时信息的虚拟 DOM**。\n\n提升运行时性能的手段：\n1. 静态提升。复用、压缩静态内容\n2. 编译时保留更新类型标记。使用位掩码技术更新和检查：元素所需的更新类型、vnode子节点类型\n3. 树结构拍平。将结构稳定的部分编译为一个拍平的数据，减少虚拟DOM协调时需要遍历的节点数量，任何静态部分都会被略过。\n\n#### Vue3组合式API的优势有哪些？\n\n1. 更好的逻辑复用\n2. 更灵活的代码组织\n3. 更好的类型推导\n4. 更小的生产包体积\n\n#### Vue3的渲染机制？\n\n[渲染机制 | Vue.js](https://cn.vuejs.org/guide/extras/rendering-mechanism.html)\n\n1. 编译\n   Vue模板被编译为渲染函数，即用来返回虚拟DOM树的函数。\n2. 挂载\n   运行时渲染器调用渲染函数，遍历返回的VNode并创建实际DOM\n3. 更新\n   依赖发生变化，副作用重新执行，创建更新后的VNode并Diff，将必要的更新应用到DOM\n![image.png](https://raw.githubusercontent.com/fw6/assets/main/toy_docs/20230810161231.png)\n\n\n#### Vue的生命周期？\n\n![image.png](https://raw.githubusercontent.com/fw6/assets/main/toy_docs/20230802160714.png)\n\n#### Vue2和Vue3 Diff算法分别说一下？\n\n简单来说，diff 算法有以下过程\n- 同级比较，再比较子节点\n- 先判断一方有子节点一方没有子节点的情况(如果新的 children 没有子节点，将旧的子节点移除)\n- 比较都有子节点的情况(核心 diff)\n- 递归比较子节点\n\n**Vue2 的核心 Diff 算法采用了双端比较的算法**。同时从新旧 children 的两端开始进行比较，借助 key 值找到可复用的节点，再进行相关操作。相比 React 的 Diff 算法，同样情况下可以减少移动节点次数，减少不必要的性能损耗，更加的优雅。\n\n**Vue3.x 借鉴了 ivi 算法和 inferno 算法**。在创建 VNode 时就确定其类型，以及在 mount/patch 的过程中采用位运算来判断一个 VNode 的类型，在这个基础之上再配合核心的 Diff 算法，使得性能上较 Vue2.x 有了提升。该算法中还运用了动态规划的思想求解最长递归子序列。\n\n#### 解释一下 vue-router 的完整的导航解析流程是什么？\n\n一次完整的导航解析流程如下：\n- 1.导航被触发。\n- 2.在失活的组件里调用离开守卫。\n- 3.调用全局的 beforeEach 守卫。\n- 4.在重用的组件里调用 beforeRouteUpdate 守卫（2.2+）。\n- 5.在路由配置里调用 beforeEnter。\n- 6.解析异步路由组件。\n- 7.在被激活的组件里调用 beforeRouteEnter。\n- 8.调用全局的 beforeResolve 守卫（2.5+）。\n- 9.导航被确认。\n- 10.调用全局的 afterEach 钩子。\n- 11.触发 DOM 更新。\n- 12.用创建好的实例调用 beforeRouteEnter 守卫中传给 next 的回调函数。\n\n#### Vue内置组件`KeepAlive` 实现原理？\n\n[core/packages/runtime-core/src/components/KeepAlive.ts at 623ba514ec0f5adc897db90c0f986b1b6905e014 · vuejs/core · GitHub](https://github.com/vuejs/core/blob/623ba514ec0f5adc897db90c0f986b1b6905e014/packages/runtime-core/src/components/KeepAlive.ts)\n\n`KeepAliv`e组件本身并不会渲染额外的内容，它的渲染函数最终只返回需要被`KeepAlive`的组件，把这个需要被KeepAlive的组件称为「内部组件」。\n\nKeepAlive组件会对内部组件进行操作，主要在「内部组件」的`vnode`对象上添加一个标记属性，以便渲染器能够做一些额外处理：\n- `shouleKeepAlive`：如果渲染器在执行卸载操作中发现有该属性，则不会真的卸载，而是调用`_deActivate`函数完成失活（`vnode.keepAliveInstance._deActivate(vnode)`）\n- `keepAliveInstance`：「内部组件」的`vnode`上会持有`KeepAlive`组件实例，在`unmount`时会访问`keepAliveInstance`的`_deActivate`函数\n- keptAlive：如果「内部组件」已被缓存，则会为其添加一个keptAlive标记，这样当内部组件重新渲染时，渲染器并不会重新挂载它，而会将其激活（执行`vnode.keepAliveInstance._activate(vnode)`\n\n失活的本质就是将组件渲染的内容移动到隐藏容器中，激活就是从隐藏容器中搬运回原来容器。（`move`函数由渲染器提供）\n\n#### Vue内置组件`Teleport`实现原理？\n\n本质是为了实现跨DOM层级渲染。\n\nTeleport组件选项中包含process函数，在patch时如果存在__isTeleport则会使用process函数将控制权交给Teleport组件（传递一些渲染器方法）\n\n[core/packages/runtime-core/src/components/Teleport.ts at 623ba514ec0f5adc897db90c0f986b1b6905e014 · vuejs/core · GitHub](https://github.com/vuejs/core/blob/623ba514ec0f5adc897db90c0f986b1b6905e014/packages/runtime-core/src/components/Teleport.ts#L67)\nprocess内部实现大致如下：\n- 判断旧的虚拟节点是否存在，决定接下来的操作是挂载还是更新\n- 获取挂载点（指定的`to`属性对应DOM节点）\n- 如果是更新，需要判断前后挂载点是否发生了变化，并移动内容\n\n#### Vue内置组件`Transition`实现原理？\n\n核心原理：\n- 当DOM元素被挂载时，将动效附加到DOM元素上\n- 当DOM元素被卸载时，不立即卸载DOM元素，而是等到附加的动效执行完成再卸载\n\n在vnode.transition对象中定义过渡相关钩子函数，渲染器在执行挂载和卸载操作时会优先检查该虚拟节点是否过渡\n\n#### Vue3如何实现一个防抖的Ref？\n\n```ts\nfunction useDebouncedRef\u003CT>(value: T, delay = 200) {\n  let timer: ReturnType\u003Ctypeof setTimeout>\n  return customRef((track, trigger) => {\n    return {\n      get: () => {\n        track()\n        return value;\n      },\n      set: (newValue: T) => {\n        clearTimeout(timer);\n        timer = setTimeout(() => {\n          value = newValue;\n          trigger();\n        }, delay)\n      }\n    }\n  })\n}\n```\n\n#### 为何不建议v-if与v-for一起使用？\n\n把 `v-if` 和 `v-for` 同时用在同一个元素上，带来性能方面的浪费（每次渲染都会先循环再进行条件判断）（`v-for`比`v-if`优先级高）\n\n\n#### Vue3特性开关怎么实现的？\n\n框架层面：源码中使用全局常量+条件判断，包住某些特性相关的代码\n开发者层面：通过bundler提供的方式，定义全局常量，如在编译时常量为true则源码中条件为true触发死代码消除\n\nrollup -> @rollup/plugin-replace\nwebpack -> webpack.DefinePlugin\n\n#### Vue3错误处理如何实现的？\n\n1. 给用户提供自定义注册错误处理函数的方式\n2. 将可能发生错误的代码用函数包一下，函数中用try...catch拦截错误\n\n```js\n// error-handler.js\nlet handlerError = null;\n\nexport default {\n    registerErrorHandler(fn) {\n        handlerError = fn;\n    },\n}\n\nexport function callWithErrorHandling(fn) {\n    try {\n        fn()\n    } catch(e) {\n        handlerError?.(e);\n    }\n}\n\n// source code\nfunction foo() {\n    callWithEErrorHandling(() => {\n        console.log('do something');\n    })\n}\n```\n\n用户侧可以使用如下方式注册错误处理函数：\n```js\napp.config.errorHandler = (e) => {}\n```\n\n#### Vue如何给数组建立响应性？\n\n1. 索引与长度\n   通过索引设置新值会触发length改变，在Set时判断是SET还是ADD，在trigger时触发与length属性相关联的副作用函数即可。\n   修改length属性，则在trigger时只执行旧长度大于新长度的副作用\n2. 遍历\n   在ownKeys拦截函数中，使用length属性作为key建立响应联系\n3. 追踪时排查使用Symbol作为key的情况\n4. 数组查找includes\n   查找子项为对象的出现错误，因为此时函数内的this为代理对象，通过代理对象索引找到的对象也是代理对象，也原始值对应的子项不一样，故会找不到。\n   Get中判断key是否为查找相关函数，如果是，则执行重写后的方法，先在代理对象上查，找不到再在原始数组上查\n5. 会修改原数组的方法\n   这些方法读取length的同时也会更新数组，就导致了循环执行栈溢出，需要重写相关方法（如：push、pop、shift、unshift、splice）在执行完毕前阻止track\n\n#### Vue如何代理Set（WeakSet）和Map（WeakMap）？\n\n1. 修正get\n   如果读取size属性则使用原对象\n2. 调用size函数时调用track建立响应联系\n3. 自定义实现add/delete方法\n   执行原始对象的add，触发trigger\n4. 自定义实现set时注意数据污染\n   要设置的值可能是代理对象，需要设置原始对象\n5. 实现forEach注意子项转为可代理对象触发响应\n6. 为了使用代理对象迭代，需要重新实现迭代器协议和可迭代协议\n\n#### Vue如何处理响应丢失的问题？\n\n提供toRef方法，将响应对象的值转为getter形式并返回，其中getter返回的是响应对象的值\n```js\nfunction toRef(obj, key) {\n    const wrapper = {\n        get value() {\n            return obj[key];\n        },\n        set value(v) {\n            obj[key] = v;\n        }\n    }\n    Object.defineProperty(wrapper, '__v_isRef', {\n        value: true,\n    });\n    return wrapper;\n}\n```\n\n#### Vue如何实现自动脱ref？\n是用Proxy创建个代理对象，get中判断target是否为ref，为ref则返回target.value\n```js\nfunction proxyRefs(target) {\n    return new Proxy(target, {\n        get(target, key, receiver) {\n            const value = Reflect.get(target, key, receiver);\n            return value.__v_isRef ? value.value : value;\n        },\n        set(target, key, newValue, receiver) {\n            const value = target[key];\n            if (value.__v_isRef) {\n                value.value = newValue;\n                return true;\n            }\n\n            return Reflect.set(target, key, newValue, receiver);\n        }\n    });\n}\n```\n\n#### Vue2双端Diff原理？\n\n双端Diff算法是一种同时对新旧两组子节点的两个端点进行比较的算法。因此，需要4个索引值，分别指向新旧子节点的端点。\n\n![image.png](https://raw.githubusercontent.com/fw6/assets/main/toy_docs/20230811153721.png)\n\n\n在双端比较中，每一轮都分为4个步骤：\n1. 比较旧的子节点首位（P1）和新子节点首位（P4）\n   key不同，什么都不做\n2. 比较旧的末位（P4）与新的末位（P3）\n   key不同，什么都不做\n3. 比较旧的首位（P1）和新的末位（P3）\n   key不同，什么都不做\n4. 比较旧的末位（P4）与新的首位（P4）\n   key相同，复用旧的DOM（将旧的P4所属DOM移动到首位）\n   将oldEndIdx与newStartIdx各向前移动一步，继续开始从第一步开始\n\n在整个循环中，条件为：*头部索引值小于等于尾部索引值*则继续执行\n简单实现如下：\n```js\nwhile (newStartIdx \u003C= newEndIdx && oldStartIdx \u003C= oldEndIdx) {\n    if (!oldStartVNode) {\n        oldStartVNode = oldChildren[++oldStartIdx];\n    } else if (!oldEndVNode) {\n        oldEndVNode = oldChildren[--oldEndIdx];\n    } else if (oldStartVNode.key === newStartVNode.key) {\n        // 调用patch在oldStartVNode和newStartVNode打补丁\n        patch(oldStartVNode, newStartVNode, container);\n        // 更新索引，指向下一位置\n        oldStartVNode = oldChildren[++oldStartIdx];\n        newStartVNode = newChildren[++newStartIdx];\n    } else if (oldEndVNode.key === newEndVNode.key) {\n        patch(oldEndVNode, newEndVNode, container);\n        oldEndVNode = oldChildren[--oldEndIdx];\n        newEndVNode = newChildren[--newEndIdx];\n    } else if (oldStartVNode.key === newEndVNode.key) {\n        patch(oldStartVNode, newEndVNode, container);\n        oldStartIdx = oldChildren[++oldStartIdx];\n        newEndVNode = newChildren[--newEndIdx];\n    } else if (oldEndVNode.key === newStartVNode.key) {\n        patch(oldEndVNode, newStartVNode, container);\n        oldEndVNode = oldChildren[--oldEndIdx];\n        newStartVNode = newChildren[++newStartIdx];\n    } else {\n        // 遍历旧的children，找到与newStartVNode.key相同的节点\n        const idxInOld = oldChildren.findIndex(node => node.key === newStartVNode.key);\n        // 大于0说明原来不在头部，新的被移动到了头部\n        if (idxInOld > 0) {\n            const vnodeToMove = oldChildren[idxInOld];\n            patch(vnodeToMove, newStartVNode, container);\n            // 将vnode移动到旧的头部节点之前\n            insert(vnodeToMove.el, container, oldStartVNode.el);\n            // 因为已被移动，所以将旧的节点设置为undefined\n            oldChildren[idxInOld] = undefined;\n        } else {\n            // 说明这是个新节点，原来就没有。创建新Node插入到旧的头部节点之前\n            patch(null, newStartVNode, container, oldStartVNode.el);\n        }\n\n        // 更新newStartIdx\n        newStartVNode = newChildren[++newStartIdx];\n    }\n}\n\n// 最后检查剩余没匹配上的节点（可能被删除？）\nif (newStartIdx \u003C= newEndIdx || oldStartIdx \u003C= oldEndIdx) {\n    if (newStartIdx > newEndIdx) {\n        // 说明newChildren已经遍历完了，oldChildren还有剩余，说明这些节点是不需要的，直接删除\n        for (let i = oldStartIdx; i \u003C= oldEndIdx; i++) {\n            unmount(oldChildren[i]);\n        }\n    } else {\n        // 说明oldChildren已经遍历完了，newChildren还有剩余，说明这些节点是新增的，直接插入到旧的头部节点之前\n        for (let i = newStartIdx; i \u003C= newEndIdx; i++) {\n            patch(null, newChildren[i], container, oldChildren[oldStartIdx].el);\n        }\n    }\n}\n```\n\n#### Vue3快速Diff原理？\n\n![image.png](https://raw.githubusercontent.com/fw6/assets/main/toy_docs/20230811162421.png)\n\n1. 预处理，先处理新旧两组子节点中相同的前置节点和相同的后置节点\n2. 根据节点索引关系，构造出最长递增子序列，指向的节点就是不需要移动的节点\n\n```js\nfunction fastDiff (n1, n2, container) {\n    const newChildren = n1.children;\n    const oldChildren = n2.children;\n\n    // 处理相同的前置节点\n    // 索引j指向新旧两组子节点开头\n    let j = 0;\n    let oldVNode = oldChildren[j];\n    let newVNode = newChildren[j];\n    // while 向后遍历，找到不相同的节点为止\n    while (\n        oldVNode.key === newVNode.key &&\n        oldVNode.tag === newVNode.tag\n    ) {\n        patch(oldVNode, newVNode, container);\n        j++;\n        oldVNode = oldChildren[j];\n        newVNode = newChildren[j];\n    }\n\n    // 更新相同的后置节点\n    // 索引oldEnd指向旧组子节点末尾\n    let oldEnd = oldChildren.length - 1;\n    // 索引newEnd指向新组子节点末尾\n    let newEnd = newChildren.length - 1;\n    oldVNode = oldChildren[oldEnd];\n    newVNode = newChildren[newEnd];\n    // while 从后向前遍历，找到不相同的节点为止\n    while (\n        oldVNode.key === newVNode.key &&\n        oldVNode.tag === newVNode.tag\n    ) {\n        patch(oldVNode, newVNode, container);\n        oldEnd--;\n        newEnd--;\n        oldVNode = oldChildren[oldEnd];\n        newVNode = newChildren[newEnd];\n    }\n\n    // 预处理之后如果满足以下条件，说明 j --> newEnd 之间的节点是新的\n    if (j > oldEnd && j \u003C= newEnd) {\n        const anchorIndex = newEnd + 1;\n        // 锚点元素\n        const anchor = anchorIndex \u003C newChildren.length ? newChildren[anchorIndex].el : null;\n        while (j \u003C= newEnd) {\n            patch(null, newChildren[j++], container, anchor);\n        }\n    } else if (j > newEnd && j \u003C= oldEnd) {\n        // j --> oldEnd之间的节点是要删除的\n        while (j \u003C= oldEnd) {\n            unmount(oldChildren[j++]);\n        }\n    } else {\n        // 其他非理想情况\n\n        const count = newEnd - j + 1;\n        // 构造source数组，长度为未处理节点的数量\n        const source = new Array(newEnd - j + 1).fill(-1);\n\n        const oldStart = j;\n        const newStart = j;\n        let moved = false;\n        let pos = 0;\n        // 更新过的节点数量\n        let patched = 0;\n\n        // 构建索引表\n        const keyIndex = {};\n        for (let i = newStart; i \u003C= newEnd; i++) {\n            keyIndex[newChildren[i].key] = i;\n        }\n\n        // 遍历旧的一组子节点中剩余\n        for (let i = oldStart; i \u003C= oldEnd; i++) {\n            oldVNode = oldChildren[i];\n\n            // 更新的节点，小于等于需要更新的节点\n            if (patched \u003C= count) {\n                const k = keyIndex[oldVNode.key];\n\n                if (typeof k !== 'undefined') {\n                    newVNode = newChildren[k];\n                    // 说明该节点在新的一组中存在，需要移动\n                    patch(oldVNode, newVNode, container);\n                    patched++;\n                    source[k - newStart] = i;\n\n                    // 判断是否需要移动\n                    if (k \u003C pos) {\n                        moved = true;\n                    } else {\n                        pos = k;\n                    }\n                } else {\n                    // 说明该节点在新的一组中不存在，需要删除\n                    unmount(oldVNode);\n                }\n            } else {\n                // 卸载多余节点\n                unmount(oldVNode);\n            }\n        }\n\n        if (moved) {\n            // 需要进行DOM移动操作\n            // 计算最长递增子序列的索引\n            const seq = lis(source);\n\n            // s指向最长递增子序列的末尾\n            let s = seq.length - 1;\n            // i指向新组子节点的末尾\n            let i = count - 1;\n            for (; i >= 0; i--) {\n                if (source[i] === -1) {\n                    // 需要挂载的新节点\n                    // 在新节点的位置\n                    const pos = i + newStart;\n                    newVNode = newChildren[pos];\n                    const nextPos = pos + 1;\n                    const anchor = nextPos \u003C newChildren.length ? newChildren[nextPos].el : null;\n                    patch(null, newVNode, container, anchor);\n                } else if (i !== seq[s]) {\n                    // 该节点需要移动\n\n                    const pos = i + newStart;\n                    newVNode = newChildren[pos];\n                    const nextPos = pos + 1;\n                    const anchor = nextPos \u003C newChildren.length ? newChildren[nextPos].el : null;\n                    insert(newVNode.el, container, anchor);\n                } else {\n                    // 该节点不需要移动\n                    s--;\n                }\n            }\n        }\n    }\n}\n```\n\n#### 如何实现异步组件？\n\n需要实现的功能：\n- 指定加载出错时渲染的组件\n- 指定Loading组件及展示该组件的延迟时间\n- 指定超时时长\n- 加载失败提供重试机制\n\n```js\nfunction defineAsyncComponent (options) {\n    if (typeof options === 'function') {\n        options = { loader: options };\n    }\n    const { loader } = options;\n    let innerComp = null;\n    // 记录重试次数\n    let retries = 0;\n\n    // 封装load函数用于异步加载组件\n    function load () {\n        return loader.catch(err => { \n            if (options.onError) {\n                return new Promise((resolve, reject) => {\n                    const retry = () => {\n                        resolve(load());\n                        retries++;\n                    };\n                    const fail = () => reject(err);\n                    // 调用用户自定义的错误处理函数 来决定是否重试\n                    options.onError(retry, fail, retries);\n                });\n            } else throw err;\n        });\n    }\n\n    return {\n        name: 'AsyncComponentWrapper',\n        setup () { \n            const loaded = ref(false);\n            const error = shadowRef(null);\n            const loading = ref(false);\n\n            let loadingTimer = null;\n            if (options.delay) {\n                loadingTimer = setTimeout(() => {\n                    loading.value = true;\n                }, options.delay);\n            } else loading.value = true;\n\n            load()\n                .then(comp => {\n                    innerComp = comp;\n                    loaded.value = true;\n                })\n                .catch(err => {\n                    error.value = err;\n                })\n                .finally(() => {\n                    loading.value = false;\n                    clearTimeout(loadingTimer);\n                });\n            \n            return () => { \n                if (loaded.value) {\n                    return innerComp;\n                } else if (error.value && options.errorComponent) {\n                    return {\n                        type: options.errorComponent,\n                        props: { error: error.value },\n                    };\n                } else if (loading.value && options.loadingComponent) {\n                    return {\n                        type: options.loadingComponent,\n                    }\n                } else {\n                    return {\n                        type: Text,\n                        children: '',\n                    };\n                }\n            };\n        },\n    };\n}\n```\n\n\n\n### Svelte\n\n\n### React\n\n![image.png](https://raw.githubusercontent.com/fw6/assets/main/toy_docs/20230808153152.png)\n\n\n#### 为啥会有Suspense组件？原理是啥？使用场景有哪些？\n\n为了解决客户端的CLS问题，[Cumulative Layout Shift累计布局偏移](https://web.dev/cls/)\n![image.png](https://raw.githubusercontent.com/fw6/assets/main/toy_docs/20230804184705.png)\n\n原理：类似Error Boundary，再通过`try..catch..finally`实现子组件消息上报，throw一个Promise，Suspense基于Promise的状态决定子组件的加载状态。\n\n场景：\n1. 等一组组件全部加载完成，一次性渲染\n2. 加载新内容时显示旧内容（useDeferredValue）\n3. 路由切换时等新页面加载完成再切过去（基于startTransition + useTransition）\n4. 按需加载（基于`React.lazy`）\n\n:::notes\n\nSSR面临的问题：\n1. 展示任何东西之前需要获取所有东西；\n2. 需要加载所有JS才能开始水化；\n3. 与任何东西交互之前，都必须水化任何东西，即不支持渐进式水化\n\nReact对上述问题的解同样是Suspense，通过Streaming HTML + Selective Hydration，这是React18主打功能之二\n\n:::\n\n\n#### 什么是forward refs？\n\n`forwardRef`将组件的DOM节点通过`ref`的方式暴露给父组件\n\n```jsx\nconst ButtonElement = React.forwardRef((props, ref) => (\n    \u003Cbutton ref={ref} className=\"CustomButton\">\n        {props.children}\n    \u003C/button>\n));\n\n// Create ref to the DOM button:\nconst ref = React.createRef();\n\u003CButtonElement ref={ref}>{'Forward Ref'}\u003C/ButtonElement>\n```\n\n也可通过`useImperativeHandle`改变需要暴露的`ref`\n\n#### useLayoutEffect和useEffect区别?\n\n[看看我对 useEffect 的深度理解](https://mp.weixin.qq.com/s/1Tqwu-L4ZMUQwnx7CGMNQg)\n\n在 React 中,`useEffect` 和 `useLayoutEffect` 分为两个阶段: `render` 阶段和 `commit` 阶段。这两个阶段分别发生在组件的渲染过程中,以确保正确地处理副作用\n\n- `render` 阶段: 函数组件开始渲染的时候,创建出对应的 hook 链表挂载到 workInProgress 的 memoizedState 上,并创建 effect 链表,但是基于上次和本次依赖项的比较结果;\n- `commit` 阶段: 异步调度 `useEffect,layout` 阶段同步处理 `useLayoutEffect` 的 `effect`,也就是在浏览器进行布局 `layout` 和回执 `paint` 之前同步执行。等到 `commit` 阶段完成,更新应用到页面上之后,开始处理 `useEffect` 产生的 `effect`;\n\nreact 在 commit 阶段,它又分为三个小阶段: `before mutation`、`mutation`、`layout`。\n其中具体操作 dom 的阶段是 `mutation`,操作 dom 之前是 `before mutation`,而操作 dom 之后是 `layout`。\n`layout` 阶段在操作 dom 之后,所以这个阶段是能拿到 dom 的，ref 更新是在这个阶段,`useLayoutEffect` 回调函数的执行也是在这个阶段。\n\n整体流程上都是先在 `render` 阶段，生成 `effect`，并将它们拼接成链表，存到 `fiber.updateQueue` 上,这些 `effect` 表示在组件渲染后需要执行的副作用操作，如数据获取、订阅事件等,最终带到 `commit` 阶段被处理。\n\n`useEffect` 生成的 `effect` 会进入 Scheduler 调度,在浏览器空闲时异步执行,不会阻塞渲染,这样可以避免影响用户界面的响应性。\n\n`useLayoutEffect` 生成的 effect 会在浏览器 `layout` 阶段之前同步执行,这可能会阻塞渲染,因此需要谨慎使用,以避免性能问题。\n\n如何解决在服务端渲染中`useLayoutEffect`不可用的报错？\n1. 替换为useEffect\n2. 将组件改为仅在客户端渲染（Suspense+windows检测抛错）\n3. 只在水合之后渲染使用了`useLayoutEffect`的组件。isMounted + useEffect\n4. 如果是外部数据响应更新布局信息，则可以使用`useSyncExternalStore`替代\n\n#### `useSyncExternalStore`是干啥的？\n\n用于集成外部非react的状态管理库\n\n#### 什么是调解（reconciliation）?\n\n当组件的props或state发生更改时，React 通过将新返回的元素与先前呈现的元素进行比较来确定是否需要实际的 DOM 更新。当它们不相等时，React 将更新 DOM 。此过程称为reconciliation。\n\n#### 错误边界是啥？\n\n错误边界是在其子组件树中的任何位置捕获 JavaScript 错误、记录这些错误并显示回退 UI 而不是崩溃的组件树的组件。\n如果一个类组件定义了一个名为 componentDidCatch(error, info) 或 static getDerivedStateFromError() 新的生命周期方法，则该类组件将成为错误边界\n\n不会被捕获的情况：\n1. 事件处理器\n\n实际项目中可使用[react-error-boundary](https://github.com/bvaughn/react-error-boundary)\n\n#### RSC怎么实现的？\n\n1. 当用户访问应用时，通知server渲染App组件，拿到App组件的流式数据后拼成React组件需要的数据形式，最终渲染到页面\n2. server拿到`/?rsc_id=App&props=...`后，针对`use client;`和`use server;`分别处理，返回额外的id、typeof、bound等元信息\n\n返回的格式如下：\n```\n1:I{\"id\":\"foooooooo\",\"chunks\":[],\"name\":\"Foo\",\"async\":true}0:[\"$\",\"div\",null,{\"children\":[[\"$\",\"h1\",null,{\"children\":\"Hello World\"}],[\"$\",\"$L1\",null,{}]]}]\n```\n[源码](https://github.com/facebook/react/blob/ef8bdbe/packages/react-client/src/ReactFlightClient.js#L504-L598)\n\n`$`表示React Element，`$L`表示Lazy Node，会讲其用React.lazy包装返回，$L1的1表示chunk id\n\n#### 哪些情况会触发re-render？如何防止？\n\n1. 状态变化\n2. 父组件re-render\n3. context变化\n4. hooks变化\n\n:::notes\nprops变化会导致re-render？其实不会，props向上追溯到state变更，是state变更导致父组件re-render从而引发子组件re-render，而不是由props变更引起，触发使用了React.memo\n:::\n\n如何避免父组件导致的re-render？\n使用React.memo。为啥这不是默认行为？想不re-render，检查props是否变更导致的消耗可能更大！\n\n在Dan的文章[在你写memo()之前](https://overreacted.io/zh-hans/before-you-memo/)，需要考虑两个方法将re-render限制在一个很小的范围：\n1. 状态下移，把可变的部分拆到平行组件中，如`\u003CChanged />\u003CExpensive />`\n2. 把内容上移，把可变的部分拆到父组件中，如`\u003CChanged>\u003CExpensive />\u003C/Changed>`，只要props.children没变化，就不会触发子组件re-render\n\n上面第二点也可以用其他props属性，如：`\u003CChanged content={\u003CExpensive />} />`，这种方法叫做「Components as props」\n\n什么时候应该用useMemo/useCallback？\n1. React.memo过的组件的props\n2. useEffect、useMemo、useCallback中非原始值的依赖应该用\n3. 重消耗的部分应该用，例如生成渲染树\n\n:::notes\nJavaScript有原始值与引用值的区分，由于props和hook deps都会做shadow equal，使用时尽量避免使用引用值，避免不了需用useMemo/useCallback包一下\n:::\n\n如何防止Context导致的re-render？\n1. memo context value\n2. 拆分data和API（getter、setter）\n3. 把数据拆小\n4. 使用context-selector，例如use-context-selector\n\n如何定位re-render？\n1. 借助react devtools的record功能，通过录制的方式排查\n2. 借助外部工具，如：why-did-render或tilg\n\n#### React合成事件？\n\nReact并不是将click事件绑定到了div的真实DOM上，而是在document处监听了所有的事件，当事件发生并且冒泡到document处的时候，React将事件内容封装并交由真正的处理函数运行。这样的方式不仅仅减少了内存的消耗，还能在组件挂在销毁时统一订阅和移除事件。\n\n如何阻止事件冒泡？\n除此之外，冒泡到document上的事件也不是原生的浏览器事件，而是由react自己实现的合成事件（SyntheticEvent）。因此如果不想要是事件冒泡的话应该调用event.preventDefault()方法，而不是调用event.stopProppagation()方法。\n\n实现合成事件的目的？\n- 合成事件首先抹平了浏览器之间的兼容问题，另外这是一个跨浏览器原生事件包装器，赋予了跨浏览器开发的能力；\n- 对于原生浏览器事件来说，浏览器会给监听器创建一个事件对象。如果你有很多的事件监听，那么就需要分配很多的事件对象，造成高额的内存分配问题。但是对于合成事件来说，有一个事件池专门来管理它们的创建和销毁，当事件需要被使用时，就会从池子中复用对象，事件回调结束后，就会销毁事件对象上的属性，从而便于下次复用事件对象。\n#### 什么是 React Fiber? **它解决了什么问题？**\n\nFiber 是 React v16 中新的 _reconciliation_ 引擎，或核心算法的重新实现。React Fiber 的目标是提高对动画，布局，手势，暂停，中止或者重用任务的能力及为不同类型的更新分配优先级，及新的并发原语等领域的适用性。\n\n_React Fiber_ 的目标是提高其在动画、布局和手势等领域的适用性。它的主要特性是 **incremental rendering**: 将渲染任务拆分为小的任务块并将任务分配到多个帧上的能力。\n\n核心思想：Fiber 也称协程或者纤程。它和线程并不一样，协程本身是没有并发或者并行能力的（需要配合线程），它只是一种控制流程的让出机制。让出 CPU 的执行权，让 CPU 能在这段时间执行其他的操作。渲染的过程可以被中断，可以将控制权交回浏览器，让位给高优先级的任务，浏览器空闲后再恢复渲染。\n\n#### 为什么 useState 要使用数组而不是对象?\n\n- 如果 useState 返回的是数组，那么使用者可以对数组中的元素命名，代码看起来也比较干净\n- 如果 useState 返回的是对象，在解构对象的时候必须要和 useState 内部实现返回的对象同名，想要使用多次的话，必须得设置别名才能使用返回值\n\n这里可以看到，返回对象的使用方式还是挺麻烦的，更何况实际项目中会使用的更频繁。\n\n总结：useState 返回的是 array 而不是 object 的原因就是为了降低使用的复杂度，返回数组的话可以直接根据顺序解构，而返回对象的话要想使用多次就需要定义别名了。\n\n#### 那为什么不要在循环、条件或嵌套函数中调用 Hook 呢？\n\n因为 Hooks 的设计是基于数组实现。在调用时按顺序加入数组中，如果使用循环、条件或嵌套函数很有可能导致数组取值错位，执行错误的 Hook。当然，实质上 React 的源码里不是数组，是链表。\n\nReact 16.x的三大新特性 Time Slicing、Suspense、 hooks\n- Time Slicing（解决CPU速度问题）使得在执行任务的期间可以随时暂停，跑去干别的事情，这个特性使得react能在性能极其差的机器跑时，仍然保持有良好的性能\n- Suspense （解决网络IO问题）和lazy配合，实现异步加载组件。 能暂停当前组件的渲染， 当完成某件事以后再继续渲染，解决从react出生到现在都存在的「异步副作用」的问题，而且解决得非的优雅，使用的是 T异步但是同步的写法，这是最好的解决异步问题的方式\n- 提供了一个内置函数componentDidCatch，当有错误发生时，可以友好地展示 fallback 组件; 可以捕捉到它的子元素（包括嵌套子元素）抛出的异常; 可以复用错误组件。\n\n#### Hooks更新机制？\n\n对于函数组件来说,其 fiber 上的 memorizedState 专门用来存储 hooks 链表,每一个 hook 对应链表中的每一个元素,最终与其他的 effect 链表形成环形链表。\n\n单个的 `effect` 对象包括以下几个属性,其中在代码中有如下定义:\n```ts\nconst effect: Effect = {  \n  tag,  \n  create,  \n  destroy,  \n  deps,  \n  // Circular  \n  next: (null: any),  \n};\n```\n- create: 传入 useEffect 函数的第一个参数,即回调函数;\n- destroy: 回调函数 return 的函数,在该 effect 销毁的时候执行;\n- deps: 依赖项;\n- next: 指向下一个 effect;\n- tag: effect 的类型,区分是 useEffect 还是 useLayoutEffect;\n\n#### 如何理解React hooks上的一些使用误区？\n\n[React Hooks 使用误区，驳官方文档](https://mp.weixin.qq.com/s/Yf4-5Zni3-heWjzM2KYAFQ)\n[React useEvent：砖家说的没问题](https://mp.weixin.qq.com/s/-6bQKIjH6WPcfuiCFtsjng)\n\n[RFC: useEvent by gaearon · Pull Request #220 · reactjs/rfcs · GitHub](https://github.com/reactjs/rfcs/pull/220)\n\n1. 使用useRef解决延迟调用的闭包问题\n2. useCallback需要和React.memo/`shouldComponentUpdate`配合使用，没事别用useCallback\n\n\n### 小程序\n\n#### 小程序跨端框架实现原理？\n\n以Remax为例，其通过react-reconciler实现小程序端的渲染器。\n小程序对代码屏蔽了DOM操作，代码运行在worker线程中，无法直接操作视图层的DOM。remax通过引入VNode，让React在reconciliation阶段不是改变DOM，而是更新VNode。在React更新完成之后，调用节点的toJSON方法，将VNode变为JSON对象，并作为小程序Page的data。\n\n在模板中通过该data渲染出页面：\n```wxml\n\u003Cblock a:for=\"{{root.children}}\" a:key=\"{{item.id}}\">\n  \u003Ctemplate is=\"{{'REMAX_TPL_' + item.type}}\" data=\"{{item: item}}\" />\n\u003C/block>\n\n\u003Ctemplate name=\"REMAX_TPL_view\">\n  \u003Cview class=\"{{item.props['className']}}\">\n    \u003Cblock a:for=\"{{item.children}}\" key=\"{{item.id}}\">\n      \u003Ctemplate is=\"{{'REMAX_TPL_' + item.type}}\" data=\"{{item: item}}\" />\n    \u003C/block>\n  \u003C/view>\n\u003C/template>\n\n\u003Ctemplate name=\"REMAX_TPL_text\">\n  \u003Ctext>\n    \u003Cblock a:for=\"{{item.children}}\" key=\"{{item.id}}\">\n      \u003Ctemplate is=\"{{'REMAX_TPL_' + item.type}}\" data=\"{{item: item}}\" />\n    \u003C/block>\n  \u003C/text>\n\u003C/template>\n\n\u003Ctemplate name=\"REMAX_TPL_plain-text\">\n  \u003Cblock>{{item.text}}\u003C/block>\n\u003C/template>\n```\n\n[在小程序中实现动态模板 - Remax 实现原理 - 知乎](https://zhuanlan.zhihu.com/p/91300119)\n\n#### 小程序跨端框架类型？\n\n[小程序动态渲染的探索与实践 - 掘金](https://juejin.cn/post/7143267326199070751)\n\n1. 静态编译型（编译时）\n   代表框架：uniapp、taro1/2、MorJS\n   实现原理：在编译过程将Vue/React的DSL语法，利用babel工具通过AST转译为小程序模板语法，使用Vue管理数据，小程序管理事件。\n   优点：性能好\n   缺点：能力受限，新语法必须框架层面支持\n2. 原生增强型\n   代表框架：MPX\n   实现原理：提供一系列增强的模板指令和语法，只需要转换时对指定语法进行处理\n   优点：运行时性能极佳，\n   缺点：需要整套学习小程序相关功能，有一定的迁移成本\n3. 动态渲染型\n   代表框架：Rax、Remax、Taro3、Kbone\n   实现原理：利用生成的VNode作为Page的data，并使用小程序渲染模板递归渲染出页面。\n   优点：重运行时，可直接使用框架语法，学习成本低；尽量模拟Web相关API与DOM，大部分场景可复用Web端代码\n   缺点：代码体积会较大；性能较差\n\n## HTML\n\n### `src`和`href`的区别？\n\n首先需要了解一个概念：替换型元素。常见的替换型元素有：script、img、video、audio、iframe\n\n:::tip\n替换型元素是把文件内容引入，替换掉自身位置的一类标签🏷️。\n:::\n\n**凡是替换型元素，都是用src属性引用文件，链接型元素使用href属性。**\n\n这也就解释了，为何style标签不能使用src，只能使用link+href引入样式的问题了🙋\n\n### DTD是什么？\n\nDTD全称是Document Type Definition，也就是文档类型定义。\n\n```html\n\u003C!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\"\n\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">\n```\n\nSGML（Standard generalized markup language）用DTD定义每一种文档类型，HTML属于SGML，在HTML5之前，HTML都是使用符合SGML规定的DTD。但这些复杂的DTD写法并没有实际作用（浏览器并不会用SGML引擎解析它们），因此到了HTML5干脆放弃了SGML子集的坚持，规定了简单易记的DTD：\n```html\n\u003C!DOCTYPE html>\n```\n\n### 如何实现给图片设置部分区域可点击？\n\n`usemap`属性+`\u003Cmap>`\n[HTMLImageElement: useMap property - Web APIs | MDN](https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/useMap)\n\n### 什么是OGP？有何作用？\n\nOGP全称Open Graph protocol，Facebook在2010年推出的一组网页元信息标记协议，是一组为社交分享而生的Meta标签。\n\n如果网页采用OG协议，分享结果会在支持OG协议的网站进行结构化展示，这样站点在被链接分享时会有更丰富的内容展示。\n![image.png](https://raw.githubusercontent.com/fw6/assets/main/toy_docs/20230802170307.png)\n\n设置方法很简单，只需要在header内添加几个meta标签即可：\n```html\n\u003Cmeta property=\"og:title\" content=\"显示的标题\" />\n\u003Cmeta property=\"og:type\" content=\"对象类型\" />\n\u003Cmeta property=\"og:url\" content=\"分享的url地址\" />\n\u003Cmeta property=\"og:image\" content=\"缩略图地址\" />\n\u003Cmeta property=\"og:description\" content=\"显示的描述信息\" />\n\u003Cmeta property=\"og:site_name\" content=\"网站名称\" />\n```\n\n更多的属性设置，参考官网：[The Open Graph protocol](https://ogp.me/)\n\n以OG官网为例，其设置如下：\n![image.png](https://raw.githubusercontent.com/fw6/assets/main/toy_docs/20230802170533.png)\n\n在 facebook，twitter 等网站，有分享卡片检测工具，可利用这些工具，检测分享设置是否成功。\n- twitter 分享检测: https://cards-dev.twitter.com/validator\n- facebook 分享检测: https://developers.facebook.com/tools/debug/sharing/\n- linkedin 分享检测: https://www.linkedin.com/post-inspector/inspect/\n\n## CSS\n\n### 如何通过flex实现两个子元素左上、右下布局？\n使用align-self，定义子项的交叉轴对齐方式\n\n[Playground | MDN](https://developer.mozilla.org/zh-CN/play?id=AM3e4EOW8XyYL6zHtlCIqCwQJ3bCMUF0G187st8dHHehMMAbo3SZdfNgtS%2FEMhY%2F2ZlhD2u874rEFaJO)\n\n\n## Module bundlers\n\n### Webpack loader和plugin的区别？\n\n1. loader在打包文件之前；plugin贯穿整个编译周期\n2. loader是个文件转换器；plugin则会在webpack各个生命周期处理输出结果，做各种事情\n\n### Webpack中module、chunk、bundle、vendor区别是啥？\n\n1. 项目源码中所有资源都属于module\n2. 在bundling过程中产生的代码成为chunk，chunk有不同类型（entry、child）\n   产生chunk的途径：\n   1. entry入口\n   2. 异步加载模块\n   3. 代码分割\n3. bundle包含了加载和编译的最终源文件\n4. vendor是指将三方库打包提取出一个单独的bundle文件\n\n\n\n\n### Webpack中魔法注释webpackPrefetch和webpackPreload有啥区别？\n\n`webpackPrefetch` 会在浏览器闲置下载文件，`webpackPreload` 会在父 chunk 加载时并行下载文件。\n\n### Webpack生命周期有哪些？\n\nWebpack工作流程最核心的模块Compiler、Compilation\n\nCompiler构建器分为3个阶段：\n1. 初始化阶段\n    1. environment\n       创建完Compiler实例，执行插件apply方法前触发\n    2. afterEnvironment\n    3. entryOption\n    4. afterPlugins\n    5. afterResolvers\n       解析resolver配置后触发\n2. 构建过程阶段\n    1. normalModuleFactory\n    2. contextModuleFactory\n    3. beforeRun\n    4. run\n    5. beforeCompile\n    6. compile\n    7. thisCompilation\n    8. make\n       会执行模块编译到优化的完整过程\n3. 产物生成阶段\n    1. shouldEmit、emit、assetEmitted、afterEmit\n       在构建完成后，处理产物的过程中触发\n    2. failed、done\n       达到最终结果状态时触发\n\n### Webpack优化手段有哪些？\n\n- [SEE Conf: Umi 4 设计思路文字稿](https://mp.weixin.qq.com/s?__biz=MjM5NDgyODI4MQ==&mid=2247484533&idx=1&sn=9b15a67b88ebc95476fce1798eb49146&chksm=a6809ee391f717f5e2c2242ed313ecccc49897b101602e3358085c6a6b2393d54424fc52eb46&scene=21#wechat_redirect)\n- [Webpack构建速度优化 - gogo2027 - 博客园](https://www.cnblogs.com/gogo2027/p/16832401.html)\n\n![image.png](https://raw.githubusercontent.com/fw6/assets/main/toy_docs/20230816143135.png)\n\n\n优化3法宝：缓存、延迟处理、Native code\n\n大致分为3个方向：\n1. 减少执行编译的模块\n2. 提升单个模块的编译速度\n3. 并行构建提升整体效率\n\n基于时间的分析工具：`speed-measure-webpack-plugin`\n基于产物内容的分析工具：`webpack-bundle-analyzer`\n\n减少编译的模块，如：\n1. 按需引入工具类包\n2. 配置Externals。从输出中排除依赖，替换为CDN\n3. DllPlugin。将不频繁变动的包提前打包好，后续再打包会直接跳过\n4. IgnorePlugin排除不需要的文件，如moment的国际化文件\n\n提升单个模块的构建速度：\n1. include/exclude\n2. noParse\n3. SourceMap\n4. TypeScript编译优化。如果使用ts-loader，忽略类型检查；\n5. Resolve。指定构建时查找模块文件的规则\n\n并行构建提升性能：\n1. HappyPack\n2. thread-loader。在特定loader上开启多进程\n3. parallel-webpack。如果有多个子配置可使用并发构建，串行执行\n\n打包阶段提效：\n- TerserWebpackPlugin。缓存和并发\n- MiniCssExtractPlugin。异步加载、无重复编译\n\n其他：\n1. 代码分割。多入口打包、动态加载、分包加载、提取公共模块\n2. Tree Shaking。`optimization.usedExports: true`（注意babel-loader导致的tree shaking失效，被打包为了commonjs。8.x修复或preset-env module设置为false）\n3. Scope Hoisting作用域提升。合并多个模块到一个函数中\n4. sideEffect 模块标记有无副作用，利于摇树优化。\n\n缓存：\n1. babel-loader。cacheDirectory\n2. cache-loader。多其他loader生效\n多使用splitChunks优化缓存命中率\n\n### Webpack如何实现热更新？\n\n[Hot Module Replacement | webpack](https://webpack.js.org/concepts/hot-module-replacement/)\n\n先看下HMR的API和使用场景：\n```js\n// 接收自己更新，更新后重复执行自己，不往上冒泡\nmodule.hot.accept();\n\n// 接收依赖更新，更新后执行回调函数，不往上冒泡\nmodule.hot.accept(['dep1'], () => {\n    console.log('dep1 changed');\n});\n\n// 让自己失效并冒泡。通常在accept之后遇到一些场景又希望自己失效\nmodule.invalidate();\n\n// 标记一些依赖为不可更新，这些以来更新会触发页面reload\nmodule.hot.decline(['dep1']);\n// 同上，标记自己不可更新\nmodule.hot.decline();\n\n// 设置或移除当前模块被自动替换时执行的回调函数\nmodule.hot.dispose(fn);\nmodule.hot.removeDisposeHandler(fn);\n```\n\n1. 每个模块做这些事：\n   1. 有parent和children属性，用于跟踪父子关系\n   2. 给 hot API\n   3. 给两个方法check和apply\n2. 获取更新\n   先check再apply。\n   check就是检查更新并下载更新的module和chunk（发请求获取最新manifest.json）；\n   apply会：1）将所有模块标记为invalid；2）每个模块分别检查他自己和父模块是否有accept handler，没有则刷新，有则冒泡到最先遇到的accept handler模块为止；3）dispose和unload每个invalidate模块；4）执行所有accept handler\n3. 主要逻辑在Runtime，Compiler负责提供更新后的module和chunk列表\n![image.png](https://raw.githubusercontent.com/fw6/assets/main/toy_docs/20230807111736.png)\n\n\n### Webpack的运行时如何实现？\n\n构建工具通常需要搭配一套Runtime把构建产物跑起来。\n这个Runtime可以很简单，比如Rollup、ESBuild，也可以很复杂，比如Webpack。之所以复杂，因为：\n1. 牵连了很多功能，如Code Splitting、HMR、MF、CSS加载、等\n2. 需要和编译时搭配使用，比如Webpack的PublicPaht就来自Node环境的配置项\n3. Webpack还在Runtime引入了插件机制，通过插件挂载的方式支持Code Splitting、HMR、MF等\n4. 为让代码体积变小，加了很多简写\n\n运行时如何实现？基础流程如下：\n1. 模块注册和执行\n   1. 定义一个模块Map\n   2. 实现个假的require方法\n   3. require入口模块\n   4. 从入口开始挂载模块并执行\n2. Chunk的异步加载\n   Chunk的异步加载基于import()语法做拆分。需要编译时配合：1. 转换import('xx')为用require.ensure()的加载方式，2. 实现chunk的拆分和合并。\n   require.ensure通过script的方式加载对应的JavaScript文件，并通过jsonp的方式把新增的chunk和module注册进来。\n3. HMR\n\n```diff\n+ './a': function (module, exports, require) {\nconst a = require('./a');\nmodule.exports = { a, b: 1 };\n+ }\n```\n\n```diff\n- import('xx')\n+ require.ensure(id).then(require.bind(require, id))\n```\n\n\n### Webpack的tree shaking为何不太行？\n\nWebpack的实现，是先标记，然后交给Terser或UglifyJS等压缩插件处理，所以换一种压缩器就不行了。\n标记分3种：used export，unused harmony export、harmony export。第二种会被shaking掉。\n\n在依赖图中排除没用到的。\nrollup与之相反，只打包用到的，故tree shaking效率更高\n\n### Vite为啥比Webpack快？\n\n1. vite是个bundless打包工具，基于浏览器对ESM的原生支持实现按需加载\n2. vite启动服务器按需加载，只在请求到模块才会开始编译\n3. vite使用esbuild预构建依赖（将非ESM包转为ESM形式）并做了缓存，\n\n### Webpack和Vite的区别？\n\n- webpack会先打包，然后启动开发服务器，请求服务器时直接给予打包结果。\n- 而vite是直接启动开发服务器，请求哪个模块再对该模块进行实时编译。\n    由于现代浏览器本身就支持ES Module，会自动向依赖的Module发出请求。vite充分利用这一点，将开发环境下的模块文件，就作为浏览器要执行的文件，而不是像webpack那样进行打包合并。\n    由于vite在启动的时候不需要打包，也就意味着不需要分析模块的依赖、不需要编译，因此启动速度非常快。当浏览器请求某个模块时，再根据需要对模块内容进行编译。这种按需动态编译的方式，极大的缩减了编译时间，项目越复杂、模块越多，vite的优势越明显。\n- 在HMR方面，当改动了一个模块后，仅需让浏览器重新请求该模块即可，不像webpack那样需要把该模块的相关依赖模块全部编译一次，效率更高。\n- 当需要打包到生产环境时，vite使用传统的rollup进行打包，因此，vite的主要优势在开发阶段。另外，由于vite利用的是ES Module，因此在代码中不可以使用CommonJS\n\n### 如何做性能优化的？\n\n[How we made Vite 4.3 faaaaster 🚀 | sun0day's blog - lost in code](https://sun0day.github.io/blog/vite/why-vite4_3-is-faster.html)\n\n1. 不用resolve库，改为自行实现（更简单、严格、准确，利用缓存）\n2. 用fs.realpathSync.native替代fs.realpathFileSync，后者慢70倍\n3. 阻塞式改为非阻塞式，例如：fs.readFileSync改为fs.readFile，这样不会阻塞主线程\n4. HMR热更增加缓存。\n5. 并行，比如使用Promise.all替代for循环\n6. \\=\\=\\=相比startsWith和endsWith快20%到60%\n7. 避免重复创建正则表达式\n\n### 如何理解依赖预打包？\n\n啥是依赖预打包？就是把依赖提前打包好放在npm包里，然后在package.json中删除响应的依赖，使用时直接引打包后的文件即可。\n\n比如npm包依赖了a，a又依赖了b，那正常的结构就是：\n```\nnode_modules\n    a\n        node_modules\n            b\nindex.ts\npackage.json\n```\n\n经过依赖预打包，变成了：\n```\ncompiled(node_modules > .vite)\n    a.js\nindex.ts\npackage.json\n```\n\n好处有哪些？\n1. 锁定依赖，对用户和项目来说更安全，不会出现升级导致的意外情况\n2. 速度更快，少了很多resolve机制和文件IO，理论上更快\n3. 让peerDependencies的警告消失\n4. 可复用1个库的不同版本\n\n缺点有哪些？\n1. 不能及时享受到三方库的bugfix更新，需要手动升级，通常有滞后\n2. 依赖版本滞后带来的版本不一致问题\n3. 潜在的尺寸变大和依赖重复\n\n使用场景：\n1. 框架和工具可以用，功能原子化的npm包不应该用（没意义）\n2. node环境可以用，browser环境的包不应该用（预打包后没法tree shaking）\n\n如何实现？\n1. 基于[ncc](https://www.npmjs.com/package/@vercel/ncc)\n2. 把源码文件和依赖一起打\n\n### 如何理解Vite的依赖预构建？\n\n一个项目中存在非常多的模块，并非所有模块都会被预构建，只有裸模块（bare module）会执行依赖预构建。\n\n什么是裸模块？\n```js\n// 裸模块\nimport xxx from 'vue';\nimport xxx from 'vue/xxx';\n\n// 非裸模块\nimport yyy from './foo';\nimport yyy from '/foo';\n```\n简单划分为：名称访问的是裸模块，路径访问的不是裸模块\n\nvite会判断模块的实际路径，是否在node_modules中：\n- 实际路径在 node_modules 的模块会被预构建，这是第三方模块\n- 实际路径不在 node_modules 的模块，证明该模块是通过文件链接，链接到 node_modules 内的（monorepo 的实现方式），是开发者自己写的代码，不执行预构建\n\nvite先进行依赖扫描，确定哪些模块需要进行依赖预构建。\n\nVite dev的流程：\n创建 Http Server，绑中间件，初始化 Module Graph（依赖图谱），初始化 pluginContainer（插件体系），做 dep optimizier（依赖预编译），就搞定了。然后等着用户访问，url 过来之后做按需 transform（代码主要在这）。dev 还支持 middlewareMode，顾名思义，就是不启动 server，把 vite 作为中间件使用。\n\nbuild 的流程是读取配置，初始化 pluginContainer，挂载大量插件（20+），组装好 rollup 配置，然后跑 rollup。支持多个进行并行执行，应该是 ssr + csr 的场景。支持 ssr 打包。支持 lib 打包。支持 watch 模式。\n\noptimizer，这是 Vite 快的秘密武器之一。optimizer 的流程是找到入口，通过 esbuild + esbuildScanPlugin 打包入口来记录可能用到的依赖，再跑 esbuild + esbuildDepPlugin 做依赖预编译，入口是拍平的每个依赖。\n\n\n\n\n### 什么是幽灵依赖？👻\n\n当一个项目使用了一个没有在package.json中定义的包时，就会出现幽灵依赖。\n\n### Rollup如何实现的？\n\n实现根据输出输出分为两部分：\n```js\n// 1. 处理input\nconst bundle = await rollup(inputOptions);\n// 2. output输出\nawait Promise.all(outputOptions.map(bundle.write));\n```\n\ninput主体逻辑：\n```ts\n// 生成依赖图谱\nthis.generateModuleGraph();\n// 给模块排序，同时标记statement到模块的引用\nthis.sortModules();\n// tree shaking ?\nthis.includeStatements();\n```\n\n生成依赖图谱通过src/ModuleLoader.ts添加入口模块，然后递归分析和添加依赖。此时会生成大量Module实例，Module通常是文件，每个Module会做transform并返回ast等信息。\n\noutput主体逻辑在src/Bundle.ts，代码是`await (new Bundle()).generate()`。这里会先为dynamic import的模块和入口生成chunks，然后生成物理文件。\n\n插件如何实现？\n分为内部和外部。插件是一个包含了一个或多个属性的对象，比如`{name, resolveId, load}`，内部实现是在src/utils/PluginDraver.ts\n\n内部调用方式如：`await graph.pluginDriver.hookParallel('buildStart', [inputOptions])`\n\nRollup 提供了 hookFirst、hookFirstSync、hookParallel、hookReduceArg0、hookReduceArg0Sync、hookReduceValue、hookReduceValueSync、hookSeq 共 8 种 Hook 调用机制，有同步和异步，有顺序和并行，等。\nRollup 执行 hook 执行会获取所有包含这个 hook 的插件列表，同时执行 pre 和 post 两种排序方式。\n\n\n### 如何实现个简单的Bundler？\n\n[Building a JavaScript Bundler](https://cpojer.net/posts/building-a-javascript-bundler)\n\n1. resolve config，解析用户配置，确定入口文件\n2. build，生成模块依赖图谱\n3. generate，根据依赖图谱生成代码\n\nbuild：从入口开始，做load、parse、transform、analyze_deps和resolve，然后把依赖添加到队列中继续跑，直到分析完所有文件为止。\n\ngenerate：基于build生成的依赖图谱生成最终代码，包含runtime处理、module转code、以及封装成浏览器可以跑的代码，以及代码分割、tree shaking等。最后通过runtime将所有内容拼接起来，针对Node和Browser会有不同runtime\n\n### 一个基础的Bundler需要包含哪些内容？\n\n[Overview | Tooling.Report](https://bundlers.tooling.report/)\n\n源码转义：\n- 支持TypeScript\n- 支持JavaScript高级语法\n- 压缩（包含模块、语句合并）\n- Tree Shaking\n- 常量标志（比如process.env.NODE_ENV）\n- 图片压缩（基于imagemin）\n- SVG压缩（基于svgo）\n\n输出格式：\n- CommonJS\n- ESM\n\n非JavaScript资源：\n1. CSS（包括CSS Modules、inline引入、CSS Extract、以URL方式引入）\n2. HTML（包括inline载入脚本，外链载入脚本、Preload图片和字体等、Preload依赖脚本）\n3. 依赖（产出CSS依赖的三方文件、去重）\n4. 图片（包括data-url和url两种）\n5. Service Worker\n6. Binary（包括Array buffer、url）\n7. 自定义类型\n\n引入模块：\n- CommonJS\n- ESM\n- node_modules依赖\n\nHashing\n\nCode Splitting：\n- 动态引入\n- 单页面多入口文件（共用runtimeChunk）\n- 多页面多入口文件\n- Chunk共享\n- Worker和非Worker共享\n- Worker间共享\n\n其他：\n- resolve（包含alias、externals、packages.json exports等）\n- Source Map\n- publicPath\n- Targets（modern产物、legacy模式）\n- 补丁方案\n\n\n## 工程化\n\n### 如何设计一个插件体系？\n\n[前端插件机制剖析及业界案例分析](https://mp.weixin.qq.com/s/ZYcmMvk8ccYIsNDEkX1W0Q)\n[前端领域的插件式设计](https://mp.weixin.qq.com/s/_Qy8wScgq86vLBwNU-tTfw)\n\nCore-Plugin架构组成\n- Core：基础功能，提供插件运行的环境，管理插件的注册和卸载（可插拔）以及运行，也即管理插件的生命周期\n- Plugin API：插件运行的接口，由Core抽象出来的接口（颗粒度尽可能小）\n- Plugin：每个插件都是一个独立的功能模块\n好处：\n1. 提高扩展性\n2. 减少因功能改变引起的项目迭代，需要扩展的功能可单独发包\n3. 充分利用开发者/开源的力量，激发更多想法","src/content/blog/200-Learning/210-Programing/随便整理的前端面试常考点.md","08540c84918f77ef",{"html":1921,"metadata":1922},"\u003Ch2 id=\"toc\">TOC\u003C/h2>\n\u003Cul>\n\u003Cli>\u003Ca href=\"#%E6%B5%8F%E8%A7%88%E5%99%A8\">浏览器\u003C/a>\n\u003Cul>\n\u003Cli>\u003Ca href=\"#%E8%81%8A%E8%81%8A%E4%BD%A0%E4%BA%86%E8%A7%A3%E7%9A%84w3c%E8%A7%84%E8%8C%83\">聊聊你了解的W3C规范？\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#dom%E6%A0%91%E6%80%8E%E4%B9%88%E7%94%9F%E6%88%90%E7%9A%84\">DOM树怎么生成的?\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#script%E6%A0%87%E7%AD%BE%E4%B8%ADasync%E5%92%8Cdefer%E5%B1%9E%E6%80%A7%E7%9A%84%E5%8C%BA%E5%88%AB\">script标签中\u003Ccode>async\u003C/code>和\u003Ccode>defer\u003C/code>属性的区别？\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#%E8%AE%B2%E4%B8%8B%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E6%97%B6%E7%9A%84%E5%90%88%E6%88%90%E5%B1%82\">讲下浏览器渲染时的合成层？\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#%E5%9B%9E%E6%B5%81%E5%92%8C%E9%87%8D%E7%BB%98%E7%9A%84%E5%8C%BA%E5%88%AB\">回流和重绘的区别？\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#%E5%85%B3%E4%BA%8E%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%AD%98%E5%82%A8\">关于客户端存储？\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#%E4%BB%80%E4%B9%88%E6%98%AFprocess-per-site-instance%E7%AD%96%E7%95%A5\">什么是\u003Ccode>process-per-site-instance\u003C/code>策略？\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#%E8%83%BD%E8%AF%B4%E5%9C%A8%E4%BB%80%E4%B9%88%E6%98%AF%E6%A0%B8%E5%BF%83%E7%BD%91%E9%A1%B5%E6%8C%87%E6%A0%87core-web-vitals%E5%90%97\">能说在什么是核心网页指标Core Web Vitals吗？\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#jsbridge%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86\">JSBridge实现原理？\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3%E9%A6%96%E9%A1%B5%E5%8A%A0%E8%BD%BD%E6%85%A2%E7%9A%84%E9%97%AE%E9%A2%98\">如何解决首页加载慢的问题？\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#%E5%85%B3%E9%94%AE%E6%B8%B2%E6%9F%93%E8%B7%AF%E5%BE%84%E6%98%AF%E5%95%A5%E5%A6%82%E4%BD%95%E4%BC%98%E5%8C%96\">关键渲染路径是啥？如何优化？\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#%E5%A6%82%E4%BD%95%E4%BC%98%E5%8C%96ttfb\">如何优化TTFB？\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#%E5%A6%82%E4%BD%95%E6%B5%8B%E9%87%8F%E6%80%A7%E8%83%BD\">如何测量性能？\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#%E6%87%92%E5%8A%A0%E8%BD%BD%E6%9C%89%E5%93%AA%E4%BA%9B%E6%89%8B%E6%AE%B5\">懒加载有哪些手段？\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#%E6%99%AE%E9%80%9Ascript%E4%B8%8Escript-typemodule%E6%9C%89%E5%93%AA%E4%BA%9B%E5%8C%BA%E5%88%AB\">普通\u003Ccode>&#x3C;script>\u003C/code>与\u003Ccode>&#x3C;script type=\"module\">\u003C/code>有哪些区别？\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#html%E5%B1%9E%E6%80%A7relpreloadrelpreloadmodulerelprefetchrelprerenderrelsubresources%E7%AD%89%E6%9C%89%E4%BD%95%E5%8C%BA%E5%88%AB\">HTML属性\u003Ccode>rel=\"preload\"\u003C/code>、\u003Ccode>rel=\"preloadmodule\"\u003C/code>、\u003Ccode>rel=\"prefetch\"\u003C/code>、\u003Ccode>rel=\"prerender\"\u003C/code>、\u003Ccode>rel=\"subresources\"\u003C/code>等有何区别？\u003C/a>\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\u003Ca href=\"#nodejs\">NodeJS\u003C/a>\n\u003Cul>\n\u003Cli>\u003Ca href=\"#%E5%A6%82%E4%BD%95%E5%81%9Anodejs%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96\">如何做NodeJS性能优化？\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#npm-install-%E5%92%8C-npm-ci%E6%9C%89%E5%95%A5%E5%8C%BA%E5%88%AB\">npm install 和 npm ci有啥区别？\u003C/a>\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\u003Ca href=\"#http\">HTTP\u003C/a>\n\u003Cul>\n\u003Cli>\u003Ca href=\"#%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3cdn\">如何理解CDN？\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#dns%E8%A7%A3%E6%9E%90%E6%B5%81%E7%A8%8B\">DNS解析流程？\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#http20%E6%9C%89%E5%93%AA%E4%BA%9B%E4%BC%98%E5%8C%96http3%E4%BA%86%E8%A7%A3%E5%90%97\">HTTP2.0有哪些优化？HTTP3了解吗？\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#https-%E4%B8%8Ehttp%E7%9A%84%E5%8C%BA%E5%88%AB\">HTTPS 与HTTP的区别？\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#https%E5%A6%82%E4%BD%95%E4%BF%9D%E8%AF%81%E5%AE%89%E5%85%A8\">HTTPS如何保证安全？\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#http%E7%BC%93%E5%AD%98\">HTTP缓存？\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#cache-control%E4%B8%ADno-cache%E5%92%8Cno-store%E6%9C%89%E4%BD%95%E5%8C%BA%E5%88%AB\">Cache-Control中no-cache和no-store有何区别？\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#csrf%E6%98%AF%E5%95%A5%E5%A6%82%E4%BD%95%E9%98%B2%E8%8C%83\">CSRF是啥？如何防范？\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#xss%E6%98%AF%E5%95%A5%E5%A6%82%E4%BD%95%E9%98%B2%E8%8C%83\">XSS是啥？如何防范？\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#cookie%E6%9C%89%E4%BD%95%E4%BD%9C%E7%94%A8%E5%A6%82%E4%BD%95%E7%A6%81%E6%AD%A2%E8%AE%BF%E9%97%AE\">cookie有何作用？如何禁止访问？\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#%E8%83%BD%E4%BB%8B%E7%BB%8D%E4%B8%8Bhttp-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6cors%E5%90%97\">能介绍下HTTP 访问控制（CORS）吗？\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#html%E5%B1%9E%E6%80%A7crossorigin%E6%9C%89%E5%95%A5%E7%94%A8\">HTML属性\u003Ccode>crossorigin\u003C/code>有啥用？\u003C/a>\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\u003Ca href=\"#javascript\">JavaScript\u003C/a>\n\u003Cul>\n\u003Cli>\u003Ca href=\"#%E8%AF%B4%E8%AF%B4%E4%BD%A0%E7%9F%A5%E9%81%93%E7%9A%84javascript%E8%A7%A3%E9%87%8A%E5%99%A8\">说说你知道的JavaScript解释器？\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#javascript%E4%B8%BA%E5%95%A5%E8%A2%AB%E8%AE%BE%E8%AE%A1%E4%B8%BA%E5%8D%95%E7%BA%BF%E7%A8%8B\">JavaScript为啥被设计为单线程？\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#%E8%AF%B4%E4%B8%8B%E5%BE%AE%E4%BB%BB%E5%8A%A1%E5%92%8C%E5%AE%8F%E4%BB%BB%E5%8A%A1\">说下微任务和宏任务？\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#%E8%81%8A%E8%81%8A%E4%BD%A0%E4%BA%86%E8%A7%A3%E7%9A%84v8%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6\">聊聊你了解的V8垃圾回收\u003C/a>\n\u003Cul>\n\u003Cli>\u003Ca href=\"#%E8%B0%83%E7%94%A8%E6%A0%88%E7%9A%84%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6\">调用栈的垃圾回收\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#%E5%A0%86%E4%B8%AD%E7%9A%84%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6\">堆中的垃圾回收\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#%E6%96%B0%E7%94%9F%E5%8C%BA%E5%A6%82%E4%BD%95%E6%99%8B%E5%8D%87%E4%B8%BA%E8%80%81%E7%94%9F%E5%8C%BA\">新生区如何晋升为老生区？\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#%E5%85%A8%E5%81%9C%E9%A1%BF\">全停顿\u003C/a>\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\u003Ca href=\"#%E8%AF%B4%E4%B8%8B%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87%E9%97%AD%E5%8C%85\">说下执行上下文、闭包？\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E6%B7%B1%E6%8B%B7%E8%B4%9D\">实现一个深拷贝\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#javascript%E8%A3%85%E7%AE%B1%E8%BD%AC%E6%8D%A2%E6%8B%86%E7%AE%B1%E8%BD%AC%E6%8D%A2\">JavaScript装箱转换、拆箱转换？\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#%E4%BD%BF%E7%94%A8objectprototypetostringcallobj%E5%88%A4%E6%96%AD%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%8E%9F%E7%90%86%E6%98%AF%E5%95%A5\">使用\u003Ccode>Object.prototype.toString.call(obj)\u003C/code>判断类型的原理是啥？\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#%E8%83%BD%E8%AF%B4%E4%B8%8B%E5%89%8D%E7%AB%AF%E7%9A%84%E6%A8%A1%E5%9D%97%E7%B3%BB%E7%BB%9F%E5%90%97\">能说下前端的模块系统吗？\u003C/a>\n\u003Cul>\n\u003Cli>\u003Ca href=\"#amd%E4%B8%8Ecmd%E7%9A%84%E5%8C%BA%E5%88%AB\">AMD与CMD的区别？\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#commonjs%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86\">CommonJS的实现原理？\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#es-module%E4%B8%8Ecommonjs%E7%9A%84%E5%B7%AE%E5%BC%82\">ES Module与CommonJS的差异？\u003C/a>\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\u003Ca href=\"#objectis%E5%92%8C%E6%9C%89%E5%95%A5%E5%8C%BA%E5%88%AB\">\u003Ccode>Object.is\u003C/code>和===有啥区别？\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#01--02--03\">0.1 + 0.2 === 0.3?\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#new-stringfoo%E5%92%8Cfoo%E7%9B%B8%E7%AD%89%E5%90%97\">\u003Ccode>new String(\"foo\")\u003C/code>和\u003Ccode>\"foo\"\u003C/code>相等吗？\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#js-%E6%95%B0%E7%BB%84%E4%B8%BA%E4%BB%80%E4%B9%88%E6%B2%A1%E6%9C%89%E8%B4%9F%E6%95%B0%E7%B4%A2%E5%BC%95\">JS 数组为什么没有负数索引？\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#typeof-null--object-\">typeof null === ‘object’ ?\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#const%E6%80%8E%E4%B9%88%E9%98%BB%E6%AD%A2%E9%9D%9E%E5%8E%9F%E5%A7%8B%E5%80%BC%E7%9A%84%E9%87%8D%E6%96%B0%E8%B5%8B%E5%80%BC\">\u003Ccode>const\u003C/code>怎么阻止非原始值的重新赋值？\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#forin-forof%E5%8C%BA%E5%88%AB-%E8%BF%AD%E4%BB%A3%E5%99%A8%E5%8D%8F%E8%AE%AE%E4%B8%8E%E5%8F%AF%E8%BF%AD%E4%BB%A3%E5%8D%8F%E8%AE%AE%E5%8C%BA%E5%88%AB%E5%86%85%E7%BD%AE%E5%8F%AF%E8%BF%AD%E4%BB%A3%E5%AF%B9%E8%B1%A1%E6%9C%89%E5%93%AA%E4%BA%9B\">\u003Ccode>for...in\u003C/code>、 \u003Ccode>for...of\u003C/code>区别？ 迭代器协议与可迭代协议区别？内置可迭代对象有哪些？\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#promisesa%E8%A7%84%E8%8C%83\">Promises/A+规范？\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#%E6%89%8B%E5%86%99promise\">手写Promise\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#%E5%AE%9E%E7%8E%B0new\">实现new\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#%E5%AE%9E%E7%8E%B0instanceof\">实现instanceof\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#%E5%AE%9E%E7%8E%B0eventemitter\">实现EventEmitter\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#%E5%AE%9E%E7%8E%B0callapplybind\">实现call/apply/bind\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#%E5%AE%9E%E7%8E%B0%E6%9F%AF%E9%87%8C%E5%8C%96%E5%87%BD%E6%95%B0\">实现柯里化函数\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#%E5%AE%9E%E7%8E%B0%E7%B1%BB%E4%BC%BClodash%E7%9A%84get%E6%96%B9%E6%B3%95\">实现类似lodash的get方法\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#typescript%E4%B8%ADtype%E5%92%8Cinterface%E5%8C%BA%E5%88%AB%E5%9C%A8%E5%93%AA%E5%A6%82%E4%BD%95%E6%8A%89%E6%8B%A9\">TypeScript中type和interface区别在哪？如何抉择？\u003C/a>\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\u003Ca href=\"#web%E6%A1%86%E6%9E%B6\">Web框架\u003C/a>\n\u003Cul>\n\u003Cli>\u003Ca href=\"#%E8%A7%A3%E9%87%8A%E4%B8%8Bcsrssrssgisrrsc\">解释下CSR、SSR、SSG、ISR、RSC？\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#diff-dom\">Diff DOM\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#vue\">Vue\u003C/a>\n\u003Cul>\n\u003Cli>\u003Ca href=\"#%E8%B0%88%E8%B0%88%E4%BD%A0%E5%AF%B9mvvm%E7%9A%84%E7%90%86%E8%A7%A3\">谈谈你对MVVM的理解？\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#vue%E7%9A%84%E5%93%8D%E5%BA%94%E5%BC%8F%E7%B3%BB%E7%BB%9F%E5%A6%82%E4%BD%95%E5%88%9B%E5%BB%BA%E7%9A%84\">Vue的响应式系统如何创建的？\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#vue%E4%B8%BA%E4%BD%95%E8%B7%9F%E6%8E%A8%E8%8D%90%E4%BD%BF%E7%94%A8%E6%A8%A1%E6%9D%BF%E8%80%8C%E9%9D%9E%E6%B8%B2%E6%9F%93%E5%87%BD%E6%95%B0\">Vue为何跟推荐使用模板而非渲染函数？\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#vue3%E7%BB%84%E5%90%88%E5%BC%8Fapi%E7%9A%84%E4%BC%98%E5%8A%BF%E6%9C%89%E5%93%AA%E4%BA%9B\">Vue3组合式API的优势有哪些？\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#vue3%E7%9A%84%E6%B8%B2%E6%9F%93%E6%9C%BA%E5%88%B6\">Vue3的渲染机制？\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#vue%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F\">Vue的生命周期？\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#vue2%E5%92%8Cvue3-diff%E7%AE%97%E6%B3%95%E5%88%86%E5%88%AB%E8%AF%B4%E4%B8%80%E4%B8%8B\">Vue2和Vue3 Diff算法分别说一下？\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#%E8%A7%A3%E9%87%8A%E4%B8%80%E4%B8%8B-vue-router-%E7%9A%84%E5%AE%8C%E6%95%B4%E7%9A%84%E5%AF%BC%E8%88%AA%E8%A7%A3%E6%9E%90%E6%B5%81%E7%A8%8B%E6%98%AF%E4%BB%80%E4%B9%88\">解释一下 vue-router 的完整的导航解析流程是什么？\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#vue%E5%86%85%E7%BD%AE%E7%BB%84%E4%BB%B6keepalive-%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86\">Vue内置组件\u003Ccode>KeepAlive\u003C/code> 实现原理？\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#vue%E5%86%85%E7%BD%AE%E7%BB%84%E4%BB%B6teleport%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86\">Vue内置组件\u003Ccode>Teleport\u003C/code>实现原理？\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#vue%E5%86%85%E7%BD%AE%E7%BB%84%E4%BB%B6transition%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86\">Vue内置组件\u003Ccode>Transition\u003C/code>实现原理？\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#vue3%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E9%98%B2%E6%8A%96%E7%9A%84ref\">Vue3如何实现一个防抖的Ref？\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#%E4%B8%BA%E4%BD%95%E4%B8%8D%E5%BB%BA%E8%AE%AEv-if%E4%B8%8Ev-for%E4%B8%80%E8%B5%B7%E4%BD%BF%E7%94%A8\">为何不建议v-if与v-for一起使用？\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#vue3%E7%89%B9%E6%80%A7%E5%BC%80%E5%85%B3%E6%80%8E%E4%B9%88%E5%AE%9E%E7%8E%B0%E7%9A%84\">Vue3特性开关怎么实现的？\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#vue3%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E7%9A%84\">Vue3错误处理如何实现的？\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#vue%E5%A6%82%E4%BD%95%E7%BB%99%E6%95%B0%E7%BB%84%E5%BB%BA%E7%AB%8B%E5%93%8D%E5%BA%94%E6%80%A7\">Vue如何给数组建立响应性？\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#vue%E5%A6%82%E4%BD%95%E4%BB%A3%E7%90%86setweakset%E5%92%8Cmapweakmap\">Vue如何代理Set（WeakSet）和Map（WeakMap）？\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#vue%E5%A6%82%E4%BD%95%E5%A4%84%E7%90%86%E5%93%8D%E5%BA%94%E4%B8%A2%E5%A4%B1%E7%9A%84%E9%97%AE%E9%A2%98\">Vue如何处理响应丢失的问题？\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#vue%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E8%84%B1ref\">Vue如何实现自动脱ref？\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#vue2%E5%8F%8C%E7%AB%AFdiff%E5%8E%9F%E7%90%86\">Vue2双端Diff原理？\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#vue3%E5%BF%AB%E9%80%9Fdiff%E5%8E%9F%E7%90%86\">Vue3快速Diff原理？\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E5%BC%82%E6%AD%A5%E7%BB%84%E4%BB%B6\">如何实现异步组件？\u003C/a>\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\u003Ca href=\"#svelte\">Svelte\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#react\">React\u003C/a>\n\u003Cul>\n\u003Cli>\u003Ca href=\"#%E4%B8%BA%E5%95%A5%E4%BC%9A%E6%9C%89suspense%E7%BB%84%E4%BB%B6%E5%8E%9F%E7%90%86%E6%98%AF%E5%95%A5%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF%E6%9C%89%E5%93%AA%E4%BA%9B\">为啥会有Suspense组件？原理是啥？使用场景有哪些？\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#%E4%BB%80%E4%B9%88%E6%98%AFforward-refs\">什么是forward refs？\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#uselayouteffect%E5%92%8Cuseeffect%E5%8C%BA%E5%88%AB\">useLayoutEffect和useEffect区别?\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#usesyncexternalstore%E6%98%AF%E5%B9%B2%E5%95%A5%E7%9A%84\">\u003Ccode>useSyncExternalStore\u003C/code>是干啥的？\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#%E4%BB%80%E4%B9%88%E6%98%AF%E8%B0%83%E8%A7%A3reconciliation\">什么是调解（reconciliation）?\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#%E9%94%99%E8%AF%AF%E8%BE%B9%E7%95%8C%E6%98%AF%E5%95%A5\">错误边界是啥？\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#rsc%E6%80%8E%E4%B9%88%E5%AE%9E%E7%8E%B0%E7%9A%84\">RSC怎么实现的？\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#%E5%93%AA%E4%BA%9B%E6%83%85%E5%86%B5%E4%BC%9A%E8%A7%A6%E5%8F%91re-render%E5%A6%82%E4%BD%95%E9%98%B2%E6%AD%A2\">哪些情况会触发re-render？如何防止？\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#react%E5%90%88%E6%88%90%E4%BA%8B%E4%BB%B6\">React合成事件？\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#%E4%BB%80%E4%B9%88%E6%98%AF-react-fiber-%E5%AE%83%E8%A7%A3%E5%86%B3%E4%BA%86%E4%BB%80%E4%B9%88%E9%97%AE%E9%A2%98\">什么是 React Fiber? \u003Cstrong>它解决了什么问题？\u003C/strong>\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#%E4%B8%BA%E4%BB%80%E4%B9%88-usestate-%E8%A6%81%E4%BD%BF%E7%94%A8%E6%95%B0%E7%BB%84%E8%80%8C%E4%B8%8D%E6%98%AF%E5%AF%B9%E8%B1%A1\">为什么 useState 要使用数组而不是对象?\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#%E9%82%A3%E4%B8%BA%E4%BB%80%E4%B9%88%E4%B8%8D%E8%A6%81%E5%9C%A8%E5%BE%AA%E7%8E%AF%E6%9D%A1%E4%BB%B6%E6%88%96%E5%B5%8C%E5%A5%97%E5%87%BD%E6%95%B0%E4%B8%AD%E8%B0%83%E7%94%A8-hook-%E5%91%A2\">那为什么不要在循环、条件或嵌套函数中调用 Hook 呢？\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#hooks%E6%9B%B4%E6%96%B0%E6%9C%BA%E5%88%B6\">Hooks更新机制？\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3react-hooks%E4%B8%8A%E7%9A%84%E4%B8%80%E4%BA%9B%E4%BD%BF%E7%94%A8%E8%AF%AF%E5%8C%BA\">如何理解React hooks上的一些使用误区？\u003C/a>\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\u003Ca href=\"#%E5%B0%8F%E7%A8%8B%E5%BA%8F\">小程序\u003C/a>\n\u003Cul>\n\u003Cli>\u003Ca href=\"#%E5%B0%8F%E7%A8%8B%E5%BA%8F%E8%B7%A8%E7%AB%AF%E6%A1%86%E6%9E%B6%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86\">小程序跨端框架实现原理？\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#%E5%B0%8F%E7%A8%8B%E5%BA%8F%E8%B7%A8%E7%AB%AF%E6%A1%86%E6%9E%B6%E7%B1%BB%E5%9E%8B\">小程序跨端框架类型？\u003C/a>\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\u003Ca href=\"#html\">HTML\u003C/a>\n\u003Cul>\n\u003Cli>\u003Ca href=\"#src%E5%92%8Chref%E7%9A%84%E5%8C%BA%E5%88%AB\">\u003Ccode>src\u003C/code>和\u003Ccode>href\u003C/code>的区别？\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#dtd%E6%98%AF%E4%BB%80%E4%B9%88\">DTD是什么？\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E7%BB%99%E5%9B%BE%E7%89%87%E8%AE%BE%E7%BD%AE%E9%83%A8%E5%88%86%E5%8C%BA%E5%9F%9F%E5%8F%AF%E7%82%B9%E5%87%BB\">如何实现给图片设置部分区域可点击？\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#%E4%BB%80%E4%B9%88%E6%98%AFogp%E6%9C%89%E4%BD%95%E4%BD%9C%E7%94%A8\">什么是OGP？有何作用？\u003C/a>\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\u003Ca href=\"#css\">CSS\u003C/a>\n\u003Cul>\n\u003Cli>\u003Ca href=\"#%E5%A6%82%E4%BD%95%E9%80%9A%E8%BF%87flex%E5%AE%9E%E7%8E%B0%E4%B8%A4%E4%B8%AA%E5%AD%90%E5%85%83%E7%B4%A0%E5%B7%A6%E4%B8%8A%E5%8F%B3%E4%B8%8B%E5%B8%83%E5%B1%80\">如何通过flex实现两个子元素左上、右下布局？\u003C/a>\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\u003Ca href=\"#module-bundlers\">Module bundlers\u003C/a>\n\u003Cul>\n\u003Cli>\u003Ca href=\"#webpack-loader%E5%92%8Cplugin%E7%9A%84%E5%8C%BA%E5%88%AB\">Webpack loader和plugin的区别？\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#webpack%E4%B8%ADmodulechunkbundlevendor%E5%8C%BA%E5%88%AB%E6%98%AF%E5%95%A5\">Webpack中module、chunk、bundle、vendor区别是啥？\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#webpack%E4%B8%AD%E9%AD%94%E6%B3%95%E6%B3%A8%E9%87%8Awebpackprefetch%E5%92%8Cwebpackpreload%E6%9C%89%E5%95%A5%E5%8C%BA%E5%88%AB\">Webpack中魔法注释webpackPrefetch和webpackPreload有啥区别？\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#webpack%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E6%9C%89%E5%93%AA%E4%BA%9B\">Webpack生命周期有哪些？\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#webpack%E4%BC%98%E5%8C%96%E6%89%8B%E6%AE%B5%E6%9C%89%E5%93%AA%E4%BA%9B\">Webpack优化手段有哪些？\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#webpack%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E7%83%AD%E6%9B%B4%E6%96%B0\">Webpack如何实现热更新？\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#webpack%E7%9A%84%E8%BF%90%E8%A1%8C%E6%97%B6%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0\">Webpack的运行时如何实现？\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#webpack%E7%9A%84tree-shaking%E4%B8%BA%E4%BD%95%E4%B8%8D%E5%A4%AA%E8%A1%8C\">Webpack的tree shaking为何不太行？\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#vite%E4%B8%BA%E5%95%A5%E6%AF%94webpack%E5%BF%AB\">Vite为啥比Webpack快？\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#webpack%E5%92%8Cvite%E7%9A%84%E5%8C%BA%E5%88%AB\">Webpack和Vite的区别？\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#%E5%A6%82%E4%BD%95%E5%81%9A%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E7%9A%84\">如何做性能优化的？\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3%E4%BE%9D%E8%B5%96%E9%A2%84%E6%89%93%E5%8C%85\">如何理解依赖预打包？\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3vite%E7%9A%84%E4%BE%9D%E8%B5%96%E9%A2%84%E6%9E%84%E5%BB%BA\">如何理解Vite的依赖预构建？\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#%E4%BB%80%E4%B9%88%E6%98%AF%E5%B9%BD%E7%81%B5%E4%BE%9D%E8%B5%96\">什么是幽灵依赖？\u003Cspan role=\"img\" aria-label=\"ghost\">👻\u003C/span>\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#rollup%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E7%9A%84\">Rollup如何实现的？\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84bundler\">如何实现个简单的Bundler？\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"#%E4%B8%80%E4%B8%AA%E5%9F%BA%E7%A1%80%E7%9A%84bundler%E9%9C%80%E8%A6%81%E5%8C%85%E5%90%AB%E5%93%AA%E4%BA%9B%E5%86%85%E5%AE%B9\">一个基础的Bundler需要包含哪些内容？\u003C/a>\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\u003Ca href=\"#%E5%B7%A5%E7%A8%8B%E5%8C%96\">工程化\u003C/a>\n\u003Cul>\n\u003Cli>\u003Ca href=\"#%E5%A6%82%E4%BD%95%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AA%E6%8F%92%E4%BB%B6%E4%BD%93%E7%B3%BB\">如何设计一个插件体系？\u003C/a>\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"浏览器\">浏览器\u003C/h2>\n\u003Ch3 id=\"聊聊你了解的w3c规范\">聊聊你了解的W3C规范？\u003C/h3>\n\u003Cp>W3C相关规范工作组组成：\u003C/p>\n\u003Cul>\n\u003Cli>\u003Cstrong>CSS 工作组\u003C/strong>\u003C/li>\n\u003Cli>\u003Cstrong>HTML ⼯作组\u003C/strong>(HTMLWG) 与\u003Cstrong>WHATWG\u003C/strong>合作发布HTML与DOM正式推荐标准\u003C/li>\n\u003Cli>\u003Cstrong>⽆障碍指南⼯作组\u003C/strong>发布了WCAG 3.0 ⼯作草案(WD)，除继承WCAG 2.2及以前版本(2.1、2.0)之外，还⾸次纳⼊ UAAG 2.0 (⽤户代理⽆障碍指南) 和ATAG 2.0 (创作⼯具⽆障碍指南) 的内容并进⾏扩展。将提供⼀个新模式来更全 ⾯和灵活地解决 Web ⽆障碍（可访问性）问题\u003C/li>\n\u003Cli>\u003Cstrong>Web 性能⼯作组\u003C/strong>继续发布性能监测与优化相关的 API\u003C/li>\n\u003Cli>\u003Cstrong>Web 应⽤⼯作组\u003C/strong>持续客户端应⽤相关技术讨论，Web 在线编辑相关的技术，如⾼亮选择、虚拟键盘、内 容选择等\u003C/li>\n\u003Cli>\u003Cstrong>WPT Web平台测试\u003C/strong> 规范特性的测试平台\u003C/li>\n\u003C/ul>\n\u003Cp>对HTML来说一直都有两个组织维护：HTML工作组（HTMLWG）与WHATWG。是两个独立的组织，不过随着后期的发展，有关于HTML相关的标准都由WHATWG组织维护和推进。\u003C/p>\n\u003Cp>以前描述CSS都是使用版本号来描述，比如CSS1.0、CSS2.0、CSS2.1和CSS3之类，\n\u003Cimg src=\"https://raw.githubusercontent.com/fw6/assets/main/toy_docs/20230802164441.png\" alt=\"image.png\">\n但随着CSS功能模块变多、每个功能模块发展进度有差异，后面定义CSS规范不再以整体版本号描述，而是按单个模块版本维护，如CSS Grid模块，分为Level1、Level2、Level3之类。\u003C/p>\n\u003Cp>WCAG相关规范构建了具有可访问性Web应用的理论参考和依据。UAAG 2.0 (⽤户代理⽆障碍指南) 和ATAG 2.0 (创作⼯具⽆障碍指南)\u003C/p>\n\u003Cp>\u003Ca href=\"https://mp.weixin.qq.com/s/Kq0inC2lrjrvAaP-0ltQoQ\">Weixin Official Accounts Platform\u003C/a>\u003C/p>\n\u003Ch3 id=\"dom树怎么生成的\">DOM树怎么生成的?\u003C/h3>\n\u003Cp>一旦浏览器收到第一块数据，它就开始解析收到的信息。“解析”是浏览器将通过网络接收到的数据转换为DOM、CSSOM的步骤，通过渲染器把DOM和CSSOM在屏幕上绘制成页面。\u003C/p>\n\u003Caside class=\"callout callout-assert\">\u003Cdiv class=\"callout-indicator\">\u003Cdiv class=\"callout-hint\">\u003Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" aria-hidden=\"true\">\u003Ccircle cx=\"19\" cy=\"5\" r=\"3\">\u003C/circle>\u003Cpath d=\"M20 11.929V15c0 1.656-1.344 3-3 3h-3l-6 4v-4H5c-1.656 0-3-1.344-3-3V7c0-1.656 1.344-3 3-3h7.071\">\u003C/path>\u003C/svg>\u003C/div>\u003Cdiv class=\"callout-title\">Info\u003C/div>\u003C/div>\u003Cdiv class=\"callout-content\">\u003Cp>即使请求的页面HTML超过了14KB，浏览器也将开始解析尝试根据其数据进行渲染。这就是为什么在前14KB中包含浏览器开始渲染页面的所有内容，或至少包含页面模板（第一次渲染所需的CSS和HTML），这对Web性能优化很重要。\u003C/p>\u003C/div>\u003C/aside>\n\u003Cp>渲染DOM树分为5个阶段：\u003C/p>\n\u003Col>\n\u003Cli>处理HTML标记并构造DOM树。当遇到CSS文件、非阻塞资源（如图片）时解析继续进行，但对于没有\u003Ccode>defer\u003C/code>或\u003Ccode>async\u003C/code>属性的\u003Ccode>&#x3C;script>\u003C/code>标签时，浏览器会阻塞渲染并停止HTML的解析（虽然浏览器的预加载扫描器会加速该过程）。等待获取CSS不会阻塞HTML解析但会阻塞JavaScript！\u003C/li>\n\u003Cli>处理CSS并构建CSSOM树。CSSOM包含来自用户代理样式表的样式。在此同时，也会有JavaScript编译、构建辅助功能树等过程\u003C/li>\n\u003Cli>将DOM和CSSOM组合为一个Render树。Render树将所有相关样式匹配到DOM树的每个可见节点，并根据CSS级联确定每个节点的计算样式。\u003C/li>\n\u003Cli>在渲染树上运行布局以计算每个节点的几何体。第一次确定节点的大小和位置称为布局，随后对节点和大小的重新计算称为回流。\u003C/li>\n\u003Cli>最后一步将各个节点绘制到屏幕上。绘制可以将布局树上的元素分解为多层，将内容提升到GPU上的层可以提高绘制和重绘性能。当文档中各个不同部分以不同的层绘制相互重叠时，就必须进行合成，以确保按照正确的顺序绘制到屏幕上。\u003C/li>\n\u003C/ol>\n\u003Caside class=\"callout callout-note\">\u003Cdiv class=\"callout-indicator\">\u003Cdiv class=\"callout-hint\">\u003Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" aria-hidden=\"true\">\u003Cpath d=\"M12 8h.01M12 12v4\">\u003C/path>\u003Ccircle cx=\"12\" cy=\"12\" r=\"10\">\u003C/circle>\u003C/svg>\u003C/div>\u003Cdiv class=\"callout-title\">Note\u003C/div>\u003C/div>\u003Cdiv class=\"callout-content\">\u003Cp>使用Chrome开发工具进行性能分析分析：\u003C/p>\u003Col>\n\u003Cli>Chrome DevTools - more tools - Layers\u003C/li>\n\u003Cli>Chrome DevTools - more tools - Rendering\u003C/li>\n\u003Cli>Chrome DevTools - more tools - Animations\u003C/li>\n\u003Cli>Chrome DevTools - Performance\u003C/li>\n\u003C/ol>\u003C/div>\u003C/aside>\n\u003Ch3 id=\"script标签中async和defer属性的区别\">script标签中\u003Ccode>async\u003C/code>和\u003Ccode>defer\u003C/code>属性的区别？\u003C/h3>\n\u003Cp>带\u003Ccode>async\u003C/code>属性的脚本：\u003C/p>\n\u003Cul>\n\u003Cli>对于普通脚本则会并行请求，并加快解析和执行；\u003C/li>\n\u003Cli>对于模块脚本，那么脚本及其所有依赖都会在延迟队列中执行，确保它们会被并行请求并尽快解析和执行。\u003C/li>\n\u003C/ul>\n\u003Cp>带\u003Ccode>defer\u003C/code>属性的脚本：\u003C/p>\n\u003Cul>\n\u003Cli>对模块脚本不生效（默认\u003Ccode>defer\u003C/code>）\u003C/li>\n\u003Cli>对缺少\u003Ccode>src\u003C/code>属性的脚本不生效\u003C/li>\n\u003Cli>表示在文档解析后，但在触发\u003Ccode>DOMContentLoaded\u003C/code>之前执行\u003C/li>\n\u003Cli>阻塞\u003Ccode>DOMContentLoaded\u003C/code>事件触发，直到脚本完成加载并执行\u003C/li>\n\u003Cli>按照文档出现顺序执行\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"讲下浏览器渲染时的合成层\">讲下浏览器渲染时的合成层？\u003C/h3>\n\u003Cp>在每个DOM树节点都会对应一个LayoutObject，当它们的LayoutObject处于相同的坐标空间时，就会形成一个RenderLayers，也就是渲染层。\u003C/p>\n\u003Cp>RenderLayers保证页面以正确的顺序合成，这时候就出现了层的合成（composite），从而正确处理透明元素与重叠元素的显示。\u003C/p>\n\u003Cp>在Chrome中有两种不同的层类型：\u003C/p>\n\u003Cul>\n\u003Cli>RenderLayer渲染层，负责对应的DOM子树\u003C/li>\n\u003Cli>GraphicsLayer图形层，负责对应的RenderLayer子树\u003C/li>\n\u003C/ul>\n\u003Cp>在RenderLayer下有RenderObject，其保持了树结构并通过向绘图上下文（GraphicsContext）发出绘制调用来绘制Nodes。\n每个GraphicsLayer下都有一个GraphicsContext，其用于负责输出该层的位图，位图储存在共享内存中作为纹理上传到GPU中，最后由GPU将多个位图合成，然后draw到屏幕上\u003C/p>\n\u003Caside class=\"callout callout-note\">\u003Cdiv class=\"callout-indicator\">\u003Cdiv class=\"callout-hint\">\u003Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" aria-hidden=\"true\">\u003Cpath d=\"M12 8h.01M12 12v4\">\u003C/path>\u003Ccircle cx=\"12\" cy=\"12\" r=\"10\">\u003C/circle>\u003C/svg>\u003C/div>\u003Cdiv class=\"callout-title\">Note\u003C/div>\u003C/div>\u003Cdiv class=\"callout-content\">\u003Cp>GraphicsContext绘图上下文的责任就是向屏幕进行像素绘制（先把像素级别数据存在位图，然后再显示到显示器），在Chrome里绘图上下文包含了Skia的调用\u003C/p>\u003C/div>\u003C/aside>\n\u003Cp>某些特殊的渲染层会被认为是合成层（Composition Layer），合成层拥有单独的GraphicsContext，而其他非合成层的渲染层，则和第一个拥有GraphicsContext父层共用一个。\u003C/p>\n\u003Cp>影响composite的因素：\u003C/p>\n\u003Cul>\n\u003Cli>Transform 3D：translate3D，translateZ等\u003C/li>\n\u003Cli>video、canvas、iframe等元素\u003C/li>\n\u003Cli>通过\u003Ccode>Element.animate\u003C/code>实现的opacity动画转换\u003C/li>\n\u003Cli>通过CSS 动画实现的opacity动画转换\u003C/li>\n\u003Cli>postion: fixed;\u003C/li>\n\u003Cli>will-change\u003C/li>\n\u003Cli>filter\u003C/li>\n\u003Cli>有合成层的后代元素同时本身overflow不为visible\u003C/li>\n\u003Cli>…\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"回流和重绘的区别\">回流和重绘的区别？\u003C/h3>\n\u003Cul>\n\u003Cli>Reflow（回流）：浏览器要花时间去渲染，当它发现了某个部分发生了变化影响了布局，那就需要倒回去重新渲染。\u003C/li>\n\u003Cli>Repaint（重绘）：如果只是改变了某个元素的背景颜色，文字颜色等，不影响元素周围或内部布局的属性，将只会引起浏览器的repaint，重画某一部分。\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"关于客户端存储\">关于客户端存储？\u003C/h3>\n\u003Cp>传统方式：\u003C/p>\n\u003Cul>\n\u003Cli>cookies\u003C/li>\n\u003C/ul>\n\u003Cp>新流派：\u003C/p>\n\u003Cul>\n\u003Cli>Web Storage API\u003C/li>\n\u003Cli>IndexedDB API\u003C/li>\n\u003C/ul>\n\u003Cp>未来：\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Cache\">Cache API\u003C/a>：用于存储特定HTTP请求的响应文件，通常与Service Worker一起使用。\u003C/li>\n\u003C/ul>\n\u003Cp>关于Web Storage API:\u003C/p>\n\u003Cul>\n\u003Cli>sessionStorage只在页面会话期间生效（浏览器打开状态，包含页面加载和恢复）；localStorage始终存在\u003C/li>\n\u003Cli>sessionStorage\u003Cstrong>为每个给定的源维持一个独立的存储区域\u003C/strong>（同一URL多个Tab，Storage是独立的），\u003Cstrong>如果新标签或窗口打开新页面会复制顶级浏览器会话上下文（共享Storage）\u003C/strong>\u003C/li>\n\u003Cli>Storage特定于页面协议，区分https、http\u003C/li>\n\u003Cli>StorageEvent：Storage对象发生变化，\u003Ccode>storage\u003C/code>事件会触发：相同域名下的其他页面发生的变化才会触发\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"什么是process-per-site-instance策略\">什么是\u003Ccode>process-per-site-instance\u003C/code>策略？\u003C/h3>\n\u003Cp>每个标签对应一个渲染进程，如果从一个页面打开了一个新页面，新打开的页面与当前页面还属于同一个站点的话，那么新页面会复用当前页面的渲染进程。\u003C/p>\n\u003Ch3 id=\"能说在什么是核心网页指标core-web-vitals吗\">能说在什么是核心网页指标Core Web Vitals吗？\u003C/h3>\n\u003Ch3 id=\"jsbridge实现原理\">JSBridge实现原理？\u003C/h3>\n\u003Cp>JSBridge是一种webview侧和native侧进行通信的手段。webview通过JSBridge调用Native的能力，Native通过JSBridge在Webview端执行一些逻辑。\u003C/p>\n\u003Cul>\n\u003Cli>API注入，原理其实就是 Native 获取 JavaScript环境上下文，并直接在上面挂载对象或者方法，使 js 可以直接调用，Android 与 IOS 分别拥有对应的挂载方式\u003C/li>\n\u003Cli>WebView 中的 prompt/console/alert 拦截，通常使用 prompt，因为这个方法在前端中使用频率低，比较不会出现冲突\u003C/li>\n\u003Cli>WebView URL Scheme 跳转拦截(\u003Ca href=\"https://mp.weixin.qq.com/s/lJJjbmuOZXE25I7FIz7OVg\">JSBridge原理解析\u003C/a>)\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"如何解决首页加载慢的问题\">如何解决首页加载慢的问题？\u003C/h3>\n\u003Cp>等待资源加载时间和大部分情况下的浏览器单线程执行是影响 Web 性能的两大主要原因。了解浏览器单线程的本质与最小化主线程的责任可以优化 Web 性能，来确保渲染的流畅和交互响应的及时。\u003C/p>\n\u003Cp>导致加载慢可能的因素：\u003C/p>\n\u003Cul>\n\u003Cli>网络延时\u003C/li>\n\u003Cli>资源文件体积过大\u003C/li>\n\u003Cli>资源加载重复发送请求\u003C/li>\n\u003Cli>加载脚本，渲染内容卡住了\u003C/li>\n\u003C/ul>\n\u003Cp>解决方案：\u003C/p>\n\u003Cul>\n\u003Cli>减少入口文件体积（路由懒加载）\u003C/li>\n\u003Cli>静态资源本地缓存（service worker、http缓存）\u003C/li>\n\u003Cli>UI框架按需加载（babel-plugin-import）\u003C/li>\n\u003Cli>图片资源压缩（在线字体图标、雪碧图）\u003C/li>\n\u003Cli>开启\u003Ca href=\"https://github.com/google/brotli\">Brotli\u003C/a>/Gzip压缩\u003C/li>\n\u003Cli>使用SSR\u003C/li>\n\u003C/ul>\n\u003Cp>\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/Performance\">Web 性能 | MDN\u003C/a>\u003C/p>\n\u003Cp>推荐的优化启动性能的方案：\u003C/p>\n\u003Col>\n\u003Cli>异步执行的脚本标签上加async或defer\u003C/li>\n\u003Cli>需要解码的资源文件（解码JPEG转为原始纹理数据），最好在worker中做\u003C/li>\n\u003Cli>所有能并行的数据处理都应该并行化\u003C/li>\n\u003Cli>在启动的HTML文件中，不包含不会在关键渲染路径中出现的样式和脚本，最好仅在需要时加载\u003C/li>\n\u003Cli>不要让Web引擎构建不需要的DOM\u003C/li>\n\u003C/ol>\n\u003Ch3 id=\"关键渲染路径是啥如何优化\">关键渲染路径是啥？如何优化？\u003C/h3>\n\u003Cp>关键渲染路径是浏览器将 HTML，CSS 和 JavaScript 转换为屏幕上的像素所经历的步骤序列。优化关键渲染路径可提高渲染性能。关键渲染路径包含了 文档对象模型(DOM)，CSS 对象模型 (CSSOM)，渲染树和布局。\u003C/p>\n\u003Cp>压缩和媒体查询来异步处理CSS为非阻塞请求。\u003C/p>\n\u003Cul>\n\u003Cli>通过异步、延迟加载或者消除非关键资源来减少请求数量\u003C/li>\n\u003Cli>优化必须的请求数量和每个文件体积\u003C/li>\n\u003Cli>区分关键资源优先级来优化被加载资源的顺序，缩短关键路径长度\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"如何优化ttfb\">如何优化TTFB？\u003C/h3>\n\u003Cp>Time to First Byte(TTFB)是一项基本Web性能指标，作为粗略指南，网站应努力达到0.8s或更短。\n\u003Cimg src=\"https://raw.githubusercontent.com/fw6/assets/main/toy_docs/20230813161431.png\" alt=\"image.png\">\u003C/p>\n\u003Caside class=\"callout callout-assert\">\u003Cdiv class=\"callout-indicator\">\u003Cdiv class=\"callout-hint\">\u003Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" aria-hidden=\"true\">\u003Ccircle cx=\"19\" cy=\"5\" r=\"3\">\u003C/circle>\u003Cpath d=\"M20 11.929V15c0 1.656-1.344 3-3 3h-3l-6 4v-4H5c-1.656 0-3-1.344-3-3V7c0-1.656 1.344-3 3-3h7.071\">\u003C/path>\u003C/svg>\u003C/div>\u003Cdiv class=\"callout-title\">Info\u003C/div>\u003C/div>\u003Cdiv class=\"callout-content\">\u003Cp>TTFB不是核心Web Vitals指标，所有网站不一定需要满足“良好”的TTFB阀值。\n原因：对于SPA应用来说需要快速获取HTML，然后由JavaScript接管渲染内容，较低的TTFB很重要；对于服务端渲染TTFB较高但具有更好的FCP和LCP。所以TTFB只是个粗略指南，需要你根据网站渲染方式权衡。\u003C/p>\u003C/div>\u003C/aside>\n\u003Cp>以下内容来自\u003Ca href=\"https://web.dev/optimize-ttfb/#platform-specific-guidance\">Optimize Time to First Byte\u003C/a>\u003C/p>\n\u003Col>\n\u003Cli>特定平台优化指导\u003C/li>\n\u003Cli>选择好的托管服务\n\u003Col>\n\u003Cli>确保足够的内存\u003C/li>\n\u003Cli>确保托管平台的后端堆栈技术较新\u003C/li>\n\u003C/ol>\n\u003C/li>\n\u003Cli>使用CDN\n将资源缓存在离用户物理距离更近的边缘服务器上。CDN其他优势如下：\n\u003Col>\n\u003Cli>更快的DNS解析速度\u003C/li>\n\u003Cli>CDN可能使用HTTP2/3等现代协议从边缘服务提供内容\u003C/li>\n\u003Cli>HTTP/3适用UDP解决了TCP队头阻塞等问题\u003C/li>\n\u003Cli>CDN可能还提供现代版本的TLS，可降低TLS协商中的延迟\nTLS1.3的设计尤其旨在使TLS协商尽可能短\u003C/li>\n\u003Cli>一些CDN提供商提供通常被称为边缘工作线程的功能，该功能使用与Service Worker类似的API拦截请求，以编程方式管理边缘缓存中的响应或完全重写响应\u003C/li>\n\u003Cli>CDN服务商擅长压缩优化\u003C/li>\n\u003Cli>CDN服务商自动缓存静态资源的压缩响应\u003C/li>\n\u003C/ol>\n\u003C/li>\n\u003Cli>尽可能缓存内容\u003C/li>\n\u003Cli>避免多个页面重定向\n重定向类型分为：\n\u003Col>\n\u003Cli>同源重定向。完全发生在你的网站\u003C/li>\n\u003Cli>跨源重定向。例如短链服务\u003C/li>\n\u003C/ol>\n\u003C/li>\n\u003Cli>流式传输HTML\n浏览器经过优化，可在流式传输时有效的处理标记\u003C/li>\n\u003Cli>使用Service Worker\n是用Service Worker充当浏览器和服务器之间的代理\u003C/li>\n\u003Cli>使用\u003Ccode>103 Early Hints\u003C/code>\n信息状态响应码，一般和\u003Ccode>Link\u003C/code>header一起使用，来允许用户在浏览器还在准备响应数据的时候预加载一些资源\u003C/li>\n\u003C/ol>\n\u003Ch3 id=\"如何测量性能\">如何测量性能？\u003C/h3>\n\u003Cp>性能API：\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Performance_API\">Performance API - Web API 接口参考 | MDN\u003C/a>\u003C/p>\n\u003Cp>工具和指标：\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ca href=\"https://pagespeed.web.dev/\">PageSpeed Insights\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://www.webpagetest.org/\">WebPageTest - Website Performance and Optimization Test\u003C/a>\u003C/li>\n\u003Cli>Devtools的网络监视器和性能监视器\u003C/li>\n\u003Cli>Chrome的Lighthouse\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"懒加载有哪些手段\">懒加载有哪些手段？\u003C/h3>\n\u003Col>\n\u003Cli>代码拆分\n\u003Cul>\n\u003Cli>入口点分离，通过应用的入口点分离代码\u003C/li>\n\u003Cli>动态分离：使用动态\u003Ccode>import()\u003C/code>语句分离代码\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>脚本类型模块\n任何\u003Ccode>&#x3C;script type=\"module\">\u003C/code>模块脚本标签默认情况下都会延迟（\u003Ccode>defer\u003C/code>）\u003C/li>\n\u003Cli>CSS可使用媒体类型和查询实现非阻塞渲染\n如：\u003Ccode>&#x3C;link href=\"style.css\" rel=\"stylesheet\" media=\"all\" />\u003C/code>\u003C/li>\n\u003Cli>字体。默认情况下字体会延迟到构造渲染树之前，这可能会导致文本渲染延迟\n可使用\u003Ccode>&#x3C;link rel=\"preload\">\u003C/code>、font-display、字体加载API覆盖默认行为并预加载字体资源\u003C/li>\n\u003Cli>图片和iframe，可加\u003Ccode>loading=\"lazy\"\u003C/code>属性（延迟加载屏幕外的图片/iframe）\u003C/li>\n\u003C/ol>\n\u003Ch3 id=\"普通script与script-typemodule有哪些区别\">普通\u003Ccode>&#x3C;script>\u003C/code>与\u003Ccode>&#x3C;script type=\"module\">\u003C/code>有哪些区别？\u003C/h3>\n\u003Col>\n\u003Cli>模块代码需要使用CORS协议跨源获取\u003C/li>\n\u003Cli>默认自动延迟加载（defer）\u003C/li>\n\u003Cli>默认使用严格模式\u003C/li>\n\u003Cli>使用范围仅限该模块（无法全局获得）\u003C/li>\n\u003C/ol>\n\u003Ch3 id=\"html属性relpreloadrelpreloadmodulerelprefetchrelprerenderrelsubresources等有何区别\">HTML属性\u003Ccode>rel=\"preload\"\u003C/code>、\u003Ccode>rel=\"preloadmodule\"\u003C/code>、\u003Ccode>rel=\"prefetch\"\u003C/code>、\u003Ccode>rel=\"prerender\"\u003C/code>、\u003Ccode>rel=\"subresources\"\u003C/code>等有何区别？\u003C/h3>\n\u003Cul>\n\u003Cli>\u003Ccode>rel=\"preload\"\u003C/code>，提前下载并缓存资源，常用于字体文件、媒体文件等比较大的资源，提前下载并缓存，防止阻塞主渲染进程\u003C/li>\n\u003Cli>\u003Ccode>rel=\"preloadmodule\"\u003C/code>，提前下载、解析、编译模块文件，仅对\u003Ccode>&#x3C;script type=\"module\">\u003C/code>生效，常用于模块依赖项的预加载\u003C/li>\n\u003Cli>\u003Ccode>rel=\"prefetch\"\u003C/code>，提前获取下一导航页面的资源（优先级比preload低），但对当前页面资源无效。\u003C/li>\n\u003Cli>\u003Ccode>rel=\"prerender\"\u003C/code>，在背后提前渲染指定的页面，如果用户导航到该页面可加速\u003C/li>\n\u003Cli>\u003Ccode>rel=\"subresources\"\u003C/code>，与preload相同但无法获取资源优先级\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"nodejs\">NodeJS\u003C/h2>\n\u003Ch3 id=\"如何做nodejs性能优化\">如何做NodeJS性能优化？\u003C/h3>\n\u003Col>\n\u003Cli>不要过度优化。\u003C/li>\n\u003Cli>确定慢的类型和种类。CPU密集型、IO密集型，还是内存使用过高？\u003C/li>\n\u003Cli>优化代码\n\u003Col>\n\u003Cli>CPU密集型：优化算法、优化方案、基于Worker实现多线程、换原生语言实现\u003C/li>\n\u003Cli>IO密集型：利用Node的异步特性，减少阻塞，使用流处理大文件\u003C/li>\n\u003Cli>增加缓存\u003C/li>\n\u003C/ol>\n\u003C/li>\n\u003Cli>注意程序外的优化。（换硬件、更新版本）\u003C/li>\n\u003Cli>其他有效的点\n\u003Col>\n\u003Cli>打包依赖\u003C/li>\n\u003Cli>按需加载\u003C/li>\n\u003Cli>require(“v8-compile-cache”)\u003C/li>\n\u003C/ol>\n\u003C/li>\n\u003Cli>增加benchmark库或CI Action。\u003C/li>\n\u003C/ol>\n\u003Cp>\u003Ca href=\"https://sun0day.github.io/blog/vite/why-vite4_3-is-faster.html\">How we made Vite 4.3 faaaaster \u003Cspan role=\"img\" aria-label=\"rocket\">🚀\u003C/span> | sun0day’s blog - lost in code\u003C/a>\u003C/p>\n\u003Ch3 id=\"npm-install-和-npm-ci有啥区别\">npm install 和 npm ci有啥区别？\u003C/h3>\n\u003Cp>npm ci 和 npm install 类似，区别是 npm ci 要求项目中必须有 package-lock.json，同时他会完全根据 lock 文件进行依赖安装，如果和 package.json 中的文件有冲突，会报错。同时顾名思义，npm ci 是在 ci 环境中推荐使用的 npm install。\u003C/p>\n\u003Ch2 id=\"http\">HTTP\u003C/h2>\n\u003Ch3 id=\"如何理解cdn\">如何理解CDN？\u003C/h3>\n\u003Cp>CDN（Content Delivery Network）内容分发网络\u003C/p>\n\u003Cp>构建在现有网络基础之上的\u003Cem>智能虚拟网络\u003C/em>，依靠部署在各地的边缘服务器，通过中心平台的\u003Cstrong>负载均衡、内容分发、调度等\u003C/strong>功能模块，使用户\u003Cstrong>就近获取所需内容\u003C/strong>，降低网络拥塞，提高用户访问响应速度和命中率。\u003C/p>\n\u003Cp>\u003Ccode>CDN\u003C/code> 的关键技术主要有内容存储和分发技术。\u003C/p>\n\u003Cp>用户在上网的时候不用直接访问源站，而是访问离他“最近的”一个 CDN 节点，术语叫\u003Cstrong>边缘节点\u003C/strong>，其实就是缓存了源站内容的代理服务器。\u003C/p>\n\u003Cp>原理：\u003C/p>\n\u003Col>\n\u003Cli>DNS返回的不再是IP地址，而是CNAME别名记录，指向CDN的全局负载均衡\nCNAME实际上在域名解析中充当中间人（代理）角色，\u003C/li>\n\u003Cli>由于没有IP地址，本地DNS会向负载均衡系统发请求进行智能调度\u003C/li>\n\u003Cli>看用户IP地址，查表得知地理位置，找相对最近的边缘节点\u003C/li>\n\u003Cli>看用户所在运营商，找相同网络的边缘节点\u003C/li>\n\u003Cli>检查边缘节点的负载状况，找负载较轻的节点（其他如：健康状况、服务能力、带宽、响应时间等）\u003C/li>\n\u003Cli>得到最合适的边缘节点后，把该节点返回给用户\u003C/li>\n\u003C/ol>\n\u003Cp>好处：\u003C/p>\n\u003Col>\n\u003Cli>更快的DNS解析\u003C/li>\n\u003Cli>CDN服务商可能使用更现代的HTTP协议\u003C/li>\n\u003Cli>TLS协商过程可能更快（版本高）、使用HTTP的QUIC\u003C/li>\n\u003Cli>工作线程队列功能提供类似service worker的缓存响应与编程能力\u003C/li>\n\u003Cli>压缩优化、自动静态资源响应压缩\u003C/li>\n\u003C/ol>\n\u003Ch3 id=\"dns解析流程\">DNS解析流程？\u003C/h3>\n\u003Cp>DNS相当于翻译官，将域名翻译为IP地址。\u003C/p>\n\u003Col>\n\u003Cli>首先找浏览器的DNS缓存\u003C/li>\n\u003Cli>没找到则找操作系统DNS缓存\u003C/li>\n\u003Cli>还没找到则本地域名服务器\u003C/li>\n\u003Cli>还没有，则：\n\u003Col>\n\u003Cli>向根DNS服务器获取顶级DNS服务器地址\u003C/li>\n\u003Cli>向顶级DNS服务器地址获取权威DNS服务器地址\u003C/li>\n\u003Cli>最终得到IP\u003C/li>\n\u003C/ol>\n\u003C/li>\n\u003Cli>本地域名服务器给到操作系统，自己缓存下\u003C/li>\n\u003Cli>操作系统给到浏览器，自己缓存下\u003C/li>\n\u003Cli>浏览器得到，自己缓存下\u003C/li>\n\u003C/ol>\n\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/fw6/assets/main/toy_docs/20230804140218.png\" alt=\"image.png\">\u003C/p>\n\u003Cul>\n\u003Cli>根 DNS 服务器：返回顶级域 DNS 服务器的 IP 地址\u003C/li>\n\u003Cli>顶级 DNS 服务器：返回权威 DNS 服务器的 IP 地址\u003C/li>\n\u003Cli>权威 DNS 服务器：返回相应主机的 IP 地址\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"http20有哪些优化http3了解吗\">HTTP2.0有哪些优化？HTTP3了解吗？\u003C/h3>\n\u003Cul>\n\u003Cli>HTTP/2 是二进制协议而不是文本协议。不再可读，也不可无障碍的手动创建，改善的优化技术现在可被实施。\u003C/li>\n\u003Cli>这是一个多路复用协议。并行的请求能在同一个链接中处理，移除了 HTTP/1.x 中顺序和阻塞的约束。\u003C/li>\n\u003Cli>压缩了标头。因为标头在一系列请求中常常是相似的，其移除了重复和传输重复数据的成本。\u003C/li>\n\u003Cli>其允许服务器在客户端缓存中填充数据，通过一个叫服务器推送的机制来提前请求。\u003C/li>\n\u003C/ul>\n\u003Cp>\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Basics_of_HTTP/Evolution_of_HTTP#http3%E2%80%94%E2%80%94%E5%9F%BA%E4%BA%8E%20_quic_%E7%9A%84_http\">HTTP 的发展 - HTTP | MDN\u003C/a>\nHTTP传输层变为QUIC而不是TCP。\nHTTP2通过单个TCP连接运行，所以在TCP层处理的数据丢失检测和重传会阻止所有流得传输。\nQUIC通过UDP运行多个流并为每个流实现了丢失检测和重传。\u003C/p>\n\u003Ch3 id=\"https-与http的区别\">HTTPS 与HTTP的区别？\u003C/h3>\n\u003Cul>\n\u003Cli>HTTPS是HTTP协议的安全版本，HTTP协议的数据传输是明文的，是不安全的，HTTPS使用了SSL/TLS协议进行了加密处理，相对更安全\u003C/li>\n\u003Cli>HTTP 和 HTTPS 使用连接方式不同，默认端口也不一样，HTTP是80，HTTPS是443\u003C/li>\n\u003Cli>HTTPS 由于需要设计加密以及多次握手，性能方面不如 HTTP\u003C/li>\n\u003Cli>HTTPS需要SSL，SSL 证书需要钱，功能越强大的证书费用越高\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"https如何保证安全\">HTTPS如何保证安全？\u003C/h3>\n\u003Cp>在采用\u003Ccode>SSL\u003C/code>后，\u003Ccode>HTTP\u003C/code>就拥有了\u003Ccode>HTTPS\u003C/code>的加密、证书和完整性保护这些功能\u003C/p>\n\u003Cblockquote>\n\u003Cp>SSL(Secure Sockets Layer 安全套接字协议),及其继任者传输层安全（Transport Layer Security，TLS）是为网络通信提供安全及数据完整性的一种安全协议\u003C/p>\n\u003C/blockquote>\n\u003Cul>\n\u003Cli>对称加密：采用协商的密钥对数据加密\u003C/li>\n\u003Cli>非对称加密：实现身份认证和密钥协商\u003C/li>\n\u003Cli>摘要算法：验证信息的完整性\u003C/li>\n\u003Cli>数字签名：身份验证\u003C/li>\n\u003C/ul>\n\u003Cp>\u003Ca href=\"https://vue3js.cn/interview/http/HTTPS.html#%E4%BA%8C%E3%80%81%E5%A6%82%E4%BD%95%E5%81%9A\">为什么说HTTPS比HTTP安全? HTTPS是如何保证安全的？\u003C/a>\u003C/p>\n\u003Ch3 id=\"http缓存\">HTTP缓存？\u003C/h3>\n\u003Cp>\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Caching\">HTTP 缓存 - HTTP | MDN\u003C/a>\u003C/p>\n\u003Cp>缓存分为4种，当一次查找且都没命中时，才会请求网络：\u003C/p>\n\u003Cul>\n\u003Cli>Service Worker + Cache Storage\u003C/li>\n\u003Cli>Memory Cache。内存使用率比较高的文件。关闭Tab页面就释放\u003C/li>\n\u003Cli>Disk Cache。 比较大的 JS、CSS 文件会直接被丢进磁盘。\u003C/li>\n\u003Cli>Push Cache + HTTP2。只在会话存在\u003C/li>\n\u003C/ul>\n\u003Cp>通过\u003Ccode>HTTP Header\u003C/code>设置缓存策略：\u003C/p>\n\u003Col>\n\u003Cli>强缓存\n使用强缓存不会发送HTTP请求，直接从缓存中拿数据，状态码为200，size显示为\u003Ccode>from disk cache\u003C/code>或\u003Ccode>from memory cache\u003C/code>。\n强缓存可以通过设置两种 HTTP Header 实现：\u003Ccode>Expires\u003C/code> （服务器事件和浏览器事件可能不一致）和 \u003Ccode>Cache-Control\u003C/code>。\u003C/li>\n\u003Cli>协商缓存。\n强缓存失效就进入协商缓存。\n浏览器在请求头中携带缓存标识，服务器根据缓存标识决定是否使用缓存，协商缓存生效则返回 304 和 Not Modified，失效则返回 200 和最新版本请求结果。\n协商缓存可以可以通过设置两种 HTTP Header 实现：\u003Ccode>Last-Modified\u003C/code> 和 \u003Ccode>ETag\u003C/code>。\u003C/li>\n\u003C/ol>\n\u003Caside class=\"callout callout-warn\">\u003Cdiv class=\"callout-indicator\">\u003Cdiv class=\"callout-hint\">\u003Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" aria-hidden=\"true\">\u003Cpath d=\"M12 9v4m0 4h.01M8.681 4.082C9.351 2.797 10.621 2 12 2s2.649.797 3.319 2.082l6.203 11.904a4.28 4.28 0 0 1-.046 4.019C20.793 21.241 19.549 22 18.203 22H5.797c-1.346 0-2.59-.759-3.273-1.995a4.28 4.28 0 0 1-.046-4.019L8.681 4.082Z\">\u003C/path>\u003C/svg>\u003C/div>\u003Cdiv class=\"callout-title\">Warning\u003C/div>\u003C/div>\u003Cdiv class=\"callout-content\">\u003Cp>\u003Cstrong>如果什么缓存策略都没设置\u003C/strong>：浏览器会采用一个启发式的算法，通常会取响应头中的 Date 减去 Last-Modified 值的 10% 作为缓存时间。\u003C/p>\u003C/div>\u003C/aside>\n\u003Cp>强制重新验证：\u003C/p>\n\u003Col>\n\u003Cli>\u003Ccode>cache-control\u003C/code>设置为\u003Ccode>no-cache\u003C/code>\n或者\u003Ccode>cache-control\u003C/code>设置为\u003Ccode>max-age=0, must-revalidate\u003C/code>，这是HTTP1.1之前的兼容方案\u003C/li>\n\u003Cli>同时设置\u003Ccode>ETag\u003C/code>和\u003Ccode>Last-Modified\u003C/code>\u003C/li>\n\u003C/ol>\n\u003Cp>不使用缓存：\u003Ccode>cache-control\u003C/code>设置为\u003Ccode>no-store\u003C/code>\u003C/p>\n\u003Ch3 id=\"cache-control中no-cache和no-store有何区别\">Cache-Control中no-cache和no-store有何区别？\u003C/h3>\n\u003Cul>\n\u003Cli>\u003Ccode>no-cache\u003C/code>：在发布缓存副本之前，强制要求缓存把请求提交给原始服务器进行验证 (强制协商缓存验证)。\u003C/li>\n\u003Cli>\u003Ccode>no-store\u003C/code>：缓存不应存储有关客户端请求或服务器响应的任何内容，即不使用任何缓存（完全不缓存）。\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"csrf是啥如何防范\">CSRF是啥？如何防范？\u003C/h3>\n\u003Cp>Cross-Site Request Forgery\u003C/p>\n\u003Cp>跨站请求攻击，简单地说，是攻击者通过一些技术手段欺骗用户的浏览器去访问一个自己曾经认证过的网站并执行一些操作（如发邮件，发消息，甚至财产操作如转账和购买商品）。由于浏览器曾经认证过，所以被访问的网站会认为是真正的用户操作而去执行。这利用了web中用户身份验证的一个漏洞：\u003Cstrong>简单的身份验证只能保证请求是发自某个用户的浏览器，却不能保证请求本身是用户自愿发出的\u003C/strong>。\u003C/p>\n\u003Cp>\u003Ca href=\"https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html#cross-site-request-forgery-prevention-cheat-sheet\">Cross-Site Request Forgery Prevention - OWASP Cheat Sheet Series\u003C/a>\n如何防范：\u003C/p>\n\u003Cul>\n\u003Cli>后端框架一般带内置实现\u003C/li>\n\u003Cli>使用令牌同步模式\n当用户发送请求时，服务器端应用将令牌嵌入HTML表单，并发送给客户端。客户端提交HTML表单时候，会将令牌发送到服务端，令牌的验证是由服务端实行的。令牌可以通过任何方式生成，只要确保随机性和唯一性\u003C/li>\n\u003Cli>检查Referer字段\n这个字段用以标明请求来源于哪个地址。在处理敏感数据请求时，通常来说，Referer字段应和请求的地址位于同一域名下。\u003C/li>\n\u003Cli>静态网站使用double submit cookie技术\n服务端生成个随机数给客户端，请求时带上给服务端验证。\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"xss是啥如何防范\">XSS是啥？如何防范？\u003C/h3>\n\u003Cp>\u003Cstrong>跨站脚本\u003C/strong>（英语：Cross-site scripting，通常简称为：XSS）是一种网站应用程序的安全漏洞攻击，是代码注入的一种。它允许恶意用户将代码注入到网页上，其他用户在观看网页时就会受到影响。这类攻击通常包含了HTML以及用户端脚本语言。\u003C/p>\n\u003Cp>\u003Cstrong>XSS\u003C/strong>攻击通常指的是通过利用网页开发时留下的漏洞，通过巧妙的方法注入恶意指令代码到网页，使用户加载并执行攻击者恶意制造的网页程序。\u003C/p>\n\u003Cp>如何防范:\u003C/p>\n\u003Cul>\n\u003Cli>过滤特殊字符（DOMPurify、HTML Sanitizer）\u003C/li>\n\u003Cli>关闭JavaScript（浏览器设置）\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"cookie有何作用如何禁止访问\">cookie有何作用？如何禁止访问？\u003C/h3>\n\u003Cp>作用：\u003C/p>\n\u003Col>\n\u003Cli>会话状态管理。如用户登录状态、购物车、游戏分数或其他需要记录的信息\u003C/li>\n\u003Cli>个性化设置。如用户自定义设置、主题或其他设置\u003C/li>\n\u003Cli>浏览器行为追踪。如跟踪分析用户行为等。\u003C/li>\n\u003C/ol>\n\u003Cp>限制：\u003C/p>\n\u003Cul>\n\u003Cli>大小不能超过4kb\u003C/li>\n\u003Cli>cookie总数不能超过20+，具体取决于浏览器\u003C/li>\n\u003Cli>每次请求都会携带cookie数据，会带来额外的性能开销\u003C/li>\n\u003C/ul>\n\u003Cp>如何限制访问Cookies：\u003C/p>\n\u003Col>\n\u003Cli>Secure。只应被HTTPS协议加密过的请求发送给服务端（但无法阻止cookie中敏感信息的访问）\u003C/li>\n\u003Cli>HttpOnly。无法通过\u003Ccode>Document.cookie\u003C/code>API访问到带\u003Ccode>HttpOnly\u003C/code>属性的cookie\u003C/li>\n\u003C/ol>\n\u003Cblockquote>\n\u003Cp>三方cookie：非当前域下的cookie都属于三方cookie\u003C/p>\n\u003C/blockquote>\n\u003Cp>三方cookie的使用场景：\u003C/p>\n\u003Cul>\n\u003Cli>单点登陆\u003C/li>\n\u003Cli>前端日志打点\u003C/li>\n\u003Cli>广告营销\u003C/li>\n\u003Cli>记录用户画像\u003C/li>\n\u003C/ul>\n\u003Cp>SameSite干啥的？阻止浏览器将此Cookie与跨站点请求一起发送，降低跨源信息泄漏的风险。\u003C/p>\n\u003Ch3 id=\"能介绍下http-访问控制cors吗\">能介绍下HTTP 访问控制（CORS）吗？\u003C/h3>\n\u003Cp>跨域访问：双方同意的基础上实现数据的可编程访问\u003C/p>\n\u003Col>\n\u003Cli>为啥会产生跨域？\n\u003Col>\n\u003Cli>保护登录鉴权数据\u003C/li>\n\u003C/ol>\n\u003C/li>\n\u003Cli>那些不会产生跨域？\u003C/li>\n\u003Cli>如何跨域\n\u003Col>\n\u003Cli>带域名限制的跨域方案\n\u003Col>\n\u003Cli>iframe + postMessage\n允许不同页面发送消息\u003C/li>\n\u003Cli>CORS白名单跨域\n一组W3C标准的名称，主要使用服务端的header来控制是否能发送请求\n\u003Cul>\n\u003Cli>access-control-allow-origin 决定来访域名\u003C/li>\n\u003Cli>access-control-allow-headers 决定支持哪些header\u003C/li>\n\u003Cli>\u003Cstrong>Access-Control-Allow-Credentials 决定是否带本域名的cookie\u003C/strong>\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>WebSocket\n不属于http协议，不存在跨域\u003C/li>\n\u003C/ol>\n\u003C/li>\n\u003Cli>无法限制来访域名的跨域方案\n\u003Col>\n\u003Cli>JSONP跨域\n创建script标签，无法确定调用方\u003C/li>\n\u003Cli>表单提交跨域\u003C/li>\n\u003Cli>URL传参跨域\u003C/li>\n\u003Cli>服务端代理跨域\u003C/li>\n\u003C/ol>\n\u003C/li>\n\u003Cli>\u003Ca href=\"http://window.name\">window.name\u003C/a> 跨域\u003C/li>\n\u003C/ol>\n\u003C/li>\n\u003C/ol>\n\u003Cp>使用dns-prefetch：\u003Ccode>&#x3C;link rel=\"dns-prefetch\" href=\"https://fonts.googleapis.com/\" />\u003C/code>\u003C/p>\n\u003Caside class=\"callout callout-warn\">\u003Cdiv class=\"callout-indicator\">\u003Cdiv class=\"callout-hint\">\u003Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" aria-hidden=\"true\">\u003Cpath d=\"M12 9v4m0 4h.01M8.681 4.082C9.351 2.797 10.621 2 12 2s2.649.797 3.319 2.082l6.203 11.904a4.28 4.28 0 0 1-.046 4.019C20.793 21.241 19.549 22 18.203 22H5.797c-1.346 0-2.59-.759-3.273-1.995a4.28 4.28 0 0 1-.046-4.019L8.681 4.082Z\">\u003C/path>\u003C/svg>\u003C/div>\u003Cdiv class=\"callout-title\">Warning\u003C/div>\u003C/div>\u003Cdiv class=\"callout-content\">\u003Cp>\u003Ccode>dns-prefetch\u003C/code> 仅对跨源域上的 DNS 查找有效\u003C/p>\u003C/div>\u003C/aside>\n\u003Ch3 id=\"html属性crossorigin有啥用\">HTML属性\u003Ccode>crossorigin\u003C/code>有啥用？\u003C/h3>\n\u003Cp>\u003Cstrong>\u003Ccode>crossorigin\u003C/code>\u003C/strong> 属性在 \u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/audio\">\u003Ccode>&#x3C;audio>\u003C/code>\u003C/a>、\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/img\">\u003Ccode>&#x3C;img>\u003C/code>\u003C/a>、\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/link\">\u003Ccode>&#x3C;link>\u003C/code>\u003C/a>、\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/script\">\u003Ccode>&#x3C;script>\u003C/code>\u003C/a> 和 \u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/video\">\u003Ccode>&#x3C;video>\u003C/code>\u003C/a> 元素中有效，它们提供对 CORS 的支持，定义该元素如何处理跨源请求，从而实现对该元素获取数据的 CORS 请求的配置。\u003C/p>\n\u003Col>\n\u003Cli>\u003Ccode>crossorigin\u003C/code>会让浏览器启用CORS访问检查，检查http响应头的Access-Control-Allow-Origin\u003C/li>\n\u003Cli>对于传统script需要跨域获取的js资源，控制暴露出其报错的详细信息\n可以使跨域js暴露出跟同域js同样的报错信息\u003C/li>\n\u003Cli>对于\u003Ccode>module script\u003C/code>，控制用于跨域请求的凭据模式\u003C/li>\n\u003C/ol>\n\u003Cp>使用下面的 \u003Ccode>&#x3C;script>\u003C/code>元素告诉浏览器执行来自 \u003Ccode>https://example.com/example-framework.js\u003C/code> 的脚本且不发送用户凭据。\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"html\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"html\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">&#x3C;\u003C/span>\u003Cspan style=\"color:#8DDB8C\">script\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#6CB6FF\">  src\u003C/span>\u003Cspan style=\"color:#ADBAC7\">=\u003C/span>\u003Cspan style=\"color:#96D0FF\">\"https://example.com/example-framework.js\"\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#6CB6FF\">  crossorigin\u003C/span>\u003Cspan style=\"color:#ADBAC7\">=\u003C/span>\u003Cspan style=\"color:#96D0FF\">\"anonymous\"\u003C/span>\u003Cspan style=\"color:#ADBAC7\">>&#x3C;/\u003C/span>\u003Cspan style=\"color:#8DDB8C\">script\u003C/span>\u003Cspan style=\"color:#ADBAC7\">>\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Ch2 id=\"javascript\">JavaScript\u003C/h2>\n\u003Ch3 id=\"说说你知道的javascript解释器\">说说你知道的JavaScript解释器？\u003C/h3>\n\u003Cp>JIT(Just-in-time) compilation engines：\u003C/p>\n\u003Cul>\n\u003Cli>v8。Google Chrome\u003C/li>\n\u003Cli>Chakra。Edge(Internet Explore)\u003C/li>\n\u003Cli>Spider Monkey。Mozilla FireFox\u003C/li>\n\u003Cli>JavaScript Core Webkit。Safari\u003C/li>\n\u003Cli>Hermes。Meta React Native\u003C/li>\n\u003C/ul>\n\u003Cp>Runtime interpreter engines：\u003C/p>\n\u003Cul>\n\u003Cli>QuickJS\u003C/li>\n\u003Cli>Boa。Written in Rust\u003C/li>\n\u003Cli>Rhino。Mozilla\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"javascript为啥被设计为单线程\">JavaScript为啥被设计为单线程？\u003C/h3>\n\u003Cp>与其用途有关，作为浏览器脚本，JavaScript的主要用途是与用户互动、操作DOM。这决定了它只能是单线程。比如，加入JavaScript支持多线程，一个线程添加DOM节点，另一个线程删除DOM节点，这就会带来混乱。\u003C/p>\n\u003Cp>在被设计出来的那个年代来说是一个很好的选择，那个时候很少有多处理器的计算机，而且当时预期由JavaScript处理的代码量相对较少。\u003C/p>\n\u003Cp>自从定时器（setTimeout和setInterval）加入到Web API中，浏览器提供的JavaScript环境就已经逐渐发展到包含任务调度、多线程应用开发等强大特性。\u003C/p>\n\u003Cp>浏览器除了主线程外，后续增加了web worker的能力，允许创建独立的线程。\u003C/p>\n\u003Cp>主线程：处理用户事件、页面绘制。\u003C/p>\n\u003Ch3 id=\"说下微任务和宏任务\">说下微任务和宏任务？\u003C/h3>\n\u003Cul>\n\u003Cli>\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/HTML_DOM_API/Microtask_guide\">在 JavaScript 中通过 queueMicrotask() 使用微任务 - Web API 接口参考 | MDN\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/HTML_DOM_API/Microtask_guide/In_depth\">深入：微任务与 Javascript 运行时环境 - Web API 接口参考 | MDN\u003C/a>\u003C/li>\n\u003C/ul>\n\u003Cp>JavaScript运行时：在执行 JavaScript 代码的时候，JavaScript 运行时实际上维护了一组用于执行 JavaScript 代码的\u003Cstrong>代理\u003C/strong>。每个代理由一组执行上下文的集合、执行上下文栈、主线程、一组可能创建用于执行 worker 的额外的线程集合、一个任务队列以及一个微任务队列构成。除了主线程（某些浏览器在多个代理之间共享的主线程）之外，其他组成部分对该代理都是唯一的。\u003C/p>\n\u003Cp>每个代理都是由事件循环驱动的，事件循环负责收集事件（包含用户事件和其他非用户事件等）、对任务进行排队以便在合适的时机执行回调。然后执行处于等待中的JavaScript任务，然后是微任务，然后在开始下一轮循环之前执行一些必要的渲染和绘制操作。\u003C/p>\n\u003Caside class=\"callout callout-note\">\u003Cdiv class=\"callout-indicator\">\u003Cdiv class=\"callout-hint\">\u003Csvg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" aria-hidden=\"true\">\u003Cpath d=\"M12 8h.01M12 12v4\">\u003C/path>\u003Ccircle cx=\"12\" cy=\"12\" r=\"10\">\u003C/circle>\u003C/svg>\u003C/div>\u003Cdiv class=\"callout-title\">Note\u003C/div>\u003C/div>\u003Cdiv class=\"callout-content\">\u003Cp>网页和APP的代码和浏览器本身的用户界面程序运行在相同的线程中，共享相同的事件循环，该线程就是主线程。它除了运行网页本身的代码之外，还负责收集和派发用户和其他事件，以及渲染和绘制网页内容等。\u003C/p>\u003C/div>\u003C/aside>\n\u003Cp>有以下三种事件循环：\u003C/p>\n\u003Cul>\n\u003Cli>\n\u003Cp>Window事件循环：驱动所有共享同源的窗口（多个同源窗口可能运行在相同的事件循环中，如在窗口中打开新窗口或包含在iframe中）。\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>Worker事件循环：包含所有形式的worker，如web worker、service worker、shared worker\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>Worklet事件循环：驱动运行worklet的代理，包含Worklet、\u003Ca href=\"https://developer.chrome.com/blog/audio-worklet/\">AudioWorklet\u003C/a>以及PaingWorklet\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>在每一次事件循环开始迭代的时候运行时执行队列中每个任务，在每次开始迭代之后加入到队列中的任务需要等到下一次迭代开始后才会被执行。\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>每次当一个任务退出切执行上下文为空时，微任务队列中每一个微任务会依次被执行，直到为空。微任务可以添加微任务，新的微任务在下一次任务开始执行之前，在当前事件循环迭代结束之前执行。\u003C/p>\n\u003C/li>\n\u003C/ul>\n\u003Cp>什么是任务？\u003C/p>\n\u003Cblockquote>\n\u003Cp>由执行诸如从头执行一段程序、执行事件回调或一个interval/timeout被触发而调度的任务JavaScript代码。\u003C/p>\n\u003C/blockquote>\n\u003Cp>何时会将任务添加到任务队列？\u003C/p>\n\u003Col>\n\u003Cli>一段新程序或子程序被直接执行时（比如在控制台或一个\u003Ccode>&#x3C;script>\u003C/code>元素中运行代码）\u003C/li>\n\u003Cli>触发了一个事件，将其回调函数添加到任务队列时\u003C/li>\n\u003Cli>执行一个由setTimeout或setInterval创建的interval或timeout，以致对应的回调函数被添加到任务队列时。\u003C/li>\n\u003C/ol>\n\u003Cblockquote>\n\u003Cp>微任务的执行顺序在所有进行中的任务（pending task）完成之后，在对浏览器的事件循环产生控制之前。\u003C/p>\n\u003C/blockquote>\n\u003Cp>创建微任务的方式：\u003C/p>\n\u003Cul>\n\u003Cli>Web API：\n\u003Col>\n\u003Cli>\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/MutationObserver\">Mutation Observer\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/queueMicrotask\">queueMicrotask\u003C/a>\u003C/li>\n\u003C/ol>\n\u003C/li>\n\u003Cli>JavaScript：\n\u003Col>\n\u003Cli>Promise\u003C/li>\n\u003C/ol>\n\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"聊聊你了解的v8垃圾回收\">聊聊你了解的V8垃圾回收\u003C/h3>\n\u003Ch4 id=\"调用栈的垃圾回收\">调用栈的垃圾回收\u003C/h4>\n\u003Cp>有一个记录当前执行状态的指针(称为 ESP)指向调用栈中的函数执行上下文。当函数执行完成之后，就需要销毁函数的执行上下文了，这时候，ESP 就帮上忙了，JavaScript 会将 ESP 下移到后面的函数执行上下文，这个下移的过程就是销毁当前函数执行上下文的过程。\u003C/p>\n\u003Ch4 id=\"堆中的垃圾回收\">堆中的垃圾回收\u003C/h4>\n\u003Cp>与栈中的垃圾回收不同的是，栈中无效的内存会被直接覆盖掉，而堆中的垃圾回收需要使用 JavaScript 中的垃圾回收器。\u003C/p>\n\u003Cp>垃圾回收一般分为下面的几个步骤：\u003C/p>\n\u003Col>\n\u003Cli>\n\u003Cp>通过 GC Root 标记空间中的\u003Cstrong>活动对象\u003C/strong>和\u003Cstrong>非活动对象\u003C/strong>\n目前 V8 采用 可访问性(reachablility)算法来判断堆中的对象是否为活动对象。这个算法其实就将一些 GC Root 作为初始存活对象的集合，从 GC Root 对象触发，遍历 GC Root 中的所有对象。\u003C/p>\n\u003Col>\n\u003Cli>能够通过 GC Root 遍历到的对象会被认为\u003Cstrong>是可访问的\u003C/strong>，我们将其标记为活动对象，必须保留\u003C/li>\n\u003Cli>如果一个对象无法通过 GC Root 遍历到，那么就认为这个对象是\u003Cstrong>不可访问的\u003C/strong>，可能需要被回收，并标记为非活动对象。\u003C/li>\n\u003C/ol>\n\u003Cp>GC Root通常包括并不限于以下几种：\u003C/p>\n\u003Cul>\n\u003Cli>全局\u003Ccode>windows\u003C/code>对象(位于每个\u003Ccode>iframe\u003C/code>中)\u003C/li>\n\u003Cli>文档 DOM 树,由可以通过遍历文档到达所有原生 DOM 节点组成\u003C/li>\n\u003Cli>存放栈上的变量。\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\n\u003Cp>回收非活动对象占据的内存\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>内存整理\u003C/p>\n\u003C/li>\n\u003C/ol>\n\u003Cp>代际假说：\u003C/p>\n\u003Cul>\n\u003Cli>大部分对象在内存中存在的时间很短，比如说函数内部的变量，或者块级作用域中的变量，当函数或块级代码块执行结束时，作用域内部定义的变量也会被销毁，这一类对象被分配内存后，很快就会变得不可用。\u003C/li>\n\u003Cli>只要不死的对象，都会持续很久的存在，比如说 window、DOM、Web API 等。\u003C/li>\n\u003C/ul>\n\u003Cp>代际假说将对象大致分为两种，长寿的和短命的，垃圾回收也顺势把堆分为新生代和老生代两块区域。\u003C/p>\n\u003Cp>V8 也分别使用了两个不同的垃圾回收器来高效的实施垃圾回收：\u003C/p>\n\u003Cul>\n\u003Cli>副垃圾回收器，主要负责新生代的垃圾回收。\u003Cstrong>Scavenge 算法\u003C/strong>\u003C/li>\n\u003Cli>主垃圾回收器，主要负责老生代的垃圾回收。\u003Cstrong>标记-清除(Mark-Sweep)\u003C/strong>\u003C/li>\n\u003C/ul>\n\u003Cp>\u003Ca href=\"https://zhuanlan.zhihu.com/p/146749402\">V8 垃圾回收原来这么简单？ - 知乎\u003C/a>\u003C/p>\n\u003Ch4 id=\"新生区如何晋升为老生区\">新生区如何晋升为老生区？\u003C/h4>\n\u003Col>\n\u003Cli>一些大的对象会被直接分配到老生区\u003C/li>\n\u003Cli>在新生区经历两次垃圾回收还能存活，会被晋升\u003C/li>\n\u003C/ol>\n\u003Ch4 id=\"全停顿\">全停顿\u003C/h4>\n\u003Cp>垃圾回收操作会暂停 JavaScript 的运行，回收完毕后才会恢复执行，这种行为就是全停顿。\u003C/p>\n\u003Cp>为了降低全停顿所带来的卡顿，V8 引擎采用了增量标记(Incremental Marking) 算法进行优化，将标记过程分为一个个小任务，这些小任务的执行时间比较短，可以穿插在其他的 JavaScript 任务中间执行，这样就不会有明显的卡顿了。\u003C/p>\n\u003Cp>当然，V8 所采用的优化方案不只这一种，而是多种方案综合使用的，除了增量回收还有并行回收、并发回收等。\u003C/p>\n\u003Cul>\n\u003Cli>并行回收：垃圾回收器会使用多个辅助线程来并行执行垃圾回收\u003C/li>\n\u003Cli>并发回收：回收线程在执行 JavaScript 的过程中，辅助线程在后台执行垃圾回收\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"说下执行上下文闭包\">说下执行上下文、闭包？\u003C/h3>\n\u003Cp>闭包：绑定了执行环境的函数。\n闭包的组成部分：\u003C/p>\n\u003Cul>\n\u003Cli>环境部分\n\u003Cul>\n\u003Cli>词法环境（所在执行上下文一部分）\u003C/li>\n\u003Cli>标识符列表：函数中用到的未声明的变量\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>表达式部分：函数体\u003C/li>\n\u003C/ul>\n\u003Cp>在一个函数的执行上下文中包含若干内容：\u003C/p>\n\u003Cul>\n\u003Cli>词法环境。当获取this或变量时使用\u003C/li>\n\u003Cli>变量环境。声明变量时使用\u003C/li>\n\u003Cli>用于恢复代码执行位置的代码执行状态\u003C/li>\n\u003Cli>正在被执行的函数\u003C/li>\n\u003Cli>使用的基础库和内置对象实例\u003C/li>\n\u003Cli>生成器上下文时表示当前生成器\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"实现一个深拷贝\">实现一个深拷贝\u003C/h3>\n\u003Cp>对于可序列化的对象，可直接使用：\u003Ccode>JSON.parse(JSON.stringify(obj))\u003C/code>。但函数、Symbol、HTML Element、递归数据等许多其他情况会失败。\u003Cspan role=\"img\" aria-label=\"frowning face\">☹️\u003C/span>\u003C/p>\n\u003Cp>另一种方式，如果在实现了\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/structuredClone\">\u003Ccode>structuredClone\u003C/code>\u003C/a>的JavaScript运行时环境下，可使用：\u003Ccode>structuredClone(obj)\u003C/code>。（\u003Ccode>core-js\u003C/code>支持polyfill）\u003C/p>\n\u003Cp>手写深拷贝：\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"js\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">function\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> deepClone\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (\u003C/span>\u003Cspan style=\"color:#F69D50\">obj\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, \u003C/span>\u003Cspan style=\"color:#F69D50\">hash\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#F47067\"> new\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> WeakMap\u003C/span>\u003Cspan style=\"color:#ADBAC7\">()) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">    if\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (obj \u003C/span>\u003Cspan style=\"color:#F47067\">===\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> null\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) \u003C/span>\u003Cspan style=\"color:#F47067\">return\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> obj;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">    if\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (obj \u003C/span>\u003Cspan style=\"color:#F47067\">instanceof\u003C/span>\u003Cspan style=\"color:#F69D50\"> Date\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) \u003C/span>\u003Cspan style=\"color:#F47067\">return\u003C/span>\u003Cspan style=\"color:#F47067\"> new\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> Date\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(obj);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">    if\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (obj \u003C/span>\u003Cspan style=\"color:#F47067\">instanceof\u003C/span>\u003Cspan style=\"color:#F69D50\"> RegExp\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) \u003C/span>\u003Cspan style=\"color:#F47067\">return\u003C/span>\u003Cspan style=\"color:#F47067\"> new\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> RegExp\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(obj);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">    if\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (\u003C/span>\u003Cspan style=\"color:#F47067\">typeof\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> obj \u003C/span>\u003Cspan style=\"color:#F47067\">!==\u003C/span>\u003Cspan style=\"color:#96D0FF\"> 'object'\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) \u003C/span>\u003Cspan style=\"color:#F47067\">return\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> obj;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">    if\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (hash.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">has\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(obj)) \u003C/span>\u003Cspan style=\"color:#F47067\">return\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> hash.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">get\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(obj);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">    let\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> cloneObj \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#F47067\"> new\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> obj.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">constructor\u003C/span>\u003Cspan style=\"color:#ADBAC7\">();\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    hash.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">set\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(obj, cloneObj);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">    for\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (\u003C/span>\u003Cspan style=\"color:#F47067\">let\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> key \u003C/span>\u003Cspan style=\"color:#F47067\">in\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> obj) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">        if\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (obj.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">hasOwnProperty\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(key)) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">            cloneObj[key] \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> deepClone\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(obj[key], hash);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">        }\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    }\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">    return\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> cloneObj;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Ch3 id=\"javascript装箱转换拆箱转换\">JavaScript装箱转换、拆箱转换？\u003C/h3>\n\u003Cp>每一种基本类型如Number、String、Boolean、Symbol在对象中都有对应的类，所谓装箱转换，正是把基本类型转换为对应的对象。\u003C/p>\n\u003Cp>使用装箱机制得到Symbol对象：\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"js\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">const\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> symbolObj\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (\u003C/span>\u003Cspan style=\"color:#F47067\">function\u003C/span>\u003Cspan style=\"color:#ADBAC7\">() {\u003C/span>\u003Cspan style=\"color:#F47067\">return\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> this\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;}).\u003C/span>\u003Cspan style=\"color:#DCBDFB\">call\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#DCBDFB\">Symbol\u003C/span>\u003Cspan style=\"color:#ADBAC7\">());\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">console.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">log\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(symbolObj \u003C/span>\u003Cspan style=\"color:#F47067\">instanceof\u003C/span>\u003Cspan style=\"color:#F69D50\"> Symbol\u003C/span>\u003Cspan style=\"color:#ADBAC7\">); \u003C/span>\u003Cspan style=\"color:#768390\">// true\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Cp>在JavaScript标准中规定了ToPrimitive函数，它是对象类型到基本类型的转换（拆箱转换）\n拆箱转换会尝试调用valueOf和toString来获得拆箱后的基本类型。如果valueOf和toString都不存在或未返回基本类型，则会产生类型错误\u003Ccode>TypeError\u003C/code>\u003C/p>\n\u003Ch3 id=\"使用objectprototypetostringcallobj判断类型的原理是啥\">使用\u003Ccode>Object.prototype.toString.call(obj)\u003C/code>判断类型的原理是啥？\u003C/h3>\n\u003Cp>\u003Ca href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toStringTag\">Symbol.toStringTag - JavaScript | MDN\u003C/a>\u003C/p>\n\u003Cp>大多数内置的对象提供了它们自己的 \u003Ccode>@@toStringTag\u003C/code> 属性。所有内置对象的 \u003Ccode>@@toStringTag\u003C/code> 属性都是不可写的（writable）、不可枚举的（enumerable）但是可配置的（configurable）。\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"js\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#6CB6FF\">Object\u003C/span>\u003Cspan style=\"color:#ADBAC7\">.\u003C/span>\u003Cspan style=\"color:#6CB6FF\">prototype\u003C/span>\u003Cspan style=\"color:#ADBAC7\">.toString.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">call\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#F47067\">new\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> Map\u003C/span>\u003Cspan style=\"color:#ADBAC7\">()); \u003C/span>\u003Cspan style=\"color:#768390\">// \"[object Map]\"\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#6CB6FF\">Object\u003C/span>\u003Cspan style=\"color:#ADBAC7\">.\u003C/span>\u003Cspan style=\"color:#6CB6FF\">prototype\u003C/span>\u003Cspan style=\"color:#ADBAC7\">.toString.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">call\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#F47067\">function*\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> () {}); \u003C/span>\u003Cspan style=\"color:#768390\">// \"[object GeneratorFunction]\"\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#6CB6FF\">Object\u003C/span>\u003Cspan style=\"color:#ADBAC7\">.\u003C/span>\u003Cspan style=\"color:#6CB6FF\">prototype\u003C/span>\u003Cspan style=\"color:#ADBAC7\">.toString.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">call\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#6CB6FF\">Promise\u003C/span>\u003Cspan style=\"color:#ADBAC7\">.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">resolve\u003C/span>\u003Cspan style=\"color:#ADBAC7\">()); \u003C/span>\u003Cspan style=\"color:#768390\">// \"[object Promise]\"\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Caside class=\"callout callout-tip\">\u003Cdiv class=\"callout-indicator\">\u003Cdiv class=\"callout-hint\">\u003Csvg viewBox=\"0 0 24 24\" width=\"24\" height=\"24\" fill=\"currentColor\" class=\"callout-hint-tip\">\u003Cpath fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M1.43909 8.85483L1.44039 8.85354L4.96668 5.33815C5.30653 4.99386 5.7685 4.79662 6.2524 4.78972L6.26553 4.78963L12.9014 4.78962L13.8479 3.84308C16.9187 0.772319 20.0546 0.770617 21.4678 0.975145C21.8617 1.02914 22.2271 1.21053 22.5083 1.4917C22.7894 1.77284 22.9708 2.13821 23.0248 2.53199C23.2294 3.94517 23.2278 7.08119 20.1569 10.1521L19.2107 11.0983V17.7338L19.2106 17.7469C19.2037 18.2308 19.0067 18.6933 18.6624 19.0331L15.1456 22.5608C14.9095 22.7966 14.6137 22.964 14.29 23.0449C13.9663 23.1259 13.6267 23.1174 13.3074 23.0204C12.9881 22.9235 12.7011 22.7417 12.4771 22.4944C12.2533 22.2473 12.1006 21.9441 12.0355 21.6171L11.1783 17.3417L6.65869 12.822L4.34847 12.3589L2.38351 11.965C2.05664 11.8998 1.75272 11.747 1.50564 11.5232C1.25835 11.2992 1.07653 11.0122 0.979561 10.6929C0.882595 10.3736 0.874125 10.034 0.955057 9.7103C1.03599 9.38659 1.20328 9.09092 1.43909 8.85483ZM6.8186 10.8724L2.94619 10.096L6.32006 6.73268H10.9583L6.8186 10.8724ZM15.2219 5.21703C17.681 2.75787 20.0783 2.75376 21.1124 2.8876C21.2462 3.92172 21.2421 6.31895 18.783 8.77812L12.0728 15.4883L8.51172 11.9272L15.2219 5.21703ZM13.9042 21.0538L13.1279 17.1811L17.2676 13.0414V17.68L13.9042 21.0538Z\">\u003C/path>\u003Cpath d=\"M9.31827 18.3446C9.45046 17.8529 9.17864 17.3369 8.68945 17.1724C8.56178 17.1294 8.43145 17.1145 8.30512 17.1243C8.10513 17.1398 7.91519 17.2172 7.76181 17.3434C7.62613 17.455 7.51905 17.6048 7.45893 17.7835C6.97634 19.2186 5.77062 19.9878 4.52406 20.4029C4.08525 20.549 3.6605 20.644 3.29471 20.7053C3.35607 20.3395 3.45098 19.9148 3.59711 19.476C4.01221 18.2294 4.78141 17.0237 6.21648 16.5411C6.39528 16.481 6.54504 16.3739 6.65665 16.2382C6.85126 16.0016 6.92988 15.678 6.84417 15.3647C6.83922 15.3466 6.83373 15.3286 6.82767 15.3106C6.74106 15.053 6.55701 14.8557 6.33037 14.7459C6.10949 14.6389 5.84816 14.615 5.59715 14.6994C5.47743 14.7397 5.36103 14.7831 5.24786 14.8294C3.22626 15.6569 2.2347 17.4173 1.75357 18.8621C1.49662 19.6337 1.36993 20.3554 1.30679 20.8818C1.27505 21.1464 1.25893 21.3654 1.25072 21.5213C1.24662 21.5993 1.24448 21.6618 1.24337 21.7066L1.243 21.7226L1.24235 21.7605L1.2422 21.7771L1.24217 21.7827L1.24217 21.7856C1.24217 22.3221 1.67703 22.7579 2.2137 22.7579L2.2155 22.7579L2.22337 22.7578L2.23956 22.7577C2.25293 22.7575 2.27096 22.7572 2.29338 22.7567C2.33821 22.7555 2.40073 22.7534 2.47876 22.7493C2.63466 22.7411 2.85361 22.725 3.11822 22.6932C3.64462 22.6301 4.36636 22.5034 5.13797 22.2464C6.58274 21.7653 8.3431 20.7738 9.17063 18.7522C9.21696 18.639 9.26037 18.5226 9.30064 18.4029C9.30716 18.3835 9.31304 18.364 9.31827 18.3446Z\">\u003C/path>\u003C/svg>\u003C/div>\u003Cdiv class=\"callout-title\">Tip\u003C/div>\u003C/div>\u003Cdiv class=\"callout-content\">\u003Cp>当创建自己的类时，可以自定义标签：\u003C/p>\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"js\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">class\u003C/span>\u003Cspan style=\"color:#F69D50\"> ValidatorClass\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">  get\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> [Symbol.toStringTag]() {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">    return\u003C/span>\u003Cspan style=\"color:#96D0FF\"> \"Validator\"\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">  }\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">}\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#6CB6FF\">Object\u003C/span>\u003Cspan style=\"color:#ADBAC7\">.\u003C/span>\u003Cspan style=\"color:#6CB6FF\">prototype\u003C/span>\u003Cspan style=\"color:#ADBAC7\">.toString.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">call\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#F47067\">new\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> ValidatorClass\u003C/span>\u003Cspan style=\"color:#ADBAC7\">()); \u003C/span>\u003Cspan style=\"color:#768390\">// \"[object Validator]\"\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\u003C/div>\u003C/aside>\n\u003Ch3 id=\"能说下前端的模块系统吗\">能说下前端的模块系统吗？\u003C/h3>\n\u003Ch4 id=\"amd与cmd的区别\">AMD与CMD的区别？\u003C/h4>\n\u003Cul>\n\u003Cli>对于依赖的模块，AMD提前执行，CMD是延迟执行\u003C/li>\n\u003Cli>CMD推崇依赖就近，AMD推崇依赖前置\u003C/li>\n\u003Cli>AMD的API一个能当多个用，职责单一；CMD每个API都简单纯粹\u003C/li>\n\u003C/ul>\n\u003Cp>UMD是AMD和CommonJS的综合产物，AMD用于浏览器，CommonJS用于服务器。UMD则是则是两者的兼容模式，解决了跨平台问题。\u003C/p>\n\u003Ch4 id=\"commonjs的实现原理\">CommonJS的实现原理？\u003C/h4>\n\u003Cp>在编译过程中，对CommonJS模块代码进行包装放到一个函数中，并将require、exports、module作为形参传入进去。\n在模块加载的时候，通过类似eval的函数执行模块包装函数。\u003C/p>\n\u003Ch4 id=\"es-module与commonjs的差异\">ES Module与CommonJS的差异？\u003C/h4>\n\u003Col>\n\u003Cli>语法 \u003Ccode>import/export\u003C/code> \u003Ccode>require/module\u003C/code>\u003C/li>\n\u003Cli>ESM静态导入导出，编译过程确定了模块依赖路径，易实现tree shaking；import() 懒加载、代码分割；\u003C/li>\n\u003Cli>CommonJS同步加载并执行文件；ESM提前加载并执行文件\u003C/li>\n\u003Cli>CommonJS由JS运行时实现；ESM是语言特性支持\u003C/li>\n\u003Cli>ESM模块导出的值是动态的，CommonJS导出值是原始值的副本。\u003C/li>\n\u003C/ol>\n\u003Ch3 id=\"objectis和有啥区别\">\u003Ccode>Object.is\u003C/code>和===有啥区别？\u003C/h3>\n\u003Col>\n\u003Cli>NaN === NaN -> false; Object.is(NaN, NaN) -> true\u003C/li>\n\u003Cli>-0 === +0 -> true; Object.is(-0, +0) -> false\u003C/li>\n\u003C/ol>\n\u003Ch3 id=\"01--02--03\">0.1 + 0.2 === 0.3?\u003C/h3>\n\u003Cp>浮点数类型的值通常表示的是某个数字的近似值。在计算机中，浮点数实际是使用二进制来实现的，但是我们通常想用十进制来完成浮点数运算。这种不匹配性导致了歧义的发生。此外，虽然浮点数通常用来表示实数，然而它的精度是有限。\u003C/p>\n\u003Cp>很多值，无法用二进制精确表示，如 0.1、1/3\u003C/p>\n\u003Cp>测试一个数学运算结果是否落在真实数学结果的一个可接受范围内是比较安全的。这个范围通常被称为机器最小值（EPSILON）或最小单元取整数\u003C/p>\n\u003Ch3 id=\"new-stringfoo和foo相等吗\">\u003Ccode>new String(\"foo\")\u003C/code>和\u003Ccode>\"foo\"\u003C/code>相等吗？\u003C/h3>\n\u003Cp>使用==相等。会进行类型转换\n使用===不相等。不会进行类型转换，\u003Ccode>new String(\"foo\")\u003C/code>是一个包装器对象\u003C/p>\n\u003Ch3 id=\"js-数组为什么没有负数索引\">JS 数组为什么没有负数索引？\u003C/h3>\n\u003Cp>JS最初设计希望足够简单（相对Java），于是将数组下标也统一设计成对象属性访问。这样，一个普通对象就可以当作数组来用；所谓数组，相对普通对象唯一本质性的区别就是有一个魔法属性\u003Ccode>length\u003C/code> 。\u003C/p>\n\u003Cp>如果通过索引找不到会上溯到原型链上去找，不仅有害性能也有安全隐患。\u003C/p>\n\u003Cp>数组下标的coerce是ToString而不是ToNumber。（对于属性的key来说不存在负数，只有字符串而已）\u003C/p>\n\u003Ch3 id=\"typeof-null--object\">typeof null === ‘object’ ?\u003C/h3>\n\u003Cp>js在底层存储变量的时候会在变量的机器码的低位1-3位存储其类型信息(000：对象，010：浮点数，100：字符串，110：布尔，1：整数)，但是null所有机器码均为0，直接被当做了对象来看待。\u003C/p>\n\u003Ch3 id=\"const怎么阻止非原始值的重新赋值\">\u003Ccode>const\u003C/code>怎么阻止非原始值的重新赋值？\u003C/h3>\n\u003Col>\n\u003Cli>Object.freeze（注意，它是shadow的）\u003C/li>\n\u003Cli>TypeScript的as const\u003C/li>\n\u003C/ol>\n\u003Cp>使用场景\u003Cspan role=\"img\" aria-label=\"clapper board\">🎬\u003C/span>：\u003C/p>\n\u003Col>\n\u003Cli>配置对象\u003C/li>\n\u003Cli>常量对象\u003C/li>\n\u003Cli>全局状态\u003C/li>\n\u003Cli>内部实现（属性或方法）\u003C/li>\n\u003C/ol>\n\u003Ch3 id=\"forin-forof区别-迭代器协议与可迭代协议区别内置可迭代对象有哪些\">\u003Ccode>for...in\u003C/code>、 \u003Ccode>for...of\u003C/code>区别？ 迭代器协议与可迭代协议区别？内置可迭代对象有哪些？\u003C/h3>\n\u003Cul>\n\u003Cli>\n\u003Cp>for…in 遍历对象的可枚举属性(Symbol除外，可用Object.getOwnPropertySymbols)\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>for…of 遍历可迭代对象\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>可迭代协议：必须有\u003Ccode>@@iterator\u003C/code>(\u003Ccode>[Symbol.iterator]\u003C/code>)方法\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>迭代器协议：实现了一个拥有以下语义（semantic）的 \u003Cstrong>\u003Ccode>next()\u003C/code>\u003C/strong> 方法\u003C/p>\n\u003Cul>\n\u003Cli>next(), 返回\u003Ccode>IteratorResult\u003C/code>的函数\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ul>\n\u003Cp>内置可迭代对象：\u003C/p>\n\u003Cul>\n\u003Cli>Array\u003C/li>\n\u003Cli>Map/WeakMap\u003C/li>\n\u003Cli>Set/WeakSet\u003C/li>\n\u003Cli>String\u003C/li>\n\u003Cli>TypedArray\u003C/li>\n\u003Cli>arguments\u003C/li>\n\u003Cli>NodeList\u003C/li>\n\u003Cli>Intl.Segments\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"promisesa规范\">Promises/A+规范？\u003C/h3>\n\u003Cp>\u003Ca href=\"https://www.ituring.com.cn/article/66566\">图灵社区\u003C/a>\u003C/p>\n\u003Ch3 id=\"手写promise\">手写Promise\u003C/h3>\n\u003Cp>\u003Ca href=\"https://developer.mozilla.org/zh-CN/play?id=agNnmRm7wwdD7vIzJHurJOmrh7%2FCFcsYRi3BUPQ5y9T3fnS1vkxa%2FJfl2Ym%2BEgA69l9540%2B9qq2LpElR\">MDN Play\u003C/a>\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"js\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">class\u003C/span>\u003Cspan style=\"color:#F69D50\"> MyPromise\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F69D50\">    status\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#96D0FF\"> 'pending'\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F69D50\">    value\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> null\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F69D50\">    reason\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> null\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F69D50\">    onFulfilledCallbacks\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> [];\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F69D50\">    onRejectedCallbacks\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> [];\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">    constructor\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#F69D50\">handler\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">        const\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> resolve\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (\u003C/span>\u003Cspan style=\"color:#F69D50\">v\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) \u003C/span>\u003Cspan style=\"color:#F47067\">=>\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> { \u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#6CB6FF\">            this\u003C/span>\u003Cspan style=\"color:#ADBAC7\">.status \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#96D0FF\"> 'fulfilled'\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#6CB6FF\">            this\u003C/span>\u003Cspan style=\"color:#ADBAC7\">.value \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> v;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#6CB6FF\">            this\u003C/span>\u003Cspan style=\"color:#ADBAC7\">.fulfilledCallbacks.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">forEach\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#F69D50\">cb\u003C/span>\u003Cspan style=\"color:#F47067\"> =>\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> cb\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(v));\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">        };\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">        const\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> reject\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#F69D50\"> e\u003C/span>\u003Cspan style=\"color:#F47067\"> =>\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> { \u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#6CB6FF\">            this\u003C/span>\u003Cspan style=\"color:#ADBAC7\">.status \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#96D0FF\"> 'rejected'\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#6CB6FF\">            this\u003C/span>\u003Cspan style=\"color:#ADBAC7\">.reason \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> e;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#6CB6FF\">            this\u003C/span>\u003Cspan style=\"color:#ADBAC7\">.rejectedCallbacks.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">forEach\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#F69D50\">cb\u003C/span>\u003Cspan style=\"color:#F47067\"> =>\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> cb\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(e));\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">        };\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">        try\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">            handler\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(resolve, reject);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">        } \u003C/span>\u003Cspan style=\"color:#F47067\">catch\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (error) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">            reject\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(error)\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">        }\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    }\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">    then\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (\u003C/span>\u003Cspan style=\"color:#F69D50\">onFulfilled\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, \u003C/span>\u003Cspan style=\"color:#F69D50\">onRejected\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) { \u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">        return\u003C/span>\u003Cspan style=\"color:#F47067\"> new\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> MyPromise\u003C/span>\u003Cspan style=\"color:#ADBAC7\">((\u003C/span>\u003Cspan style=\"color:#F69D50\">resolve\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, \u003C/span>\u003Cspan style=\"color:#F69D50\">reject\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) \u003C/span>\u003Cspan style=\"color:#F47067\">=>\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">            if\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (\u003C/span>\u003Cspan style=\"color:#6CB6FF\">this\u003C/span>\u003Cspan style=\"color:#ADBAC7\">.status \u003C/span>\u003Cspan style=\"color:#F47067\">===\u003C/span>\u003Cspan style=\"color:#96D0FF\"> 'rejected'\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) { \u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">                try\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">                    const\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> rejectedFromLastPromise\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> onRejected\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#6CB6FF\">this\u003C/span>\u003Cspan style=\"color:#ADBAC7\">.reason);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">                    if\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (rejectedFromLastPromise \u003C/span>\u003Cspan style=\"color:#F47067\">instanceof\u003C/span>\u003Cspan style=\"color:#F69D50\"> MyPromise\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) { \u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">                        rejectedFromLastPromise.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">then\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(resolve, reject);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">                    } \u003C/span>\u003Cspan style=\"color:#F47067\">else\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> { \u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">                        reject\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(rejectedFromLastPromise);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">                    }\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">                } \u003C/span>\u003Cspan style=\"color:#F47067\">catch\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (error) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">                    reject\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(error);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">                }\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">            }\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">            if\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (\u003C/span>\u003Cspan style=\"color:#6CB6FF\">this\u003C/span>\u003Cspan style=\"color:#ADBAC7\">.status \u003C/span>\u003Cspan style=\"color:#F47067\">===\u003C/span>\u003Cspan style=\"color:#96D0FF\"> 'fulfilled'\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) { \u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">                try\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">                    const\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> resolvedFromLastPromise\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> onFulfilled\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#6CB6FF\">this\u003C/span>\u003Cspan style=\"color:#ADBAC7\">.value);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">                    if\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (resolvedFromLastPromise \u003C/span>\u003Cspan style=\"color:#F47067\">instanceof\u003C/span>\u003Cspan style=\"color:#F69D50\"> MyPromise\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) { \u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">                        resolvedFromLastPromise.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">then\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(resolve, reject);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">                    } \u003C/span>\u003Cspan style=\"color:#F47067\">else\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> { \u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">                        resolve\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(resolvedFromLastPromise);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">                    }\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">                } \u003C/span>\u003Cspan style=\"color:#F47067\">catch\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (error) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">                    reject\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(error)\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">                }\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">            }\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">            if\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (\u003C/span>\u003Cspan style=\"color:#6CB6FF\">this\u003C/span>\u003Cspan style=\"color:#ADBAC7\">.status \u003C/span>\u003Cspan style=\"color:#F47067\">===\u003C/span>\u003Cspan style=\"color:#96D0FF\"> 'pending'\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) { \u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#6CB6FF\">                this\u003C/span>\u003Cspan style=\"color:#ADBAC7\">.onFulfilledCallbacks.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">push\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(() \u003C/span>\u003Cspan style=\"color:#F47067\">=>\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> { \u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">                    try\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">                        const\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> resolvedFromLastPromise\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> onFulfilled\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#6CB6FF\">this\u003C/span>\u003Cspan style=\"color:#ADBAC7\">.value);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">                        if\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (resolvedFromLastPromise \u003C/span>\u003Cspan style=\"color:#F47067\">instanceof\u003C/span>\u003Cspan style=\"color:#F69D50\"> MyPromise\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) { \u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">                            resolvedFromLastPromise.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">then\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(resolve, reject);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">                        } \u003C/span>\u003Cspan style=\"color:#F47067\">else\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> { \u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">                            resolve\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(resolvedFromLastPromise);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">                        }\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">                    } \u003C/span>\u003Cspan style=\"color:#F47067\">catch\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (error) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">                        reject\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(error)\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">                    }\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">                });\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#6CB6FF\">                this\u003C/span>\u003Cspan style=\"color:#ADBAC7\">.onRejectedCallbacks.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">push\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(() \u003C/span>\u003Cspan style=\"color:#F47067\">=>\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> { \u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">                    try\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">                        const\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> rejectedFromLastPromise\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> onRejected\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#6CB6FF\">this\u003C/span>\u003Cspan style=\"color:#ADBAC7\">.reason);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">                        if\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (rejectedFromLastPromise \u003C/span>\u003Cspan style=\"color:#F47067\">instanceof\u003C/span>\u003Cspan style=\"color:#F69D50\"> MyPromise\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) { \u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">                            rejectedFromLastPromise.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">then\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(resolve, reject);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">                        } \u003C/span>\u003Cspan style=\"color:#F47067\">else\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> { \u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">                            reject\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(rejectedFromLastPromise);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">                        }\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">                    } \u003C/span>\u003Cspan style=\"color:#F47067\">catch\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (error) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">                        reject\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(error);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">                    }\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">                });\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">            }\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">        });\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    }\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Ch3 id=\"实现new\">实现new\u003C/h3>\n\u003Cp>\u003Ccode>new\u003C/code>操作符做了什么？\u003C/p>\n\u003Col>\n\u003Cli>创建了一个全新的对象。\u003C/li>\n\u003Cli>这个对象会被执行\u003Ccode>[[Prototype]]\u003C/code>（也就是\u003Ccode>__proto__\u003C/code>）链接。\u003C/li>\n\u003Cli>生成的新对象会绑定到函数调用的\u003Ccode>this\u003C/code>。\u003C/li>\n\u003Cli>通过\u003Ccode>new\u003C/code>创建的每个对象将最终被\u003Ccode>[[Prototype]]\u003C/code>链接到这个函数的\u003Ccode>prototype\u003C/code>对象上。\u003C/li>\n\u003Cli>如果函数没有返回对象类型\u003Ccode>Object\u003C/code>(包含\u003Ccode>Functoin\u003C/code>, \u003Ccode>Array\u003C/code>, \u003Ccode>Date\u003C/code>, \u003Ccode>RegExg\u003C/code>, \u003Ccode>Error\u003C/code>)，那么\u003Ccode>new\u003C/code>表达式中的函数调用会自动返回这个新的对象。\u003C/li>\n\u003Cli>怎么模拟实现\u003C/li>\n\u003C/ol>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"js\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">function\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> myNew\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#F69D50\">ctor\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, \u003C/span>\u003Cspan style=\"color:#F47067\">...\u003C/span>\u003Cspan style=\"color:#F69D50\">args\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">    // ES6 new.target 指向构造函数\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    myNew.traget \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> ctor;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">    let\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> newObj \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> Object.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">create\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(ctor);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">    const\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> ctorReturnResult\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> ctor.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">apply\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(newObj, args);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">    if\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (\u003C/span>\u003Cspan style=\"color:#F47067\">typeof\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> ctorReturnResult \u003C/span>\u003Cspan style=\"color:#F47067\">===\u003C/span>\u003Cspan style=\"color:#96D0FF\"> 'object'\u003C/span>\u003Cspan style=\"color:#F47067\"> &#x26;&#x26;\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> ctorReturnResult \u003C/span>\u003Cspan style=\"color:#F47067\">!==\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> null\u003C/span>\u003Cspan style=\"color:#F47067\"> ||\u003C/span>\u003Cspan style=\"color:#F47067\"> typeof\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> ctorReturnResult \u003C/span>\u003Cspan style=\"color:#F47067\">===\u003C/span>\u003Cspan style=\"color:#96D0FF\"> 'function'\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) \u003C/span>\u003Cspan style=\"color:#F47067\">return\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> ctorReturnResult;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">    return\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> newObj;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Ch3 id=\"实现instanceof\">实现instanceof\u003C/h3>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"js\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">function\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> myInstanceof\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#F69D50\">left\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, \u003C/span>\u003Cspan style=\"color:#F69D50\">right\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    left \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> left.\u003C/span>\u003Cspan style=\"color:#6CB6FF\">__proto__\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">    while\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (\u003C/span>\u003Cspan style=\"color:#6CB6FF\">true\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">        if\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (\u003C/span>\u003Cspan style=\"color:#F47067\">!\u003C/span>\u003Cspan style=\"color:#ADBAC7\">left) \u003C/span>\u003Cspan style=\"color:#F47067\">return\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> false\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">        if\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> ((left \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> left.\u003C/span>\u003Cspan style=\"color:#6CB6FF\">__proto__\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) \u003C/span>\u003Cspan style=\"color:#F47067\">===\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> right\u003C/span>\u003Cspan style=\"color:#ADBAC7\">.\u003C/span>\u003Cspan style=\"color:#6CB6FF\">prototype\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) \u003C/span>\u003Cspan style=\"color:#F47067\">return\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> true\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    }\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Cul>\n\u003Cli>首先获取类型的原型\u003C/li>\n\u003Cli>然后获得对象的原型\u003C/li>\n\u003Cli>然后一直循环判断对象的原型是否等于类型的原型，直到对象原型为 \u003Ccode>null\u003C/code>，因为原型链最终为 \u003Ccode>null\u003C/code>\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"实现eventemitter\">实现EventEmitter\u003C/h3>\n\u003Cp>\u003Ca href=\"https://github.com/developit/mitt/blob/main/src/index.ts\">mitt\u003C/a>\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"js\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">function\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> emitter\u003C/span>\u003Cspan style=\"color:#ADBAC7\">() {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">    const\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> all\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#F47067\"> new\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> Map\u003C/span>\u003Cspan style=\"color:#ADBAC7\">();\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">    return\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">        all,\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">        on\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (\u003C/span>\u003Cspan style=\"color:#F69D50\">type\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, \u003C/span>\u003Cspan style=\"color:#F69D50\">handler\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">            if\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (\u003C/span>\u003Cspan style=\"color:#F47067\">!\u003C/span>\u003Cspan style=\"color:#ADBAC7\">all.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">has\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(type)) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">                all.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">set\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(type, []);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">            }\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">            all.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">get\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(type).\u003C/span>\u003Cspan style=\"color:#DCBDFB\">push\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(handler);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">        },\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">        emit\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (\u003C/span>\u003Cspan style=\"color:#F69D50\">type\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, \u003C/span>\u003Cspan style=\"color:#F47067\">...\u003C/span>\u003Cspan style=\"color:#F69D50\">args\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">            if\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (\u003C/span>\u003Cspan style=\"color:#F47067\">!\u003C/span>\u003Cspan style=\"color:#ADBAC7\">all.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">has\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(type)) \u003C/span>\u003Cspan style=\"color:#F47067\">return\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">            all.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">get\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(type).\u003C/span>\u003Cspan style=\"color:#DCBDFB\">forEach\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#F69D50\">handler\u003C/span>\u003Cspan style=\"color:#F47067\"> =>\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> handler\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#F47067\">...\u003C/span>\u003Cspan style=\"color:#ADBAC7\">args));\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">        },\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">        off\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (\u003C/span>\u003Cspan style=\"color:#F69D50\">type\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, \u003C/span>\u003Cspan style=\"color:#F69D50\">handler\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">            if\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (\u003C/span>\u003Cspan style=\"color:#F47067\">!\u003C/span>\u003Cspan style=\"color:#ADBAC7\">all.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">has\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(type)) \u003C/span>\u003Cspan style=\"color:#F47067\">return\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">            all.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">get\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(type).\u003C/span>\u003Cspan style=\"color:#DCBDFB\">splice\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(all.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">get\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(type).\u003C/span>\u003Cspan style=\"color:#DCBDFB\">indexOf\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(handler) \u003C/span>\u003Cspan style=\"color:#F47067\">>>>\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> 0\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, \u003C/span>\u003Cspan style=\"color:#6CB6FF\">1\u003C/span>\u003Cspan style=\"color:#ADBAC7\">);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">        }\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    };\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Ch3 id=\"实现callapplybind\">实现call/apply/bind\u003C/h3>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"js\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">function\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> myBind\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#F69D50\">context\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> window, \u003C/span>\u003Cspan style=\"color:#F47067\">...\u003C/span>\u003Cspan style=\"color:#F69D50\">args\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">    if\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (\u003C/span>\u003Cspan style=\"color:#6CB6FF\">this\u003C/span>\u003Cspan style=\"color:#F47067\"> ===\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> Function\u003C/span>\u003Cspan style=\"color:#ADBAC7\">.\u003C/span>\u003Cspan style=\"color:#6CB6FF\">prototype\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) \u003C/span>\u003Cspan style=\"color:#F47067\">throw\u003C/span>\u003Cspan style=\"color:#F47067\"> new\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> Error\u003C/span>\u003Cspan style=\"color:#ADBAC7\">()\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">    const\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> fn\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> Symbol.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">for\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#96D0FF\">'bind'\u003C/span>\u003Cspan style=\"color:#ADBAC7\">);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    context[fn] \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> this\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">    const\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> result\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> context[fn](\u003C/span>\u003Cspan style=\"color:#F47067\">...\u003C/span>\u003Cspan style=\"color:#ADBAC7\">args);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">    delete\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> context[fn];\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">    return\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> result;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">}\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">function\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> myApply\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#F69D50\">context\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, \u003C/span>\u003Cspan style=\"color:#F69D50\">args\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">    const\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> fn\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> Symbol.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">for\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#96D0FF\">'apply'\u003C/span>\u003Cspan style=\"color:#ADBAC7\">);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    context[fn] \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> this\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">    const\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> result\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> context[fn](\u003C/span>\u003Cspan style=\"color:#F47067\">...\u003C/span>\u003Cspan style=\"color:#ADBAC7\">args);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">    delete\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> result[fn]\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">    return\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> result;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">}\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">function\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> myBind\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#F69D50\">context\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, \u003C/span>\u003Cspan style=\"color:#F69D50\">args\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">    const\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> _this\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> this\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;_\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">    return\u003C/span>\u003Cspan style=\"color:#F47067\"> function\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#F47067\">...\u003C/span>\u003Cspan style=\"color:#F69D50\">args2\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">        return\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> _this.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">apply\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(context, args.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">concat\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(args2));\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    }\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Ch3 id=\"实现柯里化函数\">实现柯里化函数\u003C/h3>\n\u003Cp>用闭包把参数保存起来，当参数的数量足够执行函数了，就开始执行函数。\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"js\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">function\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> currying\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#F69D50\">fn\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, \u003C/span>\u003Cspan style=\"color:#F47067\">...\u003C/span>\u003Cspan style=\"color:#F69D50\">args\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">    if\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (args.\u003C/span>\u003Cspan style=\"color:#6CB6FF\">length\u003C/span>\u003Cspan style=\"color:#F47067\"> >=\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> fn.\u003C/span>\u003Cspan style=\"color:#6CB6FF\">length\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) \u003C/span>\u003Cspan style=\"color:#F47067\">return\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> fn\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#F47067\">...\u003C/span>\u003Cspan style=\"color:#ADBAC7\">args);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">    return\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (\u003C/span>\u003Cspan style=\"color:#F47067\">...\u003C/span>\u003Cspan style=\"color:#F69D50\">args2\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) \u003C/span>\u003Cspan style=\"color:#F47067\">=>\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> currying\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(fn, \u003C/span>\u003Cspan style=\"color:#F47067\">...\u003C/span>\u003Cspan style=\"color:#ADBAC7\">args, \u003C/span>\u003Cspan style=\"color:#F47067\">...\u003C/span>\u003Cspan style=\"color:#ADBAC7\">args2)\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Ch3 id=\"实现类似lodash的get方法\">实现类似lodash的get方法\u003C/h3>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"js\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">const\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> get\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (\u003C/span>\u003Cspan style=\"color:#F69D50\">obj\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, \u003C/span>\u003Cspan style=\"color:#F69D50\">paths\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, \u003C/span>\u003Cspan style=\"color:#F69D50\">defaultValue\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) \u003C/span>\u003Cspan style=\"color:#F47067\">=>\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">    const\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> res\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (\u003C/span>\u003Cspan style=\"color:#F47067\">typeof\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> paths \u003C/span>\u003Cspan style=\"color:#F47067\">===\u003C/span>\u003Cspan style=\"color:#96D0FF\"> 'string'\u003C/span>\u003Cspan style=\"color:#F47067\"> ?\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> paths.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">split\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#96D0FF\">'.'\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) \u003C/span>\u003Cspan style=\"color:#F47067\">:\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> paths).\u003C/span>\u003Cspan style=\"color:#DCBDFB\">flatMap\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#F69D50\">s\u003C/span>\u003Cspan style=\"color:#F47067\"> =>\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> s.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">split\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#96D0FF\">'['\u003C/span>\u003Cspan style=\"color:#ADBAC7\">).\u003C/span>\u003Cspan style=\"color:#DCBDFB\">flatMap\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#F69D50\">s\u003C/span>\u003Cspan style=\"color:#F47067\"> =>\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> s.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">split\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#96D0FF\">']'\u003C/span>\u003Cspan style=\"color:#ADBAC7\">).\u003C/span>\u003Cspan style=\"color:#DCBDFB\">filter\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(Boolean))).\u003C/span>\u003Cspan style=\"color:#DCBDFB\">reduce\u003C/span>\u003Cspan style=\"color:#ADBAC7\">((\u003C/span>\u003Cspan style=\"color:#F69D50\">acc\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, \u003C/span>\u003Cspan style=\"color:#F69D50\">cur\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) \u003C/span>\u003Cspan style=\"color:#F47067\">=>\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> acc \u003C/span>\u003Cspan style=\"color:#F47067\">&#x26;&#x26;\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> Reflect.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">get\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(acc, cur), obj);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">    return\u003C/span>\u003Cspan style=\"color:#F47067\"> typeof\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> res \u003C/span>\u003Cspan style=\"color:#F47067\">===\u003C/span>\u003Cspan style=\"color:#96D0FF\"> 'undefined'\u003C/span>\u003Cspan style=\"color:#F47067\"> ?\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> defaultValue \u003C/span>\u003Cspan style=\"color:#F47067\">:\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> res;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Ch3 id=\"typescript中type和interface区别在哪如何抉择\">TypeScript中type和interface区别在哪？如何抉择？\u003C/h3>\n\u003Col>\n\u003Cli>interface无法表示联合类型、映射类型和条件类型，type可以\u003C/li>\n\u003Cli>interface可以使用extends，type不行（此外，\u003Ccode>extends\u003C/code>比\u003Ccode>&#x26;\u003C/code>更快）\u003C/li>\n\u003Cli>在同一个scope下重复声明interface会merge（三方库类型扩展很方便），而type会报错\u003C/li>\n\u003Cli>type隐式实现了索引签名，而interface没有\u003C/li>\n\u003C/ol>\n\u003Cp>1\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"ts\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"ts\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">// unions\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">type\u003C/span>\u003Cspan style=\"color:#F69D50\"> A\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> boolean\u003C/span>\u003Cspan style=\"color:#F47067\"> |\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> string\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">// mapped types\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">type\u003C/span>\u003Cspan style=\"color:#F69D50\"> B\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> { [\u003C/span>\u003Cspan style=\"color:#F69D50\">x\u003C/span>\u003Cspan style=\"color:#F47067\">:\u003C/span>\u003Cspan style=\"color:#6CB6FF\">string\u003C/span>\u003Cspan style=\"color:#ADBAC7\">]\u003C/span>\u003Cspan style=\"color:#F47067\">:\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> boolean\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> };\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">// conditional types\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">type\u003C/span>\u003Cspan style=\"color:#F69D50\"> C\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#F69D50\"> A\u003C/span>\u003Cspan style=\"color:#F47067\"> extends\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> boolean\u003C/span>\u003Cspan style=\"color:#F47067\"> ?\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> string\u003C/span>\u003Cspan style=\"color:#F47067\"> :\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> boolean\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Cp>2\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"ts\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"ts\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">interface\u003C/span>\u003Cspan style=\"color:#F69D50\"> A\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F69D50\">    name\u003C/span>\u003Cspan style=\"color:#F47067\">:\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> string\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">}\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">interface\u003C/span>\u003Cspan style=\"color:#F69D50\"> B\u003C/span>\u003Cspan style=\"color:#F47067\"> extends\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> A\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F69D50\">    age\u003C/span>\u003Cspan style=\"color:#F47067\">:\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> number\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">}\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">type\u003C/span>\u003Cspan style=\"color:#F69D50\"> C\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> { \u003C/span>\u003Cspan style=\"color:#F69D50\">name\u003C/span>\u003Cspan style=\"color:#F47067\">:\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> string\u003C/span>\u003Cspan style=\"color:#ADBAC7\">; } \u003C/span>\u003Cspan style=\"color:#F47067\">&#x26;\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> { \u003C/span>\u003Cspan style=\"color:#F69D50\">age\u003C/span>\u003Cspan style=\"color:#F47067\">:\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> number\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> };\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Cp>3\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"ts\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"ts\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">interface\u003C/span>\u003Cspan style=\"color:#F69D50\"> A\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F69D50\">    name\u003C/span>\u003Cspan style=\"color:#F47067\">:\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> string\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">}\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">interface\u003C/span>\u003Cspan style=\"color:#F69D50\"> A\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F69D50\">    age\u003C/span>\u003Cspan style=\"color:#F47067\">:\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> number\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Cp>4\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"ts\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"ts\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">type\u003C/span>\u003Cspan style=\"color:#F69D50\"> A\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#F69D50\"> Record\u003C/span>\u003Cspan style=\"color:#ADBAC7\">&#x3C;\u003C/span>\u003Cspan style=\"color:#6CB6FF\">string\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, \u003C/span>\u003Cspan style=\"color:#6CB6FF\">boolean\u003C/span>\u003Cspan style=\"color:#ADBAC7\">>;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">interface\u003C/span>\u003Cspan style=\"color:#F69D50\"> B\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> { \u003C/span>\u003Cspan style=\"color:#F69D50\">x\u003C/span>\u003Cspan style=\"color:#F47067\">:\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> number\u003C/span>\u003Cspan style=\"color:#ADBAC7\">; \u003C/span>\u003Cspan style=\"color:#F69D50\">y\u003C/span>\u003Cspan style=\"color:#F47067\">:\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> number\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> };\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">const\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> attrs\u003C/span>\u003Cspan style=\"color:#F47067\">:\u003C/span>\u003Cspan style=\"color:#F69D50\"> B\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> { x: \u003C/span>\u003Cspan style=\"color:#6CB6FF\">1\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, y: \u003C/span>\u003Cspan style=\"color:#6CB6FF\">2\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> };\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">// Type 'B' is not assignable to type 'A'.\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">// Index signature for type 'string' is missing in type 'B'.\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">const\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> newAttrs\u003C/span>\u003Cspan style=\"color:#F47067\">:\u003C/span>\u003Cspan style=\"color:#F69D50\"> A\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> attrs;\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Ch2 id=\"web框架\">Web框架\u003C/h2>\n\u003Ch3 id=\"解释下csrssrssgisrrsc\">解释下CSR、SSR、SSG、ISR、RSC？\u003C/h3>\n\u003Col>\n\u003Cli>CSR客户端渲染，下载脚本，加载服务端数据，然后渲染\u003C/li>\n\u003Cli>SSR是服务端渲染，服务端加载数据，渲染HTML，然后客户端下载脚本，然后注水加交互\u003C/li>\n\u003Cli>SSG、ISR、RSC都是SSR的不同形式。\n\u003Col>\n\u003Cli>SSG是SSR的预处理版本，先在编译时运行SSR，产出HTML（类比预制菜）\u003C/li>\n\u003Cli>ISR全称Incremental Static Regeneration增量静态再生，是SSR和SSG的结合，第一次请求特定页面将生成的HTML发送并保存（有过期时间），下次再次请求直接返回上次生成的\u003C/li>\n\u003Cli>RSC在SSR基础上提供Server Component的能力，用组件的方式写服务端逻辑，类似PHP，好处是返回的文件大小降低了。\u003C/li>\n\u003C/ol>\n\u003C/li>\n\u003C/ol>\n\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/fw6/assets/main/toy_docs/20230804174545.png\" alt=\"image.png\">\u003C/p>\n\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/fw6/assets/main/toy_docs/20230804174558.png\" alt=\"image.png\">\nSSR\u003C/p>\n\u003Ch3 id=\"diff-dom\">Diff DOM\u003C/h3>\n\u003Cp>当组件被渲染时，虚拟 DOM 计算新状态和先前状态之间的差异（diffing），并对真实 DOM 进行最小的更改集，以使其与更新的虚拟 DOM 同步（reconciliation）。\u003C/p>\n\u003Cp>\u003Cstrong>Block Virtual DOM\u003C/strong>\u003C/p>\n\u003Col>\n\u003Cli>静态分析阶段，将树的动态部分提取到 mappings 中（可以在编译时也可以在运行时）;\u003C/li>\n\u003Cli>通过脏检查比较数据来确定发生了哪些变化。状态变化则通过mappings更新DOM（只设计状态而不是虚拟DOM）\u003C/li>\n\u003C/ol>\n\u003Cp>具体步骤\u003C/p>\n\u003Cul>\n\u003Cli>不使用React渲染jsx，而是使用million.js，用holes 表示动态变化的部分并传递到虚拟DOM，holes作为动态内容的占位符\u003C/li>\n\u003Cli>一旦通过脏检查确定状态变化的内容，即可通过mappings找到各自的节点并直接更新DOM\nBlock Virtual DOM适合的使用场景：\u003C/li>\n\u003Cli>静态内容较多。此时可跳过大量静态部分\u003C/li>\n\u003Cli>适用于稳定、变化不大的UI树，\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"vue\">Vue\u003C/h3>\n\u003Ch4 id=\"谈谈你对mvvm的理解\">谈谈你对MVVM的理解？\u003C/h4>\n\u003Cp>MVVM 是 Model-View-ViewModel 的缩写。MVVM 是一种设计思想。 Model 层代表数据模型，也可以在 Model 中定义数据修改和操作的业务逻辑; View 代表 UI 组件，它负责将数据模型转化成 UI 展现出来，View 是一个同步 View 和 Model 的对象 在 MVVM 架构下，View 和 Model 之间并没有直接的联系，而是通过 ViewModel 进行交互， Model 和 ViewModel 之间的交互是双向的， 因此 View 数据的变化会同步到 Model 中，而 Model 数据的变化也会立即反应到 View 上。 对 ViewModel 通过双向数据绑定把 View 层和 Model 层连接了起来，而 View 和 Model 之间的 同步工作完全是自动的，无需人为干涉，因此开发者只需关注业务逻辑，不需要手动操作 DOM，不需要关注数据状态的同步问题，复杂的数据状态维护完全由 MVVM 来统一管理。\u003C/p>\n\u003Ch4 id=\"vue的响应式系统如何创建的\">Vue的响应式系统如何创建的？\u003C/h4>\n\u003Cp>Vue的响应性系统是通过深度转换JavaScript对象为响应式代理来实现的。通过Proxy追踪对象的读写操作。\u003C/p>\n\u003Cp>在track内部，检查当前正在运行的副作用，被将副作用存储在一个全局的WeakMap数据结构中。\n在trigger中，查好该属性所有的副作用订阅，并执行它们。\u003C/p>\n\u003Cp>在响应式副作用中，更新视图（调用虚拟DOM渲染函数）。\u003C/p>\n\u003Ch4 id=\"vue为何跟推荐使用模板而非渲染函数\">Vue为何跟推荐使用模板而非渲染函数？\u003C/h4>\n\u003Cp>Vue 模板会被预编译成虚拟 DOM 渲染函数。Vue 也提供了 API 使我们可以不使用模板编译，直接手写渲染函数。在处理高度动态的逻辑时，渲染函数相比于模板更加灵活，因为你可以完全地使用 JavaScript 来构造你想要的 vnode。\u003C/p>\n\u003Cp>那么为什么 Vue 默认推荐使用模板呢？有以下几点原因：\u003C/p>\n\u003Col>\n\u003Cli>模板更贴近实际的 HTML。这使得我们能够更方便地重用一些已有的 HTML 代码片段，能够带来更好的可访问性体验、能更方便地使用 CSS 应用样式，并且更容易使设计师理解和修改。\u003C/li>\n\u003Cli>由于其确定的语法，更容易对模板做静态分析。这使得 Vue 的模板编译器能够应用许多编译时优化来提升虚拟 DOM 的性能表现。\u003C/li>\n\u003C/ol>\n\u003Cp>编译器可以静态分析模板并在生成的代码中留下标记，使得运行时尽可能地走捷径。与此同时，Vue仍旧保留了边界情况时用户想要使用底层渲染函数的能力。称这种混合解决方案为\u003Cstrong>带编译时信息的虚拟 DOM\u003C/strong>。\u003C/p>\n\u003Cp>提升运行时性能的手段：\u003C/p>\n\u003Col>\n\u003Cli>静态提升。复用、压缩静态内容\u003C/li>\n\u003Cli>编译时保留更新类型标记。使用位掩码技术更新和检查：元素所需的更新类型、vnode子节点类型\u003C/li>\n\u003Cli>树结构拍平。将结构稳定的部分编译为一个拍平的数据，减少虚拟DOM协调时需要遍历的节点数量，任何静态部分都会被略过。\u003C/li>\n\u003C/ol>\n\u003Ch4 id=\"vue3组合式api的优势有哪些\">Vue3组合式API的优势有哪些？\u003C/h4>\n\u003Col>\n\u003Cli>更好的逻辑复用\u003C/li>\n\u003Cli>更灵活的代码组织\u003C/li>\n\u003Cli>更好的类型推导\u003C/li>\n\u003Cli>更小的生产包体积\u003C/li>\n\u003C/ol>\n\u003Ch4 id=\"vue3的渲染机制\">Vue3的渲染机制？\u003C/h4>\n\u003Cp>\u003Ca href=\"https://cn.vuejs.org/guide/extras/rendering-mechanism.html\">渲染机制 | Vue.js\u003C/a>\u003C/p>\n\u003Col>\n\u003Cli>编译\nVue模板被编译为渲染函数，即用来返回虚拟DOM树的函数。\u003C/li>\n\u003Cli>挂载\n运行时渲染器调用渲染函数，遍历返回的VNode并创建实际DOM\u003C/li>\n\u003Cli>更新\n依赖发生变化，副作用重新执行，创建更新后的VNode并Diff，将必要的更新应用到DOM\n\u003Cimg src=\"https://raw.githubusercontent.com/fw6/assets/main/toy_docs/20230810161231.png\" alt=\"image.png\">\u003C/li>\n\u003C/ol>\n\u003Ch4 id=\"vue的生命周期\">Vue的生命周期？\u003C/h4>\n\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/fw6/assets/main/toy_docs/20230802160714.png\" alt=\"image.png\">\u003C/p>\n\u003Ch4 id=\"vue2和vue3-diff算法分别说一下\">Vue2和Vue3 Diff算法分别说一下？\u003C/h4>\n\u003Cp>简单来说，diff 算法有以下过程\u003C/p>\n\u003Cul>\n\u003Cli>同级比较，再比较子节点\u003C/li>\n\u003Cli>先判断一方有子节点一方没有子节点的情况(如果新的 children 没有子节点，将旧的子节点移除)\u003C/li>\n\u003Cli>比较都有子节点的情况(核心 diff)\u003C/li>\n\u003Cli>递归比较子节点\u003C/li>\n\u003C/ul>\n\u003Cp>\u003Cstrong>Vue2 的核心 Diff 算法采用了双端比较的算法\u003C/strong>。同时从新旧 children 的两端开始进行比较，借助 key 值找到可复用的节点，再进行相关操作。相比 React 的 Diff 算法，同样情况下可以减少移动节点次数，减少不必要的性能损耗，更加的优雅。\u003C/p>\n\u003Cp>\u003Cstrong>Vue3.x 借鉴了 ivi 算法和 inferno 算法\u003C/strong>。在创建 VNode 时就确定其类型，以及在 mount/patch 的过程中采用位运算来判断一个 VNode 的类型，在这个基础之上再配合核心的 Diff 算法，使得性能上较 Vue2.x 有了提升。该算法中还运用了动态规划的思想求解最长递归子序列。\u003C/p>\n\u003Ch4 id=\"解释一下-vue-router-的完整的导航解析流程是什么\">解释一下 vue-router 的完整的导航解析流程是什么？\u003C/h4>\n\u003Cp>一次完整的导航解析流程如下：\u003C/p>\n\u003Cul>\n\u003Cli>1.导航被触发。\u003C/li>\n\u003Cli>2.在失活的组件里调用离开守卫。\u003C/li>\n\u003Cli>3.调用全局的 beforeEach 守卫。\u003C/li>\n\u003Cli>4.在重用的组件里调用 beforeRouteUpdate 守卫（2.2+）。\u003C/li>\n\u003Cli>5.在路由配置里调用 beforeEnter。\u003C/li>\n\u003Cli>6.解析异步路由组件。\u003C/li>\n\u003Cli>7.在被激活的组件里调用 beforeRouteEnter。\u003C/li>\n\u003Cli>8.调用全局的 beforeResolve 守卫（2.5+）。\u003C/li>\n\u003Cli>9.导航被确认。\u003C/li>\n\u003Cli>10.调用全局的 afterEach 钩子。\u003C/li>\n\u003Cli>11.触发 DOM 更新。\u003C/li>\n\u003Cli>12.用创建好的实例调用 beforeRouteEnter 守卫中传给 next 的回调函数。\u003C/li>\n\u003C/ul>\n\u003Ch4 id=\"vue内置组件keepalive-实现原理\">Vue内置组件\u003Ccode>KeepAlive\u003C/code> 实现原理？\u003C/h4>\n\u003Cp>\u003Ca href=\"https://github.com/vuejs/core/blob/623ba514ec0f5adc897db90c0f986b1b6905e014/packages/runtime-core/src/components/KeepAlive.ts\">core/packages/runtime-core/src/components/KeepAlive.ts at 623ba514ec0f5adc897db90c0f986b1b6905e014 · vuejs/core · GitHub\u003C/a>\u003C/p>\n\u003Cp>\u003Ccode>KeepAliv\u003C/code>e组件本身并不会渲染额外的内容，它的渲染函数最终只返回需要被\u003Ccode>KeepAlive\u003C/code>的组件，把这个需要被KeepAlive的组件称为「内部组件」。\u003C/p>\n\u003Cp>KeepAlive组件会对内部组件进行操作，主要在「内部组件」的\u003Ccode>vnode\u003C/code>对象上添加一个标记属性，以便渲染器能够做一些额外处理：\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ccode>shouleKeepAlive\u003C/code>：如果渲染器在执行卸载操作中发现有该属性，则不会真的卸载，而是调用\u003Ccode>_deActivate\u003C/code>函数完成失活（\u003Ccode>vnode.keepAliveInstance._deActivate(vnode)\u003C/code>）\u003C/li>\n\u003Cli>\u003Ccode>keepAliveInstance\u003C/code>：「内部组件」的\u003Ccode>vnode\u003C/code>上会持有\u003Ccode>KeepAlive\u003C/code>组件实例，在\u003Ccode>unmount\u003C/code>时会访问\u003Ccode>keepAliveInstance\u003C/code>的\u003Ccode>_deActivate\u003C/code>函数\u003C/li>\n\u003Cli>keptAlive：如果「内部组件」已被缓存，则会为其添加一个keptAlive标记，这样当内部组件重新渲染时，渲染器并不会重新挂载它，而会将其激活（执行\u003Ccode>vnode.keepAliveInstance._activate(vnode)\u003C/code>\u003C/li>\n\u003C/ul>\n\u003Cp>失活的本质就是将组件渲染的内容移动到隐藏容器中，激活就是从隐藏容器中搬运回原来容器。（\u003Ccode>move\u003C/code>函数由渲染器提供）\u003C/p>\n\u003Ch4 id=\"vue内置组件teleport实现原理\">Vue内置组件\u003Ccode>Teleport\u003C/code>实现原理？\u003C/h4>\n\u003Cp>本质是为了实现跨DOM层级渲染。\u003C/p>\n\u003Cp>Teleport组件选项中包含process函数，在patch时如果存在__isTeleport则会使用process函数将控制权交给Teleport组件（传递一些渲染器方法）\u003C/p>\n\u003Cp>\u003Ca href=\"https://github.com/vuejs/core/blob/623ba514ec0f5adc897db90c0f986b1b6905e014/packages/runtime-core/src/components/Teleport.ts#L67\">core/packages/runtime-core/src/components/Teleport.ts at 623ba514ec0f5adc897db90c0f986b1b6905e014 · vuejs/core · GitHub\u003C/a>\nprocess内部实现大致如下：\u003C/p>\n\u003Cul>\n\u003Cli>判断旧的虚拟节点是否存在，决定接下来的操作是挂载还是更新\u003C/li>\n\u003Cli>获取挂载点（指定的\u003Ccode>to\u003C/code>属性对应DOM节点）\u003C/li>\n\u003Cli>如果是更新，需要判断前后挂载点是否发生了变化，并移动内容\u003C/li>\n\u003C/ul>\n\u003Ch4 id=\"vue内置组件transition实现原理\">Vue内置组件\u003Ccode>Transition\u003C/code>实现原理？\u003C/h4>\n\u003Cp>核心原理：\u003C/p>\n\u003Cul>\n\u003Cli>当DOM元素被挂载时，将动效附加到DOM元素上\u003C/li>\n\u003Cli>当DOM元素被卸载时，不立即卸载DOM元素，而是等到附加的动效执行完成再卸载\u003C/li>\n\u003C/ul>\n\u003Cp>在vnode.transition对象中定义过渡相关钩子函数，渲染器在执行挂载和卸载操作时会优先检查该虚拟节点是否过渡\u003C/p>\n\u003Ch4 id=\"vue3如何实现一个防抖的ref\">Vue3如何实现一个防抖的Ref？\u003C/h4>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"ts\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"ts\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">function\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> useDebouncedRef\u003C/span>\u003Cspan style=\"color:#ADBAC7\">&#x3C;\u003C/span>\u003Cspan style=\"color:#F69D50\">T\u003C/span>\u003Cspan style=\"color:#ADBAC7\">>(\u003C/span>\u003Cspan style=\"color:#F69D50\">value\u003C/span>\u003Cspan style=\"color:#F47067\">:\u003C/span>\u003Cspan style=\"color:#F69D50\"> T\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, \u003C/span>\u003Cspan style=\"color:#F69D50\">delay\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> 200\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">  let\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> timer\u003C/span>\u003Cspan style=\"color:#F47067\">:\u003C/span>\u003Cspan style=\"color:#F69D50\"> ReturnType\u003C/span>\u003Cspan style=\"color:#ADBAC7\">&#x3C;\u003C/span>\u003Cspan style=\"color:#F47067\">typeof\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> setTimeout>\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">  return\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> customRef\u003C/span>\u003Cspan style=\"color:#ADBAC7\">((\u003C/span>\u003Cspan style=\"color:#F69D50\">track\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, \u003C/span>\u003Cspan style=\"color:#F69D50\">trigger\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) \u003C/span>\u003Cspan style=\"color:#F47067\">=>\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">    return\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">      get\u003C/span>\u003Cspan style=\"color:#ADBAC7\">: () \u003C/span>\u003Cspan style=\"color:#F47067\">=>\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">        track\u003C/span>\u003Cspan style=\"color:#ADBAC7\">()\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">        return\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> value;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">      },\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">      set\u003C/span>\u003Cspan style=\"color:#ADBAC7\">: (\u003C/span>\u003Cspan style=\"color:#F69D50\">newValue\u003C/span>\u003Cspan style=\"color:#F47067\">:\u003C/span>\u003Cspan style=\"color:#F69D50\"> T\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) \u003C/span>\u003Cspan style=\"color:#F47067\">=>\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">        clearTimeout\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(timer);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">        timer \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> setTimeout\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(() \u003C/span>\u003Cspan style=\"color:#F47067\">=>\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">          value \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> newValue;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">          trigger\u003C/span>\u003Cspan style=\"color:#ADBAC7\">();\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">        }, delay)\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">      }\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    }\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">  })\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Ch4 id=\"为何不建议v-if与v-for一起使用\">为何不建议v-if与v-for一起使用？\u003C/h4>\n\u003Cp>把 \u003Ccode>v-if\u003C/code> 和 \u003Ccode>v-for\u003C/code> 同时用在同一个元素上，带来性能方面的浪费（每次渲染都会先循环再进行条件判断）（\u003Ccode>v-for\u003C/code>比\u003Ccode>v-if\u003C/code>优先级高）\u003C/p>\n\u003Ch4 id=\"vue3特性开关怎么实现的\">Vue3特性开关怎么实现的？\u003C/h4>\n\u003Cp>框架层面：源码中使用全局常量+条件判断，包住某些特性相关的代码\n开发者层面：通过bundler提供的方式，定义全局常量，如在编译时常量为true则源码中条件为true触发死代码消除\u003C/p>\n\u003Cp>rollup -> @rollup/plugin-replace\nwebpack -> webpack.DefinePlugin\u003C/p>\n\u003Ch4 id=\"vue3错误处理如何实现的\">Vue3错误处理如何实现的？\u003C/h4>\n\u003Col>\n\u003Cli>给用户提供自定义注册错误处理函数的方式\u003C/li>\n\u003Cli>将可能发生错误的代码用函数包一下，函数中用try…catch拦截错误\u003C/li>\n\u003C/ol>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"js\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">// error-handler.js\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">let\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> handlerError \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> null\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">export\u003C/span>\u003Cspan style=\"color:#F47067\"> default\u003C/span>\u003Cspan style=\"color:#F69D50\"> {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">    registerErrorHandler\u003C/span>\u003Cspan style=\"color:#F69D50\">(fn) \u003C/span>\u003Cspan style=\"color:#ADBAC7\">{\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">        handlerError \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> fn;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    }\u003C/span>\u003Cspan style=\"color:#F69D50\">,\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F69D50\">}\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">export\u003C/span>\u003Cspan style=\"color:#F47067\"> function\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> callWithErrorHandling\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#F69D50\">fn\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">    try\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">        fn\u003C/span>\u003Cspan style=\"color:#ADBAC7\">()\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    } \u003C/span>\u003Cspan style=\"color:#F47067\">catch\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(e) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">        handlerError\u003C/span>\u003Cspan style=\"color:#ADBAC7\">?.(e);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    }\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">}\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">// source code\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">function\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> foo\u003C/span>\u003Cspan style=\"color:#ADBAC7\">() {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">    callWithEErrorHandling\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(() \u003C/span>\u003Cspan style=\"color:#F47067\">=>\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">        console.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">log\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#96D0FF\">'do something'\u003C/span>\u003Cspan style=\"color:#ADBAC7\">);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    })\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Cp>用户侧可以使用如下方式注册错误处理函数：\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"js\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">app.config.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">errorHandler\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (\u003C/span>\u003Cspan style=\"color:#F69D50\">e\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) \u003C/span>\u003Cspan style=\"color:#F47067\">=>\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> {}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Ch4 id=\"vue如何给数组建立响应性\">Vue如何给数组建立响应性？\u003C/h4>\n\u003Col>\n\u003Cli>索引与长度\n通过索引设置新值会触发length改变，在Set时判断是SET还是ADD，在trigger时触发与length属性相关联的副作用函数即可。\n修改length属性，则在trigger时只执行旧长度大于新长度的副作用\u003C/li>\n\u003Cli>遍历\n在ownKeys拦截函数中，使用length属性作为key建立响应联系\u003C/li>\n\u003Cli>追踪时排查使用Symbol作为key的情况\u003C/li>\n\u003Cli>数组查找includes\n查找子项为对象的出现错误，因为此时函数内的this为代理对象，通过代理对象索引找到的对象也是代理对象，也原始值对应的子项不一样，故会找不到。\nGet中判断key是否为查找相关函数，如果是，则执行重写后的方法，先在代理对象上查，找不到再在原始数组上查\u003C/li>\n\u003Cli>会修改原数组的方法\n这些方法读取length的同时也会更新数组，就导致了循环执行栈溢出，需要重写相关方法（如：push、pop、shift、unshift、splice）在执行完毕前阻止track\u003C/li>\n\u003C/ol>\n\u003Ch4 id=\"vue如何代理setweakset和mapweakmap\">Vue如何代理Set（WeakSet）和Map（WeakMap）？\u003C/h4>\n\u003Col>\n\u003Cli>修正get\n如果读取size属性则使用原对象\u003C/li>\n\u003Cli>调用size函数时调用track建立响应联系\u003C/li>\n\u003Cli>自定义实现add/delete方法\n执行原始对象的add，触发trigger\u003C/li>\n\u003Cli>自定义实现set时注意数据污染\n要设置的值可能是代理对象，需要设置原始对象\u003C/li>\n\u003Cli>实现forEach注意子项转为可代理对象触发响应\u003C/li>\n\u003Cli>为了使用代理对象迭代，需要重新实现迭代器协议和可迭代协议\u003C/li>\n\u003C/ol>\n\u003Ch4 id=\"vue如何处理响应丢失的问题\">Vue如何处理响应丢失的问题？\u003C/h4>\n\u003Cp>提供toRef方法，将响应对象的值转为getter形式并返回，其中getter返回的是响应对象的值\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"js\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">function\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> toRef\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#F69D50\">obj\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, \u003C/span>\u003Cspan style=\"color:#F69D50\">key\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">    const\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> wrapper\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">        get\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> value\u003C/span>\u003Cspan style=\"color:#ADBAC7\">() {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">            return\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> obj[key];\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">        },\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">        set\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> value\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#F69D50\">v\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">            obj[key] \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> v;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">        }\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    }\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    Object.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">defineProperty\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(wrapper, \u003C/span>\u003Cspan style=\"color:#96D0FF\">'__v_isRef'\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">        value: \u003C/span>\u003Cspan style=\"color:#6CB6FF\">true\u003C/span>\u003Cspan style=\"color:#ADBAC7\">,\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    });\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">    return\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> wrapper;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Ch4 id=\"vue如何实现自动脱ref\">Vue如何实现自动脱ref？\u003C/h4>\n\u003Cp>是用Proxy创建个代理对象，get中判断target是否为ref，为ref则返回target.value\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"js\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">function\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> proxyRefs\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#F69D50\">target\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">    return\u003C/span>\u003Cspan style=\"color:#F47067\"> new\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> Proxy\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(target, {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">        get\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#F69D50\">target\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, \u003C/span>\u003Cspan style=\"color:#F69D50\">key\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, \u003C/span>\u003Cspan style=\"color:#F69D50\">receiver\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">            const\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> value\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> Reflect.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">get\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(target, key, receiver);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">            return\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> value.__v_isRef \u003C/span>\u003Cspan style=\"color:#F47067\">?\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> value.value \u003C/span>\u003Cspan style=\"color:#F47067\">:\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> value;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">        },\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">        set\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#F69D50\">target\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, \u003C/span>\u003Cspan style=\"color:#F69D50\">key\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, \u003C/span>\u003Cspan style=\"color:#F69D50\">newValue\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, \u003C/span>\u003Cspan style=\"color:#F69D50\">receiver\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">            const\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> value\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> target[key];\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">            if\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (value.__v_isRef) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">                value.value \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> newValue;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">                return\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> true\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">            }\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">            return\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> Reflect.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">set\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(target, key, newValue, receiver);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">        }\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    });\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Ch4 id=\"vue2双端diff原理\">Vue2双端Diff原理？\u003C/h4>\n\u003Cp>双端Diff算法是一种同时对新旧两组子节点的两个端点进行比较的算法。因此，需要4个索引值，分别指向新旧子节点的端点。\u003C/p>\n\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/fw6/assets/main/toy_docs/20230811153721.png\" alt=\"image.png\">\u003C/p>\n\u003Cp>在双端比较中，每一轮都分为4个步骤：\u003C/p>\n\u003Col>\n\u003Cli>比较旧的子节点首位（P1）和新子节点首位（P4）\nkey不同，什么都不做\u003C/li>\n\u003Cli>比较旧的末位（P4）与新的末位（P3）\nkey不同，什么都不做\u003C/li>\n\u003Cli>比较旧的首位（P1）和新的末位（P3）\nkey不同，什么都不做\u003C/li>\n\u003Cli>比较旧的末位（P4）与新的首位（P4）\nkey相同，复用旧的DOM（将旧的P4所属DOM移动到首位）\n将oldEndIdx与newStartIdx各向前移动一步，继续开始从第一步开始\u003C/li>\n\u003C/ol>\n\u003Cp>在整个循环中，条件为：\u003Cem>头部索引值小于等于尾部索引值\u003C/em>则继续执行\n简单实现如下：\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"js\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">while\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (newStartIdx \u003C/span>\u003Cspan style=\"color:#F47067\">&#x3C;=\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> newEndIdx \u003C/span>\u003Cspan style=\"color:#F47067\">&#x26;&#x26;\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> oldStartIdx \u003C/span>\u003Cspan style=\"color:#F47067\">&#x3C;=\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> oldEndIdx) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">    if\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (\u003C/span>\u003Cspan style=\"color:#F47067\">!\u003C/span>\u003Cspan style=\"color:#ADBAC7\">oldStartVNode) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">        oldStartVNode \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> oldChildren[\u003C/span>\u003Cspan style=\"color:#F47067\">++\u003C/span>\u003Cspan style=\"color:#ADBAC7\">oldStartIdx];\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    } \u003C/span>\u003Cspan style=\"color:#F47067\">else\u003C/span>\u003Cspan style=\"color:#F47067\"> if\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (\u003C/span>\u003Cspan style=\"color:#F47067\">!\u003C/span>\u003Cspan style=\"color:#ADBAC7\">oldEndVNode) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">        oldEndVNode \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> oldChildren[\u003C/span>\u003Cspan style=\"color:#F47067\">--\u003C/span>\u003Cspan style=\"color:#ADBAC7\">oldEndIdx];\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    } \u003C/span>\u003Cspan style=\"color:#F47067\">else\u003C/span>\u003Cspan style=\"color:#F47067\"> if\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (oldStartVNode.key \u003C/span>\u003Cspan style=\"color:#F47067\">===\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> newStartVNode.key) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">        // 调用patch在oldStartVNode和newStartVNode打补丁\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">        patch\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(oldStartVNode, newStartVNode, container);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">        // 更新索引，指向下一位置\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">        oldStartVNode \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> oldChildren[\u003C/span>\u003Cspan style=\"color:#F47067\">++\u003C/span>\u003Cspan style=\"color:#ADBAC7\">oldStartIdx];\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">        newStartVNode \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> newChildren[\u003C/span>\u003Cspan style=\"color:#F47067\">++\u003C/span>\u003Cspan style=\"color:#ADBAC7\">newStartIdx];\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    } \u003C/span>\u003Cspan style=\"color:#F47067\">else\u003C/span>\u003Cspan style=\"color:#F47067\"> if\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (oldEndVNode.key \u003C/span>\u003Cspan style=\"color:#F47067\">===\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> newEndVNode.key) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">        patch\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(oldEndVNode, newEndVNode, container);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">        oldEndVNode \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> oldChildren[\u003C/span>\u003Cspan style=\"color:#F47067\">--\u003C/span>\u003Cspan style=\"color:#ADBAC7\">oldEndIdx];\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">        newEndVNode \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> newChildren[\u003C/span>\u003Cspan style=\"color:#F47067\">--\u003C/span>\u003Cspan style=\"color:#ADBAC7\">newEndIdx];\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    } \u003C/span>\u003Cspan style=\"color:#F47067\">else\u003C/span>\u003Cspan style=\"color:#F47067\"> if\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (oldStartVNode.key \u003C/span>\u003Cspan style=\"color:#F47067\">===\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> newEndVNode.key) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">        patch\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(oldStartVNode, newEndVNode, container);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">        oldStartIdx \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> oldChildren[\u003C/span>\u003Cspan style=\"color:#F47067\">++\u003C/span>\u003Cspan style=\"color:#ADBAC7\">oldStartIdx];\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">        newEndVNode \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> newChildren[\u003C/span>\u003Cspan style=\"color:#F47067\">--\u003C/span>\u003Cspan style=\"color:#ADBAC7\">newEndIdx];\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    } \u003C/span>\u003Cspan style=\"color:#F47067\">else\u003C/span>\u003Cspan style=\"color:#F47067\"> if\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (oldEndVNode.key \u003C/span>\u003Cspan style=\"color:#F47067\">===\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> newStartVNode.key) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">        patch\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(oldEndVNode, newStartVNode, container);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">        oldEndVNode \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> oldChildren[\u003C/span>\u003Cspan style=\"color:#F47067\">--\u003C/span>\u003Cspan style=\"color:#ADBAC7\">oldEndIdx];\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">        newStartVNode \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> newChildren[\u003C/span>\u003Cspan style=\"color:#F47067\">++\u003C/span>\u003Cspan style=\"color:#ADBAC7\">newStartIdx];\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    } \u003C/span>\u003Cspan style=\"color:#F47067\">else\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">        // 遍历旧的children，找到与newStartVNode.key相同的节点\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">        const\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> idxInOld\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> oldChildren.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">findIndex\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#F69D50\">node\u003C/span>\u003Cspan style=\"color:#F47067\"> =>\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> node.key \u003C/span>\u003Cspan style=\"color:#F47067\">===\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> newStartVNode.key);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">        // 大于0说明原来不在头部，新的被移动到了头部\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">        if\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (idxInOld \u003C/span>\u003Cspan style=\"color:#F47067\">>\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> 0\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">            const\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> vnodeToMove\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> oldChildren[idxInOld];\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">            patch\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(vnodeToMove, newStartVNode, container);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">            // 将vnode移动到旧的头部节点之前\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">            insert\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(vnodeToMove.el, container, oldStartVNode.el);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">            // 因为已被移动，所以将旧的节点设置为undefined\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">            oldChildren[idxInOld] \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> undefined\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">        } \u003C/span>\u003Cspan style=\"color:#F47067\">else\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">            // 说明这是个新节点，原来就没有。创建新Node插入到旧的头部节点之前\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">            patch\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#6CB6FF\">null\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, newStartVNode, container, oldStartVNode.el);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">        }\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">        // 更新newStartIdx\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">        newStartVNode \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> newChildren[\u003C/span>\u003Cspan style=\"color:#F47067\">++\u003C/span>\u003Cspan style=\"color:#ADBAC7\">newStartIdx];\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    }\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">}\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">// 最后检查剩余没匹配上的节点（可能被删除？）\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">if\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (newStartIdx \u003C/span>\u003Cspan style=\"color:#F47067\">&#x3C;=\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> newEndIdx \u003C/span>\u003Cspan style=\"color:#F47067\">||\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> oldStartIdx \u003C/span>\u003Cspan style=\"color:#F47067\">&#x3C;=\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> oldEndIdx) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">    if\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (newStartIdx \u003C/span>\u003Cspan style=\"color:#F47067\">>\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> newEndIdx) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">        // 说明newChildren已经遍历完了，oldChildren还有剩余，说明这些节点是不需要的，直接删除\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">        for\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (\u003C/span>\u003Cspan style=\"color:#F47067\">let\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> i \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> oldStartIdx; i \u003C/span>\u003Cspan style=\"color:#F47067\">&#x3C;=\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> oldEndIdx; i\u003C/span>\u003Cspan style=\"color:#F47067\">++\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">            unmount\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(oldChildren[i]);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">        }\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    } \u003C/span>\u003Cspan style=\"color:#F47067\">else\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">        // 说明oldChildren已经遍历完了，newChildren还有剩余，说明这些节点是新增的，直接插入到旧的头部节点之前\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">        for\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (\u003C/span>\u003Cspan style=\"color:#F47067\">let\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> i \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> newStartIdx; i \u003C/span>\u003Cspan style=\"color:#F47067\">&#x3C;=\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> newEndIdx; i\u003C/span>\u003Cspan style=\"color:#F47067\">++\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">            patch\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#6CB6FF\">null\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, newChildren[i], container, oldChildren[oldStartIdx].el);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">        }\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    }\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Ch4 id=\"vue3快速diff原理\">Vue3快速Diff原理？\u003C/h4>\n\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/fw6/assets/main/toy_docs/20230811162421.png\" alt=\"image.png\">\u003C/p>\n\u003Col>\n\u003Cli>预处理，先处理新旧两组子节点中相同的前置节点和相同的后置节点\u003C/li>\n\u003Cli>根据节点索引关系，构造出最长递增子序列，指向的节点就是不需要移动的节点\u003C/li>\n\u003C/ol>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"js\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">function\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> fastDiff\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (\u003C/span>\u003Cspan style=\"color:#F69D50\">n1\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, \u003C/span>\u003Cspan style=\"color:#F69D50\">n2\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, \u003C/span>\u003Cspan style=\"color:#F69D50\">container\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">    const\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> newChildren\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> n1.children;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">    const\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> oldChildren\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> n2.children;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">    // 处理相同的前置节点\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">    // 索引j指向新旧两组子节点开头\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">    let\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> j \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> 0\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">    let\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> oldVNode \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> oldChildren[j];\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">    let\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> newVNode \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> newChildren[j];\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">    // while 向后遍历，找到不相同的节点为止\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">    while\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">        oldVNode.key \u003C/span>\u003Cspan style=\"color:#F47067\">===\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> newVNode.key \u003C/span>\u003Cspan style=\"color:#F47067\">&#x26;&#x26;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">        oldVNode.tag \u003C/span>\u003Cspan style=\"color:#F47067\">===\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> newVNode.tag\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    ) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">        patch\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(oldVNode, newVNode, container);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">        j\u003C/span>\u003Cspan style=\"color:#F47067\">++\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">        oldVNode \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> oldChildren[j];\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">        newVNode \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> newChildren[j];\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    }\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">    // 更新相同的后置节点\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">    // 索引oldEnd指向旧组子节点末尾\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">    let\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> oldEnd \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> oldChildren.\u003C/span>\u003Cspan style=\"color:#6CB6FF\">length\u003C/span>\u003Cspan style=\"color:#F47067\"> -\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> 1\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">    // 索引newEnd指向新组子节点末尾\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">    let\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> newEnd \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> newChildren.\u003C/span>\u003Cspan style=\"color:#6CB6FF\">length\u003C/span>\u003Cspan style=\"color:#F47067\"> -\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> 1\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    oldVNode \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> oldChildren[oldEnd];\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    newVNode \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> newChildren[newEnd];\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">    // while 从后向前遍历，找到不相同的节点为止\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">    while\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">        oldVNode.key \u003C/span>\u003Cspan style=\"color:#F47067\">===\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> newVNode.key \u003C/span>\u003Cspan style=\"color:#F47067\">&#x26;&#x26;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">        oldVNode.tag \u003C/span>\u003Cspan style=\"color:#F47067\">===\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> newVNode.tag\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    ) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">        patch\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(oldVNode, newVNode, container);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">        oldEnd\u003C/span>\u003Cspan style=\"color:#F47067\">--\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">        newEnd\u003C/span>\u003Cspan style=\"color:#F47067\">--\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">        oldVNode \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> oldChildren[oldEnd];\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">        newVNode \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> newChildren[newEnd];\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    }\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">    // 预处理之后如果满足以下条件，说明 j --> newEnd 之间的节点是新的\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">    if\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (j \u003C/span>\u003Cspan style=\"color:#F47067\">>\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> oldEnd \u003C/span>\u003Cspan style=\"color:#F47067\">&#x26;&#x26;\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> j \u003C/span>\u003Cspan style=\"color:#F47067\">&#x3C;=\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> newEnd) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">        const\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> anchorIndex\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> newEnd \u003C/span>\u003Cspan style=\"color:#F47067\">+\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> 1\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">        // 锚点元素\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">        const\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> anchor\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> anchorIndex \u003C/span>\u003Cspan style=\"color:#F47067\">&#x3C;\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> newChildren.\u003C/span>\u003Cspan style=\"color:#6CB6FF\">length\u003C/span>\u003Cspan style=\"color:#F47067\"> ?\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> newChildren[anchorIndex].el \u003C/span>\u003Cspan style=\"color:#F47067\">:\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> null\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">        while\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (j \u003C/span>\u003Cspan style=\"color:#F47067\">&#x3C;=\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> newEnd) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">            patch\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#6CB6FF\">null\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, newChildren[j\u003C/span>\u003Cspan style=\"color:#F47067\">++\u003C/span>\u003Cspan style=\"color:#ADBAC7\">], container, anchor);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">        }\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    } \u003C/span>\u003Cspan style=\"color:#F47067\">else\u003C/span>\u003Cspan style=\"color:#F47067\"> if\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (j \u003C/span>\u003Cspan style=\"color:#F47067\">>\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> newEnd \u003C/span>\u003Cspan style=\"color:#F47067\">&#x26;&#x26;\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> j \u003C/span>\u003Cspan style=\"color:#F47067\">&#x3C;=\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> oldEnd) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">        // j --> oldEnd之间的节点是要删除的\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">        while\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (j \u003C/span>\u003Cspan style=\"color:#F47067\">&#x3C;=\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> oldEnd) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">            unmount\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(oldChildren[j\u003C/span>\u003Cspan style=\"color:#F47067\">++\u003C/span>\u003Cspan style=\"color:#ADBAC7\">]);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">        }\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    } \u003C/span>\u003Cspan style=\"color:#F47067\">else\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">        // 其他非理想情况\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">        const\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> count\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> newEnd \u003C/span>\u003Cspan style=\"color:#F47067\">-\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> j \u003C/span>\u003Cspan style=\"color:#F47067\">+\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> 1\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">        // 构造source数组，长度为未处理节点的数量\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">        const\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> source\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#F47067\"> new\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> Array\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(newEnd \u003C/span>\u003Cspan style=\"color:#F47067\">-\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> j \u003C/span>\u003Cspan style=\"color:#F47067\">+\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> 1\u003C/span>\u003Cspan style=\"color:#ADBAC7\">).\u003C/span>\u003Cspan style=\"color:#DCBDFB\">fill\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#F47067\">-\u003C/span>\u003Cspan style=\"color:#6CB6FF\">1\u003C/span>\u003Cspan style=\"color:#ADBAC7\">);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">        const\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> oldStart\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> j;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">        const\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> newStart\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> j;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">        let\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> moved \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> false\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">        let\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> pos \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> 0\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">        // 更新过的节点数量\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">        let\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> patched \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> 0\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">        // 构建索引表\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">        const\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> keyIndex\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> {};\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">        for\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (\u003C/span>\u003Cspan style=\"color:#F47067\">let\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> i \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> newStart; i \u003C/span>\u003Cspan style=\"color:#F47067\">&#x3C;=\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> newEnd; i\u003C/span>\u003Cspan style=\"color:#F47067\">++\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">            keyIndex[newChildren[i].key] \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> i;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">        }\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">        // 遍历旧的一组子节点中剩余\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">        for\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (\u003C/span>\u003Cspan style=\"color:#F47067\">let\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> i \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> oldStart; i \u003C/span>\u003Cspan style=\"color:#F47067\">&#x3C;=\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> oldEnd; i\u003C/span>\u003Cspan style=\"color:#F47067\">++\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">            oldVNode \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> oldChildren[i];\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">            // 更新的节点，小于等于需要更新的节点\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">            if\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (patched \u003C/span>\u003Cspan style=\"color:#F47067\">&#x3C;=\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> count) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">                const\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> k\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> keyIndex[oldVNode.key];\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">                if\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (\u003C/span>\u003Cspan style=\"color:#F47067\">typeof\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> k \u003C/span>\u003Cspan style=\"color:#F47067\">!==\u003C/span>\u003Cspan style=\"color:#96D0FF\"> 'undefined'\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">                    newVNode \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> newChildren[k];\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">                    // 说明该节点在新的一组中存在，需要移动\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">                    patch\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(oldVNode, newVNode, container);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">                    patched\u003C/span>\u003Cspan style=\"color:#F47067\">++\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">                    source[k \u003C/span>\u003Cspan style=\"color:#F47067\">-\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> newStart] \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> i;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">                    // 判断是否需要移动\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">                    if\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (k \u003C/span>\u003Cspan style=\"color:#F47067\">&#x3C;\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> pos) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">                        moved \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> true\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">                    } \u003C/span>\u003Cspan style=\"color:#F47067\">else\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">                        pos \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> k;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">                    }\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">                } \u003C/span>\u003Cspan style=\"color:#F47067\">else\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">                    // 说明该节点在新的一组中不存在，需要删除\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">                    unmount\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(oldVNode);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">                }\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">            } \u003C/span>\u003Cspan style=\"color:#F47067\">else\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">                // 卸载多余节点\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">                unmount\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(oldVNode);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">            }\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">        }\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">        if\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (moved) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">            // 需要进行DOM移动操作\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">            // 计算最长递增子序列的索引\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">            const\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> seq\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> lis\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(source);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">            // s指向最长递增子序列的末尾\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">            let\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> s \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> seq.\u003C/span>\u003Cspan style=\"color:#6CB6FF\">length\u003C/span>\u003Cspan style=\"color:#F47067\"> -\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> 1\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">            // i指向新组子节点的末尾\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">            let\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> i \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> count \u003C/span>\u003Cspan style=\"color:#F47067\">-\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> 1\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">            for\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (; i \u003C/span>\u003Cspan style=\"color:#F47067\">>=\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> 0\u003C/span>\u003Cspan style=\"color:#ADBAC7\">; i\u003C/span>\u003Cspan style=\"color:#F47067\">--\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">                if\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (source[i] \u003C/span>\u003Cspan style=\"color:#F47067\">===\u003C/span>\u003Cspan style=\"color:#F47067\"> -\u003C/span>\u003Cspan style=\"color:#6CB6FF\">1\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">                    // 需要挂载的新节点\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">                    // 在新节点的位置\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">                    const\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> pos\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> i \u003C/span>\u003Cspan style=\"color:#F47067\">+\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> newStart;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">                    newVNode \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> newChildren[pos];\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">                    const\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> nextPos\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> pos \u003C/span>\u003Cspan style=\"color:#F47067\">+\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> 1\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">                    const\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> anchor\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> nextPos \u003C/span>\u003Cspan style=\"color:#F47067\">&#x3C;\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> newChildren.\u003C/span>\u003Cspan style=\"color:#6CB6FF\">length\u003C/span>\u003Cspan style=\"color:#F47067\"> ?\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> newChildren[nextPos].el \u003C/span>\u003Cspan style=\"color:#F47067\">:\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> null\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">                    patch\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#6CB6FF\">null\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, newVNode, container, anchor);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">                } \u003C/span>\u003Cspan style=\"color:#F47067\">else\u003C/span>\u003Cspan style=\"color:#F47067\"> if\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (i \u003C/span>\u003Cspan style=\"color:#F47067\">!==\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> seq[s]) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">                    // 该节点需要移动\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">                    const\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> pos\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> i \u003C/span>\u003Cspan style=\"color:#F47067\">+\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> newStart;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">                    newVNode \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> newChildren[pos];\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">                    const\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> nextPos\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> pos \u003C/span>\u003Cspan style=\"color:#F47067\">+\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> 1\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">                    const\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> anchor\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> nextPos \u003C/span>\u003Cspan style=\"color:#F47067\">&#x3C;\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> newChildren.\u003C/span>\u003Cspan style=\"color:#6CB6FF\">length\u003C/span>\u003Cspan style=\"color:#F47067\"> ?\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> newChildren[nextPos].el \u003C/span>\u003Cspan style=\"color:#F47067\">:\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> null\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">                    insert\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(newVNode.el, container, anchor);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">                } \u003C/span>\u003Cspan style=\"color:#F47067\">else\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">                    // 该节点不需要移动\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">                    s\u003C/span>\u003Cspan style=\"color:#F47067\">--\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">                }\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">            }\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">        }\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    }\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Ch4 id=\"如何实现异步组件\">如何实现异步组件？\u003C/h4>\n\u003Cp>需要实现的功能：\u003C/p>\n\u003Cul>\n\u003Cli>指定加载出错时渲染的组件\u003C/li>\n\u003Cli>指定Loading组件及展示该组件的延迟时间\u003C/li>\n\u003Cli>指定超时时长\u003C/li>\n\u003Cli>加载失败提供重试机制\u003C/li>\n\u003C/ul>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"js\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">function\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> defineAsyncComponent\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (\u003C/span>\u003Cspan style=\"color:#F69D50\">options\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">    if\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (\u003C/span>\u003Cspan style=\"color:#F47067\">typeof\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> options \u003C/span>\u003Cspan style=\"color:#F47067\">===\u003C/span>\u003Cspan style=\"color:#96D0FF\"> 'function'\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">        options \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> { loader: options };\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    }\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">    const\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> { \u003C/span>\u003Cspan style=\"color:#6CB6FF\">loader\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> } \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> options;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">    let\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> innerComp \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> null\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">    // 记录重试次数\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">    let\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> retries \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> 0\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">    // 封装load函数用于异步加载组件\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">    function\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> load\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> () {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">        return\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> loader.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">catch\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#F69D50\">err\u003C/span>\u003Cspan style=\"color:#F47067\"> =>\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> { \u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">            if\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (options.onError) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">                return\u003C/span>\u003Cspan style=\"color:#F47067\"> new\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> Promise\u003C/span>\u003Cspan style=\"color:#ADBAC7\">((\u003C/span>\u003Cspan style=\"color:#F69D50\">resolve\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, \u003C/span>\u003Cspan style=\"color:#F69D50\">reject\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) \u003C/span>\u003Cspan style=\"color:#F47067\">=>\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">                    const\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> retry\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> () \u003C/span>\u003Cspan style=\"color:#F47067\">=>\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">                        resolve\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#DCBDFB\">load\u003C/span>\u003Cspan style=\"color:#ADBAC7\">());\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">                        retries\u003C/span>\u003Cspan style=\"color:#F47067\">++\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">                    };\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">                    const\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> fail\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> () \u003C/span>\u003Cspan style=\"color:#F47067\">=>\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> reject\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(err);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">                    // 调用用户自定义的错误处理函数 来决定是否重试\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">                    options.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">onError\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(retry, fail, retries);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">                });\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">            } \u003C/span>\u003Cspan style=\"color:#F47067\">else\u003C/span>\u003Cspan style=\"color:#F47067\"> throw\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> err;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">        });\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    }\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">    return\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">        name: \u003C/span>\u003Cspan style=\"color:#96D0FF\">'AsyncComponentWrapper'\u003C/span>\u003Cspan style=\"color:#ADBAC7\">,\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">        setup\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> () { \u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">            const\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> loaded\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> ref\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#6CB6FF\">false\u003C/span>\u003Cspan style=\"color:#ADBAC7\">);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">            const\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> error\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> shadowRef\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#6CB6FF\">null\u003C/span>\u003Cspan style=\"color:#ADBAC7\">);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">            const\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> loading\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> ref\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#6CB6FF\">false\u003C/span>\u003Cspan style=\"color:#ADBAC7\">);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">            let\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> loadingTimer \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> null\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">            if\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (options.delay) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">                loadingTimer \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> setTimeout\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(() \u003C/span>\u003Cspan style=\"color:#F47067\">=>\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">                    loading.value \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> true\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">                }, options.delay);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">            } \u003C/span>\u003Cspan style=\"color:#F47067\">else\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> loading.value \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> true\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">            load\u003C/span>\u003Cspan style=\"color:#ADBAC7\">()\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">                .\u003C/span>\u003Cspan style=\"color:#DCBDFB\">then\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#F69D50\">comp\u003C/span>\u003Cspan style=\"color:#F47067\"> =>\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">                    innerComp \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> comp;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">                    loaded.value \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> true\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">                })\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">                .\u003C/span>\u003Cspan style=\"color:#DCBDFB\">catch\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#F69D50\">err\u003C/span>\u003Cspan style=\"color:#F47067\"> =>\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">                    error.value \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> err;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">                })\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">                .\u003C/span>\u003Cspan style=\"color:#DCBDFB\">finally\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(() \u003C/span>\u003Cspan style=\"color:#F47067\">=>\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">                    loading.value \u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> false\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">                    clearTimeout\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(loadingTimer);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">                });\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">            \u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">            return\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> () \u003C/span>\u003Cspan style=\"color:#F47067\">=>\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> { \u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">                if\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (loaded.value) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">                    return\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> innerComp;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">                } \u003C/span>\u003Cspan style=\"color:#F47067\">else\u003C/span>\u003Cspan style=\"color:#F47067\"> if\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (error.value \u003C/span>\u003Cspan style=\"color:#F47067\">&#x26;&#x26;\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> options.errorComponent) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">                    return\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">                        type: options.errorComponent,\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">                        props: { error: error.value },\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">                    };\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">                } \u003C/span>\u003Cspan style=\"color:#F47067\">else\u003C/span>\u003Cspan style=\"color:#F47067\"> if\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (loading.value \u003C/span>\u003Cspan style=\"color:#F47067\">&#x26;&#x26;\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> options.loadingComponent) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">                    return\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">                        type: options.loadingComponent,\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">                    }\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">                } \u003C/span>\u003Cspan style=\"color:#F47067\">else\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">                    return\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">                        type: Text,\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">                        children: \u003C/span>\u003Cspan style=\"color:#96D0FF\">''\u003C/span>\u003Cspan style=\"color:#ADBAC7\">,\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">                    };\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">                }\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">            };\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">        },\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    };\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">}\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Ch3 id=\"svelte\">Svelte\u003C/h3>\n\u003Ch3 id=\"react\">React\u003C/h3>\n\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/fw6/assets/main/toy_docs/20230808153152.png\" alt=\"image.png\">\u003C/p>\n\u003Ch4 id=\"为啥会有suspense组件原理是啥使用场景有哪些\">为啥会有Suspense组件？原理是啥？使用场景有哪些？\u003C/h4>\n\u003Cp>为了解决客户端的CLS问题，\u003Ca href=\"https://web.dev/cls/\">Cumulative Layout Shift累计布局偏移\u003C/a>\n\u003Cimg src=\"https://raw.githubusercontent.com/fw6/assets/main/toy_docs/20230804184705.png\" alt=\"image.png\">\u003C/p>\n\u003Cp>原理：类似Error Boundary，再通过\u003Ccode>try..catch..finally\u003C/code>实现子组件消息上报，throw一个Promise，Suspense基于Promise的状态决定子组件的加载状态。\u003C/p>\n\u003Cp>场景：\u003C/p>\n\u003Col>\n\u003Cli>等一组组件全部加载完成，一次性渲染\u003C/li>\n\u003Cli>加载新内容时显示旧内容（useDeferredValue）\u003C/li>\n\u003Cli>路由切换时等新页面加载完成再切过去（基于startTransition + useTransition）\u003C/li>\n\u003Cli>按需加载（基于\u003Ccode>React.lazy\u003C/code>）\u003C/li>\n\u003C/ol>\n\u003Cdiv>\u003Cp>SSR面临的问题：\u003C/p>\u003Col>\n\u003Cli>展示任何东西之前需要获取所有东西；\u003C/li>\n\u003Cli>需要加载所有JS才能开始水化；\u003C/li>\n\u003Cli>与任何东西交互之前，都必须水化任何东西，即不支持渐进式水化\u003C/li>\n\u003C/ol>\u003Cp>React对上述问题的解同样是Suspense，通过Streaming HTML + Selective Hydration，这是React18主打功能之二\u003C/p>\u003C/div>\n\u003Ch4 id=\"什么是forward-refs\">什么是forward refs？\u003C/h4>\n\u003Cp>\u003Ccode>forwardRef\u003C/code>将组件的DOM节点通过\u003Ccode>ref\u003C/code>的方式暴露给父组件\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"jsx\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"jsx\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">const\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> ButtonElement\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> React.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">forwardRef\u003C/span>\u003Cspan style=\"color:#ADBAC7\">((\u003C/span>\u003Cspan style=\"color:#F69D50\">props\u003C/span>\u003Cspan style=\"color:#ADBAC7\">, \u003C/span>\u003Cspan style=\"color:#F69D50\">ref\u003C/span>\u003Cspan style=\"color:#ADBAC7\">) \u003C/span>\u003Cspan style=\"color:#F47067\">=>\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> (\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    &#x3C;\u003C/span>\u003Cspan style=\"color:#8DDB8C\">button\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> ref\u003C/span>\u003Cspan style=\"color:#F47067\">={\u003C/span>\u003Cspan style=\"color:#ADBAC7\">ref\u003C/span>\u003Cspan style=\"color:#F47067\">}\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> className\u003C/span>\u003Cspan style=\"color:#F47067\">=\u003C/span>\u003Cspan style=\"color:#96D0FF\">\"CustomButton\"\u003C/span>\u003Cspan style=\"color:#ADBAC7\">>\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">        {\u003C/span>\u003Cspan style=\"color:#ADBAC7\">props.children\u003C/span>\u003Cspan style=\"color:#F47067\">}\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    &#x3C;/\u003C/span>\u003Cspan style=\"color:#8DDB8C\">button\u003C/span>\u003Cspan style=\"color:#ADBAC7\">>\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">));\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">// Create ref to the DOM button:\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">const\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> ref\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> React.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">createRef\u003C/span>\u003Cspan style=\"color:#ADBAC7\">();\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">&#x3C;\u003C/span>\u003Cspan style=\"color:#8DDB8C\">ButtonElement\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> ref\u003C/span>\u003Cspan style=\"color:#F47067\">={\u003C/span>\u003Cspan style=\"color:#ADBAC7\">ref\u003C/span>\u003Cspan style=\"color:#F47067\">}\u003C/span>\u003Cspan style=\"color:#ADBAC7\">>\u003C/span>\u003Cspan style=\"color:#F47067\">{\u003C/span>\u003Cspan style=\"color:#96D0FF\">'Forward Ref'\u003C/span>\u003Cspan style=\"color:#F47067\">}\u003C/span>\u003Cspan style=\"color:#ADBAC7\">&#x3C;/\u003C/span>\u003Cspan style=\"color:#8DDB8C\">ButtonElement\u003C/span>\u003Cspan style=\"color:#ADBAC7\">>\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Cp>也可通过\u003Ccode>useImperativeHandle\u003C/code>改变需要暴露的\u003Ccode>ref\u003C/code>\u003C/p>\n\u003Ch4 id=\"uselayouteffect和useeffect区别\">useLayoutEffect和useEffect区别?\u003C/h4>\n\u003Cp>\u003Ca href=\"https://mp.weixin.qq.com/s/1Tqwu-L4ZMUQwnx7CGMNQg\">看看我对 useEffect 的深度理解\u003C/a>\u003C/p>\n\u003Cp>在 React 中,\u003Ccode>useEffect\u003C/code> 和 \u003Ccode>useLayoutEffect\u003C/code> 分为两个阶段: \u003Ccode>render\u003C/code> 阶段和 \u003Ccode>commit\u003C/code> 阶段。这两个阶段分别发生在组件的渲染过程中,以确保正确地处理副作用\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ccode>render\u003C/code> 阶段: 函数组件开始渲染的时候,创建出对应的 hook 链表挂载到 workInProgress 的 memoizedState 上,并创建 effect 链表,但是基于上次和本次依赖项的比较结果;\u003C/li>\n\u003Cli>\u003Ccode>commit\u003C/code> 阶段: 异步调度 \u003Ccode>useEffect,layout\u003C/code> 阶段同步处理 \u003Ccode>useLayoutEffect\u003C/code> 的 \u003Ccode>effect\u003C/code>,也就是在浏览器进行布局 \u003Ccode>layout\u003C/code> 和回执 \u003Ccode>paint\u003C/code> 之前同步执行。等到 \u003Ccode>commit\u003C/code> 阶段完成,更新应用到页面上之后,开始处理 \u003Ccode>useEffect\u003C/code> 产生的 \u003Ccode>effect\u003C/code>;\u003C/li>\n\u003C/ul>\n\u003Cp>react 在 commit 阶段,它又分为三个小阶段: \u003Ccode>before mutation\u003C/code>、\u003Ccode>mutation\u003C/code>、\u003Ccode>layout\u003C/code>。\n其中具体操作 dom 的阶段是 \u003Ccode>mutation\u003C/code>,操作 dom 之前是 \u003Ccode>before mutation\u003C/code>,而操作 dom 之后是 \u003Ccode>layout\u003C/code>。\n\u003Ccode>layout\u003C/code> 阶段在操作 dom 之后,所以这个阶段是能拿到 dom 的，ref 更新是在这个阶段,\u003Ccode>useLayoutEffect\u003C/code> 回调函数的执行也是在这个阶段。\u003C/p>\n\u003Cp>整体流程上都是先在 \u003Ccode>render\u003C/code> 阶段，生成 \u003Ccode>effect\u003C/code>，并将它们拼接成链表，存到 \u003Ccode>fiber.updateQueue\u003C/code> 上,这些 \u003Ccode>effect\u003C/code> 表示在组件渲染后需要执行的副作用操作，如数据获取、订阅事件等,最终带到 \u003Ccode>commit\u003C/code> 阶段被处理。\u003C/p>\n\u003Cp>\u003Ccode>useEffect\u003C/code> 生成的 \u003Ccode>effect\u003C/code> 会进入 Scheduler 调度,在浏览器空闲时异步执行,不会阻塞渲染,这样可以避免影响用户界面的响应性。\u003C/p>\n\u003Cp>\u003Ccode>useLayoutEffect\u003C/code> 生成的 effect 会在浏览器 \u003Ccode>layout\u003C/code> 阶段之前同步执行,这可能会阻塞渲染,因此需要谨慎使用,以避免性能问题。\u003C/p>\n\u003Cp>如何解决在服务端渲染中\u003Ccode>useLayoutEffect\u003C/code>不可用的报错？\u003C/p>\n\u003Col>\n\u003Cli>替换为useEffect\u003C/li>\n\u003Cli>将组件改为仅在客户端渲染（Suspense+windows检测抛错）\u003C/li>\n\u003Cli>只在水合之后渲染使用了\u003Ccode>useLayoutEffect\u003C/code>的组件。isMounted + useEffect\u003C/li>\n\u003Cli>如果是外部数据响应更新布局信息，则可以使用\u003Ccode>useSyncExternalStore\u003C/code>替代\u003C/li>\n\u003C/ol>\n\u003Ch4 id=\"usesyncexternalstore是干啥的\">\u003Ccode>useSyncExternalStore\u003C/code>是干啥的？\u003C/h4>\n\u003Cp>用于集成外部非react的状态管理库\u003C/p>\n\u003Ch4 id=\"什么是调解reconciliation\">什么是调解（reconciliation）?\u003C/h4>\n\u003Cp>当组件的props或state发生更改时，React 通过将新返回的元素与先前呈现的元素进行比较来确定是否需要实际的 DOM 更新。当它们不相等时，React 将更新 DOM 。此过程称为reconciliation。\u003C/p>\n\u003Ch4 id=\"错误边界是啥\">错误边界是啥？\u003C/h4>\n\u003Cp>错误边界是在其子组件树中的任何位置捕获 JavaScript 错误、记录这些错误并显示回退 UI 而不是崩溃的组件树的组件。\n如果一个类组件定义了一个名为 componentDidCatch(error, info) 或 static getDerivedStateFromError() 新的生命周期方法，则该类组件将成为错误边界\u003C/p>\n\u003Cp>不会被捕获的情况：\u003C/p>\n\u003Col>\n\u003Cli>事件处理器\u003C/li>\n\u003C/ol>\n\u003Cp>实际项目中可使用\u003Ca href=\"https://github.com/bvaughn/react-error-boundary\">react-error-boundary\u003C/a>\u003C/p>\n\u003Ch4 id=\"rsc怎么实现的\">RSC怎么实现的？\u003C/h4>\n\u003Col>\n\u003Cli>当用户访问应用时，通知server渲染App组件，拿到App组件的流式数据后拼成React组件需要的数据形式，最终渲染到页面\u003C/li>\n\u003Cli>server拿到\u003Ccode>/?rsc_id=App&#x26;props=...\u003C/code>后，针对\u003Ccode>use client;\u003C/code>和\u003Ccode>use server;\u003C/code>分别处理，返回额外的id、typeof、bound等元信息\u003C/li>\n\u003C/ol>\n\u003Cp>返回的格式如下：\u003C/p>\n\u003Cpre>\u003Ccode>1:I{\"id\":\"foooooooo\",\"chunks\":[],\"name\":\"Foo\",\"async\":true}0:[\"$\",\"div\",null,{\"children\":[[\"$\",\"h1\",null,{\"children\":\"Hello World\"}],[\"$\",\"$L1\",null,{}]]}]\n\u003C/code>\u003C/pre>\n\u003Cp>\u003Ca href=\"https://github.com/facebook/react/blob/ef8bdbe/packages/react-client/src/ReactFlightClient.js#L504-L598\">源码\u003C/a>\u003C/p>\n\u003Cp>\u003Ccode>$\u003C/code>表示React Element，\u003Ccode>$L\u003C/code>表示Lazy Node，会讲其用React.lazy包装返回，$L1的1表示chunk id\u003C/p>\n\u003Ch4 id=\"哪些情况会触发re-render如何防止\">哪些情况会触发re-render？如何防止？\u003C/h4>\n\u003Col>\n\u003Cli>状态变化\u003C/li>\n\u003Cli>父组件re-render\u003C/li>\n\u003Cli>context变化\u003C/li>\n\u003Cli>hooks变化\u003C/li>\n\u003C/ol>\n\u003Cdiv>\u003Cp>props变化会导致re-render？其实不会，props向上追溯到state变更，是state变更导致父组件re-render从而引发子组件re-render，而不是由props变更引起，触发使用了React.memo\u003C/p>\u003C/div>\n\u003Cp>如何避免父组件导致的re-render？\n使用React.memo。为啥这不是默认行为？想不re-render，检查props是否变更导致的消耗可能更大！\u003C/p>\n\u003Cp>在Dan的文章\u003Ca href=\"https://overreacted.io/zh-hans/before-you-memo/\">在你写memo()之前\u003C/a>，需要考虑两个方法将re-render限制在一个很小的范围：\u003C/p>\n\u003Col>\n\u003Cli>状态下移，把可变的部分拆到平行组件中，如\u003Ccode>&#x3C;Changed />&#x3C;Expensive />\u003C/code>\u003C/li>\n\u003Cli>把内容上移，把可变的部分拆到父组件中，如\u003Ccode>&#x3C;Changed>&#x3C;Expensive />&#x3C;/Changed>\u003C/code>，只要props.children没变化，就不会触发子组件re-render\u003C/li>\n\u003C/ol>\n\u003Cp>上面第二点也可以用其他props属性，如：\u003Ccode>&#x3C;Changed content={&#x3C;Expensive />} />\u003C/code>，这种方法叫做「Components as props」\u003C/p>\n\u003Cp>什么时候应该用useMemo/useCallback？\u003C/p>\n\u003Col>\n\u003Cli>React.memo过的组件的props\u003C/li>\n\u003Cli>useEffect、useMemo、useCallback中非原始值的依赖应该用\u003C/li>\n\u003Cli>重消耗的部分应该用，例如生成渲染树\u003C/li>\n\u003C/ol>\n\u003Cdiv>\u003Cp>JavaScript有原始值与引用值的区分，由于props和hook deps都会做shadow equal，使用时尽量避免使用引用值，避免不了需用useMemo/useCallback包一下\u003C/p>\u003C/div>\n\u003Cp>如何防止Context导致的re-render？\u003C/p>\n\u003Col>\n\u003Cli>memo context value\u003C/li>\n\u003Cli>拆分data和API（getter、setter）\u003C/li>\n\u003Cli>把数据拆小\u003C/li>\n\u003Cli>使用context-selector，例如use-context-selector\u003C/li>\n\u003C/ol>\n\u003Cp>如何定位re-render？\u003C/p>\n\u003Col>\n\u003Cli>借助react devtools的record功能，通过录制的方式排查\u003C/li>\n\u003Cli>借助外部工具，如：why-did-render或tilg\u003C/li>\n\u003C/ol>\n\u003Ch4 id=\"react合成事件\">React合成事件？\u003C/h4>\n\u003Cp>React并不是将click事件绑定到了div的真实DOM上，而是在document处监听了所有的事件，当事件发生并且冒泡到document处的时候，React将事件内容封装并交由真正的处理函数运行。这样的方式不仅仅减少了内存的消耗，还能在组件挂在销毁时统一订阅和移除事件。\u003C/p>\n\u003Cp>如何阻止事件冒泡？\n除此之外，冒泡到document上的事件也不是原生的浏览器事件，而是由react自己实现的合成事件（SyntheticEvent）。因此如果不想要是事件冒泡的话应该调用event.preventDefault()方法，而不是调用event.stopProppagation()方法。\u003C/p>\n\u003Cp>实现合成事件的目的？\u003C/p>\n\u003Cul>\n\u003Cli>合成事件首先抹平了浏览器之间的兼容问题，另外这是一个跨浏览器原生事件包装器，赋予了跨浏览器开发的能力；\u003C/li>\n\u003Cli>对于原生浏览器事件来说，浏览器会给监听器创建一个事件对象。如果你有很多的事件监听，那么就需要分配很多的事件对象，造成高额的内存分配问题。但是对于合成事件来说，有一个事件池专门来管理它们的创建和销毁，当事件需要被使用时，就会从池子中复用对象，事件回调结束后，就会销毁事件对象上的属性，从而便于下次复用事件对象。\u003C/li>\n\u003C/ul>\n\u003Ch4 id=\"什么是-react-fiber-它解决了什么问题\">什么是 React Fiber? \u003Cstrong>它解决了什么问题？\u003C/strong>\u003C/h4>\n\u003Cp>Fiber 是 React v16 中新的 \u003Cem>reconciliation\u003C/em> 引擎，或核心算法的重新实现。React Fiber 的目标是提高对动画，布局，手势，暂停，中止或者重用任务的能力及为不同类型的更新分配优先级，及新的并发原语等领域的适用性。\u003C/p>\n\u003Cp>\u003Cem>React Fiber\u003C/em> 的目标是提高其在动画、布局和手势等领域的适用性。它的主要特性是 \u003Cstrong>incremental rendering\u003C/strong>: 将渲染任务拆分为小的任务块并将任务分配到多个帧上的能力。\u003C/p>\n\u003Cp>核心思想：Fiber 也称协程或者纤程。它和线程并不一样，协程本身是没有并发或者并行能力的（需要配合线程），它只是一种控制流程的让出机制。让出 CPU 的执行权，让 CPU 能在这段时间执行其他的操作。渲染的过程可以被中断，可以将控制权交回浏览器，让位给高优先级的任务，浏览器空闲后再恢复渲染。\u003C/p>\n\u003Ch4 id=\"为什么-usestate-要使用数组而不是对象\">为什么 useState 要使用数组而不是对象?\u003C/h4>\n\u003Cul>\n\u003Cli>如果 useState 返回的是数组，那么使用者可以对数组中的元素命名，代码看起来也比较干净\u003C/li>\n\u003Cli>如果 useState 返回的是对象，在解构对象的时候必须要和 useState 内部实现返回的对象同名，想要使用多次的话，必须得设置别名才能使用返回值\u003C/li>\n\u003C/ul>\n\u003Cp>这里可以看到，返回对象的使用方式还是挺麻烦的，更何况实际项目中会使用的更频繁。\u003C/p>\n\u003Cp>总结：useState 返回的是 array 而不是 object 的原因就是为了降低使用的复杂度，返回数组的话可以直接根据顺序解构，而返回对象的话要想使用多次就需要定义别名了。\u003C/p>\n\u003Ch4 id=\"那为什么不要在循环条件或嵌套函数中调用-hook-呢\">那为什么不要在循环、条件或嵌套函数中调用 Hook 呢？\u003C/h4>\n\u003Cp>因为 Hooks 的设计是基于数组实现。在调用时按顺序加入数组中，如果使用循环、条件或嵌套函数很有可能导致数组取值错位，执行错误的 Hook。当然，实质上 React 的源码里不是数组，是链表。\u003C/p>\n\u003Cp>React 16.x的三大新特性 Time Slicing、Suspense、 hooks\u003C/p>\n\u003Cul>\n\u003Cli>Time Slicing（解决CPU速度问题）使得在执行任务的期间可以随时暂停，跑去干别的事情，这个特性使得react能在性能极其差的机器跑时，仍然保持有良好的性能\u003C/li>\n\u003Cli>Suspense （解决网络IO问题）和lazy配合，实现异步加载组件。 能暂停当前组件的渲染， 当完成某件事以后再继续渲染，解决从react出生到现在都存在的「异步副作用」的问题，而且解决得非的优雅，使用的是 T异步但是同步的写法，这是最好的解决异步问题的方式\u003C/li>\n\u003Cli>提供了一个内置函数componentDidCatch，当有错误发生时，可以友好地展示 fallback 组件; 可以捕捉到它的子元素（包括嵌套子元素）抛出的异常; 可以复用错误组件。\u003C/li>\n\u003C/ul>\n\u003Ch4 id=\"hooks更新机制\">Hooks更新机制？\u003C/h4>\n\u003Cp>对于函数组件来说,其 fiber 上的 memorizedState 专门用来存储 hooks 链表,每一个 hook 对应链表中的每一个元素,最终与其他的 effect 链表形成环形链表。\u003C/p>\n\u003Cp>单个的 \u003Ccode>effect\u003C/code> 对象包括以下几个属性,其中在代码中有如下定义:\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"ts\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"ts\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">const\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> effect\u003C/span>\u003Cspan style=\"color:#F47067\">:\u003C/span>\u003Cspan style=\"color:#F69D50\"> Effect\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> {  \u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">  tag,  \u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">  create,  \u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">  destroy,  \u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">  deps,  \u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">  // Circular  \u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#DCBDFB\">  next\u003C/span>\u003Cspan style=\"color:#ADBAC7\">: (\u003C/span>\u003Cspan style=\"color:#F69D50\">null\u003C/span>\u003Cspan style=\"color:#F47067\">:\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> any\u003C/span>\u003Cspan style=\"color:#ADBAC7\">),  \u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">};\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Cul>\n\u003Cli>create: 传入 useEffect 函数的第一个参数,即回调函数;\u003C/li>\n\u003Cli>destroy: 回调函数 return 的函数,在该 effect 销毁的时候执行;\u003C/li>\n\u003Cli>deps: 依赖项;\u003C/li>\n\u003Cli>next: 指向下一个 effect;\u003C/li>\n\u003Cli>tag: effect 的类型,区分是 useEffect 还是 useLayoutEffect;\u003C/li>\n\u003C/ul>\n\u003Ch4 id=\"如何理解react-hooks上的一些使用误区\">如何理解React hooks上的一些使用误区？\u003C/h4>\n\u003Cp>\u003Ca href=\"https://mp.weixin.qq.com/s/Yf4-5Zni3-heWjzM2KYAFQ\">React Hooks 使用误区，驳官方文档\u003C/a>\n\u003Ca href=\"https://mp.weixin.qq.com/s/-6bQKIjH6WPcfuiCFtsjng\">React useEvent：砖家说的没问题\u003C/a>\u003C/p>\n\u003Cp>\u003Ca href=\"https://github.com/reactjs/rfcs/pull/220\">RFC: useEvent by gaearon · Pull Request #220 · reactjs/rfcs · GitHub\u003C/a>\u003C/p>\n\u003Col>\n\u003Cli>使用useRef解决延迟调用的闭包问题\u003C/li>\n\u003Cli>useCallback需要和React.memo/\u003Ccode>shouldComponentUpdate\u003C/code>配合使用，没事别用useCallback\u003C/li>\n\u003C/ol>\n\u003Ch3 id=\"小程序\">小程序\u003C/h3>\n\u003Ch4 id=\"小程序跨端框架实现原理\">小程序跨端框架实现原理？\u003C/h4>\n\u003Cp>以Remax为例，其通过react-reconciler实现小程序端的渲染器。\n小程序对代码屏蔽了DOM操作，代码运行在worker线程中，无法直接操作视图层的DOM。remax通过引入VNode，让React在reconciliation阶段不是改变DOM，而是更新VNode。在React更新完成之后，调用节点的toJSON方法，将VNode变为JSON对象，并作为小程序Page的data。\u003C/p>\n\u003Cp>在模板中通过该data渲染出页面：\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"wxml\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"wxml\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan>&#x3C;block a:for=\"{{root.children}}\" a:key=\"{{item.id}}\">\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan>  &#x3C;template is=\"{{'REMAX_TPL_' + item.type}}\" data=\"{{item: item}}\" />\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan>&#x3C;/block>\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan>&#x3C;template name=\"REMAX_TPL_view\">\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan>  &#x3C;view class=\"{{item.props['className']}}\">\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan>    &#x3C;block a:for=\"{{item.children}}\" key=\"{{item.id}}\">\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan>      &#x3C;template is=\"{{'REMAX_TPL_' + item.type}}\" data=\"{{item: item}}\" />\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan>    &#x3C;/block>\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan>  &#x3C;/view>\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan>&#x3C;/template>\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan>&#x3C;template name=\"REMAX_TPL_text\">\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan>  &#x3C;text>\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan>    &#x3C;block a:for=\"{{item.children}}\" key=\"{{item.id}}\">\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan>      &#x3C;template is=\"{{'REMAX_TPL_' + item.type}}\" data=\"{{item: item}}\" />\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan>    &#x3C;/block>\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan>  &#x3C;/text>\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan>&#x3C;/template>\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan>&#x3C;template name=\"REMAX_TPL_plain-text\">\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan>  &#x3C;block>{{item.text}}&#x3C;/block>\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan>&#x3C;/template>\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Cp>\u003Ca href=\"https://zhuanlan.zhihu.com/p/91300119\">在小程序中实现动态模板 - Remax 实现原理 - 知乎\u003C/a>\u003C/p>\n\u003Ch4 id=\"小程序跨端框架类型\">小程序跨端框架类型？\u003C/h4>\n\u003Cp>\u003Ca href=\"https://juejin.cn/post/7143267326199070751\">小程序动态渲染的探索与实践 - 掘金\u003C/a>\u003C/p>\n\u003Col>\n\u003Cli>静态编译型（编译时）\n代表框架：uniapp、taro1/2、MorJS\n实现原理：在编译过程将Vue/React的DSL语法，利用babel工具通过AST转译为小程序模板语法，使用Vue管理数据，小程序管理事件。\n优点：性能好\n缺点：能力受限，新语法必须框架层面支持\u003C/li>\n\u003Cli>原生增强型\n代表框架：MPX\n实现原理：提供一系列增强的模板指令和语法，只需要转换时对指定语法进行处理\n优点：运行时性能极佳，\n缺点：需要整套学习小程序相关功能，有一定的迁移成本\u003C/li>\n\u003Cli>动态渲染型\n代表框架：Rax、Remax、Taro3、Kbone\n实现原理：利用生成的VNode作为Page的data，并使用小程序渲染模板递归渲染出页面。\n优点：重运行时，可直接使用框架语法，学习成本低；尽量模拟Web相关API与DOM，大部分场景可复用Web端代码\n缺点：代码体积会较大；性能较差\u003C/li>\n\u003C/ol>\n\u003Ch2 id=\"html\">HTML\u003C/h2>\n\u003Ch3 id=\"src和href的区别\">\u003Ccode>src\u003C/code>和\u003Ccode>href\u003C/code>的区别？\u003C/h3>\n\u003Cp>首先需要了解一个概念：替换型元素。常见的替换型元素有：script、img、video、audio、iframe\u003C/p>\n\u003Caside class=\"callout callout-tip\">\u003Cdiv class=\"callout-indicator\">\u003Cdiv class=\"callout-hint\">\u003Csvg viewBox=\"0 0 24 24\" width=\"24\" height=\"24\" fill=\"currentColor\" class=\"callout-hint-tip\">\u003Cpath fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M1.43909 8.85483L1.44039 8.85354L4.96668 5.33815C5.30653 4.99386 5.7685 4.79662 6.2524 4.78972L6.26553 4.78963L12.9014 4.78962L13.8479 3.84308C16.9187 0.772319 20.0546 0.770617 21.4678 0.975145C21.8617 1.02914 22.2271 1.21053 22.5083 1.4917C22.7894 1.77284 22.9708 2.13821 23.0248 2.53199C23.2294 3.94517 23.2278 7.08119 20.1569 10.1521L19.2107 11.0983V17.7338L19.2106 17.7469C19.2037 18.2308 19.0067 18.6933 18.6624 19.0331L15.1456 22.5608C14.9095 22.7966 14.6137 22.964 14.29 23.0449C13.9663 23.1259 13.6267 23.1174 13.3074 23.0204C12.9881 22.9235 12.7011 22.7417 12.4771 22.4944C12.2533 22.2473 12.1006 21.9441 12.0355 21.6171L11.1783 17.3417L6.65869 12.822L4.34847 12.3589L2.38351 11.965C2.05664 11.8998 1.75272 11.747 1.50564 11.5232C1.25835 11.2992 1.07653 11.0122 0.979561 10.6929C0.882595 10.3736 0.874125 10.034 0.955057 9.7103C1.03599 9.38659 1.20328 9.09092 1.43909 8.85483ZM6.8186 10.8724L2.94619 10.096L6.32006 6.73268H10.9583L6.8186 10.8724ZM15.2219 5.21703C17.681 2.75787 20.0783 2.75376 21.1124 2.8876C21.2462 3.92172 21.2421 6.31895 18.783 8.77812L12.0728 15.4883L8.51172 11.9272L15.2219 5.21703ZM13.9042 21.0538L13.1279 17.1811L17.2676 13.0414V17.68L13.9042 21.0538Z\">\u003C/path>\u003Cpath d=\"M9.31827 18.3446C9.45046 17.8529 9.17864 17.3369 8.68945 17.1724C8.56178 17.1294 8.43145 17.1145 8.30512 17.1243C8.10513 17.1398 7.91519 17.2172 7.76181 17.3434C7.62613 17.455 7.51905 17.6048 7.45893 17.7835C6.97634 19.2186 5.77062 19.9878 4.52406 20.4029C4.08525 20.549 3.6605 20.644 3.29471 20.7053C3.35607 20.3395 3.45098 19.9148 3.59711 19.476C4.01221 18.2294 4.78141 17.0237 6.21648 16.5411C6.39528 16.481 6.54504 16.3739 6.65665 16.2382C6.85126 16.0016 6.92988 15.678 6.84417 15.3647C6.83922 15.3466 6.83373 15.3286 6.82767 15.3106C6.74106 15.053 6.55701 14.8557 6.33037 14.7459C6.10949 14.6389 5.84816 14.615 5.59715 14.6994C5.47743 14.7397 5.36103 14.7831 5.24786 14.8294C3.22626 15.6569 2.2347 17.4173 1.75357 18.8621C1.49662 19.6337 1.36993 20.3554 1.30679 20.8818C1.27505 21.1464 1.25893 21.3654 1.25072 21.5213C1.24662 21.5993 1.24448 21.6618 1.24337 21.7066L1.243 21.7226L1.24235 21.7605L1.2422 21.7771L1.24217 21.7827L1.24217 21.7856C1.24217 22.3221 1.67703 22.7579 2.2137 22.7579L2.2155 22.7579L2.22337 22.7578L2.23956 22.7577C2.25293 22.7575 2.27096 22.7572 2.29338 22.7567C2.33821 22.7555 2.40073 22.7534 2.47876 22.7493C2.63466 22.7411 2.85361 22.725 3.11822 22.6932C3.64462 22.6301 4.36636 22.5034 5.13797 22.2464C6.58274 21.7653 8.3431 20.7738 9.17063 18.7522C9.21696 18.639 9.26037 18.5226 9.30064 18.4029C9.30716 18.3835 9.31304 18.364 9.31827 18.3446Z\">\u003C/path>\u003C/svg>\u003C/div>\u003Cdiv class=\"callout-title\">Tip\u003C/div>\u003C/div>\u003Cdiv class=\"callout-content\">\u003Cp>替换型元素是把文件内容引入，替换掉自身位置的一类标签\u003Cspan role=\"img\" aria-label=\"label\">🏷️\u003C/span>。\u003C/p>\u003C/div>\u003C/aside>\n\u003Cp>\u003Cstrong>凡是替换型元素，都是用src属性引用文件，链接型元素使用href属性。\u003C/strong>\u003C/p>\n\u003Cp>这也就解释了，为何style标签不能使用src，只能使用link+href引入样式的问题了\u003Cspan role=\"img\" aria-label=\"person raising hand\">🙋\u003C/span>\u003C/p>\n\u003Ch3 id=\"dtd是什么\">DTD是什么？\u003C/h3>\n\u003Cp>DTD全称是Document Type Definition，也就是文档类型定义。\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"html\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"html\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">&#x3C;!\u003C/span>\u003Cspan style=\"color:#8DDB8C\">DOCTYPE\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> html\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> PUBLIC\u003C/span>\u003Cspan style=\"color:#96D0FF\"> \"-//W3C//DTD XHTML 1.0 Strict//EN\"\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#96D0FF\">\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\"\u003C/span>\u003Cspan style=\"color:#ADBAC7\">>\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Cp>SGML（Standard generalized markup language）用DTD定义每一种文档类型，HTML属于SGML，在HTML5之前，HTML都是使用符合SGML规定的DTD。但这些复杂的DTD写法并没有实际作用（浏览器并不会用SGML引擎解析它们），因此到了HTML5干脆放弃了SGML子集的坚持，规定了简单易记的DTD：\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"html\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"html\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">&#x3C;!\u003C/span>\u003Cspan style=\"color:#8DDB8C\">DOCTYPE\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> html\u003C/span>\u003Cspan style=\"color:#ADBAC7\">>\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Ch3 id=\"如何实现给图片设置部分区域可点击\">如何实现给图片设置部分区域可点击？\u003C/h3>\n\u003Cp>\u003Ccode>usemap\u003C/code>属性+\u003Ccode>&#x3C;map>\u003C/code>\n\u003Ca href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/useMap\">HTMLImageElement: useMap property - Web APIs | MDN\u003C/a>\u003C/p>\n\u003Ch3 id=\"什么是ogp有何作用\">什么是OGP？有何作用？\u003C/h3>\n\u003Cp>OGP全称Open Graph protocol，Facebook在2010年推出的一组网页元信息标记协议，是一组为社交分享而生的Meta标签。\u003C/p>\n\u003Cp>如果网页采用OG协议，分享结果会在支持OG协议的网站进行结构化展示，这样站点在被链接分享时会有更丰富的内容展示。\n\u003Cimg src=\"https://raw.githubusercontent.com/fw6/assets/main/toy_docs/20230802170307.png\" alt=\"image.png\">\u003C/p>\n\u003Cp>设置方法很简单，只需要在header内添加几个meta标签即可：\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"html\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"html\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">&#x3C;\u003C/span>\u003Cspan style=\"color:#8DDB8C\">meta\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> property\u003C/span>\u003Cspan style=\"color:#ADBAC7\">=\u003C/span>\u003Cspan style=\"color:#96D0FF\">\"og:title\"\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> content\u003C/span>\u003Cspan style=\"color:#ADBAC7\">=\u003C/span>\u003Cspan style=\"color:#96D0FF\">\"显示的标题\"\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> />\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">&#x3C;\u003C/span>\u003Cspan style=\"color:#8DDB8C\">meta\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> property\u003C/span>\u003Cspan style=\"color:#ADBAC7\">=\u003C/span>\u003Cspan style=\"color:#96D0FF\">\"og:type\"\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> content\u003C/span>\u003Cspan style=\"color:#ADBAC7\">=\u003C/span>\u003Cspan style=\"color:#96D0FF\">\"对象类型\"\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> />\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">&#x3C;\u003C/span>\u003Cspan style=\"color:#8DDB8C\">meta\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> property\u003C/span>\u003Cspan style=\"color:#ADBAC7\">=\u003C/span>\u003Cspan style=\"color:#96D0FF\">\"og:url\"\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> content\u003C/span>\u003Cspan style=\"color:#ADBAC7\">=\u003C/span>\u003Cspan style=\"color:#96D0FF\">\"分享的url地址\"\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> />\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">&#x3C;\u003C/span>\u003Cspan style=\"color:#8DDB8C\">meta\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> property\u003C/span>\u003Cspan style=\"color:#ADBAC7\">=\u003C/span>\u003Cspan style=\"color:#96D0FF\">\"og:image\"\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> content\u003C/span>\u003Cspan style=\"color:#ADBAC7\">=\u003C/span>\u003Cspan style=\"color:#96D0FF\">\"缩略图地址\"\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> />\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">&#x3C;\u003C/span>\u003Cspan style=\"color:#8DDB8C\">meta\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> property\u003C/span>\u003Cspan style=\"color:#ADBAC7\">=\u003C/span>\u003Cspan style=\"color:#96D0FF\">\"og:description\"\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> content\u003C/span>\u003Cspan style=\"color:#ADBAC7\">=\u003C/span>\u003Cspan style=\"color:#96D0FF\">\"显示的描述信息\"\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> />\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">&#x3C;\u003C/span>\u003Cspan style=\"color:#8DDB8C\">meta\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> property\u003C/span>\u003Cspan style=\"color:#ADBAC7\">=\u003C/span>\u003Cspan style=\"color:#96D0FF\">\"og:site_name\"\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> content\u003C/span>\u003Cspan style=\"color:#ADBAC7\">=\u003C/span>\u003Cspan style=\"color:#96D0FF\">\"网站名称\"\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> />\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Cp>更多的属性设置，参考官网：\u003Ca href=\"https://ogp.me/\">The Open Graph protocol\u003C/a>\u003C/p>\n\u003Cp>以OG官网为例，其设置如下：\n\u003Cimg src=\"https://raw.githubusercontent.com/fw6/assets/main/toy_docs/20230802170533.png\" alt=\"image.png\">\u003C/p>\n\u003Cp>在 facebook，twitter 等网站，有分享卡片检测工具，可利用这些工具，检测分享设置是否成功。\u003C/p>\n\u003Cul>\n\u003Cli>twitter 分享检测: \u003Ca href=\"https://cards-dev.twitter.com/validator\">https://cards-dev.twitter.com/validator\u003C/a>\u003C/li>\n\u003Cli>facebook 分享检测: \u003Ca href=\"https://developers.facebook.com/tools/debug/sharing/\">https://developers.facebook.com/tools/debug/sharing/\u003C/a>\u003C/li>\n\u003Cli>linkedin 分享检测: \u003Ca href=\"https://www.linkedin.com/post-inspector/inspect/\">https://www.linkedin.com/post-inspector/inspect/\u003C/a>\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"css\">CSS\u003C/h2>\n\u003Ch3 id=\"如何通过flex实现两个子元素左上右下布局\">如何通过flex实现两个子元素左上、右下布局？\u003C/h3>\n\u003Cp>使用align-self，定义子项的交叉轴对齐方式\u003C/p>\n\u003Cp>\u003Ca href=\"https://developer.mozilla.org/zh-CN/play?id=AM3e4EOW8XyYL6zHtlCIqCwQJ3bCMUF0G187st8dHHehMMAbo3SZdfNgtS%2FEMhY%2F2ZlhD2u874rEFaJO\">Playground | MDN\u003C/a>\u003C/p>\n\u003Ch2 id=\"module-bundlers\">Module bundlers\u003C/h2>\n\u003Ch3 id=\"webpack-loader和plugin的区别\">Webpack loader和plugin的区别？\u003C/h3>\n\u003Col>\n\u003Cli>loader在打包文件之前；plugin贯穿整个编译周期\u003C/li>\n\u003Cli>loader是个文件转换器；plugin则会在webpack各个生命周期处理输出结果，做各种事情\u003C/li>\n\u003C/ol>\n\u003Ch3 id=\"webpack中modulechunkbundlevendor区别是啥\">Webpack中module、chunk、bundle、vendor区别是啥？\u003C/h3>\n\u003Col>\n\u003Cli>项目源码中所有资源都属于module\u003C/li>\n\u003Cli>在bundling过程中产生的代码成为chunk，chunk有不同类型（entry、child）\n产生chunk的途径：\n\u003Col>\n\u003Cli>entry入口\u003C/li>\n\u003Cli>异步加载模块\u003C/li>\n\u003Cli>代码分割\u003C/li>\n\u003C/ol>\n\u003C/li>\n\u003Cli>bundle包含了加载和编译的最终源文件\u003C/li>\n\u003Cli>vendor是指将三方库打包提取出一个单独的bundle文件\u003C/li>\n\u003C/ol>\n\u003Ch3 id=\"webpack中魔法注释webpackprefetch和webpackpreload有啥区别\">Webpack中魔法注释webpackPrefetch和webpackPreload有啥区别？\u003C/h3>\n\u003Cp>\u003Ccode>webpackPrefetch\u003C/code> 会在浏览器闲置下载文件，\u003Ccode>webpackPreload\u003C/code> 会在父 chunk 加载时并行下载文件。\u003C/p>\n\u003Ch3 id=\"webpack生命周期有哪些\">Webpack生命周期有哪些？\u003C/h3>\n\u003Cp>Webpack工作流程最核心的模块Compiler、Compilation\u003C/p>\n\u003Cp>Compiler构建器分为3个阶段：\u003C/p>\n\u003Col>\n\u003Cli>初始化阶段\n\u003Col>\n\u003Cli>environment\n创建完Compiler实例，执行插件apply方法前触发\u003C/li>\n\u003Cli>afterEnvironment\u003C/li>\n\u003Cli>entryOption\u003C/li>\n\u003Cli>afterPlugins\u003C/li>\n\u003Cli>afterResolvers\n解析resolver配置后触发\u003C/li>\n\u003C/ol>\n\u003C/li>\n\u003Cli>构建过程阶段\n\u003Col>\n\u003Cli>normalModuleFactory\u003C/li>\n\u003Cli>contextModuleFactory\u003C/li>\n\u003Cli>beforeRun\u003C/li>\n\u003Cli>run\u003C/li>\n\u003Cli>beforeCompile\u003C/li>\n\u003Cli>compile\u003C/li>\n\u003Cli>thisCompilation\u003C/li>\n\u003Cli>make\n会执行模块编译到优化的完整过程\u003C/li>\n\u003C/ol>\n\u003C/li>\n\u003Cli>产物生成阶段\n\u003Col>\n\u003Cli>shouldEmit、emit、assetEmitted、afterEmit\n在构建完成后，处理产物的过程中触发\u003C/li>\n\u003Cli>failed、done\n达到最终结果状态时触发\u003C/li>\n\u003C/ol>\n\u003C/li>\n\u003C/ol>\n\u003Ch3 id=\"webpack优化手段有哪些\">Webpack优化手段有哪些？\u003C/h3>\n\u003Cul>\n\u003Cli>\u003Ca href=\"https://mp.weixin.qq.com/s?__biz=MjM5NDgyODI4MQ==&#x26;mid=2247484533&#x26;idx=1&#x26;sn=9b15a67b88ebc95476fce1798eb49146&#x26;chksm=a6809ee391f717f5e2c2242ed313ecccc49897b101602e3358085c6a6b2393d54424fc52eb46&#x26;scene=21#wechat_redirect\">SEE Conf: Umi 4 设计思路文字稿\u003C/a>\u003C/li>\n\u003Cli>\u003Ca href=\"https://www.cnblogs.com/gogo2027/p/16832401.html\">Webpack构建速度优化 - gogo2027 - 博客园\u003C/a>\u003C/li>\n\u003C/ul>\n\u003Cp>\u003Cimg src=\"https://raw.githubusercontent.com/fw6/assets/main/toy_docs/20230816143135.png\" alt=\"image.png\">\u003C/p>\n\u003Cp>优化3法宝：缓存、延迟处理、Native code\u003C/p>\n\u003Cp>大致分为3个方向：\u003C/p>\n\u003Col>\n\u003Cli>减少执行编译的模块\u003C/li>\n\u003Cli>提升单个模块的编译速度\u003C/li>\n\u003Cli>并行构建提升整体效率\u003C/li>\n\u003C/ol>\n\u003Cp>基于时间的分析工具：\u003Ccode>speed-measure-webpack-plugin\u003C/code>\n基于产物内容的分析工具：\u003Ccode>webpack-bundle-analyzer\u003C/code>\u003C/p>\n\u003Cp>减少编译的模块，如：\u003C/p>\n\u003Col>\n\u003Cli>按需引入工具类包\u003C/li>\n\u003Cli>配置Externals。从输出中排除依赖，替换为CDN\u003C/li>\n\u003Cli>DllPlugin。将不频繁变动的包提前打包好，后续再打包会直接跳过\u003C/li>\n\u003Cli>IgnorePlugin排除不需要的文件，如moment的国际化文件\u003C/li>\n\u003C/ol>\n\u003Cp>提升单个模块的构建速度：\u003C/p>\n\u003Col>\n\u003Cli>include/exclude\u003C/li>\n\u003Cli>noParse\u003C/li>\n\u003Cli>SourceMap\u003C/li>\n\u003Cli>TypeScript编译优化。如果使用ts-loader，忽略类型检查；\u003C/li>\n\u003Cli>Resolve。指定构建时查找模块文件的规则\u003C/li>\n\u003C/ol>\n\u003Cp>并行构建提升性能：\u003C/p>\n\u003Col>\n\u003Cli>HappyPack\u003C/li>\n\u003Cli>thread-loader。在特定loader上开启多进程\u003C/li>\n\u003Cli>parallel-webpack。如果有多个子配置可使用并发构建，串行执行\u003C/li>\n\u003C/ol>\n\u003Cp>打包阶段提效：\u003C/p>\n\u003Cul>\n\u003Cli>TerserWebpackPlugin。缓存和并发\u003C/li>\n\u003Cli>MiniCssExtractPlugin。异步加载、无重复编译\u003C/li>\n\u003C/ul>\n\u003Cp>其他：\u003C/p>\n\u003Col>\n\u003Cli>代码分割。多入口打包、动态加载、分包加载、提取公共模块\u003C/li>\n\u003Cli>Tree Shaking。\u003Ccode>optimization.usedExports: true\u003C/code>（注意babel-loader导致的tree shaking失效，被打包为了commonjs。8.x修复或preset-env module设置为false）\u003C/li>\n\u003Cli>Scope Hoisting作用域提升。合并多个模块到一个函数中\u003C/li>\n\u003Cli>sideEffect 模块标记有无副作用，利于摇树优化。\u003C/li>\n\u003C/ol>\n\u003Cp>缓存：\u003C/p>\n\u003Col>\n\u003Cli>babel-loader。cacheDirectory\u003C/li>\n\u003Cli>cache-loader。多其他loader生效\n多使用splitChunks优化缓存命中率\u003C/li>\n\u003C/ol>\n\u003Ch3 id=\"webpack如何实现热更新\">Webpack如何实现热更新？\u003C/h3>\n\u003Cp>\u003Ca href=\"https://webpack.js.org/concepts/hot-module-replacement/\">Hot Module Replacement | webpack\u003C/a>\u003C/p>\n\u003Cp>先看下HMR的API和使用场景：\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"js\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">// 接收自己更新，更新后重复执行自己，不往上冒泡\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#6CB6FF\">module\u003C/span>\u003Cspan style=\"color:#ADBAC7\">.hot.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">accept\u003C/span>\u003Cspan style=\"color:#ADBAC7\">();\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">// 接收依赖更新，更新后执行回调函数，不往上冒泡\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#6CB6FF\">module\u003C/span>\u003Cspan style=\"color:#ADBAC7\">.hot.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">accept\u003C/span>\u003Cspan style=\"color:#ADBAC7\">([\u003C/span>\u003Cspan style=\"color:#96D0FF\">'dep1'\u003C/span>\u003Cspan style=\"color:#ADBAC7\">], () \u003C/span>\u003Cspan style=\"color:#F47067\">=>\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">    console.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">log\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(\u003C/span>\u003Cspan style=\"color:#96D0FF\">'dep1 changed'\u003C/span>\u003Cspan style=\"color:#ADBAC7\">);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">});\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">// 让自己失效并冒泡。通常在accept之后遇到一些场景又希望自己失效\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#6CB6FF\">module\u003C/span>\u003Cspan style=\"color:#ADBAC7\">.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">invalidate\u003C/span>\u003Cspan style=\"color:#ADBAC7\">();\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">// 标记一些依赖为不可更新，这些以来更新会触发页面reload\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#6CB6FF\">module\u003C/span>\u003Cspan style=\"color:#ADBAC7\">.hot.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">decline\u003C/span>\u003Cspan style=\"color:#ADBAC7\">([\u003C/span>\u003Cspan style=\"color:#96D0FF\">'dep1'\u003C/span>\u003Cspan style=\"color:#ADBAC7\">]);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">// 同上，标记自己不可更新\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#6CB6FF\">module\u003C/span>\u003Cspan style=\"color:#ADBAC7\">.hot.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">decline\u003C/span>\u003Cspan style=\"color:#ADBAC7\">();\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">// 设置或移除当前模块被自动替换时执行的回调函数\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#6CB6FF\">module\u003C/span>\u003Cspan style=\"color:#ADBAC7\">.hot.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">dispose\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(fn);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#6CB6FF\">module\u003C/span>\u003Cspan style=\"color:#ADBAC7\">.hot.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">removeDisposeHandler\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(fn);\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Col>\n\u003Cli>每个模块做这些事：\n\u003Col>\n\u003Cli>有parent和children属性，用于跟踪父子关系\u003C/li>\n\u003Cli>给 hot API\u003C/li>\n\u003Cli>给两个方法check和apply\u003C/li>\n\u003C/ol>\n\u003C/li>\n\u003Cli>获取更新\n先check再apply。\ncheck就是检查更新并下载更新的module和chunk（发请求获取最新manifest.json）；\napply会：1）将所有模块标记为invalid；2）每个模块分别检查他自己和父模块是否有accept handler，没有则刷新，有则冒泡到最先遇到的accept handler模块为止；3）dispose和unload每个invalidate模块；4）执行所有accept handler\u003C/li>\n\u003Cli>主要逻辑在Runtime，Compiler负责提供更新后的module和chunk列表\n\u003Cimg src=\"https://raw.githubusercontent.com/fw6/assets/main/toy_docs/20230807111736.png\" alt=\"image.png\">\u003C/li>\n\u003C/ol>\n\u003Ch3 id=\"webpack的运行时如何实现\">Webpack的运行时如何实现？\u003C/h3>\n\u003Cp>构建工具通常需要搭配一套Runtime把构建产物跑起来。\n这个Runtime可以很简单，比如Rollup、ESBuild，也可以很复杂，比如Webpack。之所以复杂，因为：\u003C/p>\n\u003Col>\n\u003Cli>牵连了很多功能，如Code Splitting、HMR、MF、CSS加载、等\u003C/li>\n\u003Cli>需要和编译时搭配使用，比如Webpack的PublicPaht就来自Node环境的配置项\u003C/li>\n\u003Cli>Webpack还在Runtime引入了插件机制，通过插件挂载的方式支持Code Splitting、HMR、MF等\u003C/li>\n\u003Cli>为让代码体积变小，加了很多简写\u003C/li>\n\u003C/ol>\n\u003Cp>运行时如何实现？基础流程如下：\u003C/p>\n\u003Col>\n\u003Cli>模块注册和执行\n\u003Col>\n\u003Cli>定义一个模块Map\u003C/li>\n\u003Cli>实现个假的require方法\u003C/li>\n\u003Cli>require入口模块\u003C/li>\n\u003Cli>从入口开始挂载模块并执行\u003C/li>\n\u003C/ol>\n\u003C/li>\n\u003Cli>Chunk的异步加载\nChunk的异步加载基于import()语法做拆分。需要编译时配合：1. 转换import(‘xx’)为用require.ensure()的加载方式，2. 实现chunk的拆分和合并。\nrequire.ensure通过script的方式加载对应的JavaScript文件，并通过jsonp的方式把新增的chunk和module注册进来。\u003C/li>\n\u003Cli>HMR\u003C/li>\n\u003C/ol>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"diff\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"diff\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#8DDB8C\">+ './a': function (module, exports, require) {\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">const a = require('./a');\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#ADBAC7\">module.exports = { a, b: 1 };\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#8DDB8C\">+ }\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"diff\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"diff\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#FF938A\">- import('xx')\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#8DDB8C\">+ require.ensure(id).then(require.bind(require, id))\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Ch3 id=\"webpack的tree-shaking为何不太行\">Webpack的tree shaking为何不太行？\u003C/h3>\n\u003Cp>Webpack的实现，是先标记，然后交给Terser或UglifyJS等压缩插件处理，所以换一种压缩器就不行了。\n标记分3种：used export，unused harmony export、harmony export。第二种会被shaking掉。\u003C/p>\n\u003Cp>在依赖图中排除没用到的。\nrollup与之相反，只打包用到的，故tree shaking效率更高\u003C/p>\n\u003Ch3 id=\"vite为啥比webpack快\">Vite为啥比Webpack快？\u003C/h3>\n\u003Col>\n\u003Cli>vite是个bundless打包工具，基于浏览器对ESM的原生支持实现按需加载\u003C/li>\n\u003Cli>vite启动服务器按需加载，只在请求到模块才会开始编译\u003C/li>\n\u003Cli>vite使用esbuild预构建依赖（将非ESM包转为ESM形式）并做了缓存，\u003C/li>\n\u003C/ol>\n\u003Ch3 id=\"webpack和vite的区别\">Webpack和Vite的区别？\u003C/h3>\n\u003Cul>\n\u003Cli>webpack会先打包，然后启动开发服务器，请求服务器时直接给予打包结果。\u003C/li>\n\u003Cli>而vite是直接启动开发服务器，请求哪个模块再对该模块进行实时编译。\n由于现代浏览器本身就支持ES Module，会自动向依赖的Module发出请求。vite充分利用这一点，将开发环境下的模块文件，就作为浏览器要执行的文件，而不是像webpack那样进行打包合并。\n由于vite在启动的时候不需要打包，也就意味着不需要分析模块的依赖、不需要编译，因此启动速度非常快。当浏览器请求某个模块时，再根据需要对模块内容进行编译。这种按需动态编译的方式，极大的缩减了编译时间，项目越复杂、模块越多，vite的优势越明显。\u003C/li>\n\u003Cli>在HMR方面，当改动了一个模块后，仅需让浏览器重新请求该模块即可，不像webpack那样需要把该模块的相关依赖模块全部编译一次，效率更高。\u003C/li>\n\u003Cli>当需要打包到生产环境时，vite使用传统的rollup进行打包，因此，vite的主要优势在开发阶段。另外，由于vite利用的是ES Module，因此在代码中不可以使用CommonJS\u003C/li>\n\u003C/ul>\n\u003Ch3 id=\"如何做性能优化的\">如何做性能优化的？\u003C/h3>\n\u003Cp>\u003Ca href=\"https://sun0day.github.io/blog/vite/why-vite4_3-is-faster.html\">How we made Vite 4.3 faaaaster \u003Cspan role=\"img\" aria-label=\"rocket\">🚀\u003C/span> | sun0day’s blog - lost in code\u003C/a>\u003C/p>\n\u003Col>\n\u003Cli>不用resolve库，改为自行实现（更简单、严格、准确，利用缓存）\u003C/li>\n\u003Cli>用fs.realpathSync.native替代fs.realpathFileSync，后者慢70倍\u003C/li>\n\u003Cli>阻塞式改为非阻塞式，例如：fs.readFileSync改为fs.readFile，这样不会阻塞主线程\u003C/li>\n\u003Cli>HMR热更增加缓存。\u003C/li>\n\u003Cli>并行，比如使用Promise.all替代for循环\u003C/li>\n\u003Cli>===相比startsWith和endsWith快20%到60%\u003C/li>\n\u003Cli>避免重复创建正则表达式\u003C/li>\n\u003C/ol>\n\u003Ch3 id=\"如何理解依赖预打包\">如何理解依赖预打包？\u003C/h3>\n\u003Cp>啥是依赖预打包？就是把依赖提前打包好放在npm包里，然后在package.json中删除响应的依赖，使用时直接引打包后的文件即可。\u003C/p>\n\u003Cp>比如npm包依赖了a，a又依赖了b，那正常的结构就是：\u003C/p>\n\u003Cpre>\u003Ccode>node_modules\n    a\n        node_modules\n            b\nindex.ts\npackage.json\n\u003C/code>\u003C/pre>\n\u003Cp>经过依赖预打包，变成了：\u003C/p>\n\u003Cpre>\u003Ccode>compiled(node_modules > .vite)\n    a.js\nindex.ts\npackage.json\n\u003C/code>\u003C/pre>\n\u003Cp>好处有哪些？\u003C/p>\n\u003Col>\n\u003Cli>锁定依赖，对用户和项目来说更安全，不会出现升级导致的意外情况\u003C/li>\n\u003Cli>速度更快，少了很多resolve机制和文件IO，理论上更快\u003C/li>\n\u003Cli>让peerDependencies的警告消失\u003C/li>\n\u003Cli>可复用1个库的不同版本\u003C/li>\n\u003C/ol>\n\u003Cp>缺点有哪些？\u003C/p>\n\u003Col>\n\u003Cli>不能及时享受到三方库的bugfix更新，需要手动升级，通常有滞后\u003C/li>\n\u003Cli>依赖版本滞后带来的版本不一致问题\u003C/li>\n\u003Cli>潜在的尺寸变大和依赖重复\u003C/li>\n\u003C/ol>\n\u003Cp>使用场景：\u003C/p>\n\u003Col>\n\u003Cli>框架和工具可以用，功能原子化的npm包不应该用（没意义）\u003C/li>\n\u003Cli>node环境可以用，browser环境的包不应该用（预打包后没法tree shaking）\u003C/li>\n\u003C/ol>\n\u003Cp>如何实现？\u003C/p>\n\u003Col>\n\u003Cli>基于\u003Ca href=\"https://www.npmjs.com/package/@vercel/ncc\">ncc\u003C/a>\u003C/li>\n\u003Cli>把源码文件和依赖一起打\u003C/li>\n\u003C/ol>\n\u003Ch3 id=\"如何理解vite的依赖预构建\">如何理解Vite的依赖预构建？\u003C/h3>\n\u003Cp>一个项目中存在非常多的模块，并非所有模块都会被预构建，只有裸模块（bare module）会执行依赖预构建。\u003C/p>\n\u003Cp>什么是裸模块？\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"js\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">// 裸模块\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">import\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> xxx \u003C/span>\u003Cspan style=\"color:#F47067\">from\u003C/span>\u003Cspan style=\"color:#96D0FF\"> 'vue'\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">import\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> xxx \u003C/span>\u003Cspan style=\"color:#F47067\">from\u003C/span>\u003Cspan style=\"color:#96D0FF\"> 'vue/xxx'\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\"> \u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">// 非裸模块\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">import\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> yyy \u003C/span>\u003Cspan style=\"color:#F47067\">from\u003C/span>\u003Cspan style=\"color:#96D0FF\"> './foo'\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">import\u003C/span>\u003Cspan style=\"color:#ADBAC7\"> yyy \u003C/span>\u003Cspan style=\"color:#F47067\">from\u003C/span>\u003Cspan style=\"color:#96D0FF\"> '/foo'\u003C/span>\u003Cspan style=\"color:#ADBAC7\">;\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Cp>简单划分为：名称访问的是裸模块，路径访问的不是裸模块\u003C/p>\n\u003Cp>vite会判断模块的实际路径，是否在node_modules中：\u003C/p>\n\u003Cul>\n\u003Cli>实际路径在 node_modules 的模块会被预构建，这是第三方模块\u003C/li>\n\u003Cli>实际路径不在 node_modules 的模块，证明该模块是通过文件链接，链接到 node_modules 内的（monorepo 的实现方式），是开发者自己写的代码，不执行预构建\u003C/li>\n\u003C/ul>\n\u003Cp>vite先进行依赖扫描，确定哪些模块需要进行依赖预构建。\u003C/p>\n\u003Cp>Vite dev的流程：\n创建 Http Server，绑中间件，初始化 Module Graph（依赖图谱），初始化 pluginContainer（插件体系），做 dep optimizier（依赖预编译），就搞定了。然后等着用户访问，url 过来之后做按需 transform（代码主要在这）。dev 还支持 middlewareMode，顾名思义，就是不启动 server，把 vite 作为中间件使用。\u003C/p>\n\u003Cp>build 的流程是读取配置，初始化 pluginContainer，挂载大量插件（20+），组装好 rollup 配置，然后跑 rollup。支持多个进行并行执行，应该是 ssr + csr 的场景。支持 ssr 打包。支持 lib 打包。支持 watch 模式。\u003C/p>\n\u003Cp>optimizer，这是 Vite 快的秘密武器之一。optimizer 的流程是找到入口，通过 esbuild + esbuildScanPlugin 打包入口来记录可能用到的依赖，再跑 esbuild + esbuildDepPlugin 做依赖预编译，入口是拍平的每个依赖。\u003C/p>\n\u003Ch3 id=\"什么是幽灵依赖\">什么是幽灵依赖？\u003Cspan role=\"img\" aria-label=\"ghost\">👻\u003C/span>\u003C/h3>\n\u003Cp>当一个项目使用了一个没有在package.json中定义的包时，就会出现幽灵依赖。\u003C/p>\n\u003Ch3 id=\"rollup如何实现的\">Rollup如何实现的？\u003C/h3>\n\u003Cp>实现根据输出输出分为两部分：\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"js\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"js\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">// 1. 处理input\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">const\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> bundle\u003C/span>\u003Cspan style=\"color:#F47067\"> =\u003C/span>\u003Cspan style=\"color:#F47067\"> await\u003C/span>\u003Cspan style=\"color:#DCBDFB\"> rollup\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(inputOptions);\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">// 2. output输出\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#F47067\">await\u003C/span>\u003Cspan style=\"color:#6CB6FF\"> Promise\u003C/span>\u003Cspan style=\"color:#ADBAC7\">.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">all\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(outputOptions.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">map\u003C/span>\u003Cspan style=\"color:#ADBAC7\">(bundle.write));\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Cp>input主体逻辑：\u003C/p>\n\u003Cfigure data-rehype-pretty-code-figure=\"\">\u003Cpre style=\"background-color:#22272e;color:#adbac7\" tabindex=\"0\" data-language=\"ts\" data-theme=\"github-dark-dimmed\">\u003Ccode data-language=\"ts\" data-theme=\"github-dark-dimmed\" style=\"display: grid;\">\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">// 生成依赖图谱\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#6CB6FF\">this\u003C/span>\u003Cspan style=\"color:#ADBAC7\">.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">generateModuleGraph\u003C/span>\u003Cspan style=\"color:#ADBAC7\">();\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">// 给模块排序，同时标记statement到模块的引用\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#6CB6FF\">this\u003C/span>\u003Cspan style=\"color:#ADBAC7\">.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">sortModules\u003C/span>\u003Cspan style=\"color:#ADBAC7\">();\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#768390\">// tree shaking ?\u003C/span>\u003C/span>\n\u003Cspan data-line=\"\">\u003Cspan style=\"color:#6CB6FF\">this\u003C/span>\u003Cspan style=\"color:#ADBAC7\">.\u003C/span>\u003Cspan style=\"color:#DCBDFB\">includeStatements\u003C/span>\u003Cspan style=\"color:#ADBAC7\">();\u003C/span>\u003C/span>\u003C/code>\u003C/pre>\u003C/figure>\n\u003Cp>生成依赖图谱通过src/ModuleLoader.ts添加入口模块，然后递归分析和添加依赖。此时会生成大量Module实例，Module通常是文件，每个Module会做transform并返回ast等信息。\u003C/p>\n\u003Cp>output主体逻辑在src/Bundle.ts，代码是\u003Ccode>await (new Bundle()).generate()\u003C/code>。这里会先为dynamic import的模块和入口生成chunks，然后生成物理文件。\u003C/p>\n\u003Cp>插件如何实现？\n分为内部和外部。插件是一个包含了一个或多个属性的对象，比如\u003Ccode>{name, resolveId, load}\u003C/code>，内部实现是在src/utils/PluginDraver.ts\u003C/p>\n\u003Cp>内部调用方式如：\u003Ccode>await graph.pluginDriver.hookParallel('buildStart', [inputOptions])\u003C/code>\u003C/p>\n\u003Cp>Rollup 提供了 hookFirst、hookFirstSync、hookParallel、hookReduceArg0、hookReduceArg0Sync、hookReduceValue、hookReduceValueSync、hookSeq 共 8 种 Hook 调用机制，有同步和异步，有顺序和并行，等。\nRollup 执行 hook 执行会获取所有包含这个 hook 的插件列表，同时执行 pre 和 post 两种排序方式。\u003C/p>\n\u003Ch3 id=\"如何实现个简单的bundler\">如何实现个简单的Bundler？\u003C/h3>\n\u003Cp>\u003Ca href=\"https://cpojer.net/posts/building-a-javascript-bundler\">Building a JavaScript Bundler\u003C/a>\u003C/p>\n\u003Col>\n\u003Cli>resolve config，解析用户配置，确定入口文件\u003C/li>\n\u003Cli>build，生成模块依赖图谱\u003C/li>\n\u003Cli>generate，根据依赖图谱生成代码\u003C/li>\n\u003C/ol>\n\u003Cp>build：从入口开始，做load、parse、transform、analyze_deps和resolve，然后把依赖添加到队列中继续跑，直到分析完所有文件为止。\u003C/p>\n\u003Cp>generate：基于build生成的依赖图谱生成最终代码，包含runtime处理、module转code、以及封装成浏览器可以跑的代码，以及代码分割、tree shaking等。最后通过runtime将所有内容拼接起来，针对Node和Browser会有不同runtime\u003C/p>\n\u003Ch3 id=\"一个基础的bundler需要包含哪些内容\">一个基础的Bundler需要包含哪些内容？\u003C/h3>\n\u003Cp>\u003Ca href=\"https://bundlers.tooling.report/\">Overview | Tooling.Report\u003C/a>\u003C/p>\n\u003Cp>源码转义：\u003C/p>\n\u003Cul>\n\u003Cli>支持TypeScript\u003C/li>\n\u003Cli>支持JavaScript高级语法\u003C/li>\n\u003Cli>压缩（包含模块、语句合并）\u003C/li>\n\u003Cli>Tree Shaking\u003C/li>\n\u003Cli>常量标志（比如process.env.NODE_ENV）\u003C/li>\n\u003Cli>图片压缩（基于imagemin）\u003C/li>\n\u003Cli>SVG压缩（基于svgo）\u003C/li>\n\u003C/ul>\n\u003Cp>输出格式：\u003C/p>\n\u003Cul>\n\u003Cli>CommonJS\u003C/li>\n\u003Cli>ESM\u003C/li>\n\u003C/ul>\n\u003Cp>非JavaScript资源：\u003C/p>\n\u003Col>\n\u003Cli>CSS（包括CSS Modules、inline引入、CSS Extract、以URL方式引入）\u003C/li>\n\u003Cli>HTML（包括inline载入脚本，外链载入脚本、Preload图片和字体等、Preload依赖脚本）\u003C/li>\n\u003Cli>依赖（产出CSS依赖的三方文件、去重）\u003C/li>\n\u003Cli>图片（包括data-url和url两种）\u003C/li>\n\u003Cli>Service Worker\u003C/li>\n\u003Cli>Binary（包括Array buffer、url）\u003C/li>\n\u003Cli>自定义类型\u003C/li>\n\u003C/ol>\n\u003Cp>引入模块：\u003C/p>\n\u003Cul>\n\u003Cli>CommonJS\u003C/li>\n\u003Cli>ESM\u003C/li>\n\u003Cli>node_modules依赖\u003C/li>\n\u003C/ul>\n\u003Cp>Hashing\u003C/p>\n\u003Cp>Code Splitting：\u003C/p>\n\u003Cul>\n\u003Cli>动态引入\u003C/li>\n\u003Cli>单页面多入口文件（共用runtimeChunk）\u003C/li>\n\u003Cli>多页面多入口文件\u003C/li>\n\u003Cli>Chunk共享\u003C/li>\n\u003Cli>Worker和非Worker共享\u003C/li>\n\u003Cli>Worker间共享\u003C/li>\n\u003C/ul>\n\u003Cp>其他：\u003C/p>\n\u003Cul>\n\u003Cli>resolve（包含alias、externals、packages.json exports等）\u003C/li>\n\u003Cli>Source Map\u003C/li>\n\u003Cli>publicPath\u003C/li>\n\u003Cli>Targets（modern产物、legacy模式）\u003C/li>\n\u003Cli>补丁方案\u003C/li>\n\u003C/ul>\n\u003Ch2 id=\"工程化\">工程化\u003C/h2>\n\u003Ch3 id=\"如何设计一个插件体系\">如何设计一个插件体系？\u003C/h3>\n\u003Cp>\u003Ca href=\"https://mp.weixin.qq.com/s/ZYcmMvk8ccYIsNDEkX1W0Q\">前端插件机制剖析及业界案例分析\u003C/a>\n\u003Ca href=\"https://mp.weixin.qq.com/s/_Qy8wScgq86vLBwNU-tTfw\">前端领域的插件式设计\u003C/a>\u003C/p>\n\u003Cp>Core-Plugin架构组成\u003C/p>\n\u003Cul>\n\u003Cli>Core：基础功能，提供插件运行的环境，管理插件的注册和卸载（可插拔）以及运行，也即管理插件的生命周期\u003C/li>\n\u003Cli>Plugin API：插件运行的接口，由Core抽象出来的接口（颗粒度尽可能小）\u003C/li>\n\u003Cli>Plugin：每个插件都是一个独立的功能模块\n好处：\u003C/li>\n\u003C/ul>\n\u003Col>\n\u003Cli>提高扩展性\u003C/li>\n\u003Cli>减少因功能改变引起的项目迭代，需要扩展的功能可单独发包\u003C/li>\n\u003Cli>充分利用开发者/开源的力量，激发更多想法\u003C/li>\n\u003C/ol>",{"headings":1923,"localImagePaths":2322,"remoteImagePaths":2323,"frontmatter":2324,"imagePaths":2329},[1924,1925,1927,1930,1933,1936,1939,1942,1945,1948,1951,1954,1957,1960,1963,1966,1969,1972,1975,1978,1981,1984,1987,1990,1993,1996,1999,2002,2005,2008,2011,2014,2017,2020,2023,2025,2028,2031,2034,2037,2039,2041,2044,2046,2049,2051,2054,2057,2060,2063,2066,2069,2072,2075,2078,2081,2084,2087,2090,2093,2096,2098,2100,2103,2106,2108,2110,2113,2116,2119,2120,2123,2126,2129,2132,2135,2138,2141,2144,2147,2150,2153,2156,2159,2162,2165,2168,2171,2174,2177,2180,2183,2186,2189,2191,2194,2197,2200,2203,2206,2209,2212,2215,2218,2221,2224,2227,2230,2233,2236,2238,2241,2244,2246,2249,2252,2255,2258,2260,2263,2266,2269,2272,2275,2278,2281,2284,2287,2290,2293,2296,2299,2302,2305,2308,2311,2314,2317,2319],{"depth":31,"slug":324,"text":325},{"depth":31,"slug":1926,"text":1926},"浏览器",{"depth":37,"slug":1928,"text":1929},"聊聊你了解的w3c规范","聊聊你了解的W3C规范？",{"depth":37,"slug":1931,"text":1932},"dom树怎么生成的","DOM树怎么生成的?",{"depth":37,"slug":1934,"text":1935},"script标签中async和defer属性的区别","script标签中async和defer属性的区别？",{"depth":37,"slug":1937,"text":1938},"讲下浏览器渲染时的合成层","讲下浏览器渲染时的合成层？",{"depth":37,"slug":1940,"text":1941},"回流和重绘的区别","回流和重绘的区别？",{"depth":37,"slug":1943,"text":1944},"关于客户端存储","关于客户端存储？",{"depth":37,"slug":1946,"text":1947},"什么是process-per-site-instance策略","什么是process-per-site-instance策略？",{"depth":37,"slug":1949,"text":1950},"能说在什么是核心网页指标core-web-vitals吗","能说在什么是核心网页指标Core Web Vitals吗？",{"depth":37,"slug":1952,"text":1953},"jsbridge实现原理","JSBridge实现原理？",{"depth":37,"slug":1955,"text":1956},"如何解决首页加载慢的问题","如何解决首页加载慢的问题？",{"depth":37,"slug":1958,"text":1959},"关键渲染路径是啥如何优化","关键渲染路径是啥？如何优化？",{"depth":37,"slug":1961,"text":1962},"如何优化ttfb","如何优化TTFB？",{"depth":37,"slug":1964,"text":1965},"如何测量性能","如何测量性能？",{"depth":37,"slug":1967,"text":1968},"懒加载有哪些手段","懒加载有哪些手段？",{"depth":37,"slug":1970,"text":1971},"普通script与script-typemodule有哪些区别","普通\u003Cscript>与\u003Cscript type=\"module\">有哪些区别？",{"depth":37,"slug":1973,"text":1974},"html属性relpreloadrelpreloadmodulerelprefetchrelprerenderrelsubresources等有何区别","HTML属性rel=\"preload\"、rel=\"preloadmodule\"、rel=\"prefetch\"、rel=\"prerender\"、rel=\"subresources\"等有何区别？",{"depth":31,"slug":1976,"text":1977},"nodejs","NodeJS",{"depth":37,"slug":1979,"text":1980},"如何做nodejs性能优化","如何做NodeJS性能优化？",{"depth":37,"slug":1982,"text":1983},"npm-install-和-npm-ci有啥区别","npm install 和 npm ci有啥区别？",{"depth":31,"slug":1985,"text":1986},"http","HTTP",{"depth":37,"slug":1988,"text":1989},"如何理解cdn","如何理解CDN？",{"depth":37,"slug":1991,"text":1992},"dns解析流程","DNS解析流程？",{"depth":37,"slug":1994,"text":1995},"http20有哪些优化http3了解吗","HTTP2.0有哪些优化？HTTP3了解吗？",{"depth":37,"slug":1997,"text":1998},"https-与http的区别","HTTPS 与HTTP的区别？",{"depth":37,"slug":2000,"text":2001},"https如何保证安全","HTTPS如何保证安全？",{"depth":37,"slug":2003,"text":2004},"http缓存","HTTP缓存？",{"depth":37,"slug":2006,"text":2007},"cache-control中no-cache和no-store有何区别","Cache-Control中no-cache和no-store有何区别？",{"depth":37,"slug":2009,"text":2010},"csrf是啥如何防范","CSRF是啥？如何防范？",{"depth":37,"slug":2012,"text":2013},"xss是啥如何防范","XSS是啥？如何防范？",{"depth":37,"slug":2015,"text":2016},"cookie有何作用如何禁止访问","cookie有何作用？如何禁止访问？",{"depth":37,"slug":2018,"text":2019},"能介绍下http-访问控制cors吗","能介绍下HTTP 访问控制（CORS）吗？",{"depth":37,"slug":2021,"text":2022},"html属性crossorigin有啥用","HTML属性crossorigin有啥用？",{"depth":31,"slug":2024,"text":315},"javascript",{"depth":37,"slug":2026,"text":2027},"说说你知道的javascript解释器","说说你知道的JavaScript解释器？",{"depth":37,"slug":2029,"text":2030},"javascript为啥被设计为单线程","JavaScript为啥被设计为单线程？",{"depth":37,"slug":2032,"text":2033},"说下微任务和宏任务","说下微任务和宏任务？",{"depth":37,"slug":2035,"text":2036},"聊聊你了解的v8垃圾回收","聊聊你了解的V8垃圾回收",{"depth":347,"slug":2038,"text":2038},"调用栈的垃圾回收",{"depth":347,"slug":2040,"text":2040},"堆中的垃圾回收",{"depth":347,"slug":2042,"text":2043},"新生区如何晋升为老生区","新生区如何晋升为老生区？",{"depth":347,"slug":2045,"text":2045},"全停顿",{"depth":37,"slug":2047,"text":2048},"说下执行上下文闭包","说下执行上下文、闭包？",{"depth":37,"slug":2050,"text":2050},"实现一个深拷贝",{"depth":37,"slug":2052,"text":2053},"javascript装箱转换拆箱转换","JavaScript装箱转换、拆箱转换？",{"depth":37,"slug":2055,"text":2056},"使用objectprototypetostringcallobj判断类型的原理是啥","使用Object.prototype.toString.call(obj)判断类型的原理是啥？",{"depth":37,"slug":2058,"text":2059},"能说下前端的模块系统吗","能说下前端的模块系统吗？",{"depth":347,"slug":2061,"text":2062},"amd与cmd的区别","AMD与CMD的区别？",{"depth":347,"slug":2064,"text":2065},"commonjs的实现原理","CommonJS的实现原理？",{"depth":347,"slug":2067,"text":2068},"es-module与commonjs的差异","ES Module与CommonJS的差异？",{"depth":37,"slug":2070,"text":2071},"objectis和有啥区别","Object.is和===有啥区别？",{"depth":37,"slug":2073,"text":2074},"01--02--03","0.1 + 0.2 === 0.3?",{"depth":37,"slug":2076,"text":2077},"new-stringfoo和foo相等吗","new String(\"foo\")和\"foo\"相等吗？",{"depth":37,"slug":2079,"text":2080},"js-数组为什么没有负数索引","JS 数组为什么没有负数索引？",{"depth":37,"slug":2082,"text":2083},"typeof-null--object","typeof null === ‘object’ ?",{"depth":37,"slug":2085,"text":2086},"const怎么阻止非原始值的重新赋值","const怎么阻止非原始值的重新赋值？",{"depth":37,"slug":2088,"text":2089},"forin-forof区别-迭代器协议与可迭代协议区别内置可迭代对象有哪些","for...in、 for...of区别？ 迭代器协议与可迭代协议区别？内置可迭代对象有哪些？",{"depth":37,"slug":2091,"text":2092},"promisesa规范","Promises/A+规范？",{"depth":37,"slug":2094,"text":2095},"手写promise","手写Promise",{"depth":37,"slug":2097,"text":2097},"实现new",{"depth":37,"slug":2099,"text":2099},"实现instanceof",{"depth":37,"slug":2101,"text":2102},"实现eventemitter","实现EventEmitter",{"depth":37,"slug":2104,"text":2105},"实现callapplybind","实现call/apply/bind",{"depth":37,"slug":2107,"text":2107},"实现柯里化函数",{"depth":37,"slug":2109,"text":2109},"实现类似lodash的get方法",{"depth":37,"slug":2111,"text":2112},"typescript中type和interface区别在哪如何抉择","TypeScript中type和interface区别在哪？如何抉择？",{"depth":31,"slug":2114,"text":2115},"web框架","Web框架",{"depth":37,"slug":2117,"text":2118},"解释下csrssrssgisrrsc","解释下CSR、SSR、SSG、ISR、RSC？",{"depth":37,"slug":1015,"text":1016},{"depth":37,"slug":2121,"text":2122},"vue","Vue",{"depth":347,"slug":2124,"text":2125},"谈谈你对mvvm的理解","谈谈你对MVVM的理解？",{"depth":347,"slug":2127,"text":2128},"vue的响应式系统如何创建的","Vue的响应式系统如何创建的？",{"depth":347,"slug":2130,"text":2131},"vue为何跟推荐使用模板而非渲染函数","Vue为何跟推荐使用模板而非渲染函数？",{"depth":347,"slug":2133,"text":2134},"vue3组合式api的优势有哪些","Vue3组合式API的优势有哪些？",{"depth":347,"slug":2136,"text":2137},"vue3的渲染机制","Vue3的渲染机制？",{"depth":347,"slug":2139,"text":2140},"vue的生命周期","Vue的生命周期？",{"depth":347,"slug":2142,"text":2143},"vue2和vue3-diff算法分别说一下","Vue2和Vue3 Diff算法分别说一下？",{"depth":347,"slug":2145,"text":2146},"解释一下-vue-router-的完整的导航解析流程是什么","解释一下 vue-router 的完整的导航解析流程是什么？",{"depth":347,"slug":2148,"text":2149},"vue内置组件keepalive-实现原理","Vue内置组件KeepAlive 实现原理？",{"depth":347,"slug":2151,"text":2152},"vue内置组件teleport实现原理","Vue内置组件Teleport实现原理？",{"depth":347,"slug":2154,"text":2155},"vue内置组件transition实现原理","Vue内置组件Transition实现原理？",{"depth":347,"slug":2157,"text":2158},"vue3如何实现一个防抖的ref","Vue3如何实现一个防抖的Ref？",{"depth":347,"slug":2160,"text":2161},"为何不建议v-if与v-for一起使用","为何不建议v-if与v-for一起使用？",{"depth":347,"slug":2163,"text":2164},"vue3特性开关怎么实现的","Vue3特性开关怎么实现的？",{"depth":347,"slug":2166,"text":2167},"vue3错误处理如何实现的","Vue3错误处理如何实现的？",{"depth":347,"slug":2169,"text":2170},"vue如何给数组建立响应性","Vue如何给数组建立响应性？",{"depth":347,"slug":2172,"text":2173},"vue如何代理setweakset和mapweakmap","Vue如何代理Set（WeakSet）和Map（WeakMap）？",{"depth":347,"slug":2175,"text":2176},"vue如何处理响应丢失的问题","Vue如何处理响应丢失的问题？",{"depth":347,"slug":2178,"text":2179},"vue如何实现自动脱ref","Vue如何实现自动脱ref？",{"depth":347,"slug":2181,"text":2182},"vue2双端diff原理","Vue2双端Diff原理？",{"depth":347,"slug":2184,"text":2185},"vue3快速diff原理","Vue3快速Diff原理？",{"depth":347,"slug":2187,"text":2188},"如何实现异步组件","如何实现异步组件？",{"depth":37,"slug":660,"text":2190},"Svelte",{"depth":37,"slug":2192,"text":2193},"react","React",{"depth":347,"slug":2195,"text":2196},"为啥会有suspense组件原理是啥使用场景有哪些","为啥会有Suspense组件？原理是啥？使用场景有哪些？",{"depth":347,"slug":2198,"text":2199},"什么是forward-refs","什么是forward refs？",{"depth":347,"slug":2201,"text":2202},"uselayouteffect和useeffect区别","useLayoutEffect和useEffect区别?",{"depth":347,"slug":2204,"text":2205},"usesyncexternalstore是干啥的","useSyncExternalStore是干啥的？",{"depth":347,"slug":2207,"text":2208},"什么是调解reconciliation","什么是调解（reconciliation）?",{"depth":347,"slug":2210,"text":2211},"错误边界是啥","错误边界是啥？",{"depth":347,"slug":2213,"text":2214},"rsc怎么实现的","RSC怎么实现的？",{"depth":347,"slug":2216,"text":2217},"哪些情况会触发re-render如何防止","哪些情况会触发re-render？如何防止？",{"depth":347,"slug":2219,"text":2220},"react合成事件","React合成事件？",{"depth":347,"slug":2222,"text":2223},"什么是-react-fiber-它解决了什么问题","什么是 React Fiber? 它解决了什么问题？",{"depth":347,"slug":2225,"text":2226},"为什么-usestate-要使用数组而不是对象","为什么 useState 要使用数组而不是对象?",{"depth":347,"slug":2228,"text":2229},"那为什么不要在循环条件或嵌套函数中调用-hook-呢","那为什么不要在循环、条件或嵌套函数中调用 Hook 呢？",{"depth":347,"slug":2231,"text":2232},"hooks更新机制","Hooks更新机制？",{"depth":347,"slug":2234,"text":2235},"如何理解react-hooks上的一些使用误区","如何理解React hooks上的一些使用误区？",{"depth":37,"slug":2237,"text":2237},"小程序",{"depth":347,"slug":2239,"text":2240},"小程序跨端框架实现原理","小程序跨端框架实现原理？",{"depth":347,"slug":2242,"text":2243},"小程序跨端框架类型","小程序跨端框架类型？",{"depth":31,"slug":2245,"text":966},"html",{"depth":37,"slug":2247,"text":2248},"src和href的区别","src和href的区别？",{"depth":37,"slug":2250,"text":2251},"dtd是什么","DTD是什么？",{"depth":37,"slug":2253,"text":2254},"如何实现给图片设置部分区域可点击","如何实现给图片设置部分区域可点击？",{"depth":37,"slug":2256,"text":2257},"什么是ogp有何作用","什么是OGP？有何作用？",{"depth":31,"slug":2259,"text":181},"css",{"depth":37,"slug":2261,"text":2262},"如何通过flex实现两个子元素左上右下布局","如何通过flex实现两个子元素左上、右下布局？",{"depth":31,"slug":2264,"text":2265},"module-bundlers","Module bundlers",{"depth":37,"slug":2267,"text":2268},"webpack-loader和plugin的区别","Webpack loader和plugin的区别？",{"depth":37,"slug":2270,"text":2271},"webpack中modulechunkbundlevendor区别是啥","Webpack中module、chunk、bundle、vendor区别是啥？",{"depth":37,"slug":2273,"text":2274},"webpack中魔法注释webpackprefetch和webpackpreload有啥区别","Webpack中魔法注释webpackPrefetch和webpackPreload有啥区别？",{"depth":37,"slug":2276,"text":2277},"webpack生命周期有哪些","Webpack生命周期有哪些？",{"depth":37,"slug":2279,"text":2280},"webpack优化手段有哪些","Webpack优化手段有哪些？",{"depth":37,"slug":2282,"text":2283},"webpack如何实现热更新","Webpack如何实现热更新？",{"depth":37,"slug":2285,"text":2286},"webpack的运行时如何实现","Webpack的运行时如何实现？",{"depth":37,"slug":2288,"text":2289},"webpack的tree-shaking为何不太行","Webpack的tree shaking为何不太行？",{"depth":37,"slug":2291,"text":2292},"vite为啥比webpack快","Vite为啥比Webpack快？",{"depth":37,"slug":2294,"text":2295},"webpack和vite的区别","Webpack和Vite的区别？",{"depth":37,"slug":2297,"text":2298},"如何做性能优化的","如何做性能优化的？",{"depth":37,"slug":2300,"text":2301},"如何理解依赖预打包","如何理解依赖预打包？",{"depth":37,"slug":2303,"text":2304},"如何理解vite的依赖预构建","如何理解Vite的依赖预构建？",{"depth":37,"slug":2306,"text":2307},"什么是幽灵依赖","什么是幽灵依赖？👻",{"depth":37,"slug":2309,"text":2310},"rollup如何实现的","Rollup如何实现的？",{"depth":37,"slug":2312,"text":2313},"如何实现个简单的bundler","如何实现个简单的Bundler？",{"depth":37,"slug":2315,"text":2316},"一个基础的bundler需要包含哪些内容","一个基础的Bundler需要包含哪些内容？",{"depth":31,"slug":2318,"text":2318},"工程化",{"depth":37,"slug":2320,"text":2321},"如何设计一个插件体系","如何设计一个插件体系？",[],[],{"title":1913,"description":15,"pubDate":2325,"heroImage":1915,"date created":2325,"date modified":2326,"tags":2327,"minutesRead":2328},"2023-08-02 09:22","2023-08-02",[133],"122 min read",[],"200-Learning/210-Programing/随便整理的前端面试常考点.md","calendar/daily-notes/2023-07-10",{"id":2331,"data":2333,"body":1897,"filePath":2338,"digest":2339,"rendered":2340,"legacyId":2348},{"title":2334,"description":15,"draft":16,"pubDate":2335,"heroImage":2336,"tags":2337},"2023-07-10",["Date",""],"![photo by NEOM on Unsplash](https://images.unsplash.com/photo-1682687221363-72518513620e?crop=entropy&cs=srgb&fm=jpg&ixid=M3wzNjM5Nzd8MHwxfHJhbmRvbXx8fHx8fHx8fDE2ODg5NTYxODd8&ixlib=rb-4.0.3&q=85&w=1200&h=400)",[20],"src/content/blog/Calendar/Daily notes/2023-07-10.md","a9256196dda3edfe",{"html":1901,"metadata":2341},{"headings":2342,"localImagePaths":2343,"remoteImagePaths":2344,"frontmatter":2345,"imagePaths":2347},[],[],[],{"title":2334,"description":15,"pubDate":2346,"heroImage":2336,"draft":16,"minutesRead":79},"星期一 07 2023",[],"Calendar/Daily notes/2023-07-10.md","calendar/daily-notes/2023-08-21",{"id":2349,"data":2351,"body":1897,"filePath":2356,"digest":2357,"rendered":2358,"legacyId":2366},{"title":2352,"description":15,"draft":16,"pubDate":2353,"heroImage":2354,"tags":2355},"2023-08-21",["Date",""],"![photo by Sean Lim on Unsplash](https://images.unsplash.com/photo-1689913834525-d5796e2a050a?crop=entropy&cs=srgb&fm=jpg&ixid=M3wzNjM5Nzd8MHwxfHJhbmRvbXx8fHx8fHx8fDE2OTI1ODQwMDZ8&ixlib=rb-4.0.3&q=85&w=1200&h=400)",[20],"src/content/blog/Calendar/Daily notes/2023-08-21.md","c30338aa2012fd80",{"html":1901,"metadata":2359},{"headings":2360,"localImagePaths":2361,"remoteImagePaths":2362,"frontmatter":2363,"imagePaths":2365},[],[],[],{"title":2352,"description":15,"pubDate":2364,"heroImage":2354,"draft":16,"minutesRead":79},"星期一 08 2023",[],"Calendar/Daily notes/2023-08-21.md","calendar/daily-notes/2023-08-30",{"id":2367,"data":2369,"body":1897,"filePath":2374,"digest":2375,"rendered":2376,"legacyId":2384},{"title":2370,"description":15,"draft":16,"pubDate":2371,"heroImage":2372,"tags":2373},"2023-08-30",["Date",""],"![photo by Adam Davis on Unsplash](https://images.unsplash.com/photo-1691513220938-36975e70729d?crop=entropy&cs=srgb&fm=jpg&ixid=M3wzNjM5Nzd8MHwxfHJhbmRvbXx8fHx8fHx8fDE2OTMzOTQ3Njd8&ixlib=rb-4.0.3&q=85&w=1200&h=400)",[20],"src/content/blog/Calendar/Daily notes/2023-08-30.md","ef769abf63c86f9e",{"html":1901,"metadata":2377},{"headings":2378,"localImagePaths":2379,"remoteImagePaths":2380,"frontmatter":2381,"imagePaths":2383},[],[],[],{"title":2370,"description":15,"pubDate":2382,"heroImage":2372,"draft":16,"minutesRead":79},"星期三 08 2023",[],"Calendar/Daily notes/2023-08-30.md","calendar/daily-notes/2023-09-12",{"id":2385,"data":2387,"body":1897,"filePath":2392,"digest":2393,"rendered":2394,"legacyId":2402},{"title":2388,"description":15,"draft":16,"pubDate":2389,"heroImage":2390,"tags":2391},"2023-09-12",["Date",""],"![photo by Haroon Ameer on Unsplash](https://images.unsplash.com/photo-1693790610517-0d0110babbfa?crop=entropy&cs=srgb&fm=jpg&ixid=M3wzNjM5Nzd8MHwxfHJhbmRvbXx8fHx8fHx8fDE2OTQ1MDE1MTZ8&ixlib=rb-4.0.3&q=85&w=1200&h=400)",[20],"src/content/blog/Calendar/Daily notes/2023-09-12.md","6ddf0754fad71129",{"html":1901,"metadata":2395},{"headings":2396,"localImagePaths":2397,"remoteImagePaths":2398,"frontmatter":2399,"imagePaths":2401},[],[],[],{"title":2388,"description":15,"pubDate":2400,"heroImage":2390,"draft":16,"minutesRead":79},"星期二 09 2023",[],"Calendar/Daily notes/2023-09-12.md","calendar/daily-notes/2023-09-19",{"id":2403,"data":2405,"body":1897,"filePath":2410,"digest":2411,"rendered":2412,"legacyId":2419},{"title":2406,"description":15,"draft":16,"pubDate":2407,"heroImage":2408,"tags":2409},"2023-09-19",["Date",""],"![photo by Oleg Brovchenko on Unsplash](https://images.unsplash.com/photo-1692878968489-24ee70109984?crop=entropy&cs=srgb&fm=jpg&ixid=M3wzNjM5Nzd8MHwxfHJhbmRvbXx8fHx8fHx8fDE2OTUxMTcwMzF8&ixlib=rb-4.0.3&q=85&w=1200&h=400)",[20],"src/content/blog/Calendar/Daily notes/2023-09-19.md","7c3ee7d2e652d9ed",{"html":1901,"metadata":2413},{"headings":2414,"localImagePaths":2415,"remoteImagePaths":2416,"frontmatter":2417,"imagePaths":2418},[],[],[],{"title":2406,"description":15,"pubDate":2400,"heroImage":2408,"draft":16,"minutesRead":79},[],"Calendar/Daily notes/2023-09-19.md","calendar/daily-notes/2023-09-25",{"id":2420,"data":2422,"body":2427,"filePath":2428,"digest":2429,"rendered":2430,"legacyId":2441},{"title":2423,"description":15,"draft":16,"pubDate":2424,"heroImage":2425,"tags":2426},"2023-09-25",["Date",""],"https://images.unsplash.com/photo-1692298350993-d85b1ea093a4?crop=entropy&cs=srgb&fm=jpg&ixid=M3wzNjM5Nzd8MHwxfHJhbmRvbXx8fHx8fHx8fDE2OTU2MDc5OTl8&ixlib=rb-4.0.3&q=85&w=1200&h=400",[20],"- 今天的 3 Frog 是？\n\t- 开发最近行程功能\n- Before Work\n- Deep Work 1\n\t- 08:00 - 11:40\n- Noon\n\t- 12:00 - 12:30 消费昨日资讯 30m\n\t- 12:30 - 13:30 读书\n\t- 13:30 - 14:00 午休\n- Deep Work 2\n\t- 14:00 - 18:00\n- 明天的计划和 3 Frog 是？\n- 运动\n\t- 19:30 - 20:30\n- Shallow Work\n- After Work\n\t- 23:00 - 24:00 英语\n- 想法\n- 今天的 3 Frog 是？\n\t- 开发近期行程功能（达到测试程度）\n- Before Work\n- Deep Work 1\n\t- 08:00 - 11:40\n- Noon\n\t- 12:00 - 12:30 消费昨日资讯 30m\n\t- 12:30 - 13:30 读书\n\t- 13:30 - 14:00 午休\n- Deep Work 2\n\t- 14:00 - 18:00\n- 明天的计划和 3 Frog 是？\n- 运动\n\t- 19:30 - 20:30\n- Shallow Work\n- After Work\n\t- 23:00 - 24:00 英语\n- 想法","src/content/blog/Calendar/Daily notes/2023-09-25.md","96738eca364c5084",{"html":2431,"metadata":2432},"\u003Cul>\n\u003Cli>今天的 3 Frog 是？\n\u003Cul>\n\u003Cli>开发最近行程功能\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>Before Work\u003C/li>\n\u003Cli>Deep Work 1\n\u003Cul>\n\u003Cli>08\u003Cdiv>\u003C/div> - 11\u003Cdiv>\u003C/div>\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>Noon\n\u003Cul>\n\u003Cli>12\u003Cdiv>\u003C/div> - 12\u003Cdiv>\u003C/div> 消费昨日资讯 30m\u003C/li>\n\u003Cli>12\u003Cdiv>\u003C/div> - 13\u003Cdiv>\u003C/div> 读书\u003C/li>\n\u003Cli>13\u003Cdiv>\u003C/div> - 14\u003Cdiv>\u003C/div> 午休\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>Deep Work 2\n\u003Cul>\n\u003Cli>14\u003Cdiv>\u003C/div> - 18\u003Cdiv>\u003C/div>\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>明天的计划和 3 Frog 是？\u003C/li>\n\u003Cli>运动\n\u003Cul>\n\u003Cli>19\u003Cdiv>\u003C/div> - 20\u003Cdiv>\u003C/div>\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>Shallow Work\u003C/li>\n\u003Cli>After Work\n\u003Cul>\n\u003Cli>23\u003Cdiv>\u003C/div> - 24\u003Cdiv>\u003C/div> 英语\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>想法\u003C/li>\n\u003Cli>今天的 3 Frog 是？\n\u003Cul>\n\u003Cli>开发近期行程功能（达到测试程度）\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>Before Work\u003C/li>\n\u003Cli>Deep Work 1\n\u003Cul>\n\u003Cli>08\u003Cdiv>\u003C/div> - 11\u003Cdiv>\u003C/div>\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>Noon\n\u003Cul>\n\u003Cli>12\u003Cdiv>\u003C/div> - 12\u003Cdiv>\u003C/div> 消费昨日资讯 30m\u003C/li>\n\u003Cli>12\u003Cdiv>\u003C/div> - 13\u003Cdiv>\u003C/div> 读书\u003C/li>\n\u003Cli>13\u003Cdiv>\u003C/div> - 14\u003Cdiv>\u003C/div> 午休\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>Deep Work 2\n\u003Cul>\n\u003Cli>14\u003Cdiv>\u003C/div> - 18\u003Cdiv>\u003C/div>\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>明天的计划和 3 Frog 是？\u003C/li>\n\u003Cli>运动\n\u003Cul>\n\u003Cli>19\u003Cdiv>\u003C/div> - 20\u003Cdiv>\u003C/div>\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>Shallow Work\u003C/li>\n\u003Cli>After Work\n\u003Cul>\n\u003Cli>23\u003Cdiv>\u003C/div> - 24\u003Cdiv>\u003C/div> 英语\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>想法\u003C/li>\n\u003C/ul>",{"headings":2433,"localImagePaths":2434,"remoteImagePaths":2435,"frontmatter":2436,"imagePaths":2440},[],[],[],{"title":2423,"description":15,"pubDate":2437,"heroImage":2425,"draft":16,"date created":2438,"date modified":2439,"minutesRead":79},"Monday 09 2023",["Date","2024-06-29T00:00:00.000Z"],["Date","2024-06-29T00:00:00.000Z"],[],"Calendar/Daily notes/2023-09-25.md","calendar/daily-notes/2023-09-28",{"id":2442,"data":2444,"body":1897,"filePath":2449,"digest":2450,"rendered":2451,"legacyId":2459},{"title":2445,"description":15,"draft":16,"pubDate":2446,"heroImage":2447,"tags":2448},"2023-09-28",["Date",""],"![photo by Denley Jones on Unsplash](https://images.unsplash.com/photo-1691135329867-22e18224472c?crop=entropy&cs=srgb&fm=jpg&ixid=M3wzNjM5Nzd8MHwxfHJhbmRvbXx8fHx8fHx8fDE2OTU4OTM3MDR8&ixlib=rb-4.0.3&q=85&w=1200&h=400)",[20],"src/content/blog/Calendar/Daily notes/2023-09-28.md","1fe918802d8197eb",{"html":1901,"metadata":2452},{"headings":2453,"localImagePaths":2454,"remoteImagePaths":2455,"frontmatter":2456,"imagePaths":2458},[],[],[],{"title":2445,"description":15,"pubDate":2457,"heroImage":2447,"draft":16,"minutesRead":79},"Thursday 09 2023",[],"Calendar/Daily notes/2023-09-28.md","calendar/daily-notes/2023-11-22",{"id":2460,"data":2462,"body":1897,"filePath":2467,"digest":2468,"rendered":2469,"legacyId":2477},{"title":2463,"description":15,"draft":16,"pubDate":2464,"heroImage":2465,"tags":2466},"2023-11-22",["Date",""],"Error generating random picture",[20],"src/content/blog/Calendar/Daily notes/2023-11-22.md","a8126ad9da09f80a",{"html":1901,"metadata":2470},{"headings":2471,"localImagePaths":2472,"remoteImagePaths":2473,"frontmatter":2474,"imagePaths":2476},[],[],[],{"title":2463,"description":15,"pubDate":2475,"heroImage":2465,"draft":16,"minutesRead":79},"Wednesday 11 2023",[],"Calendar/Daily notes/2023-11-22.md","calendar/daily-notes/2023-11-20",{"id":2478,"data":2480,"body":1897,"filePath":2485,"digest":2486,"rendered":2487,"legacyId":2495},{"title":2481,"description":15,"draft":16,"pubDate":2482,"heroImage":2483,"tags":2484},"2023-11-20",["Date",""],"![photo by Adrien Olichon on Unsplash](https://images.unsplash.com/photo-1699786371594-c85b9349d691?crop=entropy&cs=srgb&fm=jpg&ixid=M3wzNjM5Nzd8MHwxfHJhbmRvbXx8fHx8fHx8fDE3MDA0NDg1MzF8&ixlib=rb-4.0.3&q=85&w=1200&h=400)",[20],"src/content/blog/Calendar/Daily notes/2023-11-20.md","eb01520521247e82",{"html":1901,"metadata":2488},{"headings":2489,"localImagePaths":2490,"remoteImagePaths":2491,"frontmatter":2492,"imagePaths":2494},[],[],[],{"title":2481,"description":15,"pubDate":2493,"heroImage":2483,"draft":16,"minutesRead":79},"Monday 11 2023",[],"Calendar/Daily notes/2023-11-20.md","calendar/daily-notes/2024-05-06",{"id":2496,"data":2498,"body":2503,"filePath":2504,"digest":2505,"rendered":2506,"legacyId":2515},{"title":2499,"description":15,"draft":16,"pubDate":2500,"heroImage":2501,"tags":2502},"2024-05-06",["Date",""],"![photo by Gabriel Goller on Unsplash](https://images.unsplash.com/photo-1713789521123-b67d1066ea51?crop=entropy&cs=srgb&fm=jpg&ixid=M3wzNjM5Nzd8MHwxfHJhbmRvbXx8fHx8fHx8fDE3MTQ5NjYzODl8&ixlib=rb-4.0.3&q=85&w=1200&h=400)",[20],"- 今天的 3 Frog 是？\n\t- 1 继续开发*S149*需求\n\t- 2 阅读**Rust程序设计E2**\n\t- 3 修复线上Bug并支持上线\n- Before Work\n- Deep Work 1\n\t- 08:00 - 11:40\n- Noon\n\t- 12:00 - 12:30 消费昨日资讯 30m\n\t- 12:30 - 13:30 读书\n\t- 13:30 - 14:00 午休\n- Deep Work 2\n\t- 14:00 - 18:00\n- 明天的计划和 3 Frog 是？\n- 运动\n\t- 19:30 - 20:30\n- Shallow Work\n- After Work\n\t- 23:00 - 24:00 英语\n- 想法","src/content/blog/Calendar/Daily notes/2024-05-06.md","622e9fe4ceca7a13",{"html":2507,"metadata":2508},"\u003Cul>\n\u003Cli>今天的 3 Frog 是？\n\u003Cul>\n\u003Cli>1 继续开发\u003Cem>S149\u003C/em>需求\u003C/li>\n\u003Cli>2 阅读\u003Cstrong>Rust程序设计E2\u003C/strong>\u003C/li>\n\u003Cli>3 修复线上Bug并支持上线\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>Before Work\u003C/li>\n\u003Cli>Deep Work 1\n\u003Cul>\n\u003Cli>08\u003Cdiv>\u003C/div> - 11\u003Cdiv>\u003C/div>\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>Noon\n\u003Cul>\n\u003Cli>12\u003Cdiv>\u003C/div> - 12\u003Cdiv>\u003C/div> 消费昨日资讯 30m\u003C/li>\n\u003Cli>12\u003Cdiv>\u003C/div> - 13\u003Cdiv>\u003C/div> 读书\u003C/li>\n\u003Cli>13\u003Cdiv>\u003C/div> - 14\u003Cdiv>\u003C/div> 午休\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>Deep Work 2\n\u003Cul>\n\u003Cli>14\u003Cdiv>\u003C/div> - 18\u003Cdiv>\u003C/div>\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>明天的计划和 3 Frog 是？\u003C/li>\n\u003Cli>运动\n\u003Cul>\n\u003Cli>19\u003Cdiv>\u003C/div> - 20\u003Cdiv>\u003C/div>\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>Shallow Work\u003C/li>\n\u003Cli>After Work\n\u003Cul>\n\u003Cli>23\u003Cdiv>\u003C/div> - 24\u003Cdiv>\u003C/div> 英语\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>想法\u003C/li>\n\u003C/ul>",{"headings":2509,"localImagePaths":2510,"remoteImagePaths":2511,"frontmatter":2512,"imagePaths":2514},[],[],[],{"title":2499,"description":15,"pubDate":2513,"heroImage":2501,"draft":16,"minutesRead":79},"Monday 05 2024",[],"Calendar/Daily notes/2024-05-06.md","calendar/daily-notes/2024-06-29",{"id":2516,"data":2518,"body":1897,"filePath":2523,"digest":2524,"rendered":2525,"legacyId":2535},{"title":2519,"description":15,"draft":16,"pubDate":2520,"heroImage":2521,"tags":2522},"2024-06-29",["Date",""],"![photo by Joseph Corl on Unsplash](https://images.unsplash.com/photo-1718062455464-75f9a6375127?crop=entropy&cs=srgb&fm=jpg&ixid=M3wzNjM5Nzd8MHwxfHJhbmRvbXx8fHx8fHx8fDE3MTk2MzM1NDV8&ixlib=rb-4.0.3&q=85&w=1200&h=400)",[20],"src/content/blog/Calendar/Daily notes/2024-06-29.md","5e68fb7872adb14e",{"html":1901,"metadata":2526},{"headings":2527,"localImagePaths":2528,"remoteImagePaths":2529,"frontmatter":2530,"imagePaths":2534},[],[],[],{"title":2519,"description":15,"pubDate":2531,"heroImage":2521,"draft":16,"date created":2532,"date modified":2533,"minutesRead":79},"星期六 06 2024",["Date","2024-06-29T00:00:00.000Z"],["Date","2024-06-29T00:00:00.000Z"],[],"Calendar/Daily notes/2024-06-29.md","calendar/daily-notes/2024-09-23",{"id":2536,"data":2538,"body":1897,"filePath":2542,"digest":2543,"rendered":2544,"legacyId":2552},{"title":2539,"description":15,"draft":16,"pubDate":2540,"heroImage":2465,"tags":2541},"2024-09-23",["Date",""],[20],"src/content/blog/Calendar/Daily notes/2024-09-23.md","8bf5a1340341ac49",{"html":1901,"metadata":2545},{"headings":2546,"localImagePaths":2547,"remoteImagePaths":2548,"frontmatter":2549,"imagePaths":2551},[],[],[],{"title":2539,"description":15,"pubDate":2550,"heroImage":2465,"draft":16,"minutesRead":79},"Monday 09 2024",[],"Calendar/Daily notes/2024-09-23.md","extras/daily-reading/1md",{"id":2553,"data":2555,"body":2560,"filePath":2561,"digest":2562,"rendered":2563,"legacyId":2572},{"title":2556,"description":15,"draft":16,"pubDate":2557,"heroImage":2558,"tags":2559},"1.md",["Date","2023-06-27T08:23:00.000Z"],"https://images.unsplash.com/photo-1685468413971-eb5a98d01f34?crop=entropy&cs=srgb&fm=jpg&ixid=M3wzNjM5Nzd8MHwxfHJhbmRvbXx8fHx8fHx8fDE2ODc4NDQ4OTl8&ixlib=rb-4.0.3&q=85&w=1200&h=400",[20],"- 技术之外\n\t- 1\n\t- 2\n\t- 3\n- 一周新闻\n- 深度好文","src/content/blog/Extras/Daily Reading/1.md.md","cfe97a370f233660",{"html":2564,"metadata":2565},"\u003Cul>\n\u003Cli>技术之外\n\u003Cul>\n\u003Cli>1\u003C/li>\n\u003Cli>2\u003C/li>\n\u003Cli>3\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>一周新闻\u003C/li>\n\u003Cli>深度好文\u003C/li>\n\u003C/ul>",{"headings":2566,"localImagePaths":2567,"remoteImagePaths":2568,"frontmatter":2569,"imagePaths":2571},[],[],[],{"title":2556,"description":15,"pubDate":76,"heroImage":2558,"date created":2570,"date modified":78,"draft":16,"minutesRead":79},"2023-02-10 22:50",[],"Extras/Daily Reading/1.md.md","calendar/weekly/2023-w-6",{"id":2573,"data":2575,"body":2580,"filePath":2581,"digest":2582,"rendered":2583,"legacyId":2592},{"title":2576,"description":15,"draft":16,"pubDate":2577,"heroImage":2578,"tags":2579},"2023-W-6",["Date","2023-06-27T08:23:00.000Z"],"https://images.unsplash.com/photo-1686085371453-38e048a67542?crop=entropy&cs=srgb&fm=jpg&ixid=M3wzNjM5Nzd8MHwxfHJhbmRvbXx8fHx8fHx8fDE2ODc4NDUyMDh8&ixlib=rb-4.0.3&q=85&w=1200&h=400",[20],"> Friendship multiplies the good of life and divides the evil.\n> — \u003Ccite>Baltasar Gracián\u003C/cite>\n\n- This Week\n\t- 自己写的插件全部完成接入到document-editor\n\t\t- Page/PageNumber/PageMargin/PageDirection等\n\t\t- 文本参数\n\t- Select参数插件功能补充完整\n\t- 文本参数功能补充完整\n\t\t- 设计外部NodeView接入\n\t- DesignToken与设计图保持一致\n\t- 跟进列表相关插件的替换[[ProseMirror#^7bc687]]\n\t- 增加i18n相关功能（集成进入Tiptap）[[ProseMirror#^2e608d]]\n- D1\n- D2\n- D3\n- D4\n- D5\n- D6\n- D7\n\t- 确定下周计划 [[2023-W-7]]\n- Next Week\n- Refs\n\t- [[2023 目标]]\n\t- [[2023 书单]]","src/content/blog/Calendar/Weekly/2023-W-6.md","9e6e8e1b97b73006",{"html":2584,"metadata":2585},"\u003Cblockquote>\n\u003Cp>Friendship multiplies the good of life and divides the evil.\n— \u003Ccite>Baltasar Gracián\u003C/cite>\u003C/p>\n\u003C/blockquote>\n\u003Cul>\n\u003Cli>This Week\n\u003Cul>\n\u003Cli>自己写的插件全部完成接入到document-editor\n\u003Cul>\n\u003Cli>Page/PageNumber/PageMargin/PageDirection等\u003C/li>\n\u003Cli>文本参数\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>Select参数插件功能补充完整\u003C/li>\n\u003Cli>文本参数功能补充完整\n\u003Cul>\n\u003Cli>设计外部NodeView接入\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>DesignToken与设计图保持一致\u003C/li>\n\u003Cli>跟进列表相关插件的替换[[ProseMirror#^7bc687]]\u003C/li>\n\u003Cli>增加i18n相关功能（集成进入Tiptap）[[ProseMirror#^2e608d]]\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>D1\u003C/li>\n\u003Cli>D2\u003C/li>\n\u003Cli>D3\u003C/li>\n\u003Cli>D4\u003C/li>\n\u003Cli>D5\u003C/li>\n\u003Cli>D6\u003C/li>\n\u003Cli>D7\n\u003Cul>\n\u003Cli>确定下周计划 [[2023-W-7]]\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>Next Week\u003C/li>\n\u003Cli>Refs\n\u003Cul>\n\u003Cli>[[2023 目标]]\u003C/li>\n\u003Cli>[[2023 书单]]\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ul>",{"headings":2586,"localImagePaths":2587,"remoteImagePaths":2588,"frontmatter":2589,"imagePaths":2591},[],[],[],{"title":2576,"description":15,"pubDate":76,"heroImage":2578,"date created":2590,"date modified":78,"draft":16,"minutesRead":79},"2023-02-04 21:11",[],"Calendar/Weekly/2023-W-6.md","calendar/daily-notes/rust程序设计e2",{"id":2593,"data":2595,"body":2600,"filePath":2601,"digest":2602,"rendered":2603,"legacyId":2617},{"title":2596,"description":624,"draft":16,"pubDate":2597,"heroImage":2598,"tags":2599},"《Rust程序设计》第2版 读书笔记",["Date","2024-05-06T03:44:00.000Z"],"https://images.unsplash.com/photo-1713458159923-e511573e905c?crop=entropy&cs=srgb&fm=jpg&ixid=M3wzNjM5Nzd8MHwxfHJhbmRvbXx8fHx8fHx8fDE3MTQ5NjcwNTZ8&ixlib=rb-4.0.3&q=85",[20],"# 《Rust程序设计》E2\n\n> It isn't what happens to us that causes us to suffer; it's what we say to ourselves about what happens.\n> — \u003Ccite>Pema Chödrön\u003C/cite>","src/content/blog/Calendar/Daily notes/《Rust程序设计》E2.md","ac9764ab521a543c",{"html":2604,"metadata":2605},"\u003Ch1 id=\"rust程序设计e2\">《Rust程序设计》E2\u003C/h1>\n\u003Cblockquote>\n\u003Cp>It isn’t what happens to us that causes us to suffer; it’s what we say to ourselves about what happens.\n— \u003Ccite>Pema Chödrön\u003C/cite>\u003C/p>\n\u003C/blockquote>",{"headings":2606,"localImagePaths":2610,"remoteImagePaths":2611,"frontmatter":2612,"imagePaths":2616},[2607],{"depth":29,"slug":2608,"text":2609},"rust程序设计e2","《Rust程序设计》E2",[],[],{"title":2596,"description":624,"pubDate":2613,"heroImage":2598,"date created":2613,"date modified":2614,"draft":16,"tags":2615,"minutesRead":79},"2024-05-06 11:44",["Date","2024-05-06T00:00:00.000Z"],[20],[],"Calendar/Daily notes/《Rust程序设计》E2.md","extras/个人资产/生活/买房",{"id":2618,"data":2620,"body":2625,"filePath":2626,"digest":2627,"rendered":2628,"legacyId":2637},{"title":2621,"description":15,"draft":16,"pubDate":2622,"heroImage":2623,"tags":2624},"买房🏠",["Date","2023-06-27T08:23:00.000Z"],"https://images.unsplash.com/photo-1685857011630-cef679285c9c?crop=entropy&cs=srgb&fm=jpg&ixid=M3wzNjM5Nzd8MHwxfHJhbmRvbXx8fHx8fHx8fDE2ODc4NDUwODl8&ixlib=rb-4.0.3&q=85&w=1200&h=400",[20],"> The cause is hidden. The effect is visible to all.\n> — \u003Ccite>Ovid\u003C/cite>","src/content/blog/Extras/个人资产/生活/买房🏠.md","5723c2cdcbd5fbe2",{"html":2629,"metadata":2630},"\u003Cblockquote>\n\u003Cp>The cause is hidden. The effect is visible to all.\n— \u003Ccite>Ovid\u003C/cite>\u003C/p>\n\u003C/blockquote>",{"headings":2631,"localImagePaths":2632,"remoteImagePaths":2633,"frontmatter":2634,"imagePaths":2636},[],[],[],{"title":2621,"description":15,"pubDate":76,"heroImage":2623,"date created":2635,"date modified":78,"draft":16,"minutesRead":79},"2023-02-12 15:03",[],"Extras/个人资产/生活/买房🏠.md","extras/个人资产/生活/蜜月旅行️",{"id":2638,"data":2640,"body":2645,"filePath":2646,"digest":2647,"rendered":2648,"legacyId":2657},{"title":2641,"description":15,"draft":16,"pubDate":2642,"heroImage":2643,"tags":2644},"蜜月旅行🏝️",["Date","2023-06-27T08:23:00.000Z"],"https://images.unsplash.com/photo-1685287919409-7a785eb69ba2?crop=entropy&cs=srgb&fm=jpg&ixid=M3wzNjM5Nzd8MHwxfHJhbmRvbXx8fHx8fHx8fDE2ODc4NDUxMDZ8&ixlib=rb-4.0.3&q=85&w=1200&h=400",[20],"> Face your deficiencies and acknowledge them; but do not let them master you. Let them teach you patience, sweetness, insight.\n> — \u003Ccite>Helen Keller\u003C/cite>","src/content/blog/Extras/个人资产/生活/蜜月旅行🏝️.md","cddb8f7c5d0e9c0c",{"html":2649,"metadata":2650},"\u003Cblockquote>\n\u003Cp>Face your deficiencies and acknowledge them; but do not let them master you. Let them teach you patience, sweetness, insight.\n— \u003Ccite>Helen Keller\u003C/cite>\u003C/p>\n\u003C/blockquote>",{"headings":2651,"localImagePaths":2652,"remoteImagePaths":2653,"frontmatter":2654,"imagePaths":2656},[],[],[],{"title":2641,"description":15,"pubDate":76,"heroImage":2643,"date created":2655,"date modified":78,"draft":16,"minutesRead":79},"2023-02-10 23:49",[],"Extras/个人资产/生活/蜜月旅行🏝️.md","extras/个人资产/生活/驾考",{"id":2658,"data":2660,"body":2665,"filePath":2666,"digest":2667,"rendered":2668,"legacyId":2678},{"title":2661,"description":15,"draft":16,"pubDate":2662,"heroImage":2663,"tags":2664},"驾考",["Date","2023-06-27T08:23:00.000Z"],"https://images.unsplash.com/photo-1686164194855-e4d37f4e7c2d?crop=entropy&cs=srgb&fm=jpg&ixid=M3wzNjM5Nzd8MHwxfHJhbmRvbXx8fHx8fHx8fDE2ODc4NDUxMjF8&ixlib=rb-4.0.3&q=85&w=1200&h=400",[20],"> He who wishes to secure the good of others, has already secured his own.\n> — \u003Ccite>Confucius\u003C/cite>\n\n\n-   科目一\n\n    口诀：\n    1.  轻微伤6 轻伤12\n    2.  车牌：装3遮挡9虚假12\n    3.  高速逆行12 违停9 占用6 车道 3\n    4.  扣1分：行灯会，禁检安\n    5.  信息变更30天、换证90天\n    6.  科三预约：自动20 手动30 大车40；科三 大10小3\n    7.  增驾：**轻1重2大3**\n    8.  假1骗3（年内不允许再次申领驾驶证），假500骗2000（罚款）\n    9.  假1赔3不过5（代替处罚，三倍一下罚款不超过5w）\n    10.  假材料500 弄虚作假1000 贿赂2000 组织人20000\n    11.  不开灯-3 开错灯-1\n    12. 不允许报考：假/贿赂1 吊2 撤3 酒5 逃终身\n    13. 校车申请：虚假材料罚500 1年；贿赂2000 3年\n    14. 一人行 两人散\n    15. 载货最多49吨\n\n\t日期相关\n\t\t- 3 天\n\t\t\t- 机动车所有人迁出，3日内受理查验机动车\n\t\t\t- 收到车牌后，临时机动车车牌作废\n\t\t- 30天\n\t\t\t1. 信息或事项变更\n\t\t\t2. 70岁以上致人重伤/死亡的，本记分周期结束后30日内接受审验\n\t\t- 15天\n\t\t\t1. 换发/补发车牌\n\t\t- 90天\n\t\t\t1. 换证\n\t\t- 10年\n\t\t\t- 未取得驾驶证致人重伤/死亡的，未满10年不能申请驾驶证🪪\n\t\t\t- 营运机动车酒驾 10年内不得申请机动车驾驶证\n\n\n\n    -   C1-小🚗\n    -   C2-自动挡小🚗\n    -   C5-残疾人专用小型自动挡载客汽车\n    -   C6-轻型牵引挂车\n\n    驾驶证学习证明有效期3年，有效期截止日期不能超年龄上限\n\n    C6 20-60岁，本记分周期和前一个未满12分；C6 桩考，曲线行驶，直角转弯\n\t大型客车/重型牵引挂车 22～60周岁\n\n    C2转C1: 考科二科三\n\n    科二科三各不超5次\n\n    C2准驾：C234\n\n    70岁以上不得驾驶低速载货汽车、三轮汽车等\n\n    构成犯罪吊销5年内不得申请\n\n    代替3年 超速5年\n\n    初次申请不能大型客车，轻型牵引挂车\n\n    已有，申请准驾车型需：未积满12分，C1C2一年，到所持驾驶证核发地\n\n    **部队驻地**申领驾驶证\n\n    残疾人增驾需要考**科目二三**\n\n    **高速快速路：逆行12 停车9 占应急车道6 低速3 不按车道3**\n\n    70岁以上，不可以驾驶 低速载货汽车、三轮汽车、轻型牵引挂车、普通三轮摩托车、普通二轮摩托车\n\n    身体条件证明自出具后 **6个月内**有效\n\n    **虚假材料500、作假1000、贿赂2000**\n\n    逃逸**不构成犯罪，扣12分**，**构成犯罪直接吊销**\n\n    **扣12分：**\n\n    1.  逃逸不构成犯罪\n    2.  酒驾\n    3.  **伪造、变造车牌**\n    4.  超载：校车、客车、旅客超20%；其他超100%\n    5.  超速：校车、客车、旅客超20%；其他超50%\n    6.  **高速** 倒车、逆行、穿越中央分隔带倒头\n    7.  代罚 （罚款3倍一下，不超过5w）\n\n    **扣9分：**\n\n    1.  超载：七座以上客车 50%～100%\n    2.  超速：高速 50% → 校车、中客、危险品运输车\n    3.  高速停车\n    4.  **未悬挂、遮挡、污损 车牌**\n    5.  **准驾车型不符**\n    6.  未取得校车驾驶资格\n    7.  连续驾驶中客、危险品运输车 4小时未停车或休息\u003C20 分钟\n\n    扣6分：\n\n    1.  超载：校车、客车、旅客 \u003C 20%，七座载客 20% ～ 50%，其他客车50%～100%\n    2.  超速：高速-》校车、中客以上、危险品运输车 \u003C20%；20%～50%\n    3.  超速：上方以外车辆 20～50%\n    4.  载重：50%\n    5.  危险物品未悬挂标志\n    6.  进入危险化学品禁止通行区域\n    7.  **不按交通信号灯通行**（闯红灯666）\n    8.  暂扣期间 驾驶**（无证驾驶666）**\n    9.  轻伤逃逸不构成犯罪\n    10.  **高速占用应急车道**\n\n    扣3分：\n\n    1.  载客：非校车、客车、旅客、七座客车 20～50%\n    2.  超速：校车、中客、危险品运输车，非高速 20%～50%\n    3.  **高速不按规定车道行驶、低速行驶**\n    4.  **违规超车、让行，高速以外逆行**\n    5.  **堵车时 超车、占用车道、穿插**\n    6.  **拨打、接听电话**\n    7.  人行横道 不避让行人\n    8.  **不避让校车**\n    9.  载货车超重 30%～50%、违规载客\n    10.  **未安装车牌**\n    11.  故障未按规定 使用灯光或标志\n    12.  未安检的客车、运输车行驶\n    13.  未安检的校车\n    14.  货车连续驾驶>4h，休息间隔\u003C20m\n\n    扣1分：\n\n    1.  超速：校车、中客、危险品运输车，在高速以外，10%～20%\n    2.  **不按规定会车，高速以外倒车掉头**\n    3.  灯光违规\n    4.  **违反禁令、指示线**\n    5.  货车 长宽高超规\n    6.  货车：载重超30%\n    7.  **驾驶未安检的非客车、危险品运输车**\n    8.  货车改变结构\n    9.  **未带安全带**\n    10.  摩托车无安全头盔\n\n    记满12分，7天道路安全法规相关知识学习。\n\n    学法减分最高减6分。\n\n    现场满1减2，公益满1减1，网络0.5减1\n\n    不予受理的情况\n\n    1.  两次以上满分\n    2.  三个记分周期内存在酒驾、逃逸、伪造车牌、买分卖分收处罚的\n    3.  实习期内、逾期未审验、驾驶证暂扣\n    4.  安检过期、未按规注销\n    5.  三个记分周期内虚假\n\n    二次记满12分或满24未超36，科目一**没考过等10天继续，考过等30天科目三**\n\n    机动车登记分为：注册登记、变更登记、转移登记、抵押登记、注销登记\n\n    居住地更换可异地预约。不超3次\n\n    申请准驾车型 只能在核发地\n\n    超车只能左侧超车\n\n    身体证明6月内有效\n\n    超载：\n\n    1.  七座以上客车\n        -   \u003C20% 3\n        -   20%~50% 6\n        -   50%~100% 9\n        -   > 100% 12\n\n    2.  校车、中型客车、旅客\n        -   \u003C20% 6\n        -   > 20% 12\n\n    3.  其他\n        -   20%～50% 3\n        -   50%~100% 6\n        -   100% 12\n\n    超速：\n\n    1.  高速\n        1.  校车、中客、危险品运输车\n            -   > 20% 12\n\n            -   \u003C 20% 6\n        2.  其他\n            -   > 50% 12\n\n            -   20%～50% 6\n    2.  非高速\n        1.  校车、中客、危险品运输车\n            -   10%～20% 1\n            -   20%～50% 3\n            -   > 50% 9\n\n        2.  其他\n            -   50% 6\n            -   20%～50% 3\n\n    罚款：\n\n\t1. 200以下罚款\n\t\t- 重/中型货车🚚 未喷涂放大车牌或不清晰\n\t\t- 🚗机动车 喷涂粘贴标志 影响安全驾驶\n\t\t- 货/挂车 侧面下部未安装防护装置、粘贴车身反光标识的\n\t\t- 未按照规定时间进行安全技术检验\n\t\t- 转让后未按照规定期限办理转让登记\n\t\t- 未按照规定申请变更备案\n\t2.  200～500\n        -   使用旧的驾驶证（收回原驾照）\n        -   实习期驾驶机动车不符\n        -   客车、挂车等未申报变更信息\n        - 身体不适合驾驶，仍然驾驶机动车\n        -   以下罚教练\n            -   未按照制定路线时间\n            -   未放置学车标志\n    3. 学车没教练，罚款200～2000\n\n\n\t行驶速度：\n\t\t1. **无道路中心线的道路、城市道路为30KM/h**，**公路40KM/h**\n\t\t2. 同方向只有一个机动道路，城市道路为**50KM/h** 公路为**70KM/h**\n\t\t3. 不得超过30KM/h的情况\n\t\t\t1. 进出非机动车道，通过铁路道口、急转弯、窄路、窄桥时\n\t\t\t2. 掉头、转弯、下陡坡\n\t\t\t3. 遇雾、雨、雪、沙尘、冰雹，能见度50米以内时\n\t\t\t4. 在冰雪、泥泞道路行驶时\n\t\t\t5. 牵引发生故障的机动车时\n\t\t4. 小型载客汽车不超过120KM/h；其他机动车不得超过100KM/h；摩托车不得超过80KM/h\n\n\t三个先行规则：\n\t1. 转弯车辆让直行车辆先行\n\t2. 右方道路来车先行\n\t3. 右转弯让左转弯车辆先行\n\n\t转向灯：\n\t1. 开左转向灯：左转弯、左变道、准备超车、驶离停车点或掉头      **从匝道驶入高速公路（左入右出）**\n\t2. 开右转向灯：右转弯、右变道、超车完毕驶回原车道、靠路边停车 **进入减速车道（匝道）**\n\n\t**白色菱形标志**，人行横道预告\n\t蓝色指示标志：矩形单向路，圆形只准直行\n\t高速上故障时，警告标志放置在150m以上距离\n\t超车只能左侧，不能右侧，也不能占用应急车道\n\t牵引最多30KM/h\n\t临时停车：顺行方向停，车身距离边缘不超过50cm\n\n\t高速公路能见度低时：开启雾灯、示廓灯、前后位灯和危险报警闪光灯\n\t1. 小于200\n\t\t1. 车速不能超过60KM/h，与前车保持100m以上\n\t2. 小于100\n\t\t1. 车速不能超过40KM/h，与前车保持50m以上\n\t3. 小于50\n\t\t1. 车速不能超过20KM/h，尽快驶离高速\n\n\t- 自适应巡航系统ACC：Adaptive Cruise Control\n\t- 前方防碰撞预警FCW：Forward Collision Warning\n\t- 自动刹车辅助AEB：Autonomous Emergency Braking\n\t- 定速巡航系统CCS：CRUISE CONTROL SYSTEM\n\t- 车辆盲点监测BSD：Blind Spot Detection\n\t- 车辆交通标志识别系统TSR： Traffic Sign Recognition\n\t- 车辆电子自动分配系统EBD：Electric Brakeforce Dis-tribution\n\t- 车身电子稳定系统ESP：Electronic Stability Program\n\t- 巡航系统GPRS：\n\t- 自适应灯光辅助ALC：Adaptive Light Control\n\t- 自动泊车系统APA：Automatic Parking Assist\n\t- 驾驶员疲劳预警系统DFM：Driver Fatigue Monitor System","src/content/blog/Extras/个人资产/生活/驾考.md","29e47a122c1b5db8",{"html":2669,"metadata":2670},"\u003Cblockquote>\n\u003Cp>He who wishes to secure the good of others, has already secured his own.\n— \u003Ccite>Confucius\u003C/cite>\u003C/p>\n\u003C/blockquote>\n\u003Cul>\n\u003Cli>\n\u003Cp>科目一\u003C/p>\n\u003Cp>口诀：\u003C/p>\n\u003Col>\n\u003Cli>轻微伤6 轻伤12\u003C/li>\n\u003Cli>车牌：装3遮挡9虚假12\u003C/li>\n\u003Cli>高速逆行12 违停9 占用6 车道 3\u003C/li>\n\u003Cli>扣1分：行灯会，禁检安\u003C/li>\n\u003Cli>信息变更30天、换证90天\u003C/li>\n\u003Cli>科三预约：自动20 手动30 大车40；科三 大10小3\u003C/li>\n\u003Cli>增驾：\u003Cstrong>轻1重2大3\u003C/strong>\u003C/li>\n\u003Cli>假1骗3（年内不允许再次申领驾驶证），假500骗2000（罚款）\u003C/li>\n\u003Cli>假1赔3不过5（代替处罚，三倍一下罚款不超过5w）\u003C/li>\n\u003Cli>假材料500 弄虚作假1000 贿赂2000 组织人20000\u003C/li>\n\u003Cli>不开灯-3 开错灯-1\u003C/li>\n\u003Cli>不允许报考：假/贿赂1 吊2 撤3 酒5 逃终身\u003C/li>\n\u003Cli>校车申请：虚假材料罚500 1年；贿赂2000 3年\u003C/li>\n\u003Cli>一人行 两人散\u003C/li>\n\u003Cli>载货最多49吨\u003C/li>\n\u003C/ol>\n\u003Cp>日期相关\n- 3 天\n- 机动车所有人迁出，3日内受理查验机动车\n- 收到车牌后，临时机动车车牌作废\n- 30天\n1. 信息或事项变更\n2. 70岁以上致人重伤/死亡的，本记分周期结束后30日内接受审验\n- 15天\n1. 换发/补发车牌\n- 90天\n1. 换证\n- 10年\n- 未取得驾驶证致人重伤/死亡的，未满10年不能申请驾驶证\u003Cspan role=\"img\" aria-label=\"\">🪪\u003C/span>\n- 营运机动车酒驾 10年内不得申请机动车驾驶证\u003C/p>\n\u003Cul>\n\u003Cli>C1-小\u003Cspan role=\"img\" aria-label=\"automobile\">🚗\u003C/span>\u003C/li>\n\u003Cli>C2-自动挡小\u003Cspan role=\"img\" aria-label=\"automobile\">🚗\u003C/span>\u003C/li>\n\u003Cli>C5-残疾人专用小型自动挡载客汽车\u003C/li>\n\u003Cli>C6-轻型牵引挂车\u003C/li>\n\u003C/ul>\n\u003Cp>驾驶证学习证明有效期3年，有效期截止日期不能超年龄上限\u003C/p>\n\u003Cp>C6 20-60岁，本记分周期和前一个未满12分；C6 桩考，曲线行驶，直角转弯\n大型客车/重型牵引挂车 22～60周岁\u003C/p>\n\u003Cp>C2转C1: 考科二科三\u003C/p>\n\u003Cp>科二科三各不超5次\u003C/p>\n\u003Cp>C2准驾：C234\u003C/p>\n\u003Cp>70岁以上不得驾驶低速载货汽车、三轮汽车等\u003C/p>\n\u003Cp>构成犯罪吊销5年内不得申请\u003C/p>\n\u003Cp>代替3年 超速5年\u003C/p>\n\u003Cp>初次申请不能大型客车，轻型牵引挂车\u003C/p>\n\u003Cp>已有，申请准驾车型需：未积满12分，C1C2一年，到所持驾驶证核发地\u003C/p>\n\u003Cp>\u003Cstrong>部队驻地\u003C/strong>申领驾驶证\u003C/p>\n\u003Cp>残疾人增驾需要考\u003Cstrong>科目二三\u003C/strong>\u003C/p>\n\u003Cp>\u003Cstrong>高速快速路：逆行12 停车9 占应急车道6 低速3 不按车道3\u003C/strong>\u003C/p>\n\u003Cp>70岁以上，不可以驾驶 低速载货汽车、三轮汽车、轻型牵引挂车、普通三轮摩托车、普通二轮摩托车\u003C/p>\n\u003Cp>身体条件证明自出具后 \u003Cstrong>6个月内\u003C/strong>有效\u003C/p>\n\u003Cp>\u003Cstrong>虚假材料500、作假1000、贿赂2000\u003C/strong>\u003C/p>\n\u003Cp>逃逸\u003Cstrong>不构成犯罪，扣12分\u003C/strong>，\u003Cstrong>构成犯罪直接吊销\u003C/strong>\u003C/p>\n\u003Cp>\u003Cstrong>扣12分：\u003C/strong>\u003C/p>\n\u003Col>\n\u003Cli>逃逸不构成犯罪\u003C/li>\n\u003Cli>酒驾\u003C/li>\n\u003Cli>\u003Cstrong>伪造、变造车牌\u003C/strong>\u003C/li>\n\u003Cli>超载：校车、客车、旅客超20%；其他超100%\u003C/li>\n\u003Cli>超速：校车、客车、旅客超20%；其他超50%\u003C/li>\n\u003Cli>\u003Cstrong>高速\u003C/strong> 倒车、逆行、穿越中央分隔带倒头\u003C/li>\n\u003Cli>代罚 （罚款3倍一下，不超过5w）\u003C/li>\n\u003C/ol>\n\u003Cp>\u003Cstrong>扣9分：\u003C/strong>\u003C/p>\n\u003Col>\n\u003Cli>超载：七座以上客车 50%～100%\u003C/li>\n\u003Cli>超速：高速 50% → 校车、中客、危险品运输车\u003C/li>\n\u003Cli>高速停车\u003C/li>\n\u003Cli>\u003Cstrong>未悬挂、遮挡、污损 车牌\u003C/strong>\u003C/li>\n\u003Cli>\u003Cstrong>准驾车型不符\u003C/strong>\u003C/li>\n\u003Cli>未取得校车驾驶资格\u003C/li>\n\u003Cli>连续驾驶中客、危险品运输车 4小时未停车或休息&#x3C;20 分钟\u003C/li>\n\u003C/ol>\n\u003Cp>扣6分：\u003C/p>\n\u003Col>\n\u003Cli>超载：校车、客车、旅客 &#x3C; 20%，七座载客 20% ～ 50%，其他客车50%～100%\u003C/li>\n\u003Cli>超速：高速-》校车、中客以上、危险品运输车 &#x3C;20%；20%～50%\u003C/li>\n\u003Cli>超速：上方以外车辆 20～50%\u003C/li>\n\u003Cli>载重：50%\u003C/li>\n\u003Cli>危险物品未悬挂标志\u003C/li>\n\u003Cli>进入危险化学品禁止通行区域\u003C/li>\n\u003Cli>\u003Cstrong>不按交通信号灯通行\u003C/strong>（闯红灯666）\u003C/li>\n\u003Cli>暂扣期间 驾驶**（无证驾驶666）**\u003C/li>\n\u003Cli>轻伤逃逸不构成犯罪\u003C/li>\n\u003Cli>\u003Cstrong>高速占用应急车道\u003C/strong>\u003C/li>\n\u003C/ol>\n\u003Cp>扣3分：\u003C/p>\n\u003Col>\n\u003Cli>载客：非校车、客车、旅客、七座客车 20～50%\u003C/li>\n\u003Cli>超速：校车、中客、危险品运输车，非高速 20%～50%\u003C/li>\n\u003Cli>\u003Cstrong>高速不按规定车道行驶、低速行驶\u003C/strong>\u003C/li>\n\u003Cli>\u003Cstrong>违规超车、让行，高速以外逆行\u003C/strong>\u003C/li>\n\u003Cli>\u003Cstrong>堵车时 超车、占用车道、穿插\u003C/strong>\u003C/li>\n\u003Cli>\u003Cstrong>拨打、接听电话\u003C/strong>\u003C/li>\n\u003Cli>人行横道 不避让行人\u003C/li>\n\u003Cli>\u003Cstrong>不避让校车\u003C/strong>\u003C/li>\n\u003Cli>载货车超重 30%～50%、违规载客\u003C/li>\n\u003Cli>\u003Cstrong>未安装车牌\u003C/strong>\u003C/li>\n\u003Cli>故障未按规定 使用灯光或标志\u003C/li>\n\u003Cli>未安检的客车、运输车行驶\u003C/li>\n\u003Cli>未安检的校车\u003C/li>\n\u003Cli>货车连续驾驶>4h，休息间隔&#x3C;20m\u003C/li>\n\u003C/ol>\n\u003Cp>扣1分：\u003C/p>\n\u003Col>\n\u003Cli>超速：校车、中客、危险品运输车，在高速以外，10%～20%\u003C/li>\n\u003Cli>\u003Cstrong>不按规定会车，高速以外倒车掉头\u003C/strong>\u003C/li>\n\u003Cli>灯光违规\u003C/li>\n\u003Cli>\u003Cstrong>违反禁令、指示线\u003C/strong>\u003C/li>\n\u003Cli>货车 长宽高超规\u003C/li>\n\u003Cli>货车：载重超30%\u003C/li>\n\u003Cli>\u003Cstrong>驾驶未安检的非客车、危险品运输车\u003C/strong>\u003C/li>\n\u003Cli>货车改变结构\u003C/li>\n\u003Cli>\u003Cstrong>未带安全带\u003C/strong>\u003C/li>\n\u003Cli>摩托车无安全头盔\u003C/li>\n\u003C/ol>\n\u003Cp>记满12分，7天道路安全法规相关知识学习。\u003C/p>\n\u003Cp>学法减分最高减6分。\u003C/p>\n\u003Cp>现场满1减2，公益满1减1，网络0.5减1\u003C/p>\n\u003Cp>不予受理的情况\u003C/p>\n\u003Col>\n\u003Cli>两次以上满分\u003C/li>\n\u003Cli>三个记分周期内存在酒驾、逃逸、伪造车牌、买分卖分收处罚的\u003C/li>\n\u003Cli>实习期内、逾期未审验、驾驶证暂扣\u003C/li>\n\u003Cli>安检过期、未按规注销\u003C/li>\n\u003Cli>三个记分周期内虚假\u003C/li>\n\u003C/ol>\n\u003Cp>二次记满12分或满24未超36，科目一\u003Cstrong>没考过等10天继续，考过等30天科目三\u003C/strong>\u003C/p>\n\u003Cp>机动车登记分为：注册登记、变更登记、转移登记、抵押登记、注销登记\u003C/p>\n\u003Cp>居住地更换可异地预约。不超3次\u003C/p>\n\u003Cp>申请准驾车型 只能在核发地\u003C/p>\n\u003Cp>超车只能左侧超车\u003C/p>\n\u003Cp>身体证明6月内有效\u003C/p>\n\u003Cp>超载：\u003C/p>\n\u003Col>\n\u003Cli>\n\u003Cp>七座以上客车\u003C/p>\n\u003Cul>\n\u003Cli>&#x3C;20% 3\u003C/li>\n\u003Cli>20%~50% 6\u003C/li>\n\u003Cli>50%~100% 9\u003C/li>\n\u003Cli>\n\u003Cblockquote>\n\u003Cp>100% 12\u003C/p>\n\u003C/blockquote>\n\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\n\u003Cp>校车、中型客车、旅客\u003C/p>\n\u003Cul>\n\u003Cli>&#x3C;20% 6\u003C/li>\n\u003Cli>\n\u003Cblockquote>\n\u003Cp>20% 12\u003C/p>\n\u003C/blockquote>\n\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\n\u003Cp>其他\u003C/p>\n\u003Cul>\n\u003Cli>20%～50% 3\u003C/li>\n\u003Cli>50%~100% 6\u003C/li>\n\u003Cli>100% 12\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ol>\n\u003Cp>超速：\u003C/p>\n\u003Col>\n\u003Cli>高速\n\u003Col>\n\u003Cli>校车、中客、危险品运输车\n\u003Cul>\n\u003Cli>\n\u003Cblockquote>\n\u003Cp>20% 12\u003C/p>\n\u003C/blockquote>\n\u003C/li>\n\u003Cli>\n\u003Cp>&#x3C; 20% 6\u003C/p>\n\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>其他\n\u003Cul>\n\u003Cli>\n\u003Cblockquote>\n\u003Cp>50% 12\u003C/p>\n\u003C/blockquote>\n\u003C/li>\n\u003Cli>\n\u003Cp>20%～50% 6\u003C/p>\n\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ol>\n\u003C/li>\n\u003Cli>非高速\n\u003Col>\n\u003Cli>\n\u003Cp>校车、中客、危险品运输车\u003C/p>\n\u003Cul>\n\u003Cli>10%～20% 1\u003C/li>\n\u003Cli>20%～50% 3\u003C/li>\n\u003Cli>\n\u003Cblockquote>\n\u003Cp>50% 9\u003C/p>\n\u003C/blockquote>\n\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>\n\u003Cp>其他\u003C/p>\n\u003Cul>\n\u003Cli>50% 6\u003C/li>\n\u003Cli>20%～50% 3\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ol>\n\u003C/li>\n\u003C/ol>\n\u003Cp>罚款：\u003C/p>\n\u003Col>\n\u003Cli>200以下罚款\n\u003Cul>\n\u003Cli>重/中型货车\u003Cspan role=\"img\" aria-label=\"delivery truck\">🚚\u003C/span> 未喷涂放大车牌或不清晰\u003C/li>\n\u003Cli>\u003Cspan role=\"img\" aria-label=\"automobile\">🚗\u003C/span>机动车 喷涂粘贴标志 影响安全驾驶\u003C/li>\n\u003Cli>货/挂车 侧面下部未安装防护装置、粘贴车身反光标识的\u003C/li>\n\u003Cli>未按照规定时间进行安全技术检验\u003C/li>\n\u003Cli>转让后未按照规定期限办理转让登记\u003C/li>\n\u003Cli>未按照规定申请变更备案\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>200～500\n\u003Cul>\n\u003Cli>使用旧的驾驶证（收回原驾照）\u003C/li>\n\u003Cli>实习期驾驶机动车不符\u003C/li>\n\u003Cli>客车、挂车等未申报变更信息\u003C/li>\n\u003Cli>身体不适合驾驶，仍然驾驶机动车\u003C/li>\n\u003Cli>以下罚教练\n\u003Cul>\n\u003Cli>未按照制定路线时间\u003C/li>\n\u003Cli>未放置学车标志\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli>学车没教练，罚款200～2000\u003C/li>\n\u003C/ol>\n\u003Cp>行驶速度：\n1. \u003Cstrong>无道路中心线的道路、城市道路为30KM/h\u003C/strong>，\u003Cstrong>公路40KM/h\u003C/strong>\n2. 同方向只有一个机动道路，城市道路为\u003Cstrong>50KM/h\u003C/strong> 公路为\u003Cstrong>70KM/h\u003C/strong>\n3. 不得超过30KM/h的情况\n1. 进出非机动车道，通过铁路道口、急转弯、窄路、窄桥时\n2. 掉头、转弯、下陡坡\n3. 遇雾、雨、雪、沙尘、冰雹，能见度50米以内时\n4. 在冰雪、泥泞道路行驶时\n5. 牵引发生故障的机动车时\n4. 小型载客汽车不超过120KM/h；其他机动车不得超过100KM/h；摩托车不得超过80KM/h\u003C/p>\n\u003Cp>三个先行规则：\u003C/p>\n\u003Col>\n\u003Cli>转弯车辆让直行车辆先行\u003C/li>\n\u003Cli>右方道路来车先行\u003C/li>\n\u003Cli>右转弯让左转弯车辆先行\u003C/li>\n\u003C/ol>\n\u003Cp>转向灯：\u003C/p>\n\u003Col>\n\u003Cli>开左转向灯：左转弯、左变道、准备超车、驶离停车点或掉头      \u003Cstrong>从匝道驶入高速公路（左入右出）\u003C/strong>\u003C/li>\n\u003Cli>开右转向灯：右转弯、右变道、超车完毕驶回原车道、靠路边停车 \u003Cstrong>进入减速车道（匝道）\u003C/strong>\u003C/li>\n\u003C/ol>\n\u003Cp>\u003Cstrong>白色菱形标志\u003C/strong>，人行横道预告\n蓝色指示标志：矩形单向路，圆形只准直行\n高速上故障时，警告标志放置在150m以上距离\n超车只能左侧，不能右侧，也不能占用应急车道\n牵引最多30KM/h\n临时停车：顺行方向停，车身距离边缘不超过50cm\u003C/p>\n\u003Cp>高速公路能见度低时：开启雾灯、示廓灯、前后位灯和危险报警闪光灯\u003C/p>\n\u003Col>\n\u003Cli>小于200\n\u003Col>\n\u003Cli>车速不能超过60KM/h，与前车保持100m以上\u003C/li>\n\u003C/ol>\n\u003C/li>\n\u003Cli>小于100\n\u003Col>\n\u003Cli>车速不能超过40KM/h，与前车保持50m以上\u003C/li>\n\u003C/ol>\n\u003C/li>\n\u003Cli>小于50\n\u003Col>\n\u003Cli>车速不能超过20KM/h，尽快驶离高速\u003C/li>\n\u003C/ol>\n\u003C/li>\n\u003C/ol>\n\u003Cul>\n\u003Cli>自适应巡航系统ACC：Adaptive Cruise Control\u003C/li>\n\u003Cli>前方防碰撞预警FCW：Forward Collision Warning\u003C/li>\n\u003Cli>自动刹车辅助AEB：Autonomous Emergency Braking\u003C/li>\n\u003Cli>定速巡航系统CCS：CRUISE CONTROL SYSTEM\u003C/li>\n\u003Cli>车辆盲点监测BSD：Blind Spot Detection\u003C/li>\n\u003Cli>车辆交通标志识别系统TSR： Traffic Sign Recognition\u003C/li>\n\u003Cli>车辆电子自动分配系统EBD：Electric Brakeforce Dis-tribution\u003C/li>\n\u003Cli>车身电子稳定系统ESP：Electronic Stability Program\u003C/li>\n\u003Cli>巡航系统GPRS：\u003C/li>\n\u003Cli>自适应灯光辅助ALC：Adaptive Light Control\u003C/li>\n\u003Cli>自动泊车系统APA：Automatic Parking Assist\u003C/li>\n\u003Cli>驾驶员疲劳预警系统DFM：Driver Fatigue Monitor System\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ul>",{"headings":2671,"localImagePaths":2672,"remoteImagePaths":2673,"frontmatter":2674,"imagePaths":2677},[],[],[],{"title":2661,"description":15,"pubDate":76,"heroImage":2663,"date created":2675,"date modified":78,"draft":16,"minutesRead":2676},"2023-02-11 16:30","12 min read",[],"Extras/个人资产/生活/驾考.md","extras/个人资产/工作/学习文档/效率工具",{"id":2679,"data":2681,"body":2686,"filePath":2687,"digest":2688,"rendered":2689,"legacyId":2698},{"title":2682,"description":15,"draft":16,"pubDate":2683,"heroImage":2684,"tags":2685},"效率工具",["Date","2023-06-27T08:23:00.000Z"],"https://images.unsplash.com/photo-1686583153353-e34d04320cd9?crop=entropy&cs=srgb&fm=jpg&ixid=M3wzNjM5Nzd8MHwxfHJhbmRvbXx8fHx8fHx8fDE2ODc4NDUwMzV8&ixlib=rb-4.0.3&q=85&w=1200&h=400",[20],"> Marriage: A friendship recognized by the police.\n> — \u003Ccite>Robert Louis Stevenson\u003C/cite>\n\n\n\n#文档/效率工具\n\n- [Obsidian 中文帮助]([https://publish.obsidian.md/help-zh/%E7%94%B1%E6%AD%A4%E5%BC%80%E5%A7%8B)","src/content/blog/Extras/个人资产/工作/学习文档/效率工具.md","ac01ef931bb5c1b8",{"html":2690,"metadata":2691},"\u003Cblockquote>\n\u003Cp>Marriage: A friendship recognized by the police.\n— \u003Ccite>Robert Louis Stevenson\u003C/cite>\u003C/p>\n\u003C/blockquote>\n\u003Cp>#文档/效率工具\u003C/p>\n\u003Cul>\n\u003Cli>\u003Ca href=\"%5Bhttps://publish.obsidian.md/help-zh/%E7%94%B1%E6%AD%A4%E5%BC%80%E5%A7%8B\">Obsidian 中文帮助\u003C/a>\u003C/li>\n\u003C/ul>",{"headings":2692,"localImagePaths":2693,"remoteImagePaths":2694,"frontmatter":2695,"imagePaths":2697},[],[],[],{"title":2682,"description":15,"pubDate":76,"heroImage":2684,"date created":2696,"date modified":78,"draft":16,"minutesRead":79},"2023-02-10 23:27",[],"Extras/个人资产/工作/学习文档/效率工具.md","extras/个人资产/工作/学习文档/面试手册",{"id":2699,"data":2701,"body":2706,"filePath":2707,"digest":2708,"rendered":2709,"legacyId":2720},{"title":2702,"description":15,"draft":16,"pubDate":2703,"heroImage":2704,"tags":2705},"面试手册",["Date","2023-06-27T08:23:00.000Z"],"https://images.unsplash.com/photo-1686174484623-9402d1d36ba5?crop=entropy&cs=srgb&fm=jpg&ixid=M3wzNjM5Nzd8MHwxfHJhbmRvbXx8fHx8fHx8fDE2ODc4NDUwNjN8&ixlib=rb-4.0.3&q=85&w=1200&h=400",[20],"> Action is the foundational key to all success.\n> — \u003Ccite>Pablo Picasso\u003C/cite>\n\n\n# 面试/手册\n\n- [🏂🏻 程序员海外工作/英文面试手册](https://github.com/eliaszon/Programmers-Overseas-Job-Interview-Handbook)","src/content/blog/Extras/个人资产/工作/学习文档/面试手册.md","284cb82ebdda81bc",{"html":2710,"metadata":2711},"\u003Cblockquote>\n\u003Cp>Action is the foundational key to all success.\n— \u003Ccite>Pablo Picasso\u003C/cite>\u003C/p>\n\u003C/blockquote>\n\u003Ch1 id=\"面试手册\">面试/手册\u003C/h1>\n\u003Cul>\n\u003Cli>\u003Ca href=\"https://github.com/eliaszon/Programmers-Overseas-Job-Interview-Handbook\">\u003Cspan role=\"img\" aria-label=\"snowboarder (skin tone 2)\">🏂🏻\u003C/span> 程序员海外工作/英文面试手册\u003C/a>\u003C/li>\n\u003C/ul>",{"headings":2712,"localImagePaths":2715,"remoteImagePaths":2716,"frontmatter":2717,"imagePaths":2719},[2713],{"depth":29,"slug":2702,"text":2714},"面试/手册",[],[],{"title":2702,"description":15,"pubDate":76,"heroImage":2704,"date created":2718,"date modified":78,"draft":16,"minutesRead":79},"2023-02-10 23:47",[],"Extras/个人资产/工作/学习文档/面试手册.md","extras/个人资产/工作/代码库收集/github",{"id":2721,"data":2723,"body":2728,"filePath":2729,"digest":2730,"rendered":2731,"legacyId":2740},{"title":2724,"description":15,"draft":16,"pubDate":2725,"heroImage":2726,"tags":2727},"GitHub",["Date","2023-06-27T08:23:00.000Z"],"https://images.unsplash.com/photo-1684741891105-198c9a952a57?crop=entropy&cs=srgb&fm=jpg&ixid=M3wzNjM5Nzd8MHwxfHJhbmRvbXx8fHx8fHx8fDE2ODc4NDUwNDZ8&ixlib=rb-4.0.3&q=85&w=1200&h=400",[20],"> The farther backward you can look, the farther forward you can see.\n> — \u003Ccite>Winston Churchill\u003C/cite>\n\n\n- DeepKit\n-","src/content/blog/Extras/个人资产/工作/代码库收集/GitHub.md","246d11aec5d05a8a",{"html":2732,"metadata":2733},"\u003Cblockquote>\n\u003Cp>The farther backward you can look, the farther forward you can see.\n— \u003Ccite>Winston Churchill\u003C/cite>\u003C/p>\n\u003C/blockquote>\n\u003Cul>\n\u003Cli>DeepKit\u003C/li>\n\u003Cli>\u003C/li>\n\u003C/ul>",{"headings":2734,"localImagePaths":2735,"remoteImagePaths":2736,"frontmatter":2737,"imagePaths":2739},[],[],[],{"title":2724,"description":15,"pubDate":76,"heroImage":2726,"date created":2738,"date modified":78,"draft":16,"minutesRead":79},"2023-02-10 23:26",[],"Extras/个人资产/工作/代码库收集/GitHub.md","extras/个人资产/工作/富文本编辑器/prosemirror",{"id":2741,"data":2743,"body":2748,"filePath":2749,"digest":2750,"rendered":2751,"legacyId":2760},{"title":2744,"description":15,"draft":16,"pubDate":2745,"heroImage":2746,"tags":2747},"ProseMirror",["Date","2023-06-27T08:23:00.000Z"],"https://images.unsplash.com/photo-1687131046576-eab27a5e48da?crop=entropy&cs=srgb&fm=jpg&ixid=M3wzNjM5Nzd8MHwxfHJhbmRvbXx8fHx8fHx8fDE2ODc4NDUwNzd8&ixlib=rb-4.0.3&q=85&w=1200&h=400",[20],"> Wisdom is always an overmatch for strength.\n> — \u003Ccite>Phil Jackson\u003C/cite>\n\n\n\n- 用于替代ProseMirror Schema List [Fetching Title#ulxn](https://github.com/ocavue/prosemirror-flat-list) ^7bc687\n- tiptap language tools ^2e608d\n-","src/content/blog/Extras/个人资产/工作/富文本编辑器/ProseMirror.md","bcf19592a6715487",{"html":2752,"metadata":2753},"\u003Cblockquote>\n\u003Cp>Wisdom is always an overmatch for strength.\n— \u003Ccite>Phil Jackson\u003C/cite>\u003C/p>\n\u003C/blockquote>\n\u003Cul>\n\u003Cli>用于替代ProseMirror Schema List \u003Ca href=\"https://github.com/ocavue/prosemirror-flat-list\">Fetching Title#ulxn\u003C/a> ^7bc687\u003C/li>\n\u003Cli>tiptap language tools ^2e608d\u003C/li>\n\u003Cli>\u003C/li>\n\u003C/ul>",{"headings":2754,"localImagePaths":2755,"remoteImagePaths":2756,"frontmatter":2757,"imagePaths":2759},[],[],[],{"title":2744,"description":15,"pubDate":76,"heroImage":2746,"date created":2758,"date modified":78,"draft":16,"minutesRead":79},"2023-02-10 23:20",[],"Extras/个人资产/工作/富文本编辑器/ProseMirror.md"]